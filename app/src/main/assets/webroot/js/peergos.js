// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function newRequire(name, jumped){
        if(!cache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = cache[name] = {exports:{}};
            modules[name][0].call(m.exports, function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            },m,m.exports,outer,modules,cache,entry);
        }
        return cache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})({ 104:[function(require,module,exports){
const AppIcon = require("AppIcon.vue");
const AppNavigation = require("./navigation/AppNavigation.vue");
const ModalAuthSettings = require("./modal/ModalAuthSettings.vue");
const ModalTour = require("./modal/ModalTour.vue");
const ModalHelp = require("./modal/ModalHelp.vue");
const ModalSpace = require("./modal/ModalSpace.vue");
const ModalPro = require("./modal/ModalPro.vue");
const ModalCancel = require("./modal/ModalCancel.vue");
const ModalPassword = require("./modal/ModalPassword.vue");
const ModalAccount = require("./modal/ModalAccount.vue");
const ModalProfile = require("./modal/ModalProfile.vue");
const ModalFeedback = require("./modal/ModalFeedback.vue");
const LinkPassword = require("./LinkPassword.vue");

const AppTab = require("./tabs/AppTab.vue");
const AppTabs = require("./tabs/AppTabs.vue");

const Login = require("./Login.vue");
const Signup = require("./Signup.vue");

const Drive = require("../views/Drive.vue");
const NewsFeed = require("../views/NewsFeed.vue");
const Social = require("../views/Social.vue");
const Calendar = require("../views/Calendar.vue");
const Launcher = require("../views/Launcher.vue");

const ServerMessages = require("./ServerMessages.vue");

const routerMixins = require("../mixins/router/index.js");
const launcherMixin = require("../mixins/launcher/index.js");
const sandboxAppMixins = require("../mixins/sandbox/index.js");
const i18n = require("../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('div',{staticClass:"layout"},[(showModal)?_c(currentModal,{tag:"component"}):_e(),_v(" "),(isLoggedIn)?_c('AppNavigation'):_e(),_v(" "),(isSecretLink && this.context == null)?_c('section',[_c('AppIcon',{staticClass:"sprite-test",attrs:{"icon":"logo-full"}}),_v(" "),_c('center',[_c('h2',[_v("Loading file...")])]),_v(" "),(showLinkPassword)?_c('LinkPassword',{attrs:{"title":'Enter link password',"future":future},on:{"hide-modal":function($event){showLinkPassword = false}}}):_e()],1):_e(),_v(" "),(!isLoggedIn && !isSecretLink)?_c('section',{staticClass:"login-register"},[_c('AppIcon',{staticClass:"sprite-test",attrs:{"icon":"logo-full"}}),_v(" "),_c('AppTabs',{ref:"tabs"},[(isDemo)?_c('p',{staticClass:"demo--warning"},[_c('strong',[_v("WARNING:")]),_v(" This is a demo server and all data\n\t\t\t\t    will be cleared periodically. If you want to create a\n\t\t\t\t    "),_c('i',[_v("permanent")]),_v(" account, please go \n\t\t\t\t    "),_c('a',{staticClass:"line",attrs:{"href":"https://peergos.net?signup=true"}},[_v("here")]),_v(".\n\t\t\t        ")]):_e(),_v(" "),_c('AppTab',{attrs:{"title":translate('APP.LOGIN')}},[_c('Login',{on:{"initApp":function($event){return init()}}})],1),_v(" "),_c('AppTab',{attrs:{"title":translate('APP.SIGNUP')}},[_c('Signup',{attrs:{"token":token}})],1)],1)],1):_e(),_v(" "),(context != null)?_c('ServerMessages'):_e(),_v(" "),(isLoggedIn || isSecretLink)?_c('section',{staticClass:"content",class:{ 'sidebar-margin': isSidebarOpen }},[_c('transition',{attrs:{"name":"fade","mode":"out-in"}},[(isLoggedIn || isSecretLink)?_c(currentView,{ref:"appView",tag:"component"}):_e()],1)],1):_e()],1)}},	components: {
	    AppIcon,
		AppNavigation,
		ModalAuthSettings,
		ModalTour,
		ModalHelp,
		// TODO: lazy load dynamic components
		// ModalTour: () => import("~/components/modal/ModalTour"),
		ModalSpace,
	        ModalPro,
                ModalCancel,
		ModalPassword,
		ModalAccount,
		ModalProfile,
		ModalFeedback,
		ServerMessages,
	        Drive,
                LinkPassword,
		NewsFeed,
		Social,
		Calendar,
		Launcher,
		AppTab,
		AppTabs,
		Login,
		Signup
	},

	data() {
		return {
		    token: "",
                    showLinkPassword: false,
                    future:null
		};
	},

	computed: {
	    ...Vuex.mapState([
		"isLoggedIn",
		"isDark",
		"isSidebarOpen",
		"showModal",
		"currentModal",
		"currentView",
		"crypto",
		"network",
		"context"
	    ]),
	    ...Vuex.mapGetters(["isSecretLink", "getPath"]),
	    isDemo() {
		return (
		    window.location.hostname == "peergos-demo.net" &&
			this.isSecretLink === false
		);
	    },
	    isLocalhost() {
		return window.location.hostname == "localhost";
	    },
            isSecretLink() {
                return this.getSecretLinkProps().secretLink == true;
            }
	},

	mixins: [routerMixins, sandboxAppMixins, launcherMixin, i18n],

	watch: {
	    network(newNetwork) {
		this.isFirefox =
		    navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
		this.isSafari =
		/constructor/i.test(window.HTMLElement) ||
		    (function (p) {
			return p.toString() === "[object SafariRemoteNotification]";
		    })(!window["safari"] || safari.pushNotification);
		var that = this;
		const href = window.location.href;
		var fragment = window.location.hash.substring(1);
		var props = this.getSecretLinkProps();
		if (href.includes("?signup=true")) {
		    this.$refs.tabs.selectTab(1);

		    if (href.includes("token=")) {
			var urlParams = new URLSearchParams(window.location.search);
			this.token = urlParams.get("token");
		    }
		    // this.signup({ token: this.token, username: "" });
		} else if (props.secretLink) {
		    // this is a secret link
		    console.log("Navigating to secret link...");
		    this.gotoSecretLink(props);
		} // else this.login();
		this.checkIfDomainNeedsUnblocking();
	    },
	},

    created() {
	this.$store.commit("SET_CRYPTO", peergos.shared.Crypto.initJS());
	this.updateNetwork();

	window.addEventListener("hashchange", this.onUrlChange, false);
    },

    mounted() {
	let localTheme = localStorage.getItem("theme");
	document.documentElement.setAttribute("data-theme", localTheme);
	this.$store.commit("SET_THEME", localTheme == "dark-mode");
    },

    methods: {
        ...Vuex.mapActions([
	    'updateQuota',
	    'updateUsage',
	    'updatePayment'
	]),

	init() {
	    const that = this;
	    if (this.context != null && this.context.username == null) {
		// App.vue from a secret link
	    } else {
            peergos.shared.user.App.init(this.context, "launcher").thenApply(launcher => {
                that.loadShortcutsFile(launcher).thenApply(shortcutsMap => {
                    that.$store.commit("SET_SHORTCUTS", shortcutsMap);
                    that.updateUsage();
                    that.updateQuota();
                    that.updatePayment();
                    that.initSandboxedApps();
                })
            });
	    }
	},
        getSecretLinkProps() {
            var fragment = window.location.hash.substring(1);
	    var props = {};
	    if (fragment.length == 0) {
	        return props;
	    }
            if (window.location.pathname.startsWith("/secret/")) {
                try {
		    props = fragmentToProps(fragment);
	        } catch (e) {}
                props.secretLink = true;
                var pw = props.linkpassword;
                if (pw == null) {
                    pw = window.location.hash.substring(1);
                    if (pw.includes("?")) {
                        const queryParams = new URLSearchParams(pw.substring(pw.indexOf("?") + 1));
                        for (const [key, value] of queryParams) {
                            if (value == "true")
                                props[key] = true;
                            else if (value == "false")
                                props[key] = false;
                            else if (key == "args")
                                props[key] = JSON.parse(value);
                            else 
                                props[key] = value;
                        }
                        pw = pw.substring(0, pw.indexOf("?"));
                    }
                }
                if (props.path != null && ! props.path.startsWith("/"))
                    props.path = "/" + props.path;
                props.linkpassword = pw;
                if (props.app == null)
                    props.app = "Drive";
                else if (props.app != "Drive")
                    props.open = true;
                return props;
            }
	    try {
		props = fragmentToProps(fragment);
	    } catch (e) {
		if (fragment.length > 0) {
		    // support legacy secret links
		    props.secretLink = true;

		    var query = fragment.indexOf("?");
		    if (query > 0) {
			if (fragment.indexOf("download=true") > 0)
			    props.download = true;
			if (fragment.indexOf("open=true") > 0)
			    props.open = true;
			fragment = fragment.substring(0, query);
		    }
		    props.link = fragment;
		}
	    }
            return props;
        },

	onUrlChange() {
	    const props = this.getPropsFromUrl();

	    const app = props == null ? null : props.app;
	    const path = props == null ? null : props.path;
	    const args = props == null ? null : props.args;
	    const differentPath = this.canonical(path) != this.canonical(this.getPath);

	    if (differentPath && path != null) {
		console.log('onUrlChange differentPath so we do: ', path.split("/").filter(x => x.length > 0))
		this.$store.commit(
		    "SET_PATH",
		    path.split("/").filter((x) => x.length > 0)
		);
	    }

            const that = this;
            const sidebarApps = ["Drive", "NewsFeed", "Social", "Calendar", "Email", "Launcher"]
            const inDrive = this.currentView == "Drive";
	    if (app === "Drive") {
                if (inDrive) {
                    this.$refs.appView.closeApps()
                } else 
		    this.$store.commit("CURRENT_VIEW", app);
	    } else if (sidebarApps.includes(app)) {
		this.$store.commit("CURRENT_VIEW", app);
	    } else {
                // Drive sub-apps
                if (inDrive) {
                    if (differentPath) {
                        // TODO: find a cleaner way to do this
                        this.$refs.appView._data.onUpdateCompletion.push(() => {
		            that.$refs.appView.openInApp(args, app);
		        });
                    } else
                        that.$refs.appView.openInApp(args, app);
                } else {
		    this.$store.commit("CURRENT_VIEW", "Drive");
                    // TODO: find a cleaner way to do this
                    this.$refs.appView._data.onUpdateCompletion.push(() => {
		        that.$refs.appView.openInApp(args, app);
		    });
                }
	    }
	},

	updateNetwork() {
	    let that = this;
	    peergos.shared.NetworkAccess.buildJS(
		!that.isLocalhost,
		0, true
	    ).thenApply(function (network) {
		that.$store.commit("SET_NETWORK", network);
	    }).exceptionally(function (throwable) {
		    that.$toast.error(
			"Error connecting to network: " + throwable.getMessage()
		    );
		});
	},

	checkIfDomainNeedsUnblocking() {
            return; // B2 has started returning a cors error for notablock so ignore this for now
	    if (this.network == null) return;
	    var that = this;
	    this.network.otherDomain().thenApply(function (domainOpt) {
		if (domainOpt.isPresent()) {
		    var req = new XMLHttpRequest();
		    var url = domainOpt.get() + "notablock";
		    req.open("GET", url);
		    req.responseType = "arraybuffer";
		    req.onload = function () {
			console.log("S3 test returned: " + req.status);
		    };

		    req.onerror = function (e) {
			that.$toast.error(
			    "Please unblock the following domain for Peergos to function faster: " +
				domainOpt.get()
			);
		    };

		    req.send();
		}
	    });
	},
        getLinkPassword() {
            var future = peergos.shared.util.Futures.incomplete();
            this.future = future;
            this.showLinkPassword = true;
            return future;
        },

	// still need to check this
	gotoSecretLink(props) {
	    var that = this;
            this.$store.commit("SET_IS_SECRET_LINK", true);
            
	    (props.linkpassword != null ?
             peergos.shared.user.UserContext.fromSecretLinkV2(
		 window.location.pathname + "#" + props.linkpassword,
                 {get_0:() => this.getLinkPassword()},
		 that.network,
		 that.crypto
	    ):
             peergos.shared.user.UserContext.fromSecretLink(
		props.link,
		that.network,
		that.crypto
	    ))
		.thenApply(function (context) {
		    that.$store.commit("SET_CONTEXT", context);
		    that.$store.commit("SET_DOWNLOAD", props.download);
		    that.$store.commit("SET_OPEN", props.open);
                    var initPath = props.path;
                    if (props.args != null && props.args.filename != null)
                        initPath += (props.path.endsWith("/") ? "" : "/" ) + props.args.filename;
		    that.$store.commit("SET_INIT_PATH", initPath);
                    that.$store.commit("CURRENT_VIEW", "Drive");
                    window.location.hash = propsToFragment(props)
		})
		.exceptionally(function (throwable) {
		    that.$toast.error(
			"Secret link not found! Link expired or deleted?"
		    );
                    throwable.printStackTrace();
		});
	},
    },
};

},{ "../i18n/index.js": 11, "../mixins/launcher/index.js": 65, "../mixins/router/index.js": 3, "../mixins/sandbox/index.js": 49, "../views/Calendar.vue": 96, "../views/Drive.vue": 90, "../views/Launcher.vue": 100, "../views/NewsFeed.vue": 93, "../views/Social.vue": 95, "./LinkPassword.vue": 43, "./Login.vue": 46, "./ServerMessages.vue": 103, "./Signup.vue": 51, "./modal/ModalAccount.vue": 33, "./modal/ModalAuthSettings.vue": 20, "./modal/ModalCancel.vue": 26, "./modal/ModalFeedback.vue": 42, "./modal/ModalHelp.vue": 23, "./modal/ModalPassword.vue": 32, "./modal/ModalPro.vue": 25, "./modal/ModalProfile.vue": 41, "./modal/ModalSpace.vue": 24, "./modal/ModalTour.vue": 22, "./navigation/AppNavigation.vue": 13, "./tabs/AppTab.vue": 44, "./tabs/AppTabs.vue": 45, "AppIcon.vue": 1}], 2:[function(require,module,exports){
const AppIcon = require("AppIcon.vue");
module.exports = {
render: function() {with(this){return _c(tag,{tag:"component",staticClass:"app-button",class:{
			round: round,
			block: block,
			icon: icon,
			outline: outline,
			accent: accent,
			[`${size}`]: size,
			[`${type}`]: type,
		},attrs:{"disabled":disabled}},[_t("default"),(icon)?_c('AppIcon',{attrs:{"icon":icon}}):_e()],2)}},	components: {
	    AppIcon,
	},
	props: {
		tag: {
			type: String,
			default: "button",
		},
		round: {
			type: Boolean,
			default: false,
		},
		icon: {
			type: String,
			default: null,
		},
		block: {
			type: Boolean,
			default: false,
		},
		disabled: {
			type: Boolean,
			default: false,
		},
		outline: {
			type: Boolean,
			default: false,
		},
		accent:{
			type: Boolean,
			default: false,
		},
		type: {
			type: String,
			default: "default",
		},
		size: {
			type: String,
			default: "",
		},
	},
	methods: {
		// handleClick(event) {
		// 	this.$emit("click", event);
		// },
	},
};

},{ "AppIcon.vue": 1}], 69:[function(require,module,exports){

const AppButton = require("AppButton.vue");

module.exports = {
render: function() {with(this){return _c('div',{staticClass:"app-dropdown",on:{"focusin":function($event){return expanded(true)},"focusout":function($event){return expanded(false)}}},[_c('AppButton',{attrs:{"type":type,"accent":accent,"area-expanded":isActive,"icon":icon},nativeOn:{"click":function($event){return expanded(true)}}},[_t("trigger")],2),_v(" "),_c('transition',{attrs:{"name":"drop"}},[(isActive)?_c('div',{staticClass:"dropdown__content"},[_t("default")],2):_e()])],1)}},    components: {
        AppButton,
    },
	props: {
		icon: {
			type: String,
			default: "",
		},
		type: {
			type: String,
			default: "",
		},
		accent:{
			type: Boolean,
			default:false,
		}
	},
	data() {
		return {
			isActive: false,
		};
	},
	methods: {
		expanded(value){
			// close on focus-out
			// https://codepen.io/autumnwoodberry/pen/NvjJWm
			this.isActive = value
		}

	},
};

},{ "AppButton.vue": 2}], 91:[function(require,module,exports){
const UserSettings = require("./UserSettings.vue");

module.exports = {
render: function() {with(this){return _c('header',{staticClass:"app-header"},[_c('div',{staticClass:"primary"},[_t("primary")],2),_v(" "),_c('div',{staticClass:"tools"},[_t("tools")],2),_v(" "),_c('UserSettings')],1)}},	components: {
		UserSettings
	}
}

},{ "./UserSettings.vue": 71}], 1:[function(require,module,exports){
// export default {
module.exports = {
render: function() {with(this){return _c('svg',{staticClass:"icon",class:{ 'icon--flip': flip },attrs:{"width":width,"height":height}},[_c('use',{attrs:{"xlink:href":`#${icon}`}})])}},	name: "AppIcon",
	props: {
		icon: {
			type: String,
			required: true,
		},
		flip: {
			type: Boolean,
			default: false,
		},
		width:{
			type: Number,
			default: 32,
		},
		height:{
			type: Number,
			default: 32,
		}
	},
};

},{}], 50:[function(require,module,exports){
    module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticStyle:{"height":"30%"}}),_v(" "),_c('div',{staticClass:"modal-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:"modal-header"},[_c('center',[_c('h3',{attrs:{"id":"confirm-header-id"}},[_v(_s(message))])])],1),_v(" "),_c('div',{staticClass:"modal-body"},[_c('center',[_c('div',{staticClass:"container",staticStyle:{"word-wrap":"break-word","width":"auto"}},[_c('p',{staticStyle:{"text-align":"center"},attrs:{"id":"confirm-body-id"}},[_v(_s(body))])]),_v(" "),_c('button',{staticClass:"btn btn-success btn-lg",staticStyle:{"width":"50%"},on:{"click":function($event){return yes()}}},[_v("\n                            Ok\n                        ")])])],1)])])])}},    data: function() {
        return {
        }
    },
    props: ['message', 'body', 'ok_func'],
    created: function() {
    },
    methods: {
        close: function() {
            this.$emit("hide-continue");
        },
        yes: function() {
            this.close();
            this.ok_func();
        }
    }
}
},{}], 86:[function(require,module,exports){
const helpers = require("../mixins/storage/index.js");
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('meta',{attrs:{"http-equiv":"content-type","content":"text/html; charset=utf-8"}}),_v(" "),_c('div',{staticClass:"folder-properties-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('span',{staticClass:"close",attrs:{"tabindex":"0","aria-label":"close"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")]),_v(" "),_c('div',{staticClass:"modal-header"},[_c('center',[_c('h2',[_v("Folder: "+_s(folderName))])])],1),_v(" "),_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"folder-properties-view"},[_c('p',[_c('span',{staticClass:"folder-properties-span"},[_v("File(s):")]),_c('span',[_v(_s(fileCount))])]),_v(" "),_c('p',[_c('span',{staticClass:"folder-properties-span"},[_v("Folder(s):")]),_c('span',[_v(_s(folderCount))])]),_v(" "),_c('p',[_c('span',{staticClass:"folder-properties-span"},[_v("Total Size:")]),_c('span',[_v(_s(actualSize))])])])])])])])}},    data: function() {
        return {
            fileCount: 0,
            actualSize: 0,
            apparentSize: 0,
            folderCount: 0,
            folderName: ''
        }
    },
    props: ['folder_properties'],
    created: function() {
        this.folderName = this.folder_properties.folderName;
        this.fileCount = this.folder_properties.fileCount;
        this.folderCount = this.folder_properties.folderCount;
        this.apparentSize = helpers.convertBytesToHumanReadable(this.folder_properties.apparentSize);
        this.actualSize = helpers.convertBytesToHumanReadable(this.folder_properties.actualSize);
    },
    methods: {
        close: function () {
            this.$emit("hide-folder-properties-view");
        }
    }
}

},{ "../mixins/storage/index.js": 85}], 63:[function(require,module,exports){
const Error = require("../components/error/Error.vue");
const FormAutocomplete = require("../components/form/FormAutocomplete.vue");
const Prompt = require("../components/prompt/Prompt.vue");
const Spinner = require("../components/spinner/Spinner.vue");


module.exports = {
render: function() {with(this){return _c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticClass:"modal-container full-height",staticStyle:{"overflow-y":"auto","max-width":"1000px"},on:{"click":function($event){$event.stopPropagation();}}},[_c('span',{staticClass:"close",on:{"click":close}},[_v("×")]),_v(" "),(showSpinner)?_c('Spinner'):_e(),_v(" "),(showPrompt)?_c('Prompt',{attrs:{"prompt_message":prompt_message,"placeholder":prompt_placeholder,"max_input_size":prompt_max_input_size,"value":prompt_value,"consumer_func":prompt_consumer_func},on:{"hide-prompt":function($event){showPrompt = false}}}):_e(),_v(" "),_c('div',{staticClass:"modal-header"},[_c('span',[_c('h4',{staticStyle:{"text-align":"center"},on:{"click":function($event){return changeGroupTitle()}}},[_v(_s(displayedTitle)+"  "),(isAdmin)?_c('i',{staticClass:"fa fa-edit",attrs:{"aria-hidden":"true"},on:{"click":function($event){return changeGroupTitle()}}}):_e()])])]),_v(" "),_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"container"},[_c('div',{staticClass:"flex-container"},[_c('FormAutocomplete',{attrs:{"is-multiple":"","options":friendNames,"maxitems":5,"placeholder":"please select user"},model:{value:(targetUsernames),callback:function ($$v) {targetUsernames=$$v},expression:"targetUsernames"}}),_v(" "),(isAdmin)?_c('div',{staticClass:"hspace-5",staticStyle:{"margin-top":"20px"}},[_c('label',{staticClass:"checkbox__group"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(memberAccess),expression:"memberAccess"}],attrs:{"type":"radio","id":"member-access","value":"Member"},domProps:{"checked":_q(memberAccess,"Member")},on:{"change":function($event){memberAccess="Member"}}}),_v(" "),_c('span',{staticClass:"checkmark"}),_v("\n                            Member\n                        ")])]):_e(),_v(" "),(isAdmin)?_c('div',{staticClass:"hspace-5",staticStyle:{"margin-top":"20px"}},[_c('label',{staticClass:"checkbox__group",attrs:{"for":"admin-access","data-toggle":"tooltip","data-placement":"bottom","title":"Admins can change title and membership"}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(memberAccess),expression:"memberAccess"}],attrs:{"type":"radio","id":"admin-access","value":"Admin"},domProps:{"checked":_q(memberAccess,"Admin")},on:{"change":function($event){memberAccess="Admin"}}}),_v(" "),_c('span',{staticClass:"checkmark"}),_v("\n                            Admin\n                        ")])]):_e(),_v(" "),_c('div',{staticStyle:{"padding":"5px","margin-top":"10px"}},[_c('button',{staticClass:"btn btn-success",attrs:{"disabled":this.targetUsernames.slice().length == 0},on:{"click":function($event){return addUsersToGroup()}}},[_v(" "+_s(addLabel))])])],1)]),_v(" "),(isAdmin)?_c('div',{staticClass:"modal-prominent"},[_c('div',{staticClass:"container"},[_c('p',{staticStyle:{}},[_v("\n                    Admins:")]),_v(" "),_l((existingAdmins),function(user){return _c('div',[_c('label',{staticClass:"checkbox__group"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(adminsToRemove),expression:"adminsToRemove"}],attrs:{"disabled":existingAdmins.length <= 1,"type":"checkbox","id":user},domProps:{"value":user,"checked":Array.isArray(adminsToRemove)?_i(adminsToRemove,user)>-1:(adminsToRemove)},on:{"change":function($event){var $$a=adminsToRemove,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=user,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(adminsToRemove=$$a.concat([$$v]))}else{$$i>-1&&(adminsToRemove=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{adminsToRemove=$$c}}}}),_v(" "),_c('span',{staticClass:"checkmark"}),_v(" "),_c('span',{staticStyle:{"margin-left":"10px"}},[_v(_s(user))])])])}),_v(" "),_c('button',{staticClass:"btn btn-success",attrs:{"disabled":existingAdmins.length <= 1 || adminsToRemove.length == 0},on:{"click":function($event){return removeAdminFromGroup()}}},[_v("Remove")])],2)]):_e(),_v(" "),_c('div',{staticClass:"modal-prominent"},[_c('div',{staticClass:"container"},[_c('p',{staticStyle:{}},[_v("\n                    Members:")]),_v(" "),_l((existingGroupMembers),function(user){return _c('div',[_c('label',{staticClass:"checkbox__group"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(membersSelected),expression:"membersSelected"}],attrs:{"disabled":!( (isAdmin && user != context.username) || (!isAdmin && user == context.username)),"type":"checkbox","id":user},domProps:{"value":user,"checked":Array.isArray(membersSelected)?_i(membersSelected,user)>-1:(membersSelected)},on:{"change":function($event){var $$a=membersSelected,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=user,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(membersSelected=$$a.concat([$$v]))}else{$$i>-1&&(membersSelected=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{membersSelected=$$c}}}}),_v(" "),_c('span',{staticClass:"checkmark"}),_v(" "),_c('span',{staticStyle:{"margin-left":"10px"}},[_v(_s(user))])])])}),_v(" "),_c('button',{staticClass:"btn btn-success",attrs:{"disabled":this.membersSelected.length == 0},on:{"click":function($event){return removeUserFromGroup()}}},[_v("Remove")]),_v(" "),(isAdmin)?_c('button',{staticClass:"btn btn-info",attrs:{"disabled":this.membersSelected.length == 0},on:{"click":function($event){return promoteToGroupAdmin()}}},[_v("Promote to Admin")]):_e()],2)]),_v(" "),(showError)?_c('Error',{attrs:{"title":errorTitle,"body":errorBody},on:{"hide-error":function($event){showError = false}}}):_e()],1),_v(" "),_c('div',{staticClass:"modal-footer"},[_t("footer",[_c('button',{staticClass:"btn btn-success",on:{"click":updateGroupMembership}},[_v("\n                    "+_s(updateLabel)+"\n                ")])])],2)],1)])}},	components: {
	    Error,
	    FormAutocomplete,
	    Prompt,
	    Spinner
	},
    data() {
        return {
            showSpinner: false,
            targetUsername: "",
            targetUsernames: [],
            errorTitle:'',
            errorBody:'',
            showError:false,
            membersSelected: [],
            adminsToRemove: [],
            showPrompt: false,
            prompt_message: '',
            prompt_placeholder: '',
            prompt_max_input_size: null,
            prompt_value: '',
            prompt_consumer_func: () => {},
            displayedTitle: "",
            updateLabel: "Apply Changes",
            addLabel: "Invite to Chat",
            genericLabel: "chat",
            isAdmin: false,
            memberAccess: "Member"
        }
    },
    props: ['existingGroups', 'groupId', 'groupTitle', 'existingGroupMembers', 'friendNames'
        , 'updatedGroupMembership', 'existingAdmins'],
    computed: {
        ...Vuex.mapState([
            'context',
        ])
    },
    created: function() {
        this.displayedTitle = this.groupTitle;
        if (this.groupId == "") {
            this.updateLabel = "Create";
        }
        this.isAdmin = this.existingAdmins.findIndex(v => v === this.context.username) > -1;
    },
    methods: {
        updateGroupMembership: function () {
            if (this.groupId == "") {
                if (this.displayedTitle == this.groupTitle) {
                    if (this.existingGroupMembers.length == 1 || this.existingGroupMembers.length > 2) {
                        this.showMessage(true, "Click on title to set " + this.genericLabel + " name");
                    } else {
                        this.updatedGroupMembership(this.groupId, this.existingGroupMembers[1], this.existingGroupMembers.slice()
                            , this.existingAdmins.slice());
                    }
                } else {
                    this.updatedGroupMembership(this.groupId, this.displayedTitle, this.existingGroupMembers.slice()
                        , this.existingAdmins.slice());
                }
            } else {
                this.updatedGroupMembership(this.groupId, this.displayedTitle, this.existingGroupMembers.slice()
                    , this.existingAdmins.slice());
            }
        },
        changeGroupTitle: function () {
            if (!this.isAdmin) {
                return;
            }
            let that = this;
            this.prompt_placeholder = 'New ' + this.genericLabel + ' name';
            this.prompt_value = this.displayedTitle;
            this.prompt_message = 'Enter a name';
            this.prompt_max_input_size = 20;
            this.prompt_consumer_func = function(prompt_result) {
                if (prompt_result === null)
                    return;
                if (prompt_result === this.displayedTitle)
                    return;
                let newName = prompt_result.trim();
                if (newName === '')
                    return;
                if (newName === '.' || newName === '..')
                    return;
                if (!newName.match(/^[a-z\d\-_\s]+$/i)) {
                    that.showMessage(true, "Invalid " + that.genericLabel + " name. Use only alphanumeric characters plus space, dash and underscore");
                    return;
                }
                setTimeout(function(){
                    //make sure names are unique
                    for (var i=0;i < that.existingGroups.length; i++) {
                        let existingGroupName = that.existingGroups[i];
                        if (existingGroupName == newName) {
                            that.showMessage(true, "Duplicate " + that.genericLabel + " name");
                            return;
                        }
                    }
                    that.displayedTitle = newName;
                });
            };
            this.showPrompt =  true;
        },
        close: function () {
            this.$emit("hide-group");
        },
        showMessage : function (isError, title, body) {
            let bodyContents = body == null ? '' : ' ' + body;
            if (isError) {
                this.$toast.error(title + bodyContents, {timeout:false});
            } else {
                this.$toast(title + bodyContents)
            }
        },
        removeUserFromGroup : function () {
            let selectedSelf = this.membersSelected.indexOf(this.context.username) > -1;
            let otherMembersToRemove = this.membersSelected.slice().filter(v => v !== this.context.username);
            for (var i = 0; i < otherMembersToRemove.length; i++) {
                let targetUsername = otherMembersToRemove[i];
                if (targetUsername != this.context.username) {
                    var index = this.existingAdmins.indexOf(targetUsername);
                    if (this.isAdmin) {
                        if (index > -1) {
                            this.existingAdmins.splice(index, 1);
                        }
                        index = this.existingGroupMembers.indexOf(targetUsername);
                        if (index > -1) {
                            this.existingGroupMembers.splice(index, 1);
                        }
                    } else {
                        if (index > -1) {
                            this.errorTitle = "Only an Admin can remove an Admin";
                            this.errorBody = "";
                            this.showError = true;
                            return;
                        } else {
                            index = this.existingGroupMembers.indexOf(targetUsername);
                            if (index > -1) {
                                this.existingGroupMembers.splice(index, 1);
                            }
                        }
                    }
                }
            }
            if (selectedSelf) {
                if (!this.isAdmin) {
                    index = this.existingGroupMembers.indexOf(this.context.username);
                    if (index > -1) {
                        this.existingGroupMembers.splice(index, 1);
                    }
                }
            }
            this.membersSelected = [];
        },
        promoteToGroupAdmin : function () {
            let usersToAdd = [];
            for (var i = 0; i < this.membersSelected.length; i++) {
                usersToAdd.push(this.membersSelected[i]);
            }
            this.addAdminsToGroup(usersToAdd);
            this.membersSelected = [];
        },
        removeAdminFromGroup : function () {
            if (!this.isAdmin) {
                return;
            }
            if (this.existingAdmins.length == this.adminsToRemove.length) {
                this.errorTitle = "A group must have at least 1 admin";
                this.errorBody = "";
                this.showError = true;
                return;
            }
            for (var i = 0; i < this.adminsToRemove.length; i++) {
                let targetUsername = this.adminsToRemove[i];
                let index = this.existingAdmins.indexOf(targetUsername);
                if (index > -1) {
                    this.existingAdmins.splice(index, 1);
                }
            }
            this.adminsToRemove = [];
        },
        addUsersToGroup: function() {
            var usersToAdd = this.targetUsernames.slice();
            if (usersToAdd.length == 0) {
                return;
            }
            if (this.memberAccess == "Member") {
                this.addMembersToGroup(usersToAdd);
            } else {
                this.addAdminsToGroup(usersToAdd);
            }
        },
        addMembersToGroup: function(usersToAdd) {
            if (usersToAdd.length == 0) {
                return;
            }
            for (var i = usersToAdd.length - 1; i >= 0; i--) {
                let targetUsername = usersToAdd[i];
                if(this.existingGroupMembers.indexOf(targetUsername) > -1) {
                    usersToAdd.splice(i, 1);
                } else {
                    this.existingGroupMembers.push(targetUsername);
                }
            }
            if (usersToAdd.length == 0) {
                this.errorTitle = "Already a member!";
                this.errorBody = "";
                this.showError = true;
            } else {
                this.targetUsernames = [];
            }
        },
        addAdminsToGroup: function(usersToAdd) {
            if (!this.isAdmin) {
                return;
            }
            let membersToAdd = [];
            for (var i = 0; i < usersToAdd.length; i++) {
                let targetUsername = usersToAdd[i];
                if(this.existingGroupMembers.indexOf(targetUsername) == -1) {
                    membersToAdd.push(targetUsername);
                }
            }

            for (var i = usersToAdd.length - 1; i >= 0; i--) {
                let targetUsername = usersToAdd[i];
                if(this.existingAdmins.indexOf(targetUsername) > -1) {
                    usersToAdd.splice(i, 1);
                } else {
                    this.existingAdmins.push(targetUsername);
                }
            }
            if (usersToAdd.length == 0) {
                this.errorTitle = "Already an Admin!";
                this.errorBody = "";
                this.showError = true;
            } else {
                this.addMembersToGroup(membersToAdd);
            }
        }
    }
}

},{ "../components/error/Error.vue": 61, "../components/form/FormAutocomplete.vue": 38, "../components/prompt/Prompt.vue": 62, "../components/spinner/Spinner.vue": 16}], 43:[function(require,module,exports){
const i18n = require("../i18n/index.js");
    module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":function($event){return $emit('hide-modal')}}},[_c('div',{staticStyle:{"height":"30%"}}),_v(" "),_c('div',{staticClass:"link-password-modal-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:"modal-header"},[_c('h3',{attrs:{"id":"modal-header-id"}},[_v(_s(title))])]),_v(" "),_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"container"},[_c('p',{staticStyle:{}}),_c('div',{staticStyle:{"font-size":"1.2em"}},[_c('div',{staticStyle:{"padding":"10px"}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(password),expression:"password"}],domProps:{"value":(password)},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return submit()},"input":function($event){if($event.target.composing)return;password=$event.target.value}}})]),_v(" "),_c('div',{staticStyle:{"padding":"10px"}},[_c('button',{staticClass:"btn btn-success",attrs:{"id":"modal-button-id"},on:{"click":submit}},[_v("\n                                        "+_s(translate("DRIVE.LINK.OK"))+"\n                                    ")])]),_v(" "),_c('p')])])]),_v(" "),_c('div',{staticClass:"modal-footer"},[_t("footer")],2)])])])}},	data() {
	    return {
                password:"",
            };
	},
        mixins:[i18n],
	props: [
	    "title",
	    "future",
        ],
        created: function() {
        },
        methods: {
            submit: function() {
                this.future.complete(this.password);
                this.$emit('hide-modal');
            }
        }
    }
},{ "../i18n/index.js": 11}], 46:[function(require,module,exports){
const AppButton = require("AppButton.vue");
const FormPassword = require("./form/FormPassword.vue");
const MultiFactorAuth = require("./auth/MultiFactorAuth.vue");
const routerMixins = require("../mixins/router/index.js");
const UriDecoder = require('../mixins/uridecoder/index.js');
const i18n = require("../i18n/index.js");

module.exports = {
render: function() {with(this){return (!autoLoggingIn)?_c('div',{staticClass:"app-login"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(username),expression:"username"}],ref:"username",attrs:{"type":"text","autofocus":"","name":"username","placeholder":translate('LOGIN.USERNAME')},domProps:{"value":(username)},on:{"input":[function($event){if($event.target.composing)return;username=$event.target.value},(val) => (username = username.toLowerCase())]}}),_v(" "),(showMultiFactorAuth)?_c('MultiFactorAuth',{attrs:{"mfaMethods":mfaMethods,"challenge":challenge,"consumer_cancel_func":consumer_cancel_func,"consumer_func":consumer_func},on:{"hide-confirm":function($event){showMultiFactorAuth = false}}}):_e(),_v(" "),_c('FormPassword',{attrs:{"placeholder":translate('LOGIN.PASSWORD')},nativeOn:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return login()}},model:{value:(password),callback:function ($$v) {password=$$v},expression:"password"}}),_v(" "),_c('label',{staticClass:"checkbox__group"},[_v("\n            "+_s(translate('LOGIN.STAY'))+"\n            "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(stayLoggedIn),expression:"stayLoggedIn"}],attrs:{"type":"checkbox","name":"stayLoggedIn"},domProps:{"checked":Array.isArray(stayLoggedIn)?_i(stayLoggedIn,null)>-1:(stayLoggedIn)},on:{"change":function($event){var $$a=stayLoggedIn,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(stayLoggedIn=$$a.concat([$$v]))}else{$$i>-1&&(stayLoggedIn=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{stayLoggedIn=$$c}}}}),_v(" "),_c('span',{staticClass:"checkmark"})]),_v(" "),_c('AppButton',{staticClass:"login",attrs:{"disabled":isLoggingIn,"type":"primary","block":"","accent":"","icon":"arrow-right"},nativeOn:{"click":function($event){return login()}}},[_v("\n\t\t\t"+_s(translate('LOGIN.BUTTON'))+"\n\t\t")])],1):_e()}},	components: {
    	AppButton,
		FormPassword,
		MultiFactorAuth,
	},
	data() {
		return {
			username: '',
            password: [],
			passwordIsVisible: false,
			demo: true,
            stayLoggedIn: false,
            isLoggingIn: false,
            autoLoggingIn: true,
            showMultiFactorAuth: false,
		};
	},
	computed: {
		...Vuex.mapState([
			'crypto',
			'network',
			'context'
		]),
		...Vuex.mapGetters([
			'isSecretLink',
		]),
	},
	mixins:[routerMixins, UriDecoder, i18n],

	mounted() {
                setTimeout(() => this.autoLogin(), 0);
                if (this.$refs.username != null)
                    this.$refs.username.focus()
	},
	methods: {
		...Vuex.mapActions([
			'updateSocial'
		]),
		autoLogin() {
		    // bypass login on DEV
			if (this.network == null) {
				setTimeout(() => this.autoLogin(), 100);
				return;
			}
			let devLogin = false;
		    if( window.location.hostname == "localhost"){
				var query = new URLSearchParams(window.location.search)
				this.username = query.get("username")
				if (this.username != null) {
				    this.password = query.get("password")
				    devLogin = true;
				    this.login()
				}
		    }
		    if (!devLogin) {
                const creationStart = Date.now();
                const that = this;
                getRootKeyEntryFromCacheProm().thenApply(function (rootKeyPair) {
                    if (rootKeyPair != null) {
                        let loginRoot = peergos.shared.crypto.symmetric.SymmetricKey.fromByteArray(rootKeyPair.rootKey);
                        directGetEntryDataFromCacheProm(rootKeyPair.username).thenApply(function (entryPoints) {
                            if (entryPoints == null) {
                                that.$toast.error("Legacy accounts can't stay logged in. Please change your password to upgrade your account", {timeout:false, id: 'login'});
                                that.autoLoggingIn = false;
                            } else {
                                that.isLoggingIn = true;
                                let entryData = peergos.shared.user.UserStaticData.fromByteArray(entryPoints);
                                peergos.shared.user.UserContext.restoreContext(rootKeyPair.username, loginRoot, entryData,
                                    that.network, that.crypto, { accept: (x) => (that.$toast.info(x,{ id: 'login' })) }
                                ).thenApply(function (context) {
                                      that.postLogin(creationStart, context);
                                })
                                .exceptionally(function (throwable) {
                                    that.isLoggingIn = false;
                                    that.autoLoggingIn = false;
                                    that.$toast.error(that.uriDecode(throwable.getMessage()), {timeout:false, id: 'login'})
                                });
                            }
                        });
                    } else {
                        that.autoLoggingIn = false;
                    }
                });
            }
		},
		togglePassword() {
			this.passwordIsVisible = !this.passwordIsVisible
		},
		login() {
		    if (this.isLoggingIn) {
		        return;
		    }
			const creationStart = Date.now();
			const that = this;
            this.isLoggingIn = true;

            let handleMfa = function(mfaReq) {
                    let future = peergos.shared.util.Futures.incomplete();
                    let mfaMethods = mfaReq.methods.toArray([]);
                    that.challenge = mfaReq.challenge;
                    that.mfaMethods = mfaMethods;
                    that.consumer_func = (credentialId, resp) => {
                        that.showMultiFactorAuth = false;
                        future.complete(resp);
                    };
                    that.consumer_cancel_func = (credentialId) => {
                        that.showMultiFactorAuth = false;
                        let resp = peergos.client.JsUtil.generateAuthResponse(credentialId, '');
                        future.complete(resp);
                    }
                    that.showMultiFactorAuth = true;
                    return future;
            };
			peergos.shared.user.UserContext.signIn(
				that.username,
				that.password,
			        mfaReq => handleMfa(mfaReq),
                                that.stayLoggedIn,
				that.network,
				that.crypto,
				// { accept: (x) => (that.spinnerMessage = x) }
				 { accept: (x) => (that.$toast.info(x,{ id: 'login', timeout:false })) }
				)
				.thenApply(function (context) {
                    that.postLogin(creationStart, context);
				})
				.exceptionally(function (throwable) {
                    that.isLoggingIn = false;
                    if (throwable.getMessage().startsWith('Invalid+TOTP+code')) {
                        that.$toast.error('Invalid Multi Factor Authenticator code', {timeout:false, id: 'login'})
                    } else {
					    that.$toast.error(that.uriDecode(throwable.getMessage()), {timeout:false, id: 'login'})
					}
				});
		},
		postLogin(creationStart, context) {
			const that = this;
			this.isLoggingIn = false;
            that.$toast.dismiss('login');

            that.$store.commit('SET_CONTEXT', context);

            that.$store.commit('CURRENT_VIEW', that.appFromUrl());

            that.$store.commit('USER_LOGIN', true);

            that.$emit("initApp")

            // that.$store.commit('CURRENT_MODAL', 'ModalTour');

            console.log("Signing in/up took " + (Date.now()-creationStart)+" mS from function call");
            if (that.stayLoggedIn) {
                let rootKey = context.rootKey.toByteArray();
                setRootKeyIntoCacheProm(context.username, rootKey).thenApply(function (isSupported) {
                    if (isSupported) {
                        console.log("Offline support enabled");
                    } else {
                        console.log("Offline support not available");
                    }
                });
            }
		},
		appFromUrl(){
			const props = this.getPropsFromUrl();
			const app = props == null ? null : props.app;
			console.log('login app:', app)
			const driveApps = [null, 'Gallery', 'pdf', 'editor', 'hex', 'markdown', 'markup', 'timeline', 'htmlviewer']

			return driveApps.includes(app)
				? 'Drive'
				: app
		}
	}

};
},{ "../i18n/index.js": 11, "../mixins/router/index.js": 3, "../mixins/uridecoder/index.js": 27, "./auth/MultiFactorAuth.vue": 31, "./form/FormPassword.vue": 30, "AppButton.vue": 2}], 101:[function(require,module,exports){
module.exports = {
render: function() {with(this){return _c('div',{staticClass:"messagebar"},[_c('div',{on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{},[_c('span',[_v(" "+_s(date)+" Message: "+_s(contents))])]),_v(" "),_c('div',{staticClass:"messagecontainer"},[_c('button',{staticClass:"btn btn-success",on:{"click":reply}},[_v("Show")]),_v(" "),_c('button',{staticClass:"btn btn-success",on:{"click":close}},[_v("Delete")])])])])}},    data: function() {
        return {
        }
    },
    props: ['id', 'date', 'contents', 'replyToMessage', 'dismissMessage'],
    created: function() {
    },
    methods: {
        reply: function() {
            console.log("reply to message id: " + this.id);
            this.replyToMessage(this.id);
        },
        close: function() {
            console.log("acknowledge message id: " + this.id);
            this.dismissMessage(this.id);
        }
    }
}

},{}], 83:[function(require,module,exports){
const AppButton = require("AppButton.vue");
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal","appear":""}},[_c('div',{staticClass:"app-prompt app-modal__overlay",on:{"click":function($event){return closePrompt()}}},[_c('div',{staticClass:"app-prompt__container",on:{"click":function($event){$event.stopPropagation();}}},[_c('header',{staticClass:"prompt__header"},[_c('AppButton',{staticClass:"close",attrs:{"icon":"close"},nativeOn:{"click":function($event){return closePrompt()}}}),_v(" "),_c('h3',[_v("Enter an image file name")])],1),_v(" "),_c('div',{staticClass:"prompt__body"},[(placeholder)?_c('input',{directives:[{name:"model",rawName:"v-model",value:(prompt_result),expression:"prompt_result"}],ref:"prompt",attrs:{"id":"prompt-input","type":"text","placeholder":placeholder,"maxlength":maxLength,"autofocus":""},domProps:{"value":(prompt_result)},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return getPrompt(this.prompt_result)},"input":function($event){if($event.target.composing)return;prompt_result=$event.target.value}}}):_e(),_v(" "),_c('div',[_c('label',{staticClass:"checkbox__group"},[_v("\n                            JPG\n                            "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(jpg_format),expression:"jpg_format"}],attrs:{"type":"checkbox","name":""},domProps:{"checked":Array.isArray(jpg_format)?_i(jpg_format,null)>-1:(jpg_format)},on:{"change":[function($event){var $$a=jpg_format,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(jpg_format=$$a.concat([$$v]))}else{$$i>-1&&(jpg_format=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{jpg_format=$$c}},function($event){return onJpgChange()}]}}),_v(" "),_c('span',{staticClass:"checkmark"})]),_v(" "),_c('label',{staticClass:"checkbox__group"},[_v("\n                            PNG\n                            "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(png_format),expression:"png_format"}],attrs:{"type":"checkbox","name":""},domProps:{"checked":Array.isArray(png_format)?_i(png_format,null)>-1:(png_format)},on:{"change":[function($event){var $$a=png_format,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(png_format=$$a.concat([$$v]))}else{$$i>-1&&(png_format=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{png_format=$$c}},function($event){return onPngChange()}]}}),_v(" "),_c('span',{staticClass:"checkmark"})])])]),_v(" "),_c('footer',{staticClass:"prompt__footer"},[_c('AppButton',{attrs:{"outline":""},nativeOn:{"click":function($event){return closePrompt()}}},[_v("\n\t\t\t\t\t\tCancel\n\t\t\t\t\t")]),_v(" "),_c('AppButton',{attrs:{"id":"prompt-button-id","type":"primary","accent":""},nativeOn:{"click":function($event){return getPrompt(this.prompt_result)}}},[_v("\n\t\t\t\t\t"+_s(action)+"\n\t\t\t\t\t")])],1)])])])}},	components: {
    	AppButton,
	},
	data() {
		return {
			prompt_result: '',
			placeholder: 'File name',
			value: '',
			max_input_size: 200,
			action: 'ok',
			jpg_format: true,
			png_format: false,
		}
	},
	props: {
		consumer_func: {
			type: Function
		}
	},
	computed: {
		maxLength() {
			return this.max_input_size;
		}
	},

	mounted() {
		this.prompt_result = this.value;

		if(this.placeholder !== null){
			this.$refs.prompt.focus()
		}
	},

	methods: {

        onJpgChange() {
            if (this.jpg_format && this.png_format) {
                this.png_format = false;
            }
        },

        onPngChange() {
            if (this.png_format && this.jpg_format) {
                this.jpg_format = false;
            }
        },

		closePrompt() {
			this.consumer_func(null);
			this.$emit("hide-prompt");
		},

		getPrompt() {
		    let extension = this.jpg_format ? "jpg" : "png";
			this.consumer_func(this.prompt_result + '.' + extension);
			this.$emit("hide-prompt");
		}
	}
}


},{ "AppButton.vue": 2}], 102:[function(require,module,exports){
const Spinner = require("./spinner/Spinner.vue");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('meta',{attrs:{"http-equiv":"content-type","content":"text/html; charset=utf-8"}}),_v(" "),_c('div',{staticStyle:{"height":"30%"}}),_v(" "),_c('div',{staticClass:"modal-container server-message-reply",staticStyle:{"height":"70%","overflow-y":"auto"},on:{"click":function($event){$event.stopPropagation();}}},[_c('span',{staticClass:"close",attrs:{"tabindex":"0","aria-label":"close"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")]),_v(" "),_c('div',{staticClass:"modal-header"},[_c('h2',[_v(_s(title))])]),_v(" "),_c('div',{staticClass:"modal-body"},[(showSpinner)?_c('Spinner'):_e(),_v(" "),_c('div',{attrs:{"id":"feedback-main"}},[(isFeedback)?_c('div',[_c('h3',[_v("You can tell us here how we can improve, or you can chat with us on "),_c('a',{attrs:{"href":"https://reddit.com/r/peergos","target":"_blank","rel":"noopener noreferrer"}},[_v("reddit")]),_v(" or send us an email: "),_c('a',{attrs:{"href":"mailto:feedback@peergos.org"}},[_v("feedback@peergos.org")])])]):_e(),_v(" "),(!isFeedback)?_c('div',[_c('table',{staticStyle:{"width":"100%","font-size":"1.0em"}},[_c('thead',[_c('tr',[_c('th')])]),_v(" "),_c('tbody',[_l((messageThread),function(message){return [_c('tr',{on:{"click":function($event){message.visible = !message.visible}}},[(message.from == 'FromServer')?_c('div',[_c('td',[(!message.visible)?_c('span',{staticClass:"fas fa-angle-up"}):_e(),_v(" "),(message.visible)?_c('span',{staticClass:"fas fa-angle-down"}):_e(),_v("\n                                        "+_s(fromUTCtoLocal(message.sendTime))+" From Server\n                                    ")])]):_e(),_v(" "),(message.from == 'FromUser')?_c('div',[_c('td',[(!message.visible)?_c('span',{staticClass:"fas fa-angle-up"}):_e(),_v(" "),(message.visible)?_c('span',{staticClass:"fas fa-angle-down"}):_e(),_v("\n                                        "+_s(fromUTCtoLocal(message.sendTime))+" You replied\n                                    ")])]):_e()]),_v(" "),(message.visible)?_c('tr',[_c('td',[(message.from == 'FromUser')?_c('div',{staticStyle:{"background-color":"#ffffff"}},_l((message.paragraphs),function(paragraph){return _c('div',[_v("\n                                    "+_s(paragraph)+"\n\t\t\t\t    "),_c('br')])}),0):_e(),_v(" "),(message.from != 'FromUser')?_c('div',_l((message.paragraphs),function(paragraph){return _c('div',[_v("\n                                    "+_s(paragraph)+"\n\t\t\t\t    "),_c('br')])}),0):_e()])]):_e()]})],2)])]):_e(),_v(" "),_c('p',[_c('textarea',{staticStyle:{"width":"100%"},attrs:{"id":"feedback-text","spellcheck":"true","rows":"5","placeholder":textAreaPlaceholder,"maxlength":"1000"}})]),_v(" "),_c('button',{staticClass:"btn btn-success",staticStyle:{"width":"100%"},on:{"click":function($event){return submitFeedback()}}},[_v("\n                    Submit\n                ")]),_v(" "),_c('p')])],1)])])])}},	components: {
	    Spinner
	},
    data: function() {
        return {
            showSpinner: false,
            isFeedback: false,
            messageThread: [],
            title: "",
            textAreaPlaceholder: "",
        }
    },
    props: ['loadMessageThread', 'closeFeedbackForm','messageId', 'sendFeedback', 'sendMessage'],
    created: function() {
        if(this.messageId != null) {
            this.isFeedback = false;
            this.title = "Message";
            this.textAreaPlaceholder = "Reply...";
            this.messageThread = this.loadMessageThread(this.messageId);
            this.messageThread[this.messageThread.length -1].visible = true;
	    for (i=0; i < this.messageThread.length; i++)
		this.messageThread[i].paragraphs = this.toParagraphs(this.messageThread[i].contents);
        } else {
            this.isFeedback = true;
            this.title = "Feedback";
            this.textAreaPlaceholder = "Let us know what we can improve.";
        }
    },
    methods: {
        close: function () {
            this.closeFeedbackForm(this.messageId);
        },
        fromUTCtoLocal: function(postTime) {
            let date = new Date(postTime.toString());
            let localStr =  date.toISOString().replace('T',' ');
            let withoutMS = localStr.substring(0, localStr.indexOf('.'));
            return withoutMS;
        },
        submitFeedback: function() {
            var contents = document.getElementById("feedback-text").value;
            if (contents.length > 0) {
                if (this.isFeedback) {
                    this.sendFeedback(contents);
                } else {
                    this.sendMessage(this.messageId, contents);
                }
            }
        },
	toParagraphs: function(msg) {
	    return msg.split("\n");
	}
    }
}

},{ "./spinner/Spinner.vue": 16}], 78:[function(require,module,exports){
const routerMixins = require("../mixins/router/index.js");
const Spinner = require("./spinner/Spinner.vue");
const i18n = require("../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticClass:"modal-container search full-height",staticStyle:{"overflow-y":"auto"},on:{"click":function($event){$event.stopPropagation();}}},[_c('span',{staticClass:"close",attrs:{"tabindex":"0","aria-label":"close"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")]),_v(" "),_c('div',{staticClass:"modal-header"},[_c('h2',[_v(_s(translate("SEARCH.SEARCH"))+": "+_s(path))])]),_v(" "),_c('div',{staticClass:"modal-body"},[_c('div',{class:errorClass},[(isError)?_c('label',[_v(_s(error))]):_e()]),_v(" "),(showSpinner)?_c('Spinner'):_e(),_v(" "),(showAppMenu)?_c('ul',{staticClass:"dropdown-menu",staticStyle:{"cursor":"pointer","display":"block","min-width":"100px","padding":"10px"},style:({top:menutop, left:menuleft}),attrs:{"id":"appMenu"}},_l((availableApps),function(app){return _c('li',{staticStyle:{"padding-bottom":"5px","color":"black"},attrs:{"id":"open-in-app"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return appOpen($event, app.name, app.path, app.file)},"click":function($event){return appOpen($event, app.name, app.path, app.file)}}},[_v(_s(app.contextMenuText))])}),0):_e(),_v(" "),_c('div',{staticClass:"flex-container"},[_c('div',{staticClass:"flex-item search",staticStyle:{"margin":"10px","border-width":"1px","border-style":"solid"}},[_c('select',{directives:[{name:"model",rawName:"v-model",value:(selectedSearchType),expression:"selectedSearchType"}],on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); selectedSearchType=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},[_c('option',{attrs:{"value":"contains"}},[_v(_s(translate("SEARCH.NAME.CONTAINS")))]),_v(" "),_c('option',{attrs:{"value":"textContents"}},[_v(_s(translate("SEARCH.TEXT.CONTAINS")))]),_v(" "),_c('option',{attrs:{"value":"modifiedAfter"}},[_v(_s(translate("SEARCH.MODIFIED.AFTER")))]),_v(" "),_c('option',{attrs:{"value":"modifiedBefore"}},[_v(_s(translate("SEARCH.MODIFIED.BEFORE")))]),_v(" "),_c('option',{attrs:{"value":"createdAfter"}},[_v(_s(translate("SEARCH.CREATED.AFTER")))]),_v(" "),_c('option',{attrs:{"value":"createdBefore"}},[_v(_s(translate("SEARCH.CREATED.BEFORE")))]),_v(" "),_c('option',{attrs:{"value":"fileSizeGreaterThan"}},[_v(_s(translate("SEARCH.SIZE.GREATER")))]),_v(" "),_c('option',{attrs:{"value":"fileSizeLessThan"}},[_v(_s(translate("SEARCH.SIZE.LESS")))]),_v(" "),_c('option',{attrs:{"value":"mimeType"}},[_v(_s(translate("SEARCH.TYPE")))])])]),_v(" "),(selectedSearchType=='modifiedAfter' || selectedSearchType=='modifiedBefore' || selectedSearchType=='createdAfter' || selectedSearchType=='createdBefore')?_c('div',{staticClass:"flex-item",staticStyle:{"margin":"10px"}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(selectedDate),expression:"selectedDate"}],attrs:{"type":"date","min":"1900-01-01","max":"3000-01-01","maxlength":"12"},domProps:{"value":(selectedDate)},on:{"input":function($event){if($event.target.composing)return;selectedDate=$event.target.value}}})]):_e(),_v(" "),(selectedSearchType=='contains' || selectedSearchType=='textContents')?_c('div',{staticClass:"flex-item",staticStyle:{"margin":"10px"}},[_c('input',{directives:[{name:"focus",rawName:"v-focus"},{name:"model",rawName:"v-model",value:(searchContains),expression:"searchContains"}],staticStyle:{"width":"200px"},attrs:{"placeholder":"","type":"text","maxlength":"60"},domProps:{"value":(searchContains)},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return search($event)},"input":function($event){if($event.target.composing)return;searchContains=$event.target.value}}})]):_e(),_v(" "),(selectedSearchType=='fileSizeGreaterThan' || selectedSearchType=='fileSizeLessThan')?_c('div',{staticClass:"flex-item",staticStyle:{"margin":"10px"}},[_c('input',{directives:[{name:"focus",rawName:"v-focus"},{name:"model",rawName:"v-model",value:(searchFileSize),expression:"searchFileSize"}],staticStyle:{"width":"100px"},attrs:{"placeholder":"1","type":"number","min":"1"},domProps:{"value":(searchFileSize)},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return search($event)},"input":function($event){if($event.target.composing)return;searchFileSize=$event.target.value}}})]):_e(),_v(" "),(selectedSearchType=='fileSizeGreaterThan' || selectedSearchType=='fileSizeLessThan')?_c('div',{staticClass:"flex-item",staticStyle:{"margin":"10px"}},[_c('select',{directives:[{name:"model",rawName:"v-model",value:(selectedSizeUnit),expression:"selectedSizeUnit"}],on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); selectedSizeUnit=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},[_c('option',{attrs:{"value":"K"}},[_v("KiB")]),_v(" "),_c('option',{attrs:{"value":"M"}},[_v("MiB")]),_v(" "),_c('option',{attrs:{"value":"G"}},[_v("GiB")])])]):_e(),_v(" "),(selectedSearchType=='mimeType')?_c('div',{staticClass:"flex-item",staticStyle:{"margin":"10px"}},[_c('select',{directives:[{name:"model",rawName:"v-model",value:(selectedMimeType),expression:"selectedMimeType"}],on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); selectedMimeType=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},[_c('option',{attrs:{"value":"audio"}},[_v(_s(translate("SEARCH.AUDIO")))]),_v(" "),_c('option',{attrs:{"value":"image"}},[_v(_s(translate("SEARCH.IMAGE")))]),_v(" "),_c('option',{attrs:{"value":"application/pdf"}},[_v("PDF")]),_v(" "),_c('option',{attrs:{"value":"text/plain"}},[_v(_s(translate("SEARCH.TEXT")))]),_v(" "),_c('option',{attrs:{"value":"video"}},[_v(_s(translate("SEARCH.VIDEO")))])])]):_e(),_v(" "),_c('div',{staticClass:"flex-item",staticStyle:{"margin":"10px"}},[_c('button',{staticClass:"btn btn-success",attrs:{"id":"submit-search"},on:{"click":function($event){return search()}}},[_v(_s(translate("SEARCH.SEARCH")))])])])],1),_v(" "),_c('div',[_c('h3',[_v(_s(translate("SEARCH.RESULTS"))+": "+_s(matches.length))]),_v(" "),(showCancel)?_c('div',{staticStyle:{"margin":"10px"}},[_c('button',{staticClass:"btn btn-danger",on:{"click":function($event){return stopSearch()}}},[_v("Cancel Search")])]):_e(),_v(" "),(matches!=0)?_c('div',{staticClass:"table-responsive"},[_c('table',{staticClass:"table"},[_c('thead',[(matches!=0)?_c('tr',{staticStyle:{"cursor":"pointer"}},[_c('th',{on:{"click":function($event){return setSortBy('name')}}},[_v(_s(translate("DRIVE.NAME"))),(sortBy=='name')?_c('span',{class:['fas', normalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()]),_v(" "),_c('th',{on:{"click":function($event){return setSortBy('path')}}},[_v(_s(translate("SEARCH.DIR"))),(sortBy=='path')?_c('span',{class:['fas', normalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()]),_v(" "),_c('th',{on:{"click":function($event){return setSortBy('size')}}},[_v(_s(translate("DRIVE.SIZE"))),(sortBy=='size')?_c('span',{class:['fas', normalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()]),_v(" "),_c('th',{on:{"click":function($event){return setSortBy('modified')}}},[_v(_s(translate("DRIVE.MODIFIED"))+" "),(sortBy=='modified')?_c('span',{class:['fas', normalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()]),_v(" "),_c('th',{on:{"click":function($event){return setSortBy('created')}}},[_v(_s(translate("DRIVE.CREATED"))),(sortBy=='created')?_c('span',{class:['fas', normalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()])]):_e()]),_v(" "),_c('tbody',_l((sortedItems),function(match){return _c('tr',[_c('td',{staticStyle:{"cursor":"pointer"},on:{"click":function($event){return view($event, match)}}},[_v(_s(match.name))]),_v(" "),_c('td',{staticStyle:{"cursor":"pointer"},on:{"click":function($event){return navigateTo(match)}}},[_v("\n                                "+_s(match.path)+"\n                            ")]),_v(" "),_c('td',[_v("\n                                "+_s(match.size)+"\n                            ")]),_v(" "),_c('td',[_v("\n                                "+_s(formatDateTime(match.lastModified))+"\n                            ")]),_v(" "),_c('td',[_v("\n                                "+_s(formatDateTime(match.created))+"\n                            ")])])}),0)])]):_e()])])])])}},	components: {
	    Spinner
	},
    mixins:[i18n, routerMixins],
    data: function() {
        return {
            searchContains: "",
            showSpinner: false,
            walkCounter: 0,
            matches: [],
            selectedSearchType: "contains",
            selectedSizeUnit: "M",
            selectedMimeType: "video",
            selectedDate: "",
            searchFileSize : "1",
            error: "",
            isError:false,
            errorClass: "",
            sortBy: "name",
            normalSortOrder: true,
            cancelSearch: false,
	        showCancel: false,
            availableApps: [],
            showAppMenu: false,
            menutop:"",
            menuleft:"",
        }
    },
    props: ['path', 'navigateToAction'],
    created: function() {
        this.selectedDate = new Date().toISOString().split('T')[0];
    },
    methods: {
	walk: function(file, path, searchTerm, searchTest) {
        let searchButton = document.getElementById("submit-search");
        if (this.cancelSearch) {
            this.showSpinner = false;
            searchButton.disabled = false;
            return;
        }
        let fileProperties = file.getFileProperties();
        if (fileProperties.isHidden)
            return;
        let that = this;
        if (fileProperties.isDirectory) {
            that.walkCounter++;
            if (that.walkCounter == 1) {
                that.showSpinner = true;
                searchButton.disabled = true;
            }
            file.getChildren(this.context.crypto.hasher, this.context.network).thenCompose(function(children) {
                let arr = children.toArray();
                let size = arr.length;
                if (size == 0) {
                    that.walkCounter--;
                    if (that.walkCounter == 0) {
                        that.showSpinner = false;
			that.showCancel = false;
                        searchButton.disabled = false;
                    }
                }
                arr.forEach(function(child, index){
                    let newPath = child.getFileProperties().isDirectory ? path + "/" + child.getFileProperties().name : path;
                    that.walk(child, newPath, searchTerm, searchTest);
                    if (index == size - 1) {
                        that.walkCounter--;
                        if (that.walkCounter == 0) {
                            that.showSpinner = false;
			    that.showCancel = false;
                            searchButton.disabled = false;
                        }
                    }
                });
            });
        }
        searchTest(file, path, searchTerm); //could be file or dir
    },
    getFileSize: function(props) {
            var low = props.sizeLow();
            if (low < 0) low = low + Math.pow(2, 32);
            return low + (props.sizeHigh() * Math.pow(2, 32));
    },
    addMatch: function(props, path) {
        let pathStr = props.isDirectory ? path.substring(0, path.lastIndexOf("/")): path;
        let entry = {
            path: pathStr,
            name: props.name,
            size: props.isDirectory ? "" : this.getFileSize(props),
            lastModified: props.modified,
            created: props.created,
            isDirectory: props.isDirectory
        };
        this.matches.push(entry);
    },
    containsTest: function(file, path, searchTerm) {
        let props = file.getFileProperties();
        let filename = props.name;
        if (filename.toLowerCase().indexOf(searchTerm) > -1) {
            this.addMatch(props, path);
        }
    },
    textFileContainsTest: function(file, path, searchTerm) {
        let that = this;
        let props = file.getFileProperties();
        let mimeType = props.mimeType;
        if (mimeType.startsWith('text/')) {
            file.getInputStream(this.context.network,this.context.crypto,props.sizeHigh(),props.sizeLow(), r => {})
                .thenCompose(function (reader) {
                    let size = that.getFileSize(props)
                    let maxBlockSize = 1024 * 1024 * 1;
                    var blockSize = size > maxBlockSize ? maxBlockSize : size;
                    let pump = (previousBlockSnippet) => {
                        if (blockSize > 0) {
                            var data = convertToByteArray(new Uint8Array(blockSize))
                            reader.readIntoArray(data, 0, blockSize).thenApply(function (read) {
                                size = size - read.value_0;
                                blockSize = size > maxBlockSize ? maxBlockSize : size;
                                let textBlock = previousBlockSnippet + new TextDecoder().decode(data);
                                if(textBlock.search(new RegExp(searchTerm, "i")) != -1){
                                    that.addMatch(props, path);
                                } else {
                                    let limit = Math.max(0, textBlock.length - (searchTerm.length -1));
                                    setTimeout(() => { pump(textBlock.substring(limit));});
                                }
                            })
                        }
                    }
                    pump("");
                });
        }
    },
    modifiedAfterTest: function(file, path, searchTerm) {
        let props = file.getFileProperties();
        let modified = props.modified.date;
        let jsDate = new Date(modified.year, modified.month -1, modified.day, 0, 0, 0, 0);
        if (jsDate.getTime() > (searchTerm.getTime() + (1000 * 60 * 60 * 24) - 1)) {
            this.addMatch(props, path);
        }
    },
    modifiedBeforeTest: function(file, path, searchTerm) {
        let props = file.getFileProperties();
        let modified = props.modified.date;
        let jsDate = new Date(modified.year, modified.month -1, modified.day, 0, 0, 0, 0);
        if (jsDate.getTime() < searchTerm.getTime()) {
            this.addMatch(props, path);
        }
    },
    createdAfterTest: function(file, path, searchTerm) {
        let props = file.getFileProperties();
        let created = props.created.date;
        let jsDate = new Date(created.year, created.month -1, created.day, 0, 0, 0, 0);
        if (jsDate.getTime() > (searchTerm.getTime() + (1000 * 60 * 60 * 24) - 1)) {
            this.addMatch(props, path);
        }
    },
    createdBeforeTest: function(file, path, searchTerm) {
        let props = file.getFileProperties();
        let created = props.created.date;
        let jsDate = new Date(created.year, created.month -1, created.day, 0, 0, 0, 0);
        if (jsDate.getTime() < searchTerm.getTime()) {
            this.addMatch(props, path);
        }
    },
    fileSizeLessThanTest: function(file, path, searchTerm) {
        let props = file.getFileProperties();
        let size = this.getFileSize(props);
        if (size < searchTerm) {
            this.addMatch(props, path);
        }
    },
    fileSizeGreaterThanTest: function(file, path, searchTerm) {
        let props = file.getFileProperties();
        let size = this.getFileSize(props);
        if (size > searchTerm) {
            this.addMatch(props, path);
        }
    },
    mimeTypeTest: function(file, path, searchTerm) {
        let props = file.getFileProperties();
        let mimeType = props.mimeType;
        if (mimeType.startsWith(searchTerm)) {
            this.addMatch(props, path);
        }
    },
    extractDate: function(searchTerm) {
        if (searchTerm.length == 0) {
            this.isError = true;
            this.error = "Invalid date!";
            this.errorClass = "has-error has-feedback alert alert-danger";
            return;
        }
        let searchTermDate = new Date(Date.parse(searchTerm));
        let jsDate = new Date(searchTermDate.getFullYear(), searchTermDate.getMonth(), searchTermDate.getDate(),
            0, 0, 0, 0);
        return jsDate;
    },
    extractFileSize: function(searchTerm) {
        if (searchTerm.length == 0) {
            this.isError = true;
            this.error = "Missing file size!";
            this.errorClass = "has-error has-feedback alert alert-danger";
            return;
        }
        let num = parseInt(searchTerm);
        if (num.toString() == "NaN") {
            this.isError = true;
            this.error = "Invalid file size!";
            this.errorClass = "has-error has-feedback alert alert-danger";
            return;
        } else if (num < 0) {
            this.isError = true;
            this.error = "Negative file size!";
            this.errorClass = "has-error has-feedback alert alert-danger";
            return;
        }
        if (this.selectedSizeUnit == 'K')
            return Number(searchTerm) * 1024;
        if (this.selectedSizeUnit == 'M')
            return Number(searchTerm) * 1024 * 1024;
        if (this.selectedSizeUnit == 'G')
            return Number(searchTerm) * 1024 * 1024 * 1024;
    },
	search: function() {
	    this.showCancel = true;
            this.cancelSearch = false;
            this.isError = false;
            this.error = "";
            this.errorClass = "";

            var that = this;
            let path = this.path == '' ? '/' + this.context.username : this.path;
            this.matches = [];
            this.walkCounter = 0;
            let filterFunction = null;
	        let searchTerm = null;
            if(this.selectedSearchType == "contains") {
	            searchTerm = this.searchContains.trim().toLowerCase();
                if (searchTerm.length == 0) {
                    this.isError = true;
                    this.error = "Missing text!";
                    this.errorClass = "has-error has-feedback alert alert-danger";
                    return;
                }
                filterFunction = this.containsTest;
            } else if(this.selectedSearchType == "textContents") {
	            searchTerm = this.searchContains.trim().toLowerCase();
                if (searchTerm.length == 0) {
                    this.isError = true;
                    this.error = "Missing text!";
                    this.errorClass = "has-error has-feedback alert alert-danger";
                    return;
                }
                filterFunction = this.textFileContainsTest;
            } else if(this.selectedSearchType == "modifiedAfter") {
                filterFunction = this.modifiedAfterTest;
                searchTerm = this.extractDate(this.selectedDate.trim());
            } else if(this.selectedSearchType == "modifiedBefore") {
                filterFunction = this.modifiedBeforeTest;
                searchTerm = this.extractDate(this.selectedDate.trim());
            } else if(this.selectedSearchType == "createdAfter") {
                filterFunction = this.createdAfterTest;
                searchTerm = this.extractDate(this.selectedDate.trim());
            } else if(this.selectedSearchType == "createdBefore") {
                filterFunction = this.createdBeforeTest;
                searchTerm = this.extractDate(this.selectedDate.trim());
            } else if(this.selectedSearchType == "fileSizeGreaterThan") {
                filterFunction = this.fileSizeGreaterThanTest;
                searchTerm = this.extractFileSize(this.searchFileSize.trim());
            } else if(this.selectedSearchType == "fileSizeLessThan") {
                filterFunction = this.fileSizeLessThanTest;
                searchTerm = this.extractFileSize(this.searchFileSize.trim());
            } else if(this.selectedSearchType == "mimeType") {
                filterFunction = this.mimeTypeTest;
                searchTerm = this.selectedMimeType.trim();
            }
            if (searchTerm == null) {
                return;
            }
            this.context.getByPath(path).thenApply(function(dir){
                that.walk(dir.get(), path, searchTerm, filterFunction);
            }).exceptionally(function(throwable) {
                that.showSpinner = false;
                let searchButton = document.getElementById("submit-search");
                searchButton.disabled = false;
                throwable.printStackTrace();
            });

        },
        stopSearch: function () {
            this.cancelSearch = true;
	    this.showCancel = false;
        },
        view: function (event, entry) {
            if (entry.isDirectory) {
                this.close();
                this.navigateToAction(entry.path + "/" + entry.name);
            } else {
                this.viewAction(event, entry);
            }
        },
        viewAction: function (event, entry) {
            let that = this;
            let fullPath = entry.path + (entry.isDirectory ? "" : '/' + entry.name);
            this.findFile(fullPath).thenApply(file => {
                if (file != null) {
                    let userApps = this.availableAppsForFile(file);
                    let inbuiltApps = this.getInbuiltApps(file);
                    if (userApps.length == 0) {
                        if (inbuiltApps.length == 1) {
                            if (inbuiltApps[0].name == 'hex') {
                                that.openFileOrDir("Drive", entry.path, {filename:""});
                            } else {
                                this.openFileOrDir(inbuiltApps[0].name, entry.path, {filename:file.isDirectory() ? "" : file.getName()})
                            }
                        } else {
                            this.showAppContextMenu(event, inbuiltApps, userApps, entry.path, file);
                        }
                    } else {
                        this.showAppContextMenu(event, inbuiltApps, userApps, entry.path, file);
                    }
                }
            });
        },
        findFile: function(filePath) {
            let that = this;
            var future = peergos.shared.util.Futures.incomplete();
            this.context.getByPath(filePath).thenApply(function(fileOpt){
                if (fileOpt.ref == null) {
                    future.complete(null);
                } else {
                    let file = fileOpt.get();
                    const props = file.getFileProperties();
                    if (props.isHidden) {
                        future.complete(null);
                    } else {
                        future.complete(file);
                    }
                }
            }).exceptionally(function(throwable) {
                console.log(throwable.getMessage());
                future.complete(null);
            });
            return future;
        },
        appOpen(event, appName, path, file) {
            this.showAppMenu = false;
            event.stopPropagation();
            this.availableApps = [];
            this.openFileOrDir(appName, path, {filename:file.isDirectory() ? "" : file.getName()})
        },
        showAppContextMenu(event, inbuiltApps, userApps, path, file) {
            let appOptions = [];
            for(var i = 0; i < userApps.length; i++) {
                let app = userApps[i];
                let option = {'name': app.name, 'path': path, 'file': file, 'contextMenuText': app.contextMenuText};
                appOptions.push(option);
            }
            for(var i = 0; i < inbuiltApps.length; i++) {
                let app = inbuiltApps[i];
                let option = {'name': app.name, 'path': path, 'file': file, 'contextMenuText': app.contextMenuText};
                appOptions.push(option);
            }
            this.availableApps = appOptions;
            var pos = this.getPosition(event);
            Vue.nextTick(function() {
                var top = pos.y;
                var left = pos.x;
                this.menutop = top + 'px';
                this.menuleft = left + 'px';
            }.bind(this));
            this.showAppMenu = true;
            event.stopPropagation();
        },
        getPosition: function(e) {
            var posx = 0;
            var posy = 0;

            if (!e) var e = window.event;
            if (e.clientX || e.clientY) {
                posx = Math.max(0, e.clientX - 100); //todo remove arbitrary offset
                posy = Math.max(0, e.clientY - 150);
            }
            return {
                x: posx,
                y: posy
            }
        },
        navigateTo: function (entry) {
            this.close();
            this.navigateToAction(entry.path);
        },
        close: function () {
            this.$emit("hide-search");
        },
        setSortBy: function(prop) {
            if (this.sortBy == prop)
                this.normalSortOrder = !this.normalSortOrder;
            this.sortBy = prop;
        },
        formatDateTime: function(dateTime) {
            let date = new Date(dateTime.toString() + "+00:00");//adding UTC TZ in ISO_OFFSET_DATE_TIME ie 2021-12-03T10:25:30+00:00
            let formatted = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate()
                + ' ' + (date.getHours() < 10 ? '0' : '') + date.getHours()
                + ':' + (date.getMinutes() < 10 ? '0' : '') + date.getMinutes()
                + ':' + (date.getSeconds() < 10 ? '0' : '') + date.getSeconds();
            return formatted;
        }
    },
    computed:{
		...Vuex.mapState([
			'context',
            "sandboxedApps",
		]),
        sortedItems(){
            var sortBy = this.sortBy;
            var reverseOrder = ! this.normalSortOrder;
            if(sortBy == "name" || sortBy == "path") {
                return this.matches.sort(function (a, b) {
                    if (reverseOrder) {
                        return ('' + b.name).localeCompare(a.name);
                    } else {
                        return ('' + a.name).localeCompare(b.name);
                    }
                });
            } else if(this.sortBy == "modified") {
                return this.matches.sort(function (a, b) {
                    let aVal = a.lastModified;
                    let bVal = b.lastModified;
                    if (reverseOrder) {
                        return bVal.compareTo(aVal);
                    } else {
                        return aVal.compareTo(bVal);
                    }
                });
            } else if(this.sortBy == "created") {
                return this.matches.sort(function (a, b) {
                    let aVal = a.created;
                    let bVal = b.created;
                    if (reverseOrder) {
                        return bVal.compareTo(aVal);
                    } else {
                        return aVal.compareTo(bVal);
                    }
                });
            } else if(sortBy == "size") {
                return this.matches.sort(function (a, b) {
                    let aVal = reverseOrder ? b.size : a.size;
                    let bVal = reverseOrder ? a.size : b.size;
                    if (aVal > bVal) {
                        return 1;
                    } else if (aVal == bVal) {
                        return 0;
                    } else {
                        return -1;
                    }
                });
            }
        }
    }
}

},{ "../i18n/index.js": 11, "../mixins/router/index.js": 3, "./spinner/Spinner.vue": 16}], 103:[function(require,module,exports){
    const MessageBar = require("./MessageBar.vue");
    const ReplyToServerMessage = require("./ReplyToServerMessage.vue");

    module.exports = {
render: function() {with(this){return (conversationMonitors.length > 0)?_c('div',{staticClass:"messageholder"},[(showFeedbackForm)?_c('ReplyToServerMessage',{attrs:{"closeFeedbackForm":closeFeedbackForm,"loadMessageThread":loadMessageThread,"sendFeedback":sendFeedback,"sendMessage":sendMessage,"messageId":messageId}}):_e(),_v(" "),_l((conversationMonitors),function(message){return _c('MessageBar',{attrs:{"replyToMessage":replyToMessage,"dismissMessage":dismissMessage,"id":message.id,"date":message.sendTime,"contents":message.contents.length > 50
		   ? message.contents.substring(0, 47) + '...'
		   : message.contents}})})],2):_e()}},	components: {
		MessageBar,
                ReplyToServerMessage,
	},

	data() {
		return {
			showFeedbackForm: false,
		        messageMonitors: [],
			conversationMonitors: [],
		};
	},

	computed: {
		...Vuex.mapState([
			"isLoggedIn",
			"isDark",
			"context",
		]),
        },
        
        mounted() {
	    this.showPendingServerMessages();
	},
            
        methods: {
            showPendingServerMessages: function () {
		let context = this.context;
                if (context == null || context.username == null)
                    return;
                    
		let that = this;
		context
		    .getServerConversations()
		    .thenApply(function (conversations) {
			let allConversations = [];
			let conv = conversations.toArray();
			conv.forEach(function (conversation) {
			    let arr = conversation.messages.toArray();
			    let lastMessage = arr[arr.length - 1];
			    allConversations.push({
				id: lastMessage.id(),
				sendTime: lastMessage
				    .getSendTime()
				    .toString()
				    .replace("T", " "),
				contents: lastMessage.getContents(),
				previousMessageId:
				lastMessage.getPreviousMessageId(),
				from: lastMessage.getAuthor(),
				msg: lastMessage,
			    });
			    arr.forEach(function (message) {
				that.messageMonitors.push({
				    id: message.id(),
				    sendTime: message
					.getSendTime()
					.toString()
					.replace("T", " "),
				    contents: message.getContents(),
				    previousMessageId:
				    message.getPreviousMessageId(),
				    from: message.getAuthor(),
				    msg: message,
				});
			    });
			});
			if (allConversations.length > 0) {
			    Vue.nextTick(function () {
				allConversations.forEach(function (msg) {
				    that.conversationMonitors.push(msg);
				});
			    });
			}
		    })
		    .exceptionally(function (throwable) {
			throwable.printStackTrace();
		    });
	    },
            
	    popConversation: function (msgId) {
		if (msgId != null) {
		    for (var i = 0; i < this.conversationMonitors.length; i++) {
			let currentMessage = this.conversationMonitors[i];
			if (currentMessage.id == msgId) {
			    this.conversationMonitors.splice(i, 1);
			    break;
			}
		    }
		}
	    },
        loadMessageThread: function(msgId) {
            let messages = [];
            if (msgId == null) {
                return messages;
            }
            var finished = false;
            while (!finished) {
                let message = this.getMessage(msgId);
                if (message == null) {
                    break;
                }
                messages.push({id: message.id, sendTime: message.sendTime,
                    contents: message.contents, from: message.from, visible: false});
                if (message.previousMessageId == null || message.previousMessageId >= msgId) {
                    finished = true;
                }
                msgId = message.previousMessageId;
            }
            return messages.reverse();
        },
	    getMessage: function (msgId) {
		if (msgId != null) {
		    //linear scan
		    for (var i = 0; i < this.messageMonitors.length; i++) {
			let currentMessage = this.messageMonitors[i];
			if (currentMessage.id == msgId) {
			    return this.messageMonitors[i];
			}
		    }
		}
		return null;
	    },
            
	    replyToMessage: function (msgId) {
		if (this.showFeedbackForm) {
		    return;
		}
		this.messageId = msgId;
		this.showFeedbackForm = true;
	    },
            
	    dismissMessage: function (msgId) {
		if (this.showFeedbackForm) {
		    return;
		}
		this.messageId = null;
		if (msgId != null) {
		    let message = this.getMessage(msgId);
		    if (message != null) {
			let that = this;
			this.showSpinner = true;
			this.context
			    .dismissMessage(message.msg)
			    .thenApply((res) => {
				this.showSpinner = false;
				if (res) {
				    console.log("acknowledgement sent!");
				    that.popConversation(msgId);
				} else {
				    that.errorTitle = "Error acknowledging message";
				    that.errorBody = "";
				    that.showError = true;
				}
			    })
			    .exceptionally(function (throwable) {
				that.errorTitle = "Error acknowledging message";
				that.errorBody = throwable.getMessage();
				that.showError = true;
				that.showSpinner = false;
			    });
		    }
		}
	    },

            sendFeedback: function(contents) {
                this.showSpinner = true;
                let that = this;
                var maxContextSize = peergos.shared.user.ServerMessage.MAX_CONTENT_SIZE;
                var trimmedContents = contents.length > maxContextSize ? contents.substring(0, maxContextSize) : contents;
                this.context.sendFeedback(trimmedContents)
                    .thenApply(function(res) {
                        that.showSpinner = false;
                        if (res) {
                            console.log("Feedback submitted!");
                            that.closeFeedbackForm(null, false);
                        } else {
                            that.errorTitle = 'Error sending feedback';
                            that.errorBody = "";
                            that.showError = true;
                        }
                    }).exceptionally(function(throwable) {
                        that.errorTitle = 'Error sending feedback';
                        that.errorBody = throwable.getMessage();
                        that.showError = true;
                        that.showSpinner = false;
                    });
            },

            sendMessage: function(msgId, contents) {
                let that = this;
                let message = this.getMessage(msgId);
                if (message != null) {
                    this.showSpinner = true;
                    var maxContextSize = peergos.shared.user.ServerMessage.MAX_CONTENT_SIZE;
                    var trimmedContents = contents.length > maxContextSize ? contents.substring(0, maxContextSize) : contents;
                    this.context.sendReply(message.msg, trimmedContents)
                        .thenApply(function(res) {
                            that.showSpinner = false;
                            if (res) {
                                console.log("message sent!");
                                that.closeFeedbackForm(msgId, true);
                            } else {
                                that.errorTitle = 'Error sending message';
                                that.errorBody = "";
                                that.showError = true;
                            }
                        }).exceptionally(function(throwable) {
                            that.errorTitle = 'Error sending message';
                            that.errorBody = throwable.getMessage();
                            that.showError = true;
                            that.showSpinner = false;
                        });
                }
            },

            closeFeedbackForm: function(msgId, submitted) {
                let submittedMsgId = submitted ? msgId : null;
                this.showFeedbackForm = false;
                this.messageId = null;
                this.popConversation(submittedMsgId);
            },
	},
    }

},{ "./MessageBar.vue": 101, "./ReplyToServerMessage.vue": 102}], 51:[function(require,module,exports){
const AppButton = require("AppButton.vue");
const Bip39 = require('../mixins/password/bip-0039-english.json');
const BannedUsernames = require('../mixins/password/bannedUsernames.json');
const FormPassword = require("./form/FormPassword.vue");
const UriDecoder = require('../mixins/uridecoder/index.js');
const sandboxMixin = require("../mixins/sandbox/index.js");
const i18n = require("../i18n/index.js");
const Continue = require("Continue.vue");
module.exports = {
render: function() {with(this){return _c('div',{staticClass:"app-signup"},[(showSignup())?[_c('input',{directives:[{name:"model",rawName:"v-model",value:(username),expression:"username"}],ref:"username",attrs:{"type":"text","autofocus":"","name":"username","placeholder":translate('SIGNUP.USERNAME')},domProps:{"value":(username)},on:{"input":[function($event){if($event.target.composing)return;username=$event.target.value},(val) => (username = username.toLowerCase())]}}),_v(" "),_c('AppButton',{staticClass:"generate-password",attrs:{"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return generatePassword()}}},[_v("\n\t\t\t\t"+_s(translate("SIGNUP.GENERATE"))+"\n\t\t\t")]),_v(" "),_c('FormPassword',{attrs:{"passwordIsVisible":showPasswords,"placeholder":translate('SIGNUP.CLICKGEN'),"firstOfTwo":""},model:{value:(password),callback:function ($$v) {password=$$v},expression:"password"}}),_v(" "),_c('FormPassword',{attrs:{"passwordIsVisible":showPasswords,"placeholder":translate('SIGNUP.REENTER')},nativeOn:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return signup()}},model:{value:(password2),callback:function ($$v) {password2=$$v},expression:"password2"}}),_v(" "),_c('label',{staticClass:"checkbox__group"},[_v("\n\t\t\t\t"+_s(translate("SIGNUP.AGREE"))+"\n\t\t\t\t"),_c('input',{directives:[{name:"model",rawName:"v-model",value:(safePassword),expression:"safePassword"}],attrs:{"type":"checkbox","name":"safePassword"},domProps:{"checked":Array.isArray(safePassword)?_i(safePassword,null)>-1:(safePassword)},on:{"change":function($event){var $$a=safePassword,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(safePassword=$$a.concat([$$v]))}else{$$i>-1&&(safePassword=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{safePassword=$$c}}}}),_v(" "),_c('span',{staticClass:"checkmark"})]),_v(" "),_c('label',{staticClass:"checkbox__group"},[_v("\n\t\t\t\t"+_s(translate("SIGNUP.ACCEPT"))+" "),_c('a',{attrs:{"href":"/terms.html","target":"_blank","rel":"noopener noreferrer"}},[_v(_s(translate("SIGNUP.TERMS")))]),_v(" "+_s(translate("SIGNUP.AND"))+" "),_c('a',{attrs:{"href":"/privacy.html","target":"_blank","rel":"noopener noreferrer"}},[_v(_s(translate("SIGNUP.POLICY")))]),_v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(tosAccepted),expression:"tosAccepted"}],attrs:{"type":"checkbox","name":"tosAccepted"},domProps:{"checked":Array.isArray(tosAccepted)?_i(tosAccepted,null)>-1:(tosAccepted)},on:{"change":function($event){var $$a=tosAccepted,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(tosAccepted=$$a.concat([$$v]))}else{$$i>-1&&(tosAccepted=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{tosAccepted=$$c}}}}),_v(" "),_c('span',{staticClass:"checkmark"})]),_v(" "),_c('AppButton',{staticClass:"signup",attrs:{"type":"primary","block":"","accent":"","icon":"arrow-right"},nativeOn:{"click":function($event){return signup()}}},[_v("\n\t\t\t\t"+_s(signupButtonText)+"\n\t\t\t")])]:(showPaidPlans())?[_c('div',{staticClass:"options_container"},[_c('div',{staticClass:"button-group-container"},[_c('div',{staticClass:"priceslider",attrs:{"data-select":"billing"}},[_c('label',{staticClass:"entry",on:{"click":function($event){return setMonthly()}}},[_v("Monthly"),_c('input',{attrs:{"type":"radio","name":"billing","value":"monthly"}})]),_v(" "),_c('label',{staticClass:"entry",on:{"click":function($event){return setAnnual()}}},[_v("Yearly"),_c('input',{attrs:{"type":"radio","name":"billing","value":"yearly"},domProps:{"checked":annual}})])])]),_v(" "),_c('div',{staticClass:"card__meta options"},[_c('h3',[_v("Pro Account")]),_v(" "),_c('ul',[_c('li',[_v("200 GB "+_s(translate("SIGNUP.HYPER")))]),_v(" "),_c('li',[_v(_s(translate("SIGNUP.BUNDLED")))]),_v(" "),_c('li',[_v("£"+_s(price1()))])]),_v(" "),_c('AppButton',{attrs:{"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return setPlan(200000000000)}}},[_v("Select Pro")])],1),_v(" "),_c('div',{staticClass:"card__meta options"},[_c('h3',[_v("Visionary Account")]),_v(" "),_c('ul',[_c('li',[_v("1000 GB "+_s(translate("SIGNUP.HYPER")))]),_v(" "),_c('li',[_v(_s(translate("SIGNUP.BUNDLED")))]),_v(" "),_c('li',[_v("£"+_s(price2()))])]),_v(" "),_c('AppButton',{attrs:{"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return setPlan(1000000000000)}}},[_v("Select Visionary")])],1),_v(" "),_c('div',{staticClass:"card__meta options"},[_c('h3',[_v("Pioneer Account")]),_v(" "),_c('ul',[_c('li',[_v("3000 GB "+_s(translate("SIGNUP.HYPER")))]),_v(" "),_c('li',[_v(_s(translate("SIGNUP.BUNDLED")))]),_v(" "),_c('li',[_v("£"+_s(price3()))])]),_v(" "),_c('AppButton',{attrs:{"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return setPlan(3000000000000)}}},[_v("Select Pioneer")])],1),_v(" "),_c('div',{staticClass:"card__meta options"},[_c('h3',[_v(_s(translate("SIGNUP.TRYTITLE")))]),_v(" "),_c('label',[_c('u',[_c('a',{attrs:{"href":"https://peergos-demo.net/?signup=true","target":"_blank"}},[_v(_s(translate("SIGNUP.TRY")))])]),_v(".\n                                ")])])])]:(showSignupWarning)?[_c('h2',[_v("This server is currently not accepting signups")]),_v(" "),_m(0)]:[_c('h2',[_v("This server is currently not accepting signups")]),_v(" "),_c('p',[_v("Join the waiting list to be notified when there are more places.")]),_v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(email),expression:"email"}],attrs:{"type":"text","name":"email","placeholder":"Email"},domProps:{"value":(email)},on:{"input":function($event){if($event.target.composing)return;email=$event.target.value}}}),_v(" "),_c('AppButton',{staticClass:"waiting-list",attrs:{"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return addToWaitList()}}},[_v("\n\t\t\t\tJoin waiting list\n\t\t\t")])],_v(" "),(showContinue)?_c('continue',{attrs:{"message":continue_message,"body":continue_body,"ok_func":continue_func},on:{"hide-continue":function($event){showContinue = false}}}):_e()],2)}},staticRenderFns: [function() {with(this){return _c('strong',[_v("Please sign up here first: "),_c('br'),_v(" "),_c('a',{staticClass:"line",attrs:{"href":"https://peergos.net?signup=true"}},[_v("https://peergos.net?signup=true")]),_v(".")])}},],    components: {
        AppButton,
	    FormPassword,
        Continue,
    },

    mixins:[UriDecoder, sandboxMixin, i18n],

    props: {
	token: {
	    type: String,
	    default: ''
	},
    },

    data() {
	return {
	    username: '',
	    password: '',
	    password2: '',
	    email: '',
            annual: true,
            desiredQuota: 0,
            showPasswords: false,
	    acceptingFreeSignups: true,
            acceptingPaidSignups: false,
	    tosAccepted:false,
	    safePassword:false,
            showContinue: false,
            continue_message: "Add a payment card",
            continue_body: "Continue to our payment processor to enter your card details",
            continue_func: function(){},
            cardFuture: null,
            showSignupWarning: false,
	};
    },

    computed: {
	...Vuex.mapState([
	    'crypto',
	    'network'
	]),
        signupButtonText() {
            return this.desiredQuota > 0 ? this.translate("SIGNUP.SIGNUPPAID") : this.translate("SIGNUP.SIGNUPFREE");
        },
    },
    mounted() {
	this.$refs.username.focus()
	let that = this;
	this.network.instanceAdmin.acceptingSignups().thenApply(function(res) {
	    if (that.token.length > 0) return;
	    that.acceptingFreeSignups = res.free;
            that.acceptingPaidSignups = res.paid;
            if (!res.free && window.location.hostname == "localhost")
               that.showSignupWarning = true;
	    console.log("accepting signups - free: " + res.free + ", paid: " + res.paid);
	});
    },

    methods: {
	...Vuex.mapActions([
	    'updateSocial',
	    'updateUsage',
	    'updatePayment'
	]),
        setMonthly() {
            this.annual = false;
        },
        setAnnual() {
            this.annual = true;
        },
        price1() {
            return (this.annual ? 3 : 4) + " / " + this.translate("SIGNUP.MONTH") + ", " + (this.annual ? this.translate("SIGNUP.BILL.YEARLY") : this.translate("SIGNUP.BILL.MONTHLY"));
        },
        price2() {
            return (this.annual ? 8 : 10) + " / " + this.translate("SIGNUP.MONTH") + ", " + (this.annual ? this.translate("SIGNUP.BILL.YEARLY") : this.translate("SIGNUP.BILL.MONTHLY"));
        },
        price3() {
            return (this.annual ? 20 : 25) + " / " + this.translate("SIGNUP.MONTH") + ", " + (this.annual ? this.translate("SIGNUP.BILL.YEARLY") : this.translate("SIGNUP.BILL.MONTHLY"));
        },
        showPaidPlans() {
            return this.token.length == 0 && this.acceptingPaidSignups && this.desiredQuota == 0;
        },
	showSignup() {
            return this.token.length > 0 || this.acceptingFreeSignups || this.desiredQuota > 0;
        },
	setPlan(quotaBytes) {
            this.desiredQuota = quotaBytes;
        },
	lowercaseUsername(){
	    this.username.toLowerCase()
	},
	addToWaitList() {
	    var that = this;
	    let emailRegEx = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,24}))$/ ;
	    if(!emailRegEx.test(that.email)) {
		that.$toast.error('Invalid email.',{timeout:false})
                return
	    }
	    this.network.instanceAdmin.addToWaitList(that.email).thenApply(function(res) {
		that.email='';
		that.$toast.info("Congratulations, you have joined the waiting list. We'll be in touch as soon as a place is available.")
	    });

	},
	generatePassword() {
	    let bytes = nacl.randomBytes(16);
	    let wordIndices = [];
	    for (var i=0; i < 7; i++)
		wordIndices[i] = bytes[2*i]*8 + (bytes[2*i + 1] & 7);
	    let password = wordIndices.map(j => Bip39[j]).join("-");
	    this.password = password;
            this.showPasswords = true;
        },
        startAddCardListener(future) {
            var that = this;
            this.currentFocusFunction = function(event) {
                that.$toast.info('Completing signup', {id:'signup', timeout:false})
                window.removeEventListener("focus", that.currentFocusFunction);
                future.complete(new peergos.shared.util.Plan(that.desiredQuota,  that.annual))
            };
	    window.addEventListener("focus", this.currentFocusFunction, false);
	},
        confirmAddCard() {
            this.continue_func = this.addCard;
            this.showContinue = true;
        },
        addCard() {
            //  open payment card page in new tab
            let link = document.createElement('a')
            let click = new MouseEvent('click')
            link.target = "_blank";
            link.href = this.paymentUrl;
            link.dispatchEvent(click);
            this.startAddCardListener(this.cardFuture);
            this.$toast.info('Opening payment provider', {id:'signup', timeout:false})
        },
        addPaymentCard(props) {
            this.paymentUrl = props.getUrl() + "&username=" + this.username + "&client_secret=" + props.getClientSecret();
            this.cardFuture = peergos.shared.util.Futures.incomplete();
            this.confirmAddCard();
            return this.cardFuture;
        },
        signup() {
            const creationStart = Date.now();
            const that = this;

            if(!that.safePassword) {
		this.$toast.error('You must accept the password safety warning', {id:'signup'})
	    } else if (!that.tosAccepted) {
		this.$toast.error('You must accept the Terms of Service',{id:'signup'})
            } else if (that.password != that.password2) {
		this.$toast.error('Passwords do not match!',{id:'signup'})
	    } else if (that.password == '') {
		this.$toast.error('Please generate your password',{id:'signup'})
            } else {
                let usernameRegEx = /^[a-z0-9](?:[a-z0-9]|[-](?=[a-z0-9])){0,31}$/;

		if(!usernameRegEx.test(that.username)) {
		    that.$toast.error('Invalid username. Usernames must consist of between 1 and 32 characters, containing only digits, lowercase letters and hyphen. They also cannot have two consecutive hyphens, or start or end with a hyphen.',{id:'signup',timeout:false})
                } else if (BannedUsernames.includes(that.username)) {
		    that.$toast.error(`Banned username: ${that.username}`,{id:'signup', timeout:false})
                } else {
                    that.$toast.info('Signing up...', {id:'signup', timeout:false})
                    var addCard;
                    if (this.acceptingPaidSignups && this.token.length == 0) {
                        addCard = java.util.Optional.of(props => that.addPaymentCard(props));
                    } else {
                        addCard = java.util.Optional.empty();
                    }
                    let idKey = that.username + "$id";
                    let id = sessionStorage.getItem(idKey);
                    let idOpt = id == null ? java.util.Optional.empty() : java.util.Optional.of(id);
                    let idStore = (idVal) => sessionStorage.setItem(idKey, idVal);
                    return peergos.shared.user.UserContext.signUp(
			that.username,
			that.password,
			that.token,
			idOpt,
			{ accept: (x) => idStore(x) },
                        addCard,
			that.network,
			that.crypto,
			{"accept" : x => that.$toast.info(x, {id:'signup', timeout:false})}
		    ).thenApply(function(context) {
            		    sessionStorage.removeItem(idKey);
                        that.$store.commit('SET_CONTEXT', context);
                        that.$store.commit('USER_LOGIN', true);
			that.installDefaultApp().thenApply(function(props) {
                            that.initSandboxedApps().thenApply(function(res) {
                                that.$store.commit('CURRENT_VIEW', 'Drive');
                                that.$store.commit('CURRENT_MODAL', 'ModalTour');
                                that.updatePayment()
                                that.updateUsage()
                                console.log("Signing in/up took " + (Date.now()-creationStart)+" mS from function call");
                                that.$toast.dismiss('signup');
                            });
                        });
                    }).exceptionally(function(throwable) {
                        that.$toast.error(that.uriDecode(throwable.getMessage()),{timeout:false, id: 'signup'})
                    });
                }
            }
		},
    }
};

},{ "../i18n/index.js": 11, "../mixins/password/bannedUsernames.json": 47, "../mixins/password/bip-0039-english.json": 28, "../mixins/sandbox/index.js": 49, "../mixins/uridecoder/index.js": 27, "./form/FormPassword.vue": 30, "AppButton.vue": 2, "Continue.vue": 50}], 71:[function(require,module,exports){
const Admin = require("./admin/Admin.vue")
const AppButton = require("AppButton.vue");
const AppDropdown = require("./AppDropdown.vue");
const AppIcon = require("AppIcon.vue");
const AppPrompt = require("./prompt/AppPrompt.vue");
const Spinner = require("./spinner/Spinner.vue");
const i18n = require("../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('nav',{staticClass:"user-settings"},[(showSettingsSpinner)?_c('Spinner'):_e(),_v(" "),(showPrompt)?_c('AppPrompt',{attrs:{"message":prompt_message,"placeholder":prompt_placeholder,"max_input_size":prompt_max_input_size,"value":prompt_value,"consumer_func":prompt_consumer_func,"action":prompt_action},on:{"hide-prompt":function($event){return closePrompt()}}}):_e(),_v(" "),(isLoggedIn)?_c('AppDropdown',{attrs:{"aria-expanded":"true","aria-label":"settings"},scopedSlots:_u([{key:"trigger",fn:function(){return [_c('div',{staticClass:"drive-user"},[_c('span',{staticClass:"mobile-hidden"},[_v(_s(context.username))]),_v(" "),(profileImage)?_c('img',{staticClass:"cover",attrs:{"src":profileImage,"alt":"profile"}}):_c('AppIcon',{staticClass:"cover",attrs:{"icon":"user--48"}})],1)]},proxy:true}],null,false,1164349991)},[_v(" "),_c('ul',{attrs:{"aria-labelledby":"logoutButton"}},[(isAdmin)?_c('li',{on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return showAdminPanel()},"click":function($event){return showAdminPanel()}}},[_v("\n\t\t\t\t\t"+_s(translate("SETTINGS.ADMIN"))+"\n\t\t\t\t")]):_e(),_v(" "),_c('li',{on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return showRequestStorage()},"click":function($event){return showRequestStorage()}}},[_v("\n\t\t\t\t\t"+_s(translate("SETTINGS.ACCOUNT"))+"\n\t\t\t\t")]),_v(" "),_c('li',{staticClass:"divider"}),_v(" "),_c('li',{on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return showProfile()},"click":function($event){return showProfile()}}},[_v("\n\t\t\t\t\t"+_s(translate("SETTINGS.PROFILE"))+"\n\t\t\t\t")]),_v(" "),_c('li',{on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return showFeedback()},"click":function($event){return showFeedback()}}},[_v("\n\t\t\t\t\t"+_s(translate("SETTINGS.FEEDBACK"))+"\n\t\t\t\t")]),_v(" "),_c('li',{on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return showTour()},"click":function($event){return showTour()}}},[_v("\n\t\t\t\t\t"+_s(translate("SETTINGS.TOUR"))+"\n\t\t\t\t")]),_v(" "),_c('li',{on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return launchHelp()},"click":function($event){return launchHelp()}}},[_v("\n\t\t\t\t\t"+_s(translate("SETTINGS.HELP"))+"\n\t\t\t\t")]),_v(" "),_c('li',{on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return showAuthenticationScreen()},"click":function($event){return showAuthenticationScreen()}}},[_v("\n\t\t\t\t\t"+_s(translate("SETTINGS.AUTH"))+"\n\t\t\t\t")]),_v(" "),_c('li',{on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return showChangePassword()},"click":function($event){return showChangePassword()}}},[_v("\n\t\t\t\t\t"+_s(translate("SETTINGS.PASS"))+"\n\t\t\t\t")]),_v(" "),_c('li',{on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return cleanupFailedUploads()},"click":function($event){return cleanupFailedUploads()}}},[_v("\n                    "+_s(translate("SETTINGS.CLEANUP"))+"\n                ")]),_v(" "),_c('li',{on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return modifyCacheSize()},"click":function($event){return modifyCacheSize()}}},[_v("\n                    "+_s(translate("SETTINGS.CACHE"))+"\n                ")]),_v(" "),_c('li',{on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return showViewAccount()},"click":function($event){return showViewAccount()}}},[_v("\n\t\t\t\t\t"+_s(translate("SETTINGS.DELETE"))+"\n\t\t\t\t")]),_v(" "),_c('li',{staticClass:"divider"}),_v(" "),_c('li',{on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return logout()},"click":function($event){return logout()}}},[_v(_s(translate("SETTINGS.LOGOUT")))])])]):_e(),_v(" "),_c('AppButton',{staticClass:"toggle-theme mobile-hidden",attrs:{"size":"small","icon":isDark ? 'sun' : 'moon',"aria-label":"Toggle theme"},nativeOn:{"click":function($event){return toggleTheme()}}}),_v(" "),(showAdmin)?_c('Admin',{attrs:{"data":admindata,"context":context},on:{"hide-admin":function($event){showAdmin=false},"recalc-admin":function($event){return recalculateAdminData()}}}):_e(),_v(" "),(isLoggedIn)?_c('AppButton',{staticClass:"mobile-menu--trigger desktop-hidden",attrs:{"size":"small","round":"","icon":"dot-menu","aria-label":"Open menu"},nativeOn:{"click":function($event){return toggleSidebar()}}}):_e()],1)}},    components: {
        Admin,
        AppButton,
	    AppDropdown,
        AppPrompt,
        Spinner,
	    AppIcon,
    },
    mixins:[i18n],
	data() {
		return {
		    profileImage: "",
                    showAdmin: false,
                    admindata: {pending:[]},
                    showSettingsSpinner: false,
                    chatResponseHeader: null,
                    showPrompt: false,
                    prompt_message: '',
                    prompt_placeholder: '',
                    prompt_max_input_size: null,
                    prompt_value: '',
                    prompt_consumer_func: () => {},
                    prompt_action: 'Set'
		};
	},
	computed: {
		...Vuex.mapState(['isLoggedIn', 'isAdmin', 'context', 'isDark']),
		...Vuex.mapGetters(['currentTheme', 'isPaid'])
	},
    created() {
        this.prompt_action = this.translate("PROMPT.SET");
        this.displayProfile();
    },
	methods: {
        cleanupFailedUploads() {
            this.showSettingsSpinner = true;
            let that = this;
            this.context.cleanPartialUploads().thenApply(snapshot => {
                that.showSettingsSpinner = false;
                that.context.getSpaceUsage().thenApply(u => {
                    that.$store.commit('SET_USAGE', u);
                });
            }).exceptionally(function(throwable) {
                let errMsg = throwable.getMessage();
                console.log(errMsg);
                that.$toast.error('Upload cleanup failed. Please try again. Error: ' + errMsg, {timeout:false});
                that.showSettingsSpinner = false;
            });
        },
        modifyCacheSize: function() {
            let that = this;
            if (!isCachingAvailable()) {
                that.$toast('Cache not available');
                return;
            }
            getBrowserStorageQuota().then(maxStorage => {
                let maxStorageMiB = Math.floor(maxStorage /1024 /1024);
                this.prompt_message = this.translate("SETTINGS.CACHE") + ' (MiB)';
                let roundedCurrentCacheSize = Math.floor(getCurrentDesiredCacheSize());
                this.prompt_value = '' + roundedCurrentCacheSize;
                this.prompt_placeholder = " ";
                this.prompt_consumer_func = function (prompt_result) {
                    that.showPrompt = false;
                    if (prompt_result == null) {
                        return;
                    }
                    let newCacheSizeMiB = prompt_result.trim();
                    if (!that.validateCacheSize(newCacheSizeMiB)) {
                        that.$toast.error(that.translate("SETTINGS.CACHE.INVALID"), {timeout:false});
                        return;
                    }
                    let validNewCacheSize = Number(newCacheSizeMiB);
                    if (validNewCacheSize > maxStorageMiB) {
                        that.$toast.error(that.translate("SETTINGS.CACHE.LARGE")
                                          .replace("$SIZE", maxStorageMiB), {timeout:false});
                    } else {
                        if (roundedCurrentCacheSize != validNewCacheSize) {
                            that.showSettingsSpinner = true;
                            modifyCacheSize(validNewCacheSize).thenApply(() => {
                                that.showSettingsSpinner = false;
                                that.$toast(that.translate("SETTINGS.CACHE.UPDATED"));
                            });
                        }
                    }
                };
                this.showPrompt = true;
            });
        },
        validateCacheSize: function(num) {
            if (num == null || num == '') {
                return false;
            }
            let numInt = parseInt(num, 10);
            if (isNaN(numInt)) {
                return false;
            }
            if (numInt < 0) {
                return false;
            }
            return true;
        },
        closePrompt() {
            this.showPrompt = false;
        },
		displayProfile() {
		    if (this.context.username == null) {
		        return;
		    }
			let that = this;
			peergos.shared.user.ProfilePaths.getProfile(
				this.context.username,
				this.context
			).thenApply((profile) => {
				if (profile.profilePhoto.isPresent()) {
					let str = "";
					let data = profile.profilePhoto.get();
					for (let i = 0; i < data.length; i++) {
						str = str + String.fromCharCode(data[i] & 0xff);
					}
					if (data.byteLength > 0) {
						that.profileImage =
							"data:image/png;base64," + window.btoa(str);
					}
				}
			});
		},
		showAdminPanel() {
		    if (this.context == null) return;
		    const that = this;
		    this.context.getAndDecodePendingSpaceRequests().thenApply(reqs => {
			that.admindata.pending = reqs.toArray([]);
			that.showAdmin = true;
		    });
		},
		recalculateAdminData() {
		    const that = this;
            this.context.getAndDecodePendingSpaceRequests().thenApply(reqs => {
                that.admindata.pending = reqs.toArray([]);
            });
		},
	    showRequestStorage() {
                if(this.isPaid){
		    this.$store.commit('CURRENT_MODAL', 'ModalPro');
		}else{
		    this.$store.commit('CURRENT_MODAL', 'ModalSpace');
		}
	    },
		showProfile() {
			this.$store.commit("CURRENT_MODAL", "ModalProfile");
		},
		launchHelp() {
			this.$store.commit("CURRENT_MODAL", "ModalHelp");
		},
		showTour() {
			this.$store.commit("CURRENT_MODAL", "ModalTour");
		},
		showFeedback() {
			this.$store.commit("CURRENT_MODAL", "ModalFeedback");
		},
        showAuthenticationScreen() {
            this.$store.commit("CURRENT_MODAL", "ModalAuthSettings");
        },
		showChangePassword() {
			this.$store.commit("CURRENT_MODAL", "ModalPassword");
		},
		showViewAccount() {
			this.$store.commit("CURRENT_MODAL", "ModalAccount");
		},
		logout() {
		    let that = this;
		    clearRootKeyCacheFully(cleared =>  {
                that.$store.commit("SET_CONTEXT", null);
                window.location.fragment = "";
                window.location.reload();
            });
		},
		toggleSidebar() {
			this.$store.commit("TOGGLE_SIDEBAR");
		},
		toggleTheme() {
			this.$store.commit("TOGGLE_THEME");
			document.documentElement.setAttribute(
				"data-theme",
				this.currentTheme
			);
			localStorage.setItem("theme", this.currentTheme);
		},
	},
};

},{ "../i18n/index.js": 11, "./AppDropdown.vue": 69, "./admin/Admin.vue": 70, "./prompt/AppPrompt.vue": 56, "./spinner/Spinner.vue": 16, "AppButton.vue": 2, "AppIcon.vue": 1}], 59:[function(require,module,exports){
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticStyle:{"height":"30%"}}),_v(" "),_c('div',{staticClass:"modal-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:"modal-header"},[_c('h3',{attrs:{"id":"warning-header-id"}},[_v(_s(warning_message))])]),_v(" "),_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"container warning-container"},[_c('p',{attrs:{"id":"warning-body-id"}},[_v(_s(warning_body))])]),_v(" "),_c('button',{staticClass:"btn btn-success btn-lg",staticStyle:{"margin":"10%"},on:{"click":function($event){return cancel()}}},[_v("\n                        Cancel\n                    ")]),_v(" "),_c('button',{staticClass:"btn btn-success btn-lg",staticStyle:{"margin":"10%"},on:{"click":function($event){return complete()}}},[_v("\n                        OK\n                    ")])])])])])}},    data: function() {
        return {}
    },
    props: ['warning_message', 'warning_body', 'consumer_func'],
    created: function() {
    },
    methods: {
        close: function() {
            this.$emit("hide-warning");
        },
        cancel: function() {
            this.close();
        },
        complete: function() {
            this.close();
            this.consumer_func();
        }
    }
}

},{}], 70:[function(require,module,exports){const Spinner = require("../spinner/Spinner.vue");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticStyle:{"height":"10%"}}),_v(" "),_c('div',{staticClass:"modal-container",staticStyle:{"height":"90%","overflow-y":"auto"},on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:"modal-header"},[_c('h2',[_v("Admin Panel")])]),_v(" "),_c('div',{staticClass:"modal-body"},[(showSpinner)?_c('Spinner'):_e(),_v(" "),_c('div',[_c('h3',[_v("Pending space requests")]),_v(" "),_c('table',{staticClass:"table table-responsive table-striped table-hover"},[(data.pending.length>0)?_c('tr',[_c('th',[_v("Username")]),_c('th',[_v("Requested size (MiB)")]),_c('th'),_c('th')]):_e(),_v(" "),_l((data.pending),function(req){return (data.pending.length>0)?_c('tr',[_c('td',[_v(_s(req.getUsername()))]),_v(" "),_c('td',[_v(_s(req.getSizeInMiB()))]),_v(" "),_c('td',{staticStyle:{"text-align":"right"}},[_c('button',{staticClass:"btn btn-info",on:{"click":function($event){return approve(req)}}},[_v("Approve")])]),_v(" "),_c('td',{staticStyle:{"text-align":"right"}},[_c('button',{staticClass:"btn btn-danger",on:{"click":function($event){return reject(req)}}},[_v("Deny")])])]):_e()})],2)])],1)])])])}},	components: {
	    Spinner
	},
    data: function() {
        return {
            showSpinner: false
        }
    },
    props: ['data', 'context'],
    created: function() {
    },
    methods: {
        showMessage: function(body) {
            this.$toast(body);
        },
        approve: function(req) {
            var that = this;
            this.showSpinner = true;
            this.context.approveSpaceRequest(req)
                .thenApply(function(success) {
		    that.showSpinner = false;
                    that.showMessage("User: " + req.getUsername() + ". Space request approved!");
                    that.$emit("recalc-admin");
                });
        },

        reject: function(req) {
            var that = this;
            this.showSpinner = true;
            this.context.rejectSpaceRequest(req)
                .thenApply(function(success) {
                    that.showMessage("User: " + req.getUsername() + ". Space request rejected!");
                    that.showSpinner = false;
                    that.$emit("recalc-admin");
                });
        },

        close: function () {
            this.$emit("hide-admin");
        }
    }
}
},{ "../spinner/Spinner.vue": 16}], 98:[function(require,module,exports){
module.exports = {
render: function() {with(this){return _c('div',[_c('div',{staticClass:"app-grid-flex-container"},[_c('transition',{attrs:{"name":"app-grid-context-menu"}},[(showAppMenu)?_c('ul',{staticClass:"dropdown-menu",staticStyle:{"cursor":"pointer","display":"block","min-width":"100px","padding":"10px"},style:({top:menutop, left:menuleft}),attrs:{"id":"appMenu"},on:{"mouseleave":function($event){return menuLeave($event)}}},[_c('li',{staticClass:"app-menu-item",on:{"mouseover":function($event){return contextMenuHoverOver($event)},"mouseout":function($event){return contextMenuHoverOut($event)},"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return showDetails($event)},"click":function($event){return showDetails($event)}}},[_v("Details")]),_v(" "),(selectedApp.updateAvailable)?_c('li',{staticClass:"app-menu-item",on:{"mouseover":function($event){return contextMenuHoverOver($event)},"mouseout":function($event){return contextMenuHoverOut($event)},"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return updateApp($event)},"click":function($event){return updateApp($event)}}},[_v("Update")]):_e(),_v(" "),_c('li',{staticClass:"app-menu-item",on:{"mouseover":function($event){return contextMenuHoverOver($event)},"mouseout":function($event){return contextMenuHoverOut($event)},"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return removeApp($event)},"click":function($event){return removeApp($event)}}},[_v("Remove")])]):_e()]),_v(" "),_l((apps),function(app){return _c('div',[_c('a',{staticClass:"app-grid-item",on:{"click":function($event){return launch(app)},"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return launch(app)},"contextmenu":function($event){return showMenu($event, app)}}},[_c('span',{staticClass:"app-icon"},[(app.thumbnail == null && app.launchable)?_c('div',[_c('i',{staticClass:"fa fa-cog",staticStyle:{"cursor":"pointer"},attrs:{"data-placement":"bottom"}})]):_e(),_v(" "),(app.thumbnail == null && !app.launchable)?_c('div',[_c('i',{staticClass:"fa fa-cog",attrs:{"data-placement":"bottom"}})]):_e(),_v(" "),(app.thumbnail != null && app.launchable)?_c('div',[_c('img',{staticStyle:{"width":"50px","height":"50px","cursor":"pointer"},attrs:{"src":app.thumbnail}})]):_e(),_v(" "),(app.thumbnail != null && !app.launchable)?_c('div',[_c('img',{staticStyle:{"width":"50px","height":"50px"},attrs:{"src":app.thumbnail}})]):_e(),_v(" "),_c('label',{staticClass:"app-icon-title"},[_v(_s(app.displayName)),(app.updateAvailable)?_c('span',{staticClass:"pending-badge",attrs:{"id":"pendingSpan"}},[_v(_s(0))]):_e()])])])])})],2)])}},    components: {
    },
    data: function() {
        return {
            selectedApp: null,
            showAppMenu: false,
            menutop:"",
            menuleft:"",
        };
    },
    props: ["apps", "launchAppFunc", "appDetailsFunc", "removeAppFunc", "updateAppFunc"],
    created: function() {
    },
    methods: {
      	menuLeave: function(event) {
            this.showAppMenu = false;
      	},
      	contextMenuHoverOver: function(event) {
        	event.currentTarget.style.backgroundColor = "lightgrey";
        },
        contextMenuHoverOut: function(event) {
            event.currentTarget.style.backgroundColor = "";
        },
        getPosition: function(e) {
            var posx = 0;
            var posy = 0;

            if (!e) var e = window.event;
            if (e.clientX || e.clientY) {
                posx = e.clientX - 60;
                posy = e.clientY - 100;
            }
            if (e.layerX) // This fixes too large X when side bar is open
                posx = e.layerX;
            return {
                x: posx,
                y: posy
            }
        },
        showMenu(event, app) {
            event.preventDefault();
            this.selectedApp = app;
            var pos = this.getPosition(event);
            Vue.nextTick(function() {
                var top = pos.y;
                var left = pos.x;
                this.menutop = top + 'px';
                this.menuleft = left + 'px';
            }.bind(this));
            this.showAppMenu = true;
        },
        closeMenu(event) {
            this.showAppMenu = false;
            if (event) {
                event.stopPropagation();
            }
        },
        iconCount: function() {
            return this.apps.length;
        },
        showDetails: function(e) {
            console.log('showDetails app:' + this.selectedApp.displayName);
            this.appDetailsFunc(this.selectedApp);
            this.closeMenu(e);
        },
        launch: function(app) {
            this.closeMenu();
            if (!app.launchable) {
                return;
            }
            this.launchAppFunc(app);
        },
        removeApp: function(e) {
            this.removeAppFunc(this.selectedApp);
            this.closeMenu(e);
        },
        updateApp: function(e) {
            if (!this.selectedApp.updateAvailable) {
                this.$toast("No update for App: " + this.selectedApp.displayName);
            } else {
                this.updateAppFunc(this.selectedApp);
            }
            this.closeMenu(e);
        }
    },
};
},{}], 31:[function(require,module,exports){const AppButton = require("../AppButton.vue");
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal","appear":""}},[_c('div',{staticClass:"app-prompt app-modal__overlay",on:{"click":function($event){return close()}}},[_c('div',{staticClass:"app-prompt__container",on:{"click":function($event){$event.stopPropagation();}}},[_c('header',{staticClass:"prompt__header"},[_c('AppButton',{staticClass:"close",attrs:{"icon":"close"},nativeOn:{"click":function($event){return close()}}}),_v(" "),_c('h3',[_v("Multi Factor Authentication")])],1),_v(" "),(isReady)?_c('div',[(hasTotp && hasWebauthn && !showTotp)?_c('div',[_c('div',{staticClass:"mfa_buttons"},[_c('AppButton',{staticClass:"mfa_button",staticStyle:{"margin":"10px"},attrs:{"id":"prompt-totpbutton-id","type":"primary","accent":""},nativeOn:{"click":function($event){return useTotp()}}},[_v("\n\t\t\t\t\t    Use authenticator app\n\t\t\t\t\t")]),_v(" "),_c('AppButton',{staticClass:"mfa_button",staticStyle:{"margin":"10px"},attrs:{"id":"prompt-webauthn-button-id","type":"primary","accent":""},nativeOn:{"click":function($event){return confirmWebauthn()}}},[_v("\n\t\t\t\t\t    Use security key\n\t\t\t\t\t")])],1)]):_e(),_v(" "),_c('div',[(showTotp)?_c('center',[_v("\n                            Verification code from app: "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(mfaCode),expression:"mfaCode"}],staticStyle:{"width":"200px"},attrs:{"type":"text","autofocus":"","name":"mfaCode","placeholder":""},domProps:{"value":(mfaCode)},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return confirmTotp($event)},"input":function($event){if($event.target.composing)return;mfaCode=$event.target.value}}})]):_e()],1)]):_e(),_v(" "),_c('footer',{staticClass:"mfa_login"},[(showTotp)?_c('AppButton',{attrs:{"id":"prompt-button-id","type":"primary","accent":""},nativeOn:{"click":function($event){return confirmTotp()}}},[_v("\n\t\t\t\t\tConfirm\n\t\t\t\t    ")]):_e()],1)])])])}},    components: {
        AppButton,
    },
    data: function() {
        return {
            mfaCode: '',
            mfaOptions: [],
            webauthnMethods: [],
            hasTotp: false,
            hasWebauthn: false,
            showTotp: false,
            totpIndex: 0,
            isReady: false,
        }
    },
    props: ['mfaMethods', 'challenge', 'consumer_cancel_func', 'consumer_func'],
    computed: {
        ...Vuex.mapState([
            'context'
        ]),
    },
    created: function() {
        let that = this;
        for (var i=0; i < this.mfaMethods.length;i++) {
            let method = this.mfaMethods[i];
            if (method.type.toString() == peergos.shared.login.mfa.MultiFactorAuthMethod.Type.TOTP.toString()) {
                that.mfaOptions.push({type:'Authenticator App', credentialId: method.credentialId});
                this.hasTotp = true;
                this.totpIndex = i;
            } else {
                that.mfaOptions.push({type:'WebKey', credentialId: method.credentialId, name: method.name});
                this.hasWebauthn = true;
                that.webauthnMethods.push({
                    type: "public-key",
                    id: method.credentialId
                });
            }
        }
        this.isReady = true;
        if (this.hasWebauthn && ! this.hasTotp) {
            this.confirmWebauthn();
        }
        if (! this.hasWebauthn && this.hasTotp)
            this.showTotp= true;
    },
    methods: {
        close: function() {
            let credentialId = this.mfaOptions[this.totpIndex].credentialId;
            this.consumer_cancel_func(credentialId);
        },
        useTotp: function() {
            this.showTotp = true;
        },
        confirmTotp: function() {
            let credentialId = this.mfaOptions[this.totpIndex].credentialId;
            let resp = peergos.client.JsUtil.generateAuthResponse(credentialId, this.mfaCode);
            this.consumer_func(credentialId, resp);
        },
        confirmWebauthn: function() {
           let that = this;
           let data = {
              publicKey: {
                 challenge: that.challenge,
                 allowCredentials: this.webauthnMethods,
                 timeout: 60000,
                 userVerification: "preferred",
              }
           };
            navigator.credentials.get(data).then(credential => {
                let credentialId = convertToByteArray(new Int8Array(credential.rawId))
                let authenticatorData = convertToByteArray(new Int8Array(credential.response.authenticatorData));
                let clientDataJson = convertToByteArray(new Int8Array(credential.response.clientDataJSON));
                let signature = convertToByteArray(new Int8Array(credential.response.signature));
                let resp = peergos.client.JsUtil.generateWebAuthnResponse(credentialId, authenticatorData, clientDataJson, signature);
                that.consumer_func(credentialId, resp);
           }).catch(getCredentialsException => {
                that.$toast.error('Unable to get credentials', {timeout:false});
                console.log('Unable to get credentials: ' + getCredentialsException);
           });
        }
    }
}
},{ "../AppButton.vue": 2}], 18:[function(require,module,exports){const AppButton = require("../AppButton.vue");
const Spinner = require("../spinner/Spinner.vue");
const Message = require("../message/Message.vue");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal","appear":""}},[_c('div',{staticClass:"app-prompt app-modal__overlay",on:{"click":function($event){return close()}}},[_c('div',{staticClass:"app-prompt__container",on:{"click":function($event){$event.stopPropagation();}}},[_c('header',{staticClass:"prompt__header"},[_c('AppButton',{staticClass:"close",attrs:{"icon":"close"},nativeOn:{"click":function($event){return close()}}}),_v(" "),_c('h3',[_v("Setup Authenticator App")])],1),_v(" "),(showSpinner)?_c('Spinner'):_e(),_v(" "),(showMessage)?_c('Message',{attrs:{"title":messageTitle,"message":manualCode},on:{"remove-message":function($event){showMessage = false;}}}):_e(),_v(" "),_c('div',{staticClass:"prompt__body"},[(QRCodeURL.length > 0)?_c('center',[_c('div',{staticClass:"auth-qrcode-container"},[_c('img',{staticClass:"auth-qrcode",attrs:{"src":QRCodeURL,"alt":"QR code"}})])]):_e(),_v(" "),(isReady)?_c('center',[_c('a',{attrs:{"href":"#"},on:{"click":function($event){return enterCodeManually()}}},[_c('u',[_v("Enter code manually")])])]):_e(),_v(" "),_c('center',[_v("\n                        Verification code from app: "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(totp),expression:"totp"}],ref:"totp",staticStyle:{"width":"200px"},attrs:{"type":"text","autofocus":"","name":"totp","placeholder":"","disabled":!isReady},domProps:{"value":(totp)},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return confirm($event)},"input":function($event){if($event.target.composing)return;totp=$event.target.value}}})])],1),_v(" "),_c('footer',{staticClass:"prompt__footer"},[_c('AppButton',{attrs:{"outline":""},nativeOn:{"click":function($event){return close()}}},[_v("\n\t\t\t\t\t\tCancel\n\t\t\t\t\t")]),_v(" "),_c('AppButton',{attrs:{"id":"prompt-button-id","type":"primary","accent":""},nativeOn:{"click":function($event){return confirm()}}},[_v("\n\t\t\t\t\tConfirm\n\t\t\t\t\t")])],1)],1)])])}},    components: {
        AppButton,
        Message,
        Spinner,
    },
    data: function() {
        return {
            credentialId: '',
            totp: '',
            isReady: false,
            QRCodeURL: '',
            showSpinner: false,
            manualCode:'',
            messageTitle: 'Enter Code',
            showMessage: false,
        }
    },
    props: ['consumer_func'],
    computed: {
        ...Vuex.mapState([
            'context'
        ]),
    },
    created: function() {
        let that = this;
        this.showSpinner = true;
        this.context.network.account.addTotpFactor(this.context.username, this.context.signer).thenApply(totpKey => {
            that.credentialId = totpKey.credentialId;
            that.QRCodeURL = totpKey.getQRCode(that.context.username);
            let encoded = totpKey.encode();
            that.manualCode = encoded.substring(encoded.indexOf(':') + 1);
            that.showSpinner = false;
            that.isReady = true;
        }).exceptionally(function (addException) {
            that.$toast.error('Unable to add new authentication method', {timeout:false});
            console.log('Unable to add new authentication method: ' + addException);
            that.showSpinner = false;
        });
    },
    methods: {
        enterCodeManually: function() {
            this.showMessage = true;
        },
        close: function(success) {
            this.$emit("hide-totp");
            this.consumer_func(this.credentialId, success === true);
        },
        confirm: function() {
            let that = this;
            if (this.isReady) {
                this.showSpinner = true;
                let clientCode = this.totp.trim();
                that.context.network.account.enableTotpFactor(this.context.username, this.credentialId, clientCode, this.context.signer).thenApply(res => {
                    this.$toast('Authenticator App has been enabled');
                    that.showSpinner = false;
                    that.close(true);
                }).exceptionally(function (throwable) {
                    that.showSpinner = false;
                    if(throwable.detailMessage.startsWith('Invalid+TOTP+code+for+credId')) {
                        that.$toast.error('Incorrect code', {timeout:false});
                        console.log('Incorrect code: ' + throwable);
                    } else {
                        that.$toast.error('Unable to enable Authenticator app', {timeout:false});
                        console.log('Unable to enable Authenticator app. Error: ' + throwable);
                    }
                });
            }
        }
    }
}
},{ "../AppButton.vue": 2, "../message/Message.vue": 17, "../spinner/Spinner.vue": 16}], 19:[function(require,module,exports){const AppButton = require("../AppButton.vue");
const Spinner = require("../spinner/Spinner.vue");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal","appear":""}},[_c('div',{staticClass:"app-prompt app-modal__overlay",on:{"click":function($event){return close()}}},[_c('div',{staticClass:"app-prompt__container",on:{"click":function($event){$event.stopPropagation();}}},[_c('header',{staticClass:"prompt__header"},[_c('AppButton',{staticClass:"close",attrs:{"icon":"close"},nativeOn:{"click":function($event){return close()}}}),_v(" "),_c('h3',[_v("Add new Security Key")])],1),_v(" "),(showSpinner)?_c('Spinner'):_e(),_v(" "),_c('div',{staticClass:"prompt__body"},[_c('center',[_v("\n                        Name: "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(webAuthName),expression:"webAuthName"}],staticStyle:{"width":"200px"},attrs:{"type":"text","autofocus":"","name":"webAuthName","placeholder":""},domProps:{"value":(webAuthName)},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return confirm($event)},"input":function($event){if($event.target.composing)return;webAuthName=$event.target.value}}})])],1),_v(" "),_c('footer',{staticClass:"prompt__footer"},[_c('AppButton',{attrs:{"outline":""},nativeOn:{"click":function($event){return close()}}},[_v("\n\t\t\t\t\t\tCancel\n\t\t\t\t\t")]),_v(" "),_c('AppButton',{attrs:{"id":"prompt-button-id","type":"primary","accent":""},nativeOn:{"click":function($event){return confirm()}}},[_v("\n\t\t\t\t\tConfirm\n\t\t\t\t\t")])],1)],1)])])}},    components: {
        AppButton,
        Spinner,
    },
    data: function() {
        return {
            webAuthName: '',
            credentialId: '',
            showSpinner: false,
        }
    },
    props: ['consumer_func'],
    computed: {
        ...Vuex.mapState([
            'context'
        ]),
    },
    created: function() {
    },
    methods: {
        close: function(success) {
            this.$emit("hide-webauth");
            this.consumer_func(this.credentialId, this.webAuthName, success === true);
        },
        confirm: function() {
            let name = this.webAuthName.trim();
            if (name.length == 0) {
                this.$toast.error('Please enter a name', {timeout:false});
            }else if (name.length > 20) {
                this.$toast.error('Name max-length is 20 characters', {timeout:false});
            } else {
                this.register();
            }
        },
        register: function() {
            let that = this;
            this.showSpinner = true;
            that.context.network.account.registerSecurityKeyStart(that.context.username, that.context.signer).thenApply(challenge => {
                let enc = new TextEncoder();
                let userId = new Uint8Array(that.context.username.length);
                enc.encodeInto(that.context.username, userId);
                let data = {
                    publicKey: {
                        challenge: challenge,
                        rp: { name: "Peergos" },
                        user: {
                            id: userId,
                            name: that.context.username,
                            displayName: that.context.username,
                        },
                        timeout: 60000,
                        pubKeyCredParams: [
                            {type: "public-key", alg: -8},
                            {type: "public-key", alg: -7},
                            {type: "public-key", alg: -257}
                        ]
                    }
                };
                navigator.credentials.create(data).then(credential => {
                    that.credentialId =  credential.rawId;
                    let rawAttestation = convertToByteArray(new Int8Array(credential.response.attestationObject));
                    let clientDataJson = convertToByteArray(new Int8Array(credential.response.clientDataJSON));
                    let signature = convertToByteArray(new Int8Array(0));
                    let rawId = convertToByteArray(new Int8Array(credential.rawId));
                    let resp = peergos.client.JsUtil.generateWebAuthnResponse(rawId, rawAttestation, clientDataJson, signature);
                    that.context.network.account.registerSecurityKeyComplete(that.context.username, that.webAuthName, resp, that.context.signer).thenApply(done => {
                        that.$toast('Security Key has been enabled');
                        that.showSpinner = false;
                        that.close(true);
                    }).exceptionally(function (completeThrowable) {
                        that.$toast.error('Unable to complete registration of security key', {timeout:false});
                        console.log('Unable to complete registration of security key: ' + completeThrowable);
                        that.showSpinner = false;
                    });
                }).catch(createException => {
                    that.$toast.error('Unable to create registration of security key', {timeout:false});
                    console.log('Unable to create registration of security key: ' + createException);
                    that.showSpinner = false;
                });
            }).exceptionally(function (throwable) {
                that.$toast.error('Unable to register security key', {timeout:false});
                console.log('Unable to register security key: ' + throwable);
                that.showSpinner = false;
            });
        }
    }
}
},{ "../AppButton.vue": 2, "../spinner/Spinner.vue": 16}], 37:[function(require,module,exports){module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticStyle:{"height":"30%"}}),_v(" "),_c('div',{staticClass:"modal-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:"modal-header"},[_c('h3',{attrs:{"id":"choice-header-id"}},[_v(_s(choice_message))])]),_v(" "),_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"container",staticStyle:{"word-wrap":"break-word","width":"auto"}},[_c('p',{attrs:{"id":"choice-body-id"}},[_v(_s(choice_body))])]),_v(" "),_c('div',{staticClass:"choice-row"},_l((choice_options),function(option,key){return _c('div',{staticClass:"choice-block"},[_c('label',{staticClass:"checkbox__group"},[_v("\n            "+_s(option)+"\n            "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(picked),expression:"picked"}],attrs:{"type":"radio","id":key,"name":""},domProps:{"value":key,"checked":_q(picked,key)},on:{"change":function($event){picked=key}}}),_v(" "),_c('span',{staticClass:"checkmark"})])])}),0),_v(" "),_c('button',{staticClass:"btn btn-success btn-lg",on:{"click":function($event){return confirm()}}},[_v("\n        Confirm\n      ")])])])])])}},    data: function() {
        return {
            picked: 0
        }
    },
    props: ['choice_message', 'choice_body', 'choice_options', 'choice_consumer_func'],
    created: function() {
    },
    methods: {
        close: function() {
            this.$emit("hide-choice");
        },
        confirm: function() {
            this.close();
            this.choice_consumer_func(this.picked);
        }
    }
}
},{}], 68:[function(require,module,exports){
const UriDecoder = require('../../mixins/uridecoder/index.js');
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticClass:"modal-container full-height",staticStyle:{"width":"100%","overflow-y":"auto","padding":"0","display":"flex","flex-flow":"column"},on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:"modal-header",staticStyle:{"padding":"0"}},[_c('center',[_c('h2',[_v(_s(getFilename()))])]),_v(" "),_c('span',{staticStyle:{"position":"absolute","top":"0","right":"0.2em"}},[(isWritable())?_c('span',{class:['fas', saving ? 'fa-hourglass' : 'fa-save'],staticStyle:{"color":"black","font-size":"2.5em","font-weight":"bold","cursor":"pointer","margin":".3em"},attrs:{"tabindex":"0","title":"Save file"},on:{"click":getAndSave,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return getAndSave($event)}}}):_e(),_v(" "),_c('span',{staticStyle:{"color":"black","font-size":"3em","font-weight":"bold","cursor":"pointer","font-family":"'Cambria Math'"},attrs:{"tabindex":"0"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")])])],1),_v(" "),_c('div',{staticClass:"modal-body",staticStyle:{"margin":"0","padding":"0","display":"flex","flex-grow":"1"}},[_c('iframe',{staticStyle:{"width":"100%","height":"100%"},attrs:{"id":"editor","src":frameUrl(),"frameBorder":"0"}})])])])])}},    data: function() {
        return {
            showSpinner: false,
	        expectingSave: false,
	        saving: false,
	        currentFile: null,
	        currentFilename: null,
	        isFileWritable: false,
	        isIframeInitialised: false
        }
    },
    props: ['context', 'file'],
    created: function() {
        this.currentFile = this.file;
        this.currentFilename = this.file.getName();
        this.isFileWritable = this.file.isWritable();
        this.startListener();
    },
    mixins:[UriDecoder],
    methods: {
	frameUrl: function() {
            return this.frameDomain() + "/apps/code-editor/index.html";
        },
        frameDomain: function() {
            return window.location.protocol + "//code-editor." + window.location.host;
        },
        startListener: function() {
	    var that = this;
	    var iframe = document.getElementById("editor");
	    if (iframe == null) {
    		setTimeout(that.startListener, 1000);
	    	return;
	    }
        // Listen for response messages from the frames.
        window.addEventListener('message', function (e) {
            // Normally, you should verify that the origin of the message's sender
            // was the origin and source you expected. This is easily done for the
            // unsandboxed frame. The sandboxed frame, on the other hand is more
            // difficult. Sandboxed iframes which lack the 'allow-same-origin'
            // header have "null" rather than a valid origin. This means you still
            // have to be careful about accepting data via the messaging API you
            // create. Check that source, and validate those inputs!
            if ((e.origin === "null" || e.origin === that.frameDomain()) && e.source === iframe.contentWindow) {
                if (e.data.action == 'pong') {
                    that.isIframeInitialised = true;
                } else if (e.data == "sw-registration-failure" ) {
                    console.log("failed to register service worker for editor")
                } else if (that.expectingSave) {
                    that.expectingSave = false;
                    that.save(e.data.text);
                }
            }
        });
	    // Note that we're sending the message to "*", rather than some specific
            // origin. Sandboxed iframes which lack the 'allow-same-origin' header
            // don't have an origin which you can target: you'll have to send to any
            // origin, which might alow some esoteric attacks. Validate your output!
	    const props = this.currentFile.getFileProperties();
	    const name = this.currentFile.getName();
	    var mimeType = "text/x-markdown";
	    var modes = ["markdown"]; // default to markdown for plain text
	    if (name.endsWith(".java")) {
		    modes = ["clike"];
		    mimeType = "text/x-java";
	    } else if (name.endsWith(".scala")) {
		    modes = ["clike"];
		    mimeType = "text/x-scala";
	    } else if (name.endsWith(".kt")) {
		    modes = ["clike"];
		    mimeType = "text/x-kotlin";
	    } else if (name.endsWith(".c")) {
		    modes = ["clike"];
		    mimeType = "text/x-csrc";
	    } else if (name.endsWith(".cpp")) {
		    modes = ["clike"];
		    mimeType = "text/x-c++src";
	    } else if (name.endsWith(".clj")) {
		    modes = ["clojure"];
		    mimeType = "text/x-clojure";
	    } else if (name.endsWith(".css")) {
		    modes = ["css"];
		    mimeType = "text/css";
	    } else if (name.endsWith(".diff")) {
		    modes = ["diff"];
		    mimeType = "text/x-diff";
	    } else if (name.endsWith(".go")) {
		    modes = ["go"];
		    mimeType = "text/x-go";
	    } else if (name.endsWith(".html")) {
		    modes = ["xml", "javascript", "css", "htmlmixed"];
		    mimeType = "text/html";
	    } else if (name.endsWith(".js")) {
		    modes = ["javascript"];
		    mimeType = "text/javascript";
	    } else if (name.endsWith(".json")) {
		    modes = ["javascript"];
		    mimeType = "application/json";
	    } else if (name.endsWith(".py")) {
		    modes = ["python"];
		    mimeType = "text/x-python";
	    } else if (name.endsWith(".rs")) {
		    modes = ["rust"];
		    mimeType = "text/x-rustsrc";
	    } else if (name.endsWith(".r")) {
		    modes = ["r"];
		    mimeType = "text/x-rsrc";
	    } else if (name.endsWith(".rb")) {
		    modes = ["ruby"];
		    mimeType = "text/x-ruby";
	    } else if (name.endsWith(".sh")) {
		    modes = ["shell"];
		    mimeType = "text/x-sh";
	    } else if (name.endsWith(".tex")) {
		    modes = ["stex"];
		    mimeType = "text/x-stex";
	    } else if (name.endsWith(".xml")) {
		    modes = ["xml"];
		    mimeType = "application/xml";
	    } else if (name.endsWith(".yaml")) {
		    modes = ["yaml"];
		    mimeType = "text/x-yaml";
	    }
	    var readOnly = ! this.isFileWritable;

	    this.currentFile.getInputStream(this.context.network, this.context.crypto, props.sizeHigh(), props.sizeLow(), function(read){})
	        .thenCompose(function(reader) {
                var size = that.getFileSize(props);
                var data = convertToByteArray(new Int8Array(size));
                return reader.readIntoArray(data, 0, data.length)
                    .thenApply(function(read){
                        let func = function() {
                            iframe.contentWindow.postMessage({modes:modes, mime:mimeType, readOnly:readOnly, text:new TextDecoder().decode(data)}, '*');
                        };
                        that.setupIFrameMessaging(iframe, func);
                    });
        }).exceptionally(function(throwable) {
            that.showMessage(true, "Unexpected error", throwable.detailMessage);
            console.log('Error loading file: ' + that.file.getName());
            console.log(throwable.getMessage());
        });
            setTimeout(() => {
                if (!that.isIframeInitialised)
                    that.$toast.error("Unable to register service worker. Editor will not work offline. \nTo enable offline usage, allow 3rd party cookies for " + window.location.protocol + "//[*]." + window.location.host + "\n Note: this is not tracking", {timeout:false});
            }, 1000 * 10)
	},

	getFileSize: function(props) {
            var low = props.sizeLow();
            if (low < 0) low = low + Math.pow(2, 32);
            return low + (props.sizeHigh() * Math.pow(2, 32));
	},

	setupIFrameMessaging: function(iframe, func) {
        if (this.isIframeInitialised) {
            func();
        } else {
            iframe.contentWindow.postMessage({type: 'ping'}, '*');
            let that = this;
            window.setTimeout(function() {that.setupIFrameMessaging(iframe, func);}, 20);
        }
	},

	getAndSave: function() {
	    if(this.saving) {
	        return;
	    }
	    var iframe = document.getElementById("editor");
	    this.expectingSave = true;
	    iframe.contentWindow.postMessage({type:"save"}, '*');
	},

    save: function(text) {
	    this.saving = true;
	    var bytes = convertToByteArray(new TextEncoder().encode(text));
	    var java_reader = peergos.shared.user.fs.AsyncReader.build(bytes);
	    const context = this.context;
	    const that = this;
	    const sizeHi = (bytes.length - (bytes.length % Math.pow(2, 32)))/Math.pow(2, 32);
        this.currentFile.overwriteFileJS(java_reader, sizeHi, bytes.length,
            context.network, context.crypto, len => {})
        .thenApply(function(updatedFile) {
            that.saving = false;
            that.currentFile = updatedFile;
            that.$emit("update-refresh");
        }).exceptionally(function(throwable) {
            let msg = that.uriDecode(throwable.detailMessage);
            if (msg.includes("CAS exception updating cryptree node.")) {
                that.showMessage(true, "Concurrent modification detected", "The file has been updated by another user. Your changes have not been saved.");
            } else {
                that.showMessage(true, "Unexpected error", throwable.detailMessage);
                console.log('Error uploading file: ' + that.file.getName());
                console.log(throwable.getMessage());
            }
            that.saving = false;
        });
    },
    getFilename: function() {
        return this.currentFilename;
    },
    showMessage: function(isError, title, body) {
        let bodyContents = body == null ? '' : ' ' + body;
        if (isError) {
            this.$toast.error(title + bodyContents, {timeout:false});
        } else {
            this.$toast(title + bodyContents)
        }
    },
    close: function () {
        this.$emit("hide-code-editor");
    },
    isWritable: function() {
        return this.isFileWritable;
    }
    }
}
},{ "../../mixins/uridecoder/index.js": 27}], 15:[function(require,module,exports){module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticStyle:{"height":"30%"}}),_v(" "),_c('div',{staticClass:"confirm-modal-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:"modal-header"},[_c('h3',{attrs:{"id":"confirm-header-id"}},[_v(_s(confirm_message))])]),_v(" "),_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"container",staticStyle:{"word-wrap":"break-word","width":"auto"}},[_c('p',{attrs:{"id":"confirm-body-id"}},[_v(_s(confirm_body))])]),_v(" "),_c('button',{staticClass:"btn btn-success btn-lg",staticStyle:{"margin":"10%"},on:{"click":function($event){return no()}}},[_v("\n        No\n      ")]),_v(" "),_c('button',{staticClass:"btn btn-success btn-lg",staticStyle:{"margin":"10%"},on:{"click":function($event){return yes()}}},[_v("\n        Yes\n      ")])])])])])}},    data: function() {
        return {
        }
    },
    props: ['confirm_message', 'confirm_body', 'consumer_cancel_func', 'consumer_func'],
    created: function() {
    },
    methods: {
        close: function() {
            this.$emit("hide-confirm");
        },
        no: function() {
            this.close();
            this.consumer_cancel_func();
        },
        yes: function() {
            this.close();
            this.consumer_func();
        }
    }
}
},{}], 60:[function(require,module,exports){
const Spinner = require("../spinner/Spinner.vue");
const Warning = require('../Warning.vue');
const downloaderMixins = require("../../mixins/downloader/index.js");

module.exports = {
render: function() {with(this){return _c('div',{staticClass:"gallery-mask",on:{"click":close}},[_c('div',{staticClass:"gallery-container gallery",on:{"click":function($event){$event.stopPropagation();},"keyup":[function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"right",39,$event.key,["Right","ArrowRight"]))return null;if('button' in $event && $event.button !== 2)return null;return next($event)},function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"left",37,$event.key,["Left","ArrowLeft"]))return null;if('button' in $event && $event.button !== 0)return null;return previous($event)}]}},[_c('div',{staticClass:"slideshow-close",attrs:{"tabindex":"0","aria-label":"close"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_c('span',{staticStyle:{"font-family":"'Cambria Math'"}},[_v("×")])]),_v(" "),(showSpinner)?_c('Spinner'):_e(),_v(" "),(showWarning)?_c('Warning',{attrs:{"warning_message":warning_message,"warning_body":warning_body,"consumer_func":warning_consumer_func},on:{"hide-warning":hideWarning}}):_e(),_v(" "),_c('div',{attrs:{"id":"slideshow-container"}},[_c('div',{class:{ 'hidden-info': isInfoHidden, 'slideshow-info': true },attrs:{"id":"slideshow-info-id"}}),_v(" "),_c('button',{staticStyle:{"cursor":"pointer"},attrs:{"id":"slideshow-next"},on:{"click":next}},[_c('span',[_v(">")])]),_v(" "),_c('button',{staticStyle:{"cursor":"pointer"},attrs:{"id":"slideshow-prev"},on:{"click":previous}},[_c('span',[_v("<")])]),_v(" "),_c('div',{staticClass:"slideshow-wrapper",attrs:{"id":"slideshow-wrapper-id"}})])],1)])}},	components: {
    	Spinner,
	    Warning,
	},
	data() {
	    return {
                cache:{},
		    showSpinner: false,
		    fileIndex: 0,
		    pinging: false,
            showWarning: false,
		    warning_message: "",
		    warning_body: "",
		    warning_consumer_func: () => {}
		};
	},
	props: ["files", "initialFileName", "hideGalleryTitle"],
	mixins: [downloaderMixins],
	computed: {
		...Vuex.mapState([
			'context',
		]),
		showableFiles() {
			if (this.files == null) return null;
			var that = this;
			return this.files.filter(function (file) {
				var is_image = that.isImage(file);
				var is_video = that.isVideo(file);
				var is_audio = that.isAudio(file);
				return is_image || is_video || is_audio;
			});
		},
        isInfoHidden() {
            return this.hideGalleryTitle;
        },
	},
	created() {
	    var showable = this.showableFiles;
	    for (var i = 0; i < showable.length; i++) {
		    if (showable[i].getFileProperties().name == this.initialFileName) {
		        this.fileIndex = i;
		        break;
		    }
        }
	    console.log("Set initial gallery index to " + this.fileIndex);
	    window.addEventListener("keyup", this.keyup);
	},
	mounted() {
        let that = this;
        if (this.showableFiles.length == 0) {
            this.close();
        }
        let currentFile =  this.showableFiles[this.fileIndex];
        this.confirmView(currentFile, () => {
            that.showWarning = false;
            that.update();
        })
	},
	methods: {
		showGalleryTitle() {
			if (!this.hideGalleryTitle) {
			    let index = this.showableFiles.length > 1 ? (this.fileIndex + 1) + "/" + this.showableFiles.length + ' ' : '';
				let text =  index + this.showableFiles[this.fileIndex].getFileProperties().name;
				let infoElement = document.getElementById("slideshow-info-id");
				infoElement.innerText = text;
			}
		},
		close() {
            window.removeEventListener("keyup", this.keyup);
		    this.pinging = false;
            this.showWarning = false;
		    this.$emit("hide-gallery");
		},

		hideWarning() {
            this.showWarning = false;
		},

		keyup(e) {
    		e.preventDefault();
			if (e.key === "ArrowLeft") this.previous();
			else if (e.key === "ArrowRight") this.next();
            else if (e.key === "ArrowUp") this.start();
            else if (e.key === "ArrowDown") this.end();
		},

		start() {
		    if (this.fileIndex != 0) {
	    		this.fileIndex = 0;
    			this.update();
			}
		},

		end() {
			if (this.fileIndex != this.showableFiles.length - 1) {
                this.fileIndex = this.showableFiles.length - 1;
    			this.update();
            }
		},

		startPing(pingUrl) {
			if (!this.pinging) return;
			fetch(pingUrl);
			setTimeout(() => this.startPing(pingUrl), 5000);
		},

		next() {
            if (this.fileIndex < this.showableFiles.length - 1) {
				this.fileIndex++;
			    this.update();
			}
		},

		previous() {
			if (this.fileIndex > 0) {
                this.fileIndex--;
    			this.update();
            }
		},
		confirmView(file, viewFn) {
			let size = this.getFileSize(file.getFileProperties());
			if (this.supportsVideoStreaming() || size < 50 * 1024 * 1024)
				return viewFn();
			let sizeMb = (size / 1024 / 1024) | 0;
			this.warning_message = 'Are you sure you want to view ' + file.getName() + " of size " + sizeMb + 'MiB?';
			if (this.detectFirefoxWritableSteams()) {
				this.warning_body = "Firefox has added support for streaming behind a feature flag. To enable streaming; open about:config, enable 'javascript.options.writable_streams' and then open a new tab";
			} else {
				this.warning_body = "We recommend Chrome for downloads of large files. Your browser doesn't support it and may crash or be very slow";
			}
			this.warning_consumer_func = viewFn;
			this.showWarning = true;
		},
        addMediaHandlers(mediaElement, file) {
            let that = this;
            if ('mediaSession' in navigator) {
                let thumbnail = file.getBase64Thumbnail();
                navigator.mediaSession.metadata = new MediaMetadata({
                    title: file.getFileProperties().name,
                    artwork: [{ src: thumbnail}]
                });
                navigator.mediaSession.setActionHandler('pause', () => {
                    mediaElement.pause();
                });
                navigator.mediaSession.setActionHandler('play', () => {
                    mediaElement.play();
                });
                let defaultSeekOffset = 10;
                navigator.mediaSession.setActionHandler('seekbackward', (details) => {
                    mediaElement.currentTime = mediaElement.currentTime - (details.seekOffset || defaultSeekOffset);
                });
                navigator.mediaSession.setActionHandler('seekforward', (details) => {
                    mediaElement.currentTime = mediaElement.currentTime + (details.seekOffset || defaultSeekOffset);
                });
                navigator.mediaSession.setActionHandler('previoustrack', () => {
                    that.previous();
                });
                navigator.mediaSession.setActionHandler('nexttrack', () => {
                    that.next();
                });
            }
        },
        updateMediaElement(index, url) {
            let that = this;
            this.showGalleryTitle();
            let file = this.showableFiles[index];
            this.$nextTick(function () {
                let next = document.getElementById("slideshow-next");
                let prev = document.getElementById("slideshow-prev");
                if (index === 0) {
                    prev.classList.add('hidden');
                } else {
                    prev.classList.remove('hidden');
                }
                if (index === this.showableFiles.length - 1) {
                    next.classList.add('hidden');
                } else {
                    next.classList.remove('hidden');
                }
                let wrapper = document.getElementById("slideshow-wrapper-id");
                wrapper.innerText = '';
                if(that.isVideo(file)) {
                    wrapper.style.backgroundImage = '';
                    let vid = document.createElement('video');
                    vid.setAttribute('autoplay','true');
                    vid.setAttribute('controls','true');
                    vid.setAttribute('src', url);
                    wrapper.appendChild(vid);
                    that.addMediaHandlers(vid, file);
                } else if(that.isAudio(file)) {
                    wrapper.style.backgroundImage = '';
                    let audio = document.createElement('audio');
                    audio.setAttribute('autoplay','true');
                    audio.setAttribute('controls','true');
                    audio.setAttribute('src', url);
                    wrapper.appendChild(audio);
                    that.addMediaHandlers(audio, file);
                } else {
                    wrapper.innerText = '';
                    let img = new Image();
                    img.src = url;
                    img.classList.add("image-display");
                    wrapper.appendChild(img);
                }
            });
        },
        update() {
            let index = this.fileIndex;
            if (this.cache[index] != null) {
                this.updateMediaElement(index, this.cache[index]);
                this.prefetch(index + 1);
                return;
            }
			let file = this.showableFiles[this.fileIndex];
			if (file.isDirectory()) return;
			let props = file.getFileProperties();
			let that = this;
			this.showSpinner = true;

			let isLargeAudioFile =
				that.isAudio(file) && that.getFileSize(props) > 1024 * 1024 * 5;
			if (
				that.supportsVideoStreaming() &&
				(that.isVideo(file) || isLargeAudioFile)
			) {
				let size = that.getFileSize(props);
				function Context(file, network, crypto, sizeHigh, sizeLow) {
					this.maxBlockSize = 1024 * 1024 * 5;
					this.writer = null;
					this.file = file;
					this.network = network;
					this.crypto = crypto;
					(this.sizeHigh = sizeHigh), (this.sizeLow = sizeLow);
					this.readerFuture = null;
					this.stream = function (seekHi, seekLo, length, uuid) {
						let work = function (thatRef, header) {
							var currentSize = length;
							var blockSize = currentSize > this.maxBlockSize ? this.maxBlockSize: currentSize;
							let pump = function (reader) {
								if (blockSize > 0) {
                                    let bytes = new Uint8Array(blockSize + header.byteLength);
                                    for(var i=0;i < header.byteLength;i++){
                                        bytes[i] = header[i];
                                    }
                                    let data = convertToByteArray(bytes);
									return reader
										.readIntoArray(data, header.byteLength, blockSize)
										.thenApply(function (read) {
											currentSize = currentSize - read.value_0;
											blockSize = currentSize > thatRef.maxBlockSize ? thatRef.maxBlockSize
													: currentSize;
											thatRef.writer.write(data);
											return pump(reader);
										});
								} else {
									var future = peergos.shared.util.Futures.incomplete();
									future.complete(true);
									return future;
								}
							};
							var update = thatRef.readerFuture != null ? thatRef.readerFuture
									: file.getBufferedInputStream(network, crypto, sizeHigh, sizeLow, 10,
											function (read) {});
							update.thenCompose(function (reader) {
								return reader
									.seekJS(seekHi, seekLo)
									.thenApply(function (seekReader) {
										var readerFuture = peergos.shared.util.Futures.incomplete();
										readerFuture.complete(seekReader);
										thatRef.readerFuture = readerFuture;
										return pump(seekReader);
									});
							});
						};
						return work(this, buildHeader(uuid));
					};
				}
				const context = new Context(file, this.context.network, this.context.crypto, props.sizeHigh(),
					props.sizeLow());
				console.log("streaming data of length " + size);
				let fileStream = streamSaver.createWriteStream("media-" + props.name, props.mimeType,
					function (url) {
					    that.updateMediaElement(index, url);
						that.showSpinner = false;
						that.pinging = true;
						that.startPing(url + "/ping");
					},
					function (seekHi, seekLo, seekLength, uuid) {
						context.stream(seekHi, seekLo, seekLength, uuid);
					},
					undefined, size);
				context.writer = fileStream.getWriter();
			} else {
				file.getInputStream(this.context.network, this.context.crypto, props.sizeHigh(), props.sizeLow(),
					function (read) {}
				).thenCompose(function (reader) {
					let size = that.getFileSize(props);
					let data = convertToByteArray(new Int8Array(size));
					return reader.readIntoArray(data, 0, data.length)
						.thenApply(function (read) {
                            let type = file.getFileProperties().mimeType;
                            let blob = new Blob([data], { type: type });
                            let url = window.URL.createObjectURL(blob);
    						that.updateMediaElement(index, url);
							that.showSpinner = false;
						    console.log("Finished retrieving media of size " + data.length);
                            that.prefetch(index + 1);
						});
				});
			}
		},
		buildHeader(uuid) {
            let encoder = new TextEncoder();
            let uuidBytes = encoder.encode(uuid);
            let uuidSize = uuidBytes.byteLength;
            let headerSize = 1 + uuidSize;
            let data = new Uint8Array(headerSize);
            var offset = 0;
            data.set([uuidSize], offset);
            offset = offset + 1;
            data.set(uuidBytes, offset);
            return data;
                },
            prefetch(index) {
                if (this.cache[index] != null)
                    return;
                if (index > this.showableFiles.length)
                    return;
                if (index - 10 > 0) // keep cache small
                    this.cache[index-10] = null;
                let file = this.showableFiles[index];
		if (file.isDirectory()) return;
		let props = file.getFileProperties();
                // only prefetch small files
                if (this.getFileSize(props) > 10 * 1024 * 1024)
                    return
                let that = this;
                file.getInputStream(this.context.network, this.context.crypto, props.sizeHigh(), props.sizeLow(),
				    function (read) {}
				   ).thenCompose(function (reader) {
				       let size = that.getFileSize(props);
				       let data = convertToByteArray(new Int8Array(size));
				       return reader.readIntoArray(data, 0, data.length)
					   .thenApply(function (read) {
                                               let type = file.getFileProperties().mimeType;
                                               let blob = new Blob([data], { type: type });
                                               let url = window.URL.createObjectURL(blob);
    					       that.cache[index] = url;
					   });
				   });
            },
		isImage(file) {
			if (file == null) return false;
			let mimeType = file.getFileProperties().mimeType;
			return mimeType.startsWith("image");
		},
		isVideo(file) {
			if (file == null) return false;
			let mimeType = file.getFileProperties().mimeType;
			return mimeType.startsWith("video");
		},
		isAudio(file) {
			if (file == null) return false;
			let mimeType = file.getFileProperties().mimeType;
			return mimeType.startsWith("audio");
		},
	}
};

},{ "../../mixins/downloader/index.js": 53, "../Warning.vue": 59, "../spinner/Spinner.vue": 16}], 73:[function(require,module,exports){
module.exports = {
render: function() {with(this){return _c('div',{staticClass:"drive-grid"},[_t("default")],2)}},
}

},{}], 74:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const AppIcon = require("../AppIcon.vue");

module.exports = {
render: function() {with(this){return _c('article',{staticClass:"grid-card"},[_c('AppButton',{staticClass:"card__select",class:{selected: selected},attrs:{"accent":selected,"round":"","outline":""},nativeOn:{"click":function($event){$event.stopPropagation();return toggleSelection($event)}}}),_v(" "),_c('AppButton',{staticClass:"card__menu",attrs:{"icon":"dot-menu","aria-label":"menu"},nativeOn:{"click":function($event){$event.stopPropagation();return showMenu($event)}}}),_v(" "),_c('figure',{attrs:{"id":itemIndex,"draggable":"true"},on:{"dragover":function($event){$event.preventDefault();},"dragstart":function($event){return dragstartFunc($event, file)},"drop":function($event){return dropFunc($event, file)}}},[(src)?_c('img',{staticClass:"cover",attrs:{"src":src,"alt":alt}}):_c('AppIcon',{staticClass:"card__icon",attrs:{"icon":cardIcon}}),_v(" "),_c('figcaption',[_v(" "+_s(filename))])],1)],1)}},    components: {
        AppButton,
	    AppIcon,
    },
	props: [
		'filename',
		'src',
		'alt',
		'srcset',
		'type',
		'dragstartFunc',
		'dropFunc',
		'file',
		'itemIndex',
        'selected'
	],
	computed:{
		cardIcon(){
			if (this.type == 'dir') 	return 'folder--72';
			if (this.type == 'image') 	return 'file-image--72';
			if (this.type == 'text') 	return 'file-text--72';
			if (this.type == 'audio') 	return 'file-audio--72';
			if (this.type == 'video') 	return 'file-video--72';
			if (this.type == 'pdf') 	return 'file-pdf--72';
			if (this.type == 'zip') 	return 'file-zip--72';
			if (this.type == 'todo') 	return 'tasks--72';
			if (this.type == 'calendar') 	return 'calendar--72';
			if (this.type == 'contact file') 	return 'file-card--72';
			if (this.type == 'powerpoint presentation' || this.type == 'presentation') 	return 'file-powerpoint--72';
			if (this.type == 'word document' || this.type == 'text document') 	return 'file-word--72';
		        if (this.type == 'excel spreadsheet' || this.type == 'spreadsheet') 	return 'file-excel--72';
                        return 'file-generic--72';
		}
	},
	methods:{
		showMenu(e){
			this.$store.commit('SET_DRIVE_MENU_TARGET', e.currentTarget)
			this.$emit('openMenu')
		},
        toggleSelection(event){
            let shift = event.shiftKey;
            this.$emit('toggleSelection', shift);
        }
	},
    directives: {
        // https://blog.logrocket.com/building-a-long-press-directive-in-vue-3408d60fb511/
        // this directive could eventually be registered as global! 
        longpress: {
            bind: function (el, binding, vNode) {
                // Make sure expression provided is a function
                if (typeof binding.value !== 'function') {
                    // Fetch name of component
                    const compName = vNode.context.name
                    // pass warning to console
                    let warn = `[longpress:] provided expression '${binding.expression}' is not a function, but has to be`
                    if (compName) {warn += `Found in component '${compName}'`}
                    console.warn(warn)
                }

                let pressTimer = null

                // Define function handlers
                // Create timeout (run function after 1s)
                let start = (e) => {
                    if (e.type === 'click' && e.button !== 0) {
                        return
                    }

                    if (pressTimer === null) {
                        pressTimer = setTimeout(()=>{
                        handler()
                        }, 1000)
                    }
                }

                // Cancel timeout
                let cancel = (e) => {
                    // Check if timer has value or not
                    if (pressTimer !== null) {
                        clearTimeout(pressTimer)
                        pressTimer = null
                    }
                }

                // Run function
                const handler = (e) => {
                    binding.value(e)
                }

                el.addEventListener("mousedown", start);
                el.addEventListener("touchstart", start);
                // Cancel timeouts if this events happen
                el.addEventListener("click", cancel);
                el.addEventListener("mouseout", cancel);
                el.addEventListener("touchend", cancel);
                el.addEventListener("touchcancel", cancel);                
            } 
        }
    }

};

},{ "../AppButton.vue": 2, "../AppIcon.vue": 1}], 75:[function(require,module,exports){
const AppIcon = require("../AppIcon.vue");
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('figure',{staticClass:"grid-card drop",on:{"click":function($event){return askForFiles()}}},[_c('AppIcon',{staticClass:"card__icon",attrs:{"icon":"upload--72"}}),_v(" "),_c('figcaption',[_v(_s(translate("DRIVE.DROP")))])],1)}},    components: {
	    AppIcon,
    },
    mixins:[i18n],
    props: {
    },
    methods: {
        askForFiles() {
            document.getElementById('uploadFileInput').click();
        },
    },
};

},{ "../../i18n/index.js": 11, "../AppIcon.vue": 1}], 72:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const AppDropdown = require("../AppDropdown.vue");
const AppIcon = require("../AppIcon.vue");
const AppSandbox = require("../sandbox/AppSandbox.vue");
const UserSettings = require("../UserSettings.vue");
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('header',{staticClass:"drive-header"},[_c('nav',{staticClass:"drive-breadcrumb"},[(!(path.length >2 && path[1] == '.apps'))?_c('AppButton',{staticClass:"breadcrumb__root",attrs:{"aria-label":"global files"},nativeOn:{"click":function($event){return $emit('goBackToLevel', 0 )}}},[_c('AppIcon',{attrs:{"icon":"globe--24"}}),_v(" "),(!path.length)?_c('span',[_v("global")]):_e()],1):_e(),_v(" "),_l((path),function(dir,index){return (!(path.length >2 && path[1] == '.apps'))?[(index!==0)?_c('AppIcon',{staticClass:"breadcrumb__separator",attrs:{"icon":"chevron--24","aria-hidden":"true"}}):_e(),_v(" "),_c('AppButton',{key:index,staticClass:"breadcrumb__item",attrs:{"aria-label":dir,"tabindex":"-1"},nativeOn:{"click":function($event){return $emit('goBackToLevel', index + 1 )}}},[_v(_s(dir))])]:_e()}),_v(" "),_l((path),function(dir,index){return (path.length >2 && path[1] == '.apps')?[(index>2)?_c('AppIcon',{staticClass:"breadcrumb__separator",attrs:{"icon":"chevron--24","aria-hidden":"true"}}):_e(),_v(" "),(index>2)?_c('AppButton',{key:index,staticClass:"breadcrumb__item",attrs:{"aria-label":dir,"tabindex":"-1"},nativeOn:{"click":function($event){return $emit('goBackToLevel', index + 1 )}}},[_v(_s(dir))]):_e(),_v(" "),(index==2)?_c('AppButton',{key:index,staticClass:"breadcrumb__item",attrs:{"aria-label":dir,"tabindex":"-1"}},[_v(_s(dir))]):_e()]:_e()})],2),_v(" "),_c('div',{staticClass:"drive-tools"},[_c('AppButton',{staticClass:"change-view",attrs:{"icon":gridView ? 'list' : 'grid',"aria-label":gridView ? 'list view' : 'grid view'},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return $emit('switchView')}},nativeOn:{"click":function($event){return $emit('switchView')}}}),_v(" "),_c('AppButton',{staticClass:"search",attrs:{"icon":"search","aria-label":"search"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return $emit('search')}},nativeOn:{"click":function($event){return $emit('search')}}}),_v(" "),(isWritable)?_c('AppDropdown',{staticClass:"upload",attrs:{"icon":"plus","accent":"","aria-label":"Upload"}},[_c('ul',[_c('li',{on:{"click":function($event){return askForFiles()}}},[_v(_s(translate("DRIVE.UPLOAD.FILES")))]),_v(" "),_c('li',{on:{"click":function($event){return askForDirectories()}}},[_v(_s(translate("DRIVE.UPLOAD.FOLDER")))]),_v(" "),_c('li',{on:{"click":function($event){return $emit('createFile')}}},[_v(_s(translate("DRIVE.NEW.FILE")))]),_v(" "),_c('li',{on:{"click":function($event){return $emit('askMkdir')}}},[_v(_s(translate("DRIVE.NEW.FOLDER")))]),_v(" "),_c('li',{on:{"click":function($event){return $emit('newApp')}}},[_v(_s(translate("DRIVE.NEW.APP")))]),_v(" "),(canPaste)?_c('li',{on:{"click":function($event){return $emit('paste')}}},[_v(_s(translate("DRIVE.PASTE")))]):_e()])]):_e()],1),_v(" "),_c('UserSettings'),_v(" "),(showAppSandbox)?_c('AppSandbox',{attrs:{"sandboxAppName":sandboxAppName,"currentFile":null},on:{"hide-app-sandbox":closeAppSandbox}}):_e()],1)}},	components: {
	    AppButton,
		AppDropdown,
		AppIcon,
        AppSandbox,
		UserSettings
	},
    mixins:[i18n],
    data() {
        return {
            showAppSandbox: false,
            sandboxAppName: ''
        };
    },
	props: {
		gridView: {
			type: Boolean,
			default: true
		},
		isWritable: {
			type: Boolean,
			default: true
		},
		canPaste: {
			type: Boolean,
			default: false
		},
		path:{
			type: Array,
			default: ()=>[]
		}
	},
	computed: {
        ...Vuex.mapState([
            "sandboxedApps"
        ]),
	},
	methods: {
	    appCreateNewInstance(appName) {
            this.showAppSandbox = true;
            this.sandboxAppName = appName;
        },
        closeAppSandbox() {
            this.showAppSandbox = false;
        },
		askForFiles() {
			document.getElementById('uploadFileInput').click();
		},

		askForDirectories() {
			document.getElementById('uploadDirectoriesInput').click();
		},
	},
}

},{ "../../i18n/index.js": 11, "../AppButton.vue": 2, "../AppDropdown.vue": 69, "../AppIcon.vue": 1, "../UserSettings.vue": 71, "../sandbox/AppSandbox.vue": 66}], 81:[function(require,module,exports){
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"drop"}},[_c('nav',{staticClass:"drive-menu",class:{'mobile' : isMobile},style:(menuPosition),attrs:{"tabindex":"0"},on:{"focusout":function($event){return $emit('closeMenu')}}},[_c('ul',[_t("default")],2)])])}},
	computed: {
		...Vuex.mapState([
			'driveMenuTarget',
			'windowWidth'
		]),
		isMobile(){
			return this.windowWidth < 1024
		},
		menuPosition(){
			if(!this.isMobile){

				const target = this.driveMenuTarget.getBoundingClientRect();

				let maxWidth = this.windowWidth - 290;
				let xPos = target.left
				let yPos = target.top + window.scrollY

				if(xPos >maxWidth){
					xPos = maxWidth
				}
				return `left: ${xPos}px; top: ${yPos}px;`
			}
		}

	}
}

},{}], 82:[function(require,module,exports){const AppButton = require("../AppButton.vue");
const AppDropdown = require("../AppDropdown.vue");
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('div',{staticClass:"drive-selected"},[_c('div',{staticStyle:{"display":"ruby"}},[(selectedFiles.length)?_c('AppButton',{staticClass:"card__select",class:{selected: totalFiles == selectedFiles.length},attrs:{"round":"","outline":"","accent":totalFiles == selectedFiles.length,"aria-label":"Select All"},nativeOn:{"click":function($event){return $emit('selectAllOrNone', 0 )}}}):_e(),_v(" "),(selectedFiles.length)?_c('AppDropdown',{attrs:{"accent":"","aria-expanded":"true","aria-label":"Multi selection menu"},scopedSlots:_u([{key:"trigger",fn:function(){return [_c('span',[_v(" "+_s(translate("DRIVE.WITH"))+" "+_s(selectedFiles.length)+" "+_s(translate("DRIVE.SELECTED"))+" ")])]},proxy:true}],null,false,211387702)},[_v(" "),_c('ul',[_t("default")],2)]):_e()],1)])}},  components: {
    AppButton,
    AppDropdown,
  },
  mixins:[i18n],
  props: {
    selectedFiles: {
      type: Array,
      default: () => [],
    },
    totalFiles: {
        type: Number,
        default: 0,
    },
  },
};
},{ "../../i18n/index.js": 11, "../AppButton.vue": 2, "../AppDropdown.vue": 69}], 40:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const Choice = require('../choice/Choice.vue');
const Spinner = require("../spinner/Spinner.vue");
const FormAutocomplete = require("../form/FormAutocomplete.vue");
const SecretLink = require("SecretLink.vue");
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticClass:"drive-share modal-container full-height",staticStyle:{"overflow-y":"auto","max-width":"1000px"},on:{"click":function($event){$event.stopPropagation();}}},[_c('span',{staticClass:"close",attrs:{"tabindex":"0","aria-label":"close"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")]),_v(" "),(showSpinner)?_c('Spinner'):_e(),_v(" "),_c('div',{staticClass:"modal-header"},[_c('h4',[_v(_s(translate("DRIVE.SHARE"))+" "+_s(displayName))])]),_v(" "),_c('div',{staticClass:"modal-body"},[_c('fieldset',{staticClass:"share-fields"},[_c('FormAutocomplete',{attrs:{"is-multiple":"","minchars":0,"options":allNames,"placeholder":translate('DRIVE.SHARE.USER')},model:{value:(targetUsernames),callback:function ($$v) {targetUsernames=$$v},expression:"targetUsernames"}}),_v(" "),(this.allowReadWriteSharing)?_c('label',{staticClass:"checkbox__group"},[_v("\n\t\t\t\t\t\t\t"+_s(translate("DRIVE.SHARE.R"))+"\n\t\t\t\t\t\t\t"),_c('input',{directives:[{name:"model",rawName:"v-model",value:(sharedWithAccess),expression:"sharedWithAccess"}],attrs:{"type":"radio","value":"Read","name":""},domProps:{"checked":_q(sharedWithAccess,"Read")},on:{"change":function($event){sharedWithAccess="Read"}}}),_v(" "),_c('span',{staticClass:"checkmark"})]):_e(),_v(" "),(this.allowReadWriteSharing && this.files[0].getOwnerName() == this.context.username)?_c('label',{staticClass:"checkbox__group"},[_v("\n\t\t\t\t\t\t\t"+_s(translate("DRIVE.SHARE.RW"))+"\n\t\t\t\t\t\t\t"),_c('input',{directives:[{name:"model",rawName:"v-model",value:(sharedWithAccess),expression:"sharedWithAccess"}],attrs:{"type":"radio","value":"Edit","name":""},domProps:{"checked":_q(sharedWithAccess,"Edit")},on:{"change":function($event){sharedWithAccess="Edit"}}}),_v(" "),_c('span',{staticClass:"checkmark"})]):_e(),_v(" "),_c('label',[_v(_s(translate("DRIVE.SHARE.GROUP"))+":")]),_v(" "),_c('label',{staticClass:"checkbox__group"},[_v("\n\t\t\t\t\t\t\t"+_s(translate("DRIVE.SHARE.FRIENDS"))+"\n\t\t\t\t\t\t\t"),_c('input',{directives:[{name:"model",rawName:"v-model",value:(shareWithFriendsGroup),expression:"shareWithFriendsGroup"}],attrs:{"type":"checkbox","name":""},domProps:{"checked":Array.isArray(shareWithFriendsGroup)?_i(shareWithFriendsGroup,null)>-1:(shareWithFriendsGroup)},on:{"change":[function($event){var $$a=shareWithFriendsGroup,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(shareWithFriendsGroup=$$a.concat([$$v]))}else{$$i>-1&&(shareWithFriendsGroup=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{shareWithFriendsGroup=$$c}},function($event){return onFriendChange()}]}}),_v(" "),_c('span',{staticClass:"checkmark"})]),_v(" "),_c('label',{staticClass:"checkbox__group"},[_v("\n\t\t\t\t\t\t\t"+_s(translate("DRIVE.SHARE.FOLLOWERS"))+"\n\t\t\t\t\t\t\t"),_c('input',{directives:[{name:"model",rawName:"v-model",value:(shareWithFollowersGroup),expression:"shareWithFollowersGroup"}],attrs:{"type":"checkbox","name":""},domProps:{"checked":Array.isArray(shareWithFollowersGroup)?_i(shareWithFollowersGroup,null)>-1:(shareWithFollowersGroup)},on:{"change":[function($event){var $$a=shareWithFollowersGroup,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(shareWithFollowersGroup=$$a.concat([$$v]))}else{$$i>-1&&(shareWithFollowersGroup=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{shareWithFollowersGroup=$$c}},function($event){return onFollowerChange()}]}}),_v(" "),_c('span',{staticClass:"checkmark"})]),_v(" "),_c('AppButton',{attrs:{"disabled":this.targetUsernames.slice().length == 0 && !this.shareWithFriendsGroup &&  !this.shareWithFollowersGroup,"accent":"","aria-label":"Share"},nativeOn:{"click":function($event){return shareWith()}}},[_v("\n\t\t\t\t\t\t\t"+_s(translate("DRIVE.SHARE"))+"\n\t\t\t\t\t\t")])],1),_v(" "),(this.allowReadWriteSharing)?_c('div',{staticClass:"modal-section"},[(data.edit_shared_with_users.length > 0)?_c('div',[_c('p',[_v(_s(translate("DRIVE.SHARE.RWACCESS"))+":")]),_v(" "),(this.files[0].getOwnerName() == this.context.username)?_c('div',[_l((filterEditSharedWithUsers()),function(user){return _c('div',[_c('label',{staticClass:"checkbox__group"},[_v("\n\t\t\t\t\t\t\t\t\t\t"+_s(getUserOrGroupName(user))+"\n\t\t\t\t\t\t\t\t\t\t"),_c('input',{directives:[{name:"model",rawName:"v-model",value:(unsharedEditAccessNames),expression:"unsharedEditAccessNames"}],attrs:{"type":"checkbox","id":user},domProps:{"value":user,"checked":Array.isArray(unsharedEditAccessNames)?_i(unsharedEditAccessNames,user)>-1:(unsharedEditAccessNames)},on:{"change":function($event){var $$a=unsharedEditAccessNames,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=user,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(unsharedEditAccessNames=$$a.concat([$$v]))}else{$$i>-1&&(unsharedEditAccessNames=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{unsharedEditAccessNames=$$c}}}}),_v(" "),_c('span',{staticClass:"checkmark"})])])}),_v(" "),_c('button',{staticClass:"btn btn-success",attrs:{"disabled":this.unsharedEditAccessNames.length == 0},on:{"click":function($event){return unshare('Edit')}}},[_v(_s(translate("DRIVE.SHARE.REVOKE")))])],2):_e(),_v(" "),(this.files[0].getOwnerName() != this.context.username)?_c('div',_l((filterEditSharedWithUsers()),function(user){return _c('div',[_v("\n\t\t\t\t\t\t\t\t\t"+_s(getUserOrGroupName(user))+"\n\t\t\t\t\t\t\t\t")])}),0):_e()]):_c('p',[_v(_s(translate("DRIVE.SHARE.RWACCESS"))+": "+_s(translate("DRIVE.SHARE.NONE")))])]):_e(),_v(" "),_c('div',{staticClass:"modal-section"},[(data.read_shared_with_users.length > 0)?_c('div',[_c('p',[_v(_s(translate("DRIVE.SHARE.RACCESS"))+":")]),_v(" "),(this.files[0].getOwnerName() == this.context.username)?_c('div',[_l((filterReadSharedWithUsers()),function(user){return _c('div',[_c('label',{staticClass:"checkbox__group"},[_v("\n\t\t\t\t\t\t\t\t\t\t"+_s(getUserOrGroupName(user))+"\n\t\t\t\t\t\t\t\t\t\t"),_c('input',{directives:[{name:"model",rawName:"v-model",value:(unsharedReadAccessNames),expression:"unsharedReadAccessNames"}],attrs:{"type":"checkbox","id":user},domProps:{"value":user,"checked":Array.isArray(unsharedReadAccessNames)?_i(unsharedReadAccessNames,user)>-1:(unsharedReadAccessNames)},on:{"change":function($event){var $$a=unsharedReadAccessNames,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=user,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(unsharedReadAccessNames=$$a.concat([$$v]))}else{$$i>-1&&(unsharedReadAccessNames=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{unsharedReadAccessNames=$$c}}}}),_v(" "),_c('span',{staticClass:"checkmark"})])])}),_v(" "),_c('button',{staticClass:"btn btn-success",attrs:{"disabled":this.unsharedReadAccessNames.length == 0},on:{"click":function($event){return unshare('Read')}}},[_v("Revoke")])],2):_e(),_v(" "),(this.files[0].getOwnerName() != this.context.username)?_c('div',_l((filterReadSharedWithUsers()),function(user){return _c('div',[_v("\n\t\t\t\t\t\t\t\t\t"+_s(getUserOrGroupName(user))+"\n\t\t\t\t\t\t\t\t")])}),0):_e()]):_c('p',[_v(_s(translate("DRIVE.SHARE.RACCESS"))+": "+_s(translate("DRIVE.SHARE.NONE")))])]),_v(" "),(this.allowCreateSecretLink)?_c('div',{staticClass:"modal-section"},[_c('AppButton',{attrs:{"accent":"","aria-label":"Create Secret Link"},nativeOn:{"click":function($event){return createSecretLink()}}},[_v("\n\t\t\t\t\t\t\t"+_s(translate("DRIVE.SHARE.LINK"))+"\n\t\t\t\t\t\t")])],1):_e(),_v(" "),(showChoice)?_c('Choice',{attrs:{"choice_message":choice_message,"choice_body":choice_body,"choice_consumer_func":choice_consumer_func,"choice_options":choice_options},on:{"hide-choice":function($event){showChoice = false}}}):_e(),_v(" "),(showModal)?_c('SecretLink',{attrs:{"title":modalTitle,"link":modalLink,"host":this.linkHost,"existingProps":existingProps,"username":this.context.username},on:{"hide-modal":closeSecretLinkModal}}):_e(),_v(" "),(secretLinksList!=0)?_c('div',{staticClass:"table-responsive"},[_c('table',{staticClass:"table"},[_c('thead',[(secretLinksList!=0)?_c('tr',[_c('th',[_v("Access")]),_v(" "),_c('th',[_v("Password")]),_v(" "),_c('th',[_v("Max Count")]),_v(" "),_c('th',[_v("Expiry")])]):_e()]),_v(" "),_c('tbody',_l((secretLinksList),function(item){return _c('tr',[_c('td',[_v(_s(item.isLinkWritable ? "Writable" : "Read-only"))]),_v(" "),_c('td',[_v(_s(item.userPassword))]),_v(" "),_c('td',[_v(_s(item.maxRetrievals.ref != null ? item.maxRetrievals.ref.toString() : "-"))]),_v(" "),_c('td',[_v(_s(item.expiry.ref != null ? formatDateTime(item.expiry.ref) : "-"))]),_v(" "),_c('td',[_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return editLink(item)}}},[_v(_s(translate("DRIVE.LINK.VIEWEDIT")))])]),_v(" "),_c('td',[_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return deleteLink(item)}}},[_v("Delete")])])])}),0)])]):_e()],1)],1)])])}},	components: {
	    AppButton,
	    Choice,
	    FormAutocomplete,
            SecretLink,
            Spinner,
	},
        mixins:[i18n],
	data() {
		return {
		    showSpinner: false,
		    targetUsername: "",
		    targetUsernames: [],
		    sharedWithAccess: "Read",
		    shareWithFriendsGroup: false,
		    shareWithFollowersGroup: false,
		    unsharedReadAccessNames: [],
		    unsharedEditAccessNames: [],
		    showModal: false,
		    modalTitle: "",
		    modalLink: null,
                    showChoice: false,
                    choice_message: '',
                    choice_body: '',
                    choice_consumer_func: () => {},
                    choice_options: [],
                    existingProps:null,
                    secretLinksList: [],
                    linkHost: "",
		};
	},
	props: [
	    "data",
	    "files",
	    "path",
	    "fromApp",
	    "displayName",
	    "allowReadWriteSharing",
	    "allowCreateSecretLink",
	    "autoOpenSecretLink",
	    "currentDir"
	],
	computed: {
		...Vuex.mapState([
			'context',
			'socialData'
		]),
		allNames() {
			// return this.followernames.concat(this.friendnames);
			return this.socialData.followers.concat(this.socialData.friends);
		}
	},
    created: function() {
        this.loadSecretLinks();
    },
	methods: {
        loadSecretLinks() {
            let that = this;
            this.context.getLinkHost().thenApply(host => {
               that.linkHost = host;
            });
            this.showSpinner = true;
            let file = this.files[0];
            let props = file.getFileProperties();
            let directoryPath = peergos.client.PathUtils.directoryToPath(this.path);
            this.context.getDirectorySharingState(directoryPath).thenApply(function (sharedWithState) {
                let fileSharingState = sharedWithState.get(props.name);
                that.secretLinksList = fileSharingState.links.toArray([]);
                that.showSpinner = false;
            });
        },
        closeSecretLinkModal() {
            this.showModal = false;
            this.existingProps = null;
            this.loadSecretLinks();
            this.refreshFiles();
        },
        formatDateTime(dateTime) {
            let date = new Date(dateTime.toString() + "+00:00"); //adding UTC TZ in ISO_OFFSET_DATE_TIME ie 2021-12-03T10:25:30+00:00
            let formatted = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate()
                + ' ' + (date.getHours() < 10 ? '0' : '') + date.getHours()
                + ':' + (date.getMinutes() < 10 ? '0' : '') + date.getMinutes()
                + ':' + (date.getSeconds() < 10 ? '0' : '') + date.getSeconds();
            return formatted;
        },
        deleteLink(link) {
            let that = this;
            let filePath = peergos.client.PathUtils.toPath(this.path, this.files[0].getFileProperties().name);
            this.showSpinner = true;
            this.context.deleteSecretLink(link.getLinkLabel(), filePath, false).thenApply(function (sharedWithState) {
                that.showSpinner = false;
                let index = that.secretLinksList.findIndex(e => {
                    return e.getLinkLabel() == link.getLinkLabel();
                })
                that.secretLinksList.splice(index, 1);
                that.existingProps = null;
                that.refreshFiles();
            }).exceptionally(function (throwable) {
                console.log(throwable);
                that.showSpinner = false;
                //todo that.$toast.error(that.translate("DRIVE.SHARE.ERROR") + ` ${that.files[0].getFileProperties().name}: ${throwable.getMessage()}`, {timeout:false, id: 'share'})
            });
        },
            editLink(props) {
                this.existingProps = props;
                this.buildSecretLink(false);
            },
		close() {
			this.showSpinner = false;
			this.$emit("hide-share-with");
		},
		refreshFiles() {
		    this.$emit("update-files");
		},
		refresh() {
			if (!this.fromApp) {
				this.$emit("update-shared-refresh");
			}
		},
            isUserRoot() {
                let file = this.files[0];
                return file.isUserRoot();
            },
		createSecretLink() {
			if (this.files.length == 0) return this.close();
			if (this.files.length != 1)
				throw "Unimplemented multiple file share call";

			let name = this.displayName.toLowerCase();
		    let that = this;
			if (this.currentDir != null && (name.endsWith('.html') || name.endsWith('.md') || name.endsWith('.note') || name == 'peergos-app.json') && !this.isUserRoot()) {
                this.choice_message = this.translate("DRIVE.SHARE.CONFIRM");
                this.choice_body = '';
                this.choice_consumer_func = (index) => {
                    that.buildSecretLink(index == 1 ? true: false);
                };
                this.choice_options = [this.translate("DRIVE.SHARE.CREATE.FILE"), this.translate("DRIVE.SHARE.CREATE.FOLDER")];
                this.showChoice = true;
            } else {
                this.buildSecretLink(false);
            }
        },
		buildSecretLink(shareFolderWithFile) {
            let file = this.files[0];
            var link = null;
            let props = file.getFileProperties();
            var name = this.displayName;
			let isFile = !props.isDirectory;
            let filePath = peergos.client.PathUtils.directoryToPath(this.path).toString();
			link = {
			        file: file,
			        filename:props.name,
                                path:filePath,
				name: name,
				id: "secret_link_" + name,
				isFile: isFile,
				shareFolderWithFile: shareFolderWithFile,
                autoOpen: (shareFolderWithFile === true || this.autoOpenSecretLink),
			};
			var title = "";
			if (shareFolderWithFile) {
                title = this.translate("DRIVE.SHARE.FOLDER.OPEN") + ": ";
			} else if (isFile) {
                title = this.translate("DRIVE.SHARE.FILE")+": ";
            } else {
                title = this.translate("DRIVE.SHARE.FOLDER")+": ";
            }
			this.showLinkModal(title, link);
		},

		showLinkModal(title, link) {
			this.showModal = true;
			this.modalTitle = title;
			this.modalLink = link;
		},
		onFriendChange() {
			if (this.shareWithFollowersGroup && this.shareWithFriendsGroup) {
				this.shareWithFollowersGroup = false;
			}
		},
		onFollowerChange() {
			if (this.shareWithFollowersGroup && this.shareWithFriendsGroup) {
				this.shareWithFriendsGroup = false;
			}
		},
		unshare(sharedWithAccess) {
			if (this.files.length == 0) return this.close();
			if (this.files.length != 1)
				throw "Unimplemented multiple file share call";

			var that = this;
			this.showSpinner = true;
			let filePath = peergos.client.PathUtils.toPath(
				this.path,
				this.files[0].getFileProperties().name
			);
			this.context
				.sharedWith(filePath)
				.thenApply(function (fileSharedWithState) {
					let read_usernames = fileSharedWithState.readAccess.toArray(
						[]
					);
					let edit_usernames =
						fileSharedWithState.writeAccess.toArray([]);
					that.unshareFileWith(
						read_usernames,
						edit_usernames,
						sharedWithAccess
					);
				})
				.exceptionally(function (throwable) {
					that.showSpinner = false;
					that.$toast.error(that.translate("DRIVE.SHARE.ERROR") + ` ${that.files[0].getFileProperties().name}: ${throwable.getMessage()}`, {timeout:false, id: 'share'})
				});
		},
		unshareFileWith(read_usernames, edit_usernames, sharedWithAccess) {
			var that = this;
			var filename = this.files[0].getFileProperties().name;
			let filePath = peergos.client.PathUtils.toPath(this.path, filename);
			if (sharedWithAccess == "Read") {
				this.context
					.unShareReadAccessWith(
						filePath,
						peergos.client.JsUtil.asSet(
							this.unsharedReadAccessNames
						)
					)
					.thenApply(function (b) {
						that.showSpinner = false;
						that.$toast(that.translate("DRIVE.SHARE.REVOKE.R"))
						that.close();
						that.refresh();
					})
					.exceptionally(function (throwable) {
						that.showSpinner = false;
						that.$toast.error(that.translate("DRIVE.SHARE.ERROR.UNSHARING")+` ${filename}: ${throwable.getMessage()}`, {timeout:false, id: 'share'})

					});
			} else {
				this.context
					.unShareWriteAccessWith(
						filePath,
						peergos.client.JsUtil.asSet(
							this.unsharedEditAccessNames
						)
					)
					.thenApply(function (b) {
						that.showSpinner = false;
						that.$toast(that.translate("DRIVE.SHARE.REVOKE.RW"))
						that.close();
						that.refresh();
					})
					.exceptionally(function (throwable) {
						that.showSpinner = false;
						that.$toast.error(that.translate("DRIVE.SHARE.ERROR.UNSHARING")+` ${filename}: ${throwable.getMessage()}`, {timeout:false, id: 'share'})
					});
			}
		},
		allowedToShare(file) {
			if (file.isUserRoot()) {
				this.$toast.error(this.translate("DRIVE.SHARE.ERROR.HOME"), {timeout:false, id: 'share'})
				return false;
			}
			if (
				this.sharedWithAccess == "Edit" &&
				file.getOwnerName() != this.context.username
			) {
				this.$toast.error(this.translate("DRIVE.SHARE.ERROR.WRITE"), {timeout:false, id: 'share'})
				return false;
			}
			return true;
		},
		shareWith() {
			if (this.files.length == 0) return this.close();
			if (this.files.length != 1)
				throw "Unimplemented multiple file share call";

			if (!this.allowedToShare(this.files[0])) return;
			if (!this.shareWithFriendsGroup && !this.shareWithFollowersGroup) {
				if (this.targetUsernames.slice() == 0) {
					return;
				}
			}
			var that = this;
			this.showSpinner = true;
			let filePath = peergos.client.PathUtils.toPath(
				this.path,
				this.files[0].getFileProperties().name
			);
			this.context
				.sharedWith(filePath)
				.thenApply(function (fileSharedWithState) {
					that.showSpinner = false;
					let read_usernames = fileSharedWithState.readAccess.toArray(
						[]
					);
					let edit_usernames =
						fileSharedWithState.writeAccess.toArray([]);
					that.shareFileWith(read_usernames, edit_usernames);
				})
				.exceptionally(function (throwable) {
					that.showSpinner = false;
					that.$toast.error(that.translate("DRIVE.SHARE.ERROR") + ` ${that.files[0].getFileProperties().name}: ${throwable.getMessage()} `, {timeout:false, id: 'share'})
				});
		},
		isFriend(name) {
			return this.socialData.friends.indexOf(name) > -1;
		},
		isFollower(name) {
			return this.socialData.followers.indexOf(name) > -1 || this.isFriend(name);
		},
		filterNamesFromGroups(includesFriends, includesFollowers, name) {
			if (includesFriends && this.isFriend(name)) {
				return false;
			}
			if (includesFollowers && this.isFollower(name)) {
				return false;
			}
			return true;
		},
		filterSharedWithUsers(usernames) {
			let friendGroupUid = this.getGroupUid(
				peergos.shared.user.SocialState.FRIENDS_GROUP_NAME
			);
			let includesFriends = usernames.indexOf(friendGroupUid) > -1;
			let followerGroupUid = this.getGroupUid(
				peergos.shared.user.SocialState.FOLLOWERS_GROUP_NAME
			);
			let includesFollowers = usernames.indexOf(followerGroupUid) > -1;
			var result = usernames.filter((name) =>
				this.filterNamesFromGroups(
					includesFriends,
					includesFollowers,
					name
				)
			);
			if (includesFollowers) {
				let friendIndex = result.findIndex((v) => v === friendGroupUid);
				if (friendIndex > -1) {
					result.splice(friendIndex, 1);
				}
			}
			return result;
		},
		filterEditSharedWithUsers() {
			return this.filterSharedWithUsers(this.data.edit_shared_with_users);
		},
		filterReadSharedWithUsers() {
			return this.filterSharedWithUsers(this.data.read_shared_with_users);
		},
		getUserOrGroupName(username) {
			let groupName = this.socialData.groupsUidToName[username];

			return groupName != null ? groupName : username;
		},
		getGroupUid(groupName) {
			return this.socialData.groupsNameToUid[groupName];
		},
		rationaliseUsersToShareWith(existingSharedUsers, usersToShareWith) {
			let friendGroupUid = this.getGroupUid(
				peergos.shared.user.SocialState.FRIENDS_GROUP_NAME
			);
			let followersGroupUid = this.getGroupUid(
				peergos.shared.user.SocialState.FOLLOWERS_GROUP_NAME
			);

			let includesFriends =
				this.shareWithFriendsGroup ||
				this.isAlreadySharedWithUser(
					friendGroupUid,
					existingSharedUsers
				);
			let includesFollowers =
				this.shareWithFollowersGroup ||
				this.isAlreadySharedWithUser(
					followersGroupUid,
					existingSharedUsers
				);
			if (includesFriends || includesFollowers) {
				for (var i = usersToShareWith.length - 1; i >= 0; i--) {
					let targetUsername = usersToShareWith[i];
					let removed = false;
					if (includesFriends && this.isFriend(targetUsername)) {
						usersToShareWith.splice(i, 1);
						removed = true;
					}
					if (
						!removed &&
						includesFollowers &&
						this.isFollower(targetUsername)
					) {
						usersToShareWith.splice(i, 1);
					}
				}
			}
			return usersToShareWith;
		},
		isAlreadySharedWithUser(username, existingSharedUsers) {
			return existingSharedUsers.indexOf(username) > -1;
		},
		shareFileWith(read_usernames, edit_usernames) {
			var that = this;
			var usersToShareWith = this.targetUsernames.slice();

			let existingSharedUsers =
				this.sharedWithAccess == "Read"
					? read_usernames
					: edit_usernames;
			for (var i = usersToShareWith.length - 1; i >= 0; i--) {
				let targetUsername = usersToShareWith[i];
				if (
					this.isAlreadySharedWithUser(
						targetUsername,
						existingSharedUsers
					)
				) {
					usersToShareWith.splice(i, 1);
				}
			}
			usersToShareWith = this.rationaliseUsersToShareWith(
				existingSharedUsers,
				usersToShareWith
			);

			let friendGroupUid = this.getGroupUid(
				peergos.shared.user.SocialState.FRIENDS_GROUP_NAME
			);
			let followersGroupUid = this.getGroupUid(
				peergos.shared.user.SocialState.FOLLOWERS_GROUP_NAME
			);
			if (this.shareWithFriendsGroup) {
				if (
					!this.isAlreadySharedWithUser(
						friendGroupUid,
						existingSharedUsers
					) &&
					!this.isAlreadySharedWithUser(
						followersGroupUid,
						existingSharedUsers
					) &&
					!this.shareWithFollowersGroup
				) {
					usersToShareWith.push(friendGroupUid);
				}
			}
			if (this.shareWithFollowersGroup) {
				if (
					!this.isAlreadySharedWithUser(
						followersGroupUid,
						existingSharedUsers
					)
				) {
					usersToShareWith.push(followersGroupUid);
				}
			}
			if (usersToShareWith.length == 0) {
				that.$toast.error(that.translate("DRIVE.SHARE.ERROR.REPEAT"), {timeout:false, id: 'share'})
				return;
			}
			var filename = that.files[0].getFileProperties().name;
			let filePath = peergos.client.PathUtils.toPath(this.path, filename);
			this.showSpinner = true;
			if (this.sharedWithAccess == "Read") {
				that.context
					.shareReadAccessWith(
						filePath,
						peergos.client.JsUtil.asSet(usersToShareWith)
					)
					.thenApply(function (b) {
						that.showSpinner = false;
						that.$toast(that.translate("DRIVE.SHARE.COMPLETE"))
						that.close();
						// that.resetTypeahead();
						that.refresh();
					})
					.exceptionally(function (throwable) {
						that.showSpinner = false;
						that.$toast.error(that.translate("DRIVE.SHARE.ERROR") + ` ${filename}: ${throwable.getMessage()}`, {timeout:false, id: 'share'})

					});
			} else {
				that.context
					.shareWriteAccessWith(
						filePath,
						peergos.client.JsUtil.asSet(usersToShareWith)
					)
					.thenApply(function (b) {
						that.showSpinner = false;
						that.$toast(that.translate("DRIVE.SHARE.COMPLETE"))
						// that.resetTypeahead();
						that.close();
						that.refresh();
					})
					.exceptionally(function (throwable) {
						that.showSpinner = false;
						that.$toast.error(that.translate("DRIVE.SHARE.ERROR") + ` ${filename}: ${throwable.getMessage()}`, {timeout:false, id: 'share'})
					});
			}
		},
	},
};

},{ "../../i18n/index.js": 11, "../AppButton.vue": 2, "../choice/Choice.vue": 37, "../form/FormAutocomplete.vue": 38, "../spinner/Spinner.vue": 16, "SecretLink.vue": 39}], 76:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const mixins = require("../../mixins/downloader/index.js");
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('table',{staticClass:"drive-table"},[_c('thead',[_c('tr',[_c('th',{staticClass:"select"}),_v(" "),_c('th',{staticClass:"file",on:{"click":function($event){return $emit('sortBy', 'name')}}},[_v(_s(translate("DRIVE.NAME")))]),_v(" "),_c('th',{staticClass:"size",on:{"click":function($event){return $emit('sortBy', 'size')}}},[_v(_s(translate("DRIVE.SIZE")))]),_v(" "),_c('th',{staticClass:"type",on:{"click":function($event){return $emit('sortBy', 'type')}}},[_v(_s(translate("DRIVE.TYPE")))]),_v(" "),_c('th',{staticClass:"date",on:{"click":function($event){return $emit('sortBy', 'modified')}}},[_v(_s(translate("DRIVE.MODIFIED")))]),_v(" "),_c('th',{staticClass:"date",on:{"click":function($event){return $emit('sortBy', 'created')}}},[_v(_s(translate("DRIVE.CREATED")))]),_v(" "),_c('th')])]),_v(" "),_c('tbody',{attrs:{"role":"presentation"}},_l((files),function(file){return _c('tr',{staticClass:"table__item",attrs:{"tabindex":"1","role":"row"}},[_c('td',{staticClass:"select"},[_c('label',{staticClass:"checkbox__group"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(selected),expression:"selected"}],attrs:{"type":"checkbox","name":file.getFileProperties().name,"tabindex":"0"},domProps:{"value":file,"checked":Array.isArray(selected)?_i(selected,file)>-1:(selected)},on:{"click":function($event){if(!$event.shiftKey)return null;return clickShiftHandler($event)},"change":function($event){var $$a=selected,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=file,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(selected=$$a.concat([$$v]))}else{$$i>-1&&(selected=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{selected=$$c}}}}),_v(" "),_c('span',{staticClass:"checkmark"})])]),_v(" "),_c('td',{staticClass:"file",attrs:{"id":file.getFileProperties().name},on:{"click":function($event){return $emit('navigateDrive', file)}}},[_v("\n\t\t\t\t\t"+_s(file.getFileProperties().name)+"\n\t\t\t\t")]),_v(" "),_c('td',{staticClass:"size"},[_v(_s(convertBytesToHumanReadable(getFileSize(file.getFileProperties()))))]),_v(" "),_c('td',{staticClass:"type"},[_v(_s(file.getFileProperties().getType()))]),_v(" "),_c('td',{staticClass:"date"},[_v(_s(formatDateTime(file.getFileProperties().modified)))]),_v(" "),_c('td',{staticClass:"date"},[_v(_s(formatDateTime(file.getFileProperties().created)))]),_v(" "),_c('td',{staticClass:"menu"},[_c('AppButton',{staticClass:"table__menu",attrs:{"icon":"dot-menu","aria-label":"menu"},nativeOn:{"click":function($event){$event.stopPropagation();return showMenu($event, file)}}})],1)])}),0)])}},	components: {
	    AppButton,
	},
	props: {
		files: {
			type: Array,
			default: ()=>[]
		},
        selectedFiles: {
            type: Array,
            default: ()=>[]
        },
	},
    mixins:[mixins, i18n],
    data: function () {
        return {
            selected: this.selectedFiles,
            isShiftModifierOn: false,
        }
    },
    watch: {
        selected(newSelected, oldSelected) {
              if (this.isShiftModifierOn && newSelected.length == oldSelected.length +1) {
                  if(newSelected != this.selectedFiles){
                      let difference = newSelected.filter(x => !oldSelected.includes(x))[0];
                      let newIndex = this.files.indexOf(difference);
                      var largestIndex = -1;
                      for(var i=0; i < newSelected.length; i++) {
                          let index = this.files.indexOf(newSelected[i]);
                          if (index < newIndex && index > largestIndex) {
                              largestIndex = index;
                          }
                      }
                      let selectedWithShift = newSelected.concat(this.files.slice(largestIndex +1, newIndex));
                      this.$emit('update:selectedFiles', selectedWithShift);
                  }
              } else {
                  if(newSelected != this.selectedFiles){
                      this.$emit('update:selectedFiles', newSelected)
                  }
              }
        },
        selectedFiles(newSelected, oldSelected){
            this.selected = newSelected;
            this.isShiftModifierOn = false;
        }
    },
    methods: {
        clickShiftHandler() {
            this.isShiftModifierOn = true;
        },

		showMenu(e, file){
			// https://stackoverflow.com/questions/53738919/emit-event-with-parameters-in-vue/53739018
			this.$store.commit('SET_DRIVE_MENU_TARGET', e.currentTarget)
			this.$emit('openMenu', file)
		},

		formatDateTime(dateTime) {
			let date = new Date(dateTime.toString() + "+00:00"); //adding UTC TZ in ISO_OFFSET_DATE_TIME ie 2021-12-03T10:25:30+00:00
			let formatted = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate()
				+ ' ' + (date.getHours() < 10 ? '0' : '') + date.getHours()
				+ ':' + (date.getMinutes() < 10 ? '0' : '') + date.getMinutes()
				+ ':' + (date.getSeconds() < 10 ? '0' : '') + date.getSeconds();
			return formatted;
		},
        convertBytesToHumanReadable:function(bytes) {
            if (bytes < 1000)
                return bytes + " Bytes";
            if (bytes < 1000 * 1000)
                return this.roundToDisplay(bytes / 1000) + " KB";
            if (bytes < 1000 * 1000 * 1000)
                return this.roundToDisplay(bytes / 1000 / 1000) + " MB";
            return this.roundToDisplay(bytes / 1000 / 1000 / 1000) + " GB";
        },
        roundToDisplay:function(x) {
                return Math.round(x * 100) / 100;
        },
	},

}

},{ "../../i18n/index.js": 11, "../../mixins/downloader/index.js": 53, "../AppButton.vue": 2}], 48:[function(require,module,exports){

module.exports = {
render: function() {with(this){return _c('div',{staticClass:"app-progressbar"},[_c('p',[_v(_s(title))]),_v(" "),(subtitle.length > 0)?_c('p',[_v(_s(subtitle))]):_e(),_v(" "),_c('div',{staticClass:"progress__bar",attrs:{"role":"progressbar"}},[_c('div',{style:({width: progress + '%'})})])])}},	props: {
		title: {
			type: String,
			default: ''
		},
        subtitle: {
            type: String,
            default: ''
        },
		done: {
			type: Number,
			default: 0
		},
		max:{
			type: Number,
			default: 1
		}
	},

	computed:{
		progress(){
			return this.done / this.max * 100
		}
	},
	methods: {
		closeMessage() {
			this.$emit('close-toast')
		}
	}
}


},{}], 39:[function(require,module,exports){
const Spinner = require("../spinner/Spinner.vue");
const i18n = require("../../i18n/index.js");
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":function($event){return $emit('hide-modal')}}},[_c('div',{staticStyle:{"height":"30%"}}),_v(" "),_c('div',{staticClass:"modal-container",staticStyle:{"transform":"translateY(-30%)"},on:{"click":function($event){$event.stopPropagation();}}},[(showSpinner)?_c('Spinner'):_e(),_v(" "),_c('div',{staticClass:"modal-header"},[_c('h3',{attrs:{"id":"modal-header-id"}},[_v(_s(title))])]),_v(" "),_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"secret-link-container scrollable"},[_c('p',{staticStyle:{}}),_c('div',[(link.isFile)?_c('div',[_c('label',{staticClass:"checkbox__group"},[_v("\n                                        "+_s(translate("DRIVE.LINK.OPEN"))+"\n                                        "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(autoOpen),expression:"autoOpen"}],attrs:{"type":"checkbox","name":""},domProps:{"checked":Array.isArray(autoOpen)?_i(autoOpen,null)>-1:(autoOpen)},on:{"change":[function($event){var $$a=autoOpen,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(autoOpen=$$a.concat([$$v]))}else{$$i>-1&&(autoOpen=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{autoOpen=$$c}},function($event){return onChange()}]}}),_v(" "),_c('span',{staticClass:"checkmark"})])]):_e(),_v(" "),_c('div',[_c('label',{staticClass:"checkbox__group"},[_v("\n                                        "+_s(translate("DRIVE.LINK.WRITABLE"))+"\n                                        "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(isLinkWritable),expression:"isLinkWritable"}],attrs:{"disabled":currentProps != null,"type":"checkbox","name":""},domProps:{"checked":Array.isArray(isLinkWritable)?_i(isLinkWritable,null)>-1:(isLinkWritable)},on:{"change":[function($event){var $$a=isLinkWritable,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(isLinkWritable=$$a.concat([$$v]))}else{$$i>-1&&(isLinkWritable=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{isLinkWritable=$$c}},function($event){return onChange()}]}}),_v(" "),_c('span',{staticClass:"checkmark"})])]),_v(" "),_c('div',[_c('span',[_c('label',{staticClass:"checkbox__group",staticStyle:{"display":"inline-block"}},[_v("\n                                            "+_s(translate("DRIVE.LINK.EXPIRE.ON"))+"\n                                            "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(hasExpiry),expression:"hasExpiry"}],attrs:{"type":"checkbox","name":""},domProps:{"checked":Array.isArray(hasExpiry)?_i(hasExpiry,null)>-1:(hasExpiry)},on:{"change":[function($event){var $$a=hasExpiry,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(hasExpiry=$$a.concat([$$v]))}else{$$i>-1&&(hasExpiry=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{hasExpiry=$$c}},function($event){return onChange()}]}}),_v(" "),_c('span',{staticClass:"checkmark"})]),_v(" "),_c('input',{staticStyle:{"border":"2px solid var(--green-500)","color":"var(--color)","background-color":"var(--bg)"},attrs:{"id":"expiry-date-picker","disabled":!hasExpiry,"type":"date"},on:{"change":function($event){return onChange(link.id)}}}),_v(" "),_c('label',{staticStyle:{"font-weight":"normal"}},[_v(_s(translate("DRIVE.LINK.AT.TIME")))]),_v(" "),_c('input',{staticStyle:{"border":"2px solid var(--green-500)","color":"var(--color)","background-color":"var(--bg)"},attrs:{"id":"expiry-time-picker","disabled":!hasExpiry,"type":"time"},on:{"change":function($event){return onChange(link.id)}}})])]),_v(" "),_c('div',[_c('span',[_c('label',{staticClass:"checkbox__group",staticStyle:{"display":"inline-block"}},[_v("\n                                            "+_s(translate("DRIVE.LINK.LIMIT.RETRIEVALS"))+"\n                                            "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(hasMaxRetrievals),expression:"hasMaxRetrievals"}],attrs:{"type":"checkbox","name":""},domProps:{"checked":Array.isArray(hasMaxRetrievals)?_i(hasMaxRetrievals,null)>-1:(hasMaxRetrievals)},on:{"change":[function($event){var $$a=hasMaxRetrievals,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(hasMaxRetrievals=$$a.concat([$$v]))}else{$$i>-1&&(hasMaxRetrievals=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{hasMaxRetrievals=$$c}},function($event){return onChange()}]}}),_v(" "),_c('span',{staticClass:"checkmark"})]),_v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(maxRetrievals),expression:"maxRetrievals"}],staticStyle:{"border":"2px solid var(--green-500)","color":"var(--color)","background-color":"var(--bg)"},attrs:{"disabled":!hasMaxRetrievals,"type":"number","min":"1","max":"999"},domProps:{"value":(maxRetrievals)},on:{"change":function($event){return onChange()},"input":function($event){if($event.target.composing)return;maxRetrievals=$event.target.value}}})])]),_v(" "),_c('div',[_c('span',[_c('label',{staticClass:"checkbox__group",staticStyle:{"display":"inline-block"}},[_v("\n                                            "+_s(translate("DRIVE.LINK.PASSWORD"))+"\n                                            "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(hasPassword),expression:"hasPassword"}],attrs:{"type":"checkbox","name":""},domProps:{"checked":Array.isArray(hasPassword)?_i(hasPassword,null)>-1:(hasPassword)},on:{"change":function($event){var $$a=hasPassword,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(hasPassword=$$a.concat([$$v]))}else{$$i>-1&&(hasPassword=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{hasPassword=$$c}}}}),_v(" "),_c('span',{staticClass:"checkmark"})]),_v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(userPassword),expression:"userPassword"}],staticStyle:{"all":"revert","border":"2px solid var(--green-500)","color":"var(--color)","background-color":"var(--bg)","font-family":"inherit","font-size":"inherit","line-height":"inherit"},attrs:{"disabled":!hasPassword,"type":"text","size":"15"},domProps:{"value":(userPassword)},on:{"input":function($event){if($event.target.composing)return;userPassword=$event.target.value}}})])]),_v(" "),_c('div',{staticStyle:{"padding":"10px"}},[_c('button',{staticClass:"btn btn-success",attrs:{"id":"modal-button-id"},on:{"click":createOrUpdateLink}},[_v("\n                                        "+_s(currentProps == null ? translate("DRIVE.LINK.CREATE") : translate("DRIVE.LINK.UPDATE"))+"\n                                    ")])]),_v(" "),(showLink())?_c('div',{staticStyle:{"padding":"10px"}},[_c('input',{staticStyle:{"display":"none"},attrs:{"type":"text"},domProps:{"value":this.href}}),_v(" "),_c('button',{staticClass:"fa fa-clipboard",staticStyle:{"padding":"6px 12px","background-color":"var(--bg)"},on:{"click":function($event){return copyUrlToClipboard($event)}}},[_v(" "+_s(translate("DRIVE.LINK.COPY")))]),_v(" "),_c('button',{staticClass:"fa fa-envelope",staticStyle:{"padding":"6px 12px","background-color":"var(--bg)"},on:{"click":function($event){return email($event)}}},[_v(" "+_s(translate("DRIVE.LINK.EMAIL")))]),_v(" "),(base64QrCode)?_c('img',{staticStyle:{"width":"150px"},attrs:{"src":base64QrCode,"alt":"qr-code"}}):_e()]):_e()])])]),_v(" "),_c('div',{staticClass:"modal-footer"},[_t("footer",[_c('button',{staticClass:"btn btn-success",attrs:{"id":"modal-button-id"},on:{"click":function($event){return $emit('hide-modal')}}},[_v("\n                            "+_s(translate("DRIVE.LINK.OK"))+"\n                        ")])])],2)],1)])])}},    components:{
        Spinner
    },
	data() {
	    return {
                isLinkWritable: false,
                hasExpiry: false,
                expireDateString: "",
                expireTimeString: "",
                hasMaxRetrievals: false,
                maxRetrievals: "0",
                hasPassword: false,
                userPassword: "",
                showSpinner: false,
                autoOpen: false,
                currentProps: null,
                baseUrl:null,
                href:null,
                base64QrCode: "",
            };
	},
    computed: {
        ...Vuex.mapState([
            'context',
        ]),
    },
    mixins:[i18n],
	props: [
	    "title",
	    "link",
            "username",
            "existingProps",
            "host"
        ],
        created: function() {
            let that = this;
            this.currentProps = this.existingProps;
            this.autoOpen = this.link.autoOpen || (this.currentProps != null && this.currentProps.autoOpen());
            if (this.currentProps != null) {
                Vue.nextTick(function() {
                    that.isLinkWritable = that.currentProps.isLinkWritable;
                    that.userPassword = that.currentProps.userPassword
                    that.hasPassword = that.currentProps.userPassword.length > 0;
                    that.maxRetrievals = that.currentProps.maxRetrievals.ref == null ?
                            "0": that.currentProps.maxRetrievals.ref.toString();
                    that.hasMaxRetrievals = that.maxRetrievals != "0";
                    if (that.currentProps.expiry.ref != null) {
                        that.hasExpiry = true;
                        let date = that.currentProps.expiry.ref.date;
                        let time = that.currentProps.expiry.ref.time;
                        let jsDate = new Date(that.currentProps.expiry.ref.toString() + "+00:00"); //adding UTC TZ in ISO_OFFSET_DATE_TIME ie 2021-12-03T10:25:30+00:00
                        let datePart = jsDate.getFullYear()
                        + '-' + ( (jsDate.getMonth() + 1) < 10 ? '0' : '') + (jsDate.getMonth() + 1)
                        + '-' + (jsDate.getDate() < 10 ? '0' : '') + jsDate.getDate();
                        let timePart =  (jsDate.getHours() < 10 ? '0' : '') + jsDate.getHours()
                                        + ':' + (jsDate.getMinutes() < 10 ? '0' : '') + jsDate.getMinutes();
                        let dateExpiry = document.getElementById("expiry-date-picker");
                        dateExpiry.value = datePart;
                        let timeExpiry = document.getElementById("expiry-time-picker");
                        timeExpiry.value = timePart;
                    }
                    that.updateHref();
                });
            }
        },
        methods: {
            buildHref: function (link, autoOpenOverride) {
                let args = "";
                if (autoOpenOverride || this.autoOpen) {
                    args = "?open=true";
                    if (link.shareFolderWithFile) {
                        args += "&path=" + link.path;
                        args += "&args=%7B%22filename%22:%22" + link.filename + "%22%7D";
                    } 
                }
                let href = (this.host.startsWith("localhost:") ? "http://" : "https://") + this.host + "/" + this.baseUrl + args;
                let secretLinkQrCode = peergos.shared.SecretLinkQRCode.generate(href);
                this.base64QrCode = secretLinkQrCode.getBase64Thumbnail();
                return href;
            },
            showLink: function() {
                return this.currentProps != null;
            },
            createOrUpdateLink: function() {
                let create = this.currentProps == null;
                let that = this;
                this.showSpinner = true;
                let maxRetrievalsStr = this.maxRetrievals == "0" ? "" : "" + this.maxRetrievals;
                if (create) {
                    this.context.createSecretLink(this.getLinkPath(), this.isLinkWritable, this.getExpiry(),
                        maxRetrievalsStr, this.hasPassword ? this.userPassword : "", this.autoOpen).thenApply(props => {
                          that.currentProps = props;
                          that.updateHref();
                          that.showSpinner = false;
                    }).exceptionally(t => {
                        console.log(t);
                        that.$toast.error(that.translate("DRIVE.LINK.ERROR.CREATE"), {timeout:false});
                        that.showSpinner = false;
                    });
                } else {
                    let newLinkProps = this.currentProps.with(this.hasPassword ? this.userPassword : "", maxRetrievalsStr, this.getExpiry(), this.autoOpen);
                    this.context.updateSecretLink(this.getLinkPath(), newLinkProps).thenApply(props => {
                        that.currentProps = props;
                        that.updateHref();
                        that.showSpinner = false;
                    }).exceptionally(t => {
                        console.log(t);
                        that.$toast.error(that.translate("DRIVE.LINK.ERROR.UPDATE"), {timeout:false});
                        that.showSpinner = false;
                    });
                }
            },
            getExpiry: function() {
                let dateExpiry = document.getElementById("expiry-date-picker");
                let dateS = dateExpiry.value;
                if (! this.hasExpiry || dateS == "")
                    return java.util.Optional.empty();
                let timeExpiry = document.getElementById("expiry-time-picker");
                let expireTimeString = "00:00";
                if (timeExpiry != null && timeExpiry.value.length > 0) {
                    expireTimeString = timeExpiry.value;
                }
                let year = parseInt(dateS.split("-")[0]);
                let month = parseInt(dateS.split("-")[1]);
                let day = parseInt(dateS.split("-")[2]);
                let hour = parseInt(expireTimeString.split(":")[0]);
                let minute = parseInt(expireTimeString.split(":")[1]);
                let jsDate = new Date(year, month-1, day, hour, minute);
                let ldt = peergos.client.JsUtil.fromUtcMillis(jsDate.getTime());
                return java.util.Optional.of(ldt);
            },
            updateHref: function() {
                let that = this;
                let linkString = that.context.getLinkString(that.currentProps);
                this.baseUrl = linkString;
                let href = that.buildHref(this.link);
                this.href = href;
            },
            getLinkPath: function() {
                var path = this.link.path;
                if (this.link.shareFolderWithFile)
                    return path;
                if (! path.endsWith("/"))
                    path = path+"/";
                return path + this.link.filename;
            },
            onChange: function () {
                this.href = this.buildHref(this.link);
            },
            copyUrlToClipboard: function (clickEvent) {
                var text = clickEvent.srcElement.previousElementSibling.value.toString();
                navigator.clipboard.writeText(text).then(function() {}, function() {
                    console.error("Unable to write to clipboard.");
                });
            },
            email: function() {
                var that = this;
                var body = "";
                var type;
                let href = that.buildHref(this.link, true);
                body += this.link.name + ": " + href + "\n";
                if (this.link.isFile)
                    type = "file";
                else
                    type = "folder";
                body = "Click on the following link to view the " + type + "\n\n" + body;
                var subject = this.username + " shared a "+type+" with you!";
                var link = document.getElementById('downloadAnchor')
                link.href = "mailto:?body="+encodeURIComponent(body)+"&subject="+encodeURIComponent(subject);
                link.click()
            },
        }
    }
},{ "../../i18n/index.js": 11, "../spinner/Spinner.vue": 16}], 61:[function(require,module,exports){
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticStyle:{"height":"30%"}}),_v(" "),_c('div',{staticClass:"error-modal-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:"modal-header"},[_c('h3',{attrs:{"id":"error-header-id"}},[_v(_s(title))])]),_v(" "),_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"container",staticStyle:{"word-wrap":"break-word","width":"auto"}},[_c('p',{attrs:{"id":"error-body-id"}},[_v(_s(decodeError(body)))])])]),_v(" "),_c('div',{staticClass:"modal-footer"},[_t("footer",[_c('button',{staticClass:"modal-default-button",attrs:{"id":"modal-button-id"},on:{"click":close}},[_v("\n                OK\n            ")])])],2)])])])}},    props: ['title', 'body'],
    created: function() {
    },
    methods: {
        decodeError: function(errorBody) {
            let jsErrorBody = errorBody.split("\\+").join("%20")
                            .split("\\%21").join("!")
                            .split("\\%27").join("'")
                            .split("\\%28").join("(")
                            .split("\\%29").join(")")
                            .split("\\%7E").join("~")
                            .split("+").join("%20");

            let str = decodeURIComponent(jsErrorBody);
            let token = 'java.lang.JsException: ';
            return str.startsWith(token) ? str.substring(token.length) : str;
        },
        close: function () {
            this.$emit("hide-error");
        }
    }
}
},{}], 94:[function(require,module,exports){
const i18n = require("../../i18n/index.js");
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticClass:"modal-container full-height",staticStyle:{"overflow-y":"auto"},on:{"click":function($event){$event.stopPropagation();}}},[_c('span',{staticClass:"close",attrs:{"tabindex":"0","aria-label":"close"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")]),_v(" "),_c('center',[_c('h2',[_v(_s(translate("VERIFY.TITLE"))+": "+_s(friendname))])]),_v(" "),_c('center',{staticStyle:{"font-size":"1.6em"}},[_c('div',{staticClass:"qrcode-container"},[(stream == null)?_c('img',{staticClass:"qrcode",attrs:{"src":QRCodeURL,"alt":"QR code"}}):_e(),_v(" "),(stream != null)?_c('video',{staticClass:"qrcode",attrs:{"id":"video"}}):_e()]),_v(" "),_c('div',[_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return scanQRCode()}}},[_v(_s(translate("VERIFY.SCAN")))]),_v(" "),_c('span',{staticStyle:{"display":"block","width":"6em","text-align":"left"}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(isVerified),expression:"isVerified"}],attrs:{"type":"checkbox","autocomplete":"off"},domProps:{"checked":Array.isArray(isVerified)?_i(isVerified,null)>-1:(isVerified)},on:{"change":function($event){var $$a=isVerified,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(isVerified=$$a.concat([$$v]))}else{$$i>-1&&(isVerified=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{isVerified=$$c}}}}),_v(" "+_s(verified))]),_v(" "),_c('br'),_v(" "),_c('h4',[_v(_s(translate("VERIFY.NUMBERS")))]),_v("\n            "+_s(safetyNumber[0])+"\n\t    "),_c('br'),_v("\n\t    "+_s(safetyNumber[1])+"\n\t    "),_c('br'),_v("\n\t    "+_s(safetyNumber[2])+"\n\t  ")])])],1)])])}},    data: function() {
        return {
	    width: 512,
	    height: 512,
	    stream: null,
	    isVerified: false
        };
    },
    mixins:[i18n],
    props: ['fingerprint', 'friendname', 'context', "initialIsVerified"],
    created: function() {
	this.isVerified = this.initialIsVerified;
    },

    watch: {
	isVerified: function(newVerified) {
	    this.persistVerification(newVerified);
	}
    },
    
    methods: {
        close: function() {
	    this.closeCamera();
            this.$emit("hide-fingerprint", this.isVerified);
        },

	closeCamera: function() {
	    if (this.stream != null) {
		var tracks = this.stream.getTracks();
		for (var i = 0; i < tracks.length; i++) {
		    var track = tracks[i];
		    track.stop();
		}
	    }
	    this.stream = null;
	    var video = document.getElementById('video');
	    if (video != null)
		video.srcObject = null;
	},

	scanQRCode: function() {
	    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
		var that = this;
		navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" }}).then(function(stream) {
		    that.stream = stream;
		    setTimeout(() => {
			var video = document.getElementById('video');
			video.srcObject = stream;
			video.play()
			that.takeSnapshot(60)
		    }, 100);
		}).catch(function(error) {
		    alert(that.translate("VERIFY.ERROR.CAMERA"));
		    console.error(error);
		    that.closeCamera();
		});
	    }
	},

	persistVerification: function(verified) {
	    this.context.addFriendAnnotation(new peergos.shared.user.FriendAnnotation(this.friendname, verified, this.fingerprint.left));
	},

	takeSnapshot: function(attemptsLeft) {
	    var canvas = document.createElement('canvas');
	    canvas.width = 512;
	    canvas.height = 512;
	    var video = document.getElementById('video');
	    var vctx = canvas.getContext('2d');
	    vctx.drawImage(video, 0, 0, this.width, this.height);
	    this.processSnapshot(attemptsLeft, vctx);
	},

	processSnapshot: function(attemptsLeft, vctx) {
	    var pixels = this.convertCanvasToPixels(vctx)
	    try {
		var scanned = peergos.shared.fingerprint.FingerPrint.decodeFromPixels(pixels, this.width, this.height);
		this.closeCamera();
		if (this.fingerprint.right.matches(scanned)) {
		    this.isVerified = true;
		    alert(this.translate("VERIFY.SUCCESS"));
		} else {
		    alert(this.translate("VERIFY.ERROR.MISMATCH"));
		    this.isVerified = false;
		}
	    } catch (err) {
		console.log("Couldn't find qr code in image");
		if (attemptsLeft > 0)
		    setTimeout(() => this.takeSnapshot(attemptsLeft-1), 1000);
		else {
		    this.closeCamera();
		}
	    }
	},

	convertCanvasToPixels: function(context) {
	    var b = context.getImageData(0, 0, this.width, this.height).data;
	    // Reverting bytes from RGBA to ARGB
	    var pixels = []
	    for (var i=0 ; i < b.length/4 ; i++) {
		pixels[i] = (b[4*i + 3] << 24) | (b[4*i] << 16) | (b[4*i + 1] << 8) | (b[4*i + 2]);
	    }
	    return pixels;
	}
    },
    computed: {
        QRCodeURL: function() {
            return this.fingerprint.right.getBase64Thumbnail();
        },

	safetyNumber: function() {
	    var res = this.fingerprint.right.getDisplayString();
	    var split = [];
	    for (var i=0; i < res.length; i += 5)
		split.push(res.substring(i, i + 5))
	    var lines = [];
	    for (var j=0; j < 3; j++)
		lines.push(split.slice(j*4, j*4 + 4).join(" "));
            return lines;
        },

	verified: function() {
	    return this.isVerified ? this.translate("VERIFY.VERIFIED") : this.translate("VERIFY.UNVERIFIED");
	}
    }
};
},{ "../../i18n/index.js": 11}], 38:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
module.exports = {
render: function() {with(this){return _c('div',{staticClass:"form-autocomplete"},[(!isMultiple)?_c('div',[(!value)?_c('input',{directives:[{name:"model",rawName:"v-model",value:(textSearch),expression:"textSearch"}],staticClass:"autocomplete",attrs:{"id":"input-tokenfield","type":"text","placeholder":placeholder},domProps:{"value":(textSearch)},on:{"focus":showOptions,"input":function($event){if($event.target.composing)return;textSearch=$event.target.value}}}):_e(),_v(" "),_c('div',{staticClass:"items-selected"},[(value)?_c('div',{staticClass:"item-selected"},[_t("selected",[_v(_s(value))],{"item":value}),_v(" "),_c('AppButton',{attrs:{"icon":"close"},nativeOn:{"click":function($event){return clearItem($event)}}})],2):_e()]),_v(" "),_c('ul',{directives:[{name:"show",rawName:"v-show",value:(isShow),expression:"isShow"}],staticClass:"options"},[_l((filteredOptions),function(item){return _c('li',{on:{"click":function($event){return selectItem(item)}}},[_t("default",[_v(_s(item))],{"item":item})],2)}),_v(" "),(filteredOptions.length === 0)?_c('li',[_v("Item not found")]):_e()],2)]):_c('div',[_c('input',{directives:[{name:"model",rawName:"v-model",value:(textSearch),expression:"textSearch"}],staticClass:"autocomplete",attrs:{"id":"input-tokenfield","type":"text","placeholder":placeholder},domProps:{"value":(textSearch)},on:{"focus":showOptions,"input":function($event){if($event.target.composing)return;textSearch=$event.target.value}}}),_v(" "),_c('div',{staticClass:"items-selected"},_l((value),function(v,k){return _c('div',{staticClass:"item-selected"},[_t("selected",[_v(_s(v))],{"item":v}),_v(" "),_c('AppButton',{attrs:{"icon":"close"},nativeOn:{"click":function($event){return removeItem(k)}}})],2)}),0),_v(" "),_c('ul',{directives:[{name:"show",rawName:"v-show",value:(isShow),expression:"isShow"}],staticClass:"options"},[_l((filteredOptions),function(item){return _c('li',{class:{ disabled: inSelectedItems(item) },on:{"click":function($event){return addItem(item)}}},[_t("default",[_v(_s(item))],{"item":item})],2)}),_v(" "),(filteredOptions.length === 0 && this.doSearch)?_c('li',[_v("User not found")]):_e()],2)])])}},	components: {
	    AppButton,
	},
	props: {
		isMultiple: {
			type: Boolean,
			default: false,
		},
		placeholder: {
			type: String,
			default: "",
		},
		maxitems: {
			type: Number,
			default: 5,
		},
		minchars: {
			type: Number,
			default: 1,
		},
		options: {
			type: Array,
			default() {
				return [];
			},
		},
		value: {
			type: [Object, Array],
			// default() {
			// 	return {
			// 		uid: undefined,
			// 		title: undefined,
			// 	};
			// },
		},
	},
	data() {
		return {
			textSearch: "",
			isShow: false,
		};
	},
	computed: {
	    filteredOptions() {
                if (! this.doSearch)
                    return [];
                let search = this.textSearch.toLowerCase();
                let filter = (val) => {
                    let lower = val.toLowerCase();
                    for (var i=0; i < search.length; i++){
                        if (! val.includes(search.charAt(i)))
                            return false;
                    }
                    return true;
                };
		let filtered = this.options.filter(filter);
                let sorted = filtered.sort((a, b) => this.levenshtein(a, search) - this.levenshtein(b, search));
                return sorted.slice(0, Math.min(sorted.length, this.maxitems));
	    },
	    selectedItems() {
		if (this.isMultiple) {
		    return this.value.map((v) => v);
		}
		return [];
	    },
            doSearch() {
                return this.textSearch.length >= this.minchars;
            }
	},
	methods: {
		inSelectedItems(uid) {
			return this.selectedItems.includes(uid);
		},
		showOptions() {
			this.isShow = true;
		},
		selectItem(item) {
			this.textSearch = "";
			this.isShow = false;
			// this.$emit('update:item', item);
			this.$emit("input", item);
			this.$emit("onSelectItem", item);
		},
		clearItem() {
			this.textSearch = "";
			// this.$emit('update:item', {
			//   id: undefined,
			//   title: undefined,
			// });
			this.$emit("input", {
				// id: undefined,
				// title: undefined,
			});
			this.$emit("onClearItem");
		},
		addItem(item) {
			if (!this.inSelectedItems(item)) {
				this.textSearch = "";
				this.isShow = false;
				const items = JSON.parse(JSON.stringify(this.value));
				items.push(item);
				// this.$emit('update:item', items);
				this.$emit("input", items);
				this.$emit("onAddItem", items);
			}
		},
		removeItem(index) {
			this.textSearch = "";
			const items = JSON.parse(JSON.stringify(this.value));
			items.splice(index, 1);
			// this.$emit('update:item', items);
			this.$emit("input", items);
			this.$emit("onRemoveItem", items);
		},
            levenshtein: function(a, b) {
                var d = [];                
                var n = a.length;
                var m = b.length;
                
                if (n == 0) return m;
                if (m == 0) return n;
                
                for (var i = n; i >= 0; i--) d[i] = [];                
                for (var i = n; i >= 0; i--) d[i][0] = i;
                for (var j = m; j >= 0; j--) d[0][j] = j;
                
                for (var i = 1; i <= n; i++) {
                    var a_i = a.charAt(i - 1);
                    
                    for (var j = 1; j <= m; j++) {
                        // check the jagged ld total so far
                        if (i == j && d[i][j] > 4) return n;
                        
                        var b_j = b.charAt(j - 1);
                        var cost = (a_i == b_j) ? 0 : 1;
                        
                        // get minimum
                        var mi = d[i - 1][j] + 1;
                        var x = d[i][j - 1] + 1;
                        var y = d[i - 1][j - 1] + cost;
                        
                        if (x < mi) mi = x;
                        if (y < mi) mi = y;
                        
                        d[i][j] = mi;
                        
                        //Damerau transposition
                        if (i > 1 && j > 1 && a_i == b.charAt(j - 2) && a.charAt(i - 2) == b_j) {
                            d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
                        }
                    }
                }
                
                return d[n][m];
            }
	},
};

},{ "../AppButton.vue": 2}], 30:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const CommonPasswords = require('../../mixins/password/passwords.json');
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('div',{staticClass:"password__wrapper"},[_c('input',{staticClass:"password",attrs:{"name":"password","placeholder":placeholder,"type":passwordIsVisible ? 'text' : 'password'},domProps:{"value":value},on:{"input":function($event){return $emit('input', $event.target.value)},"blur":function($event){return validatePassword()}}}),_v(" "),_c('AppButton',{staticClass:"eye",attrs:{"icon":passwordIsVisible ? 'eye-open' : 'eye-closed'},nativeOn:{"click":function($event){return togglePassword()}}})],1)}},	components: {
	    AppButton,
	},
    props: {
	value:{
	    type: [String, Array],
	},
	placeholder: {
	    type: String,
	    default: 'Password'
	},
	firstOfTwo:{
	    type:Boolean,
	    default:false
	},
        passwordIsVisible:{
            type:Boolean,
            default:false
        },
    },
    data() {
	return {
	    passwordThreshold: 12,
	    passwordUpdate: false
	}
    },

    mixins:[i18n],
    methods: {
	togglePassword() {
	    this.passwordIsVisible = !this.passwordIsVisible
	},
        
	validatePassword() {
	    if (!this.firstOfTwo || this.value == '')
		return
            
	    let passwd = this.value
	    let index = CommonPasswords.indexOf(passwd);
	    let suffix = ["th", "st", "nd", "rd", "th", "th", "th", "th", "th", "th"][(index+1) % 10];
            
	    if (index != -1) {
		this.$toast.error(this.translate("PASSWORD.COMMON").replace("$PLACE", (index+1) + suffix),{ id: 'password', timeout:false });
		this.passwordUpdate = true
	    } else if (passwd.length < this.passwordThreshold) {
		this.$toast.error(this.translate("PASSWORD.SHORT").replace("$SIZE", this.passwordThreshold),{ id: 'password', timeout:false });
		this.passwordUpdate = true
	    }else{
		if (this.passwordUpdate)
		    this.$toast.error(this.translate("PASSWORD.GOOD"),{ id: 'password', timeout:4000 });
	    }
	}
    },
}

},{ "../../i18n/index.js": 11, "../../mixins/password/passwords.json": 29, "../AppButton.vue": 2}], 77:[function(require,module,exports){const Spinner = require("./spinner/Spinner.vue");

module.exports = {
render: function() {with(this){return _c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticClass:"modal-container",staticStyle:{"height":"95%","width":"95%","overflow-y":"auto","max-width":"800px"},on:{"click":function($event){$event.stopPropagation();}}},[(showSpinner)?_c('Spinner'):_e(),_v(" "),_c('div',[_c('h2',[_v("Identity Link")]),_v(" "),(proof != null)?_c('div',[_v("\n        User "),_c('i',[_v(_s(proof.claim.usernameA))]),_v(" on "+_s(proof.claim.serviceA.name())+" is also "),_c('i',[_v(_s(proof.claim.usernameB))]),_v(" on "+_s(proof.claim.serviceB.name())+".\n        "),_c('br'),_v("\n        Signature: "+_s(proof.encodedSignature())+"\n        "),_c('br'),_v(" "),_c('label',[_v("Proof: ")]),_v(" "),_c('br'),_v(" "),(proof.hasUrl())?_c('a',{attrs:{"href":proof.postUrl.get(),"target":"_blank"}},[_v(_s(proof.postUrl.get()))]):_e()]):_e()])],1)])}},	components: {
	    Spinner
	},
    data: function() {
        return {
            proof: null
        };
    },
    props: ["file", "context"],
    created: function() {
        this.updateCurrentFileData();
    },
    methods: {
        close: function() {
            this.$emit("hide-identity-proof");
        },

        updateCurrentFileData: function() {
            if (this.file == null)
                return;
            if (this.file.isDirectory())
                return;
            var props = this.file.getFileProperties();
            var that = this;
            this.showSpinner = true;
            this.file.getInputStream(this.context.network, this.context.crypto, 
                props.sizeHigh(), props.sizeLow(), 
                function(read) {})
                .thenCompose(function(reader) {
                    var sizeToRead = Math.min(5*1024*1024, props.sizeLow());
                    var data = convertToByteArray(new Int8Array(sizeToRead));
                    data.length = sizeToRead;
                    return reader.readIntoArray(data, 0, data.length)
                        .thenApply(function(read){
                            that.proof = peergos.shared.util.Serialize.parse(data, c => peergos.shared.user.IdentityLinkProof.fromCbor(c));
                            that.showSpinner = false;
                        });
                });
        },
    }
};
},{ "./spinner/Spinner.vue": 16}], 17:[function(require,module,exports){
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":closeMessage}},[_c('div',{staticClass:"modal-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:"modal-header"},[_c('h3',[_v(_s(title))])]),_v(" "),_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"container"},[_c('div',[_v(_s(message))]),_v(" "),_c('p'),_v(" "),_c('button',{staticClass:"btn btn-success",on:{"click":closeMessage}},[_v("\n                    OK\n                ")])])])])])])}},    data: function() {
        return {
        }
    },
    props: ['title', 'message'],
    created: function() {
    },
    methods: {
        closeMessage: function () {
            this.$emit("remove-message");
        }
    }
}
},{}], 14:[function(require,module,exports){
const AppButton = require("../AppButton.vue");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal","appear":""}},[_c('div',{staticClass:"app-modal app-modal__overlay",on:{"click":function($event){return closeModal()}}},[_c('transition',{attrs:{"name":`modal-content--${position}`,"appear":""}},[_c('div',{ref:"modalContainer",staticClass:"app-modal__container",class:`modal--${position}`,attrs:{"tabindex":"0"},on:{"click":function($event){$event.stopPropagation();}}},[_c('AppButton',{staticClass:"close",attrs:{"icon":"close"},nativeOn:{"click":function($event){return closeModal()}}}),_v(" "),_c('header',[_t("header")],2),_v(" "),_c('section',[_t("body")],2),_v(" "),_c('footer',[_t("footer")],2)],1)])],1)])}},	components: {
	    AppButton,
	},
	name: 'AppModal',
	props: {
		position:{
			type: String,
			default: 'right',
			validator: function (value) {
				return ['right', 'center'].indexOf(value) !== -1
			}
		},
	},
	methods: {
		closeModal() {
			this.$store.commit("SET_MODAL", false);
		}
	},

	mounted(){
		this.$refs.modalContainer.focus();
	}
}

},{ "../AppButton.vue": 2}], 33:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const AppModal = require("AppModal.vue");
const AppIcon = require("../AppIcon.vue");
const FormPassword = require("../form/FormPassword.vue");
const MultiFactorAuth = require("../auth/MultiFactorAuth.vue");
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('AppModal',{scopedSlots:_u([{key:"header",fn:function(){return [_c('h2',[_v(_s(translate("DELETE.ACCOUNT")))])]},proxy:true},{key:"body",fn:function(){return [(showMultiFactorAuth)?_c('MultiFactorAuth',{attrs:{"mfaMethods":mfaMethods,"challenge":challenge,"consumer_cancel_func":consumer_cancel_func,"consumer_func":consumer_func},on:{"hide-confirm":function($event){showMultiFactorAuth = false}}}):_e(),_v(" "),_c('p',[_v(_s(translate("DELETE.ACCOUNT.TEXT1")))]),_v(" "),_c('p',[_v(_s(translate("DELETE.ACCOUNT.TEXT2")))]),_v(" "),_c('p',[_v(_s(translate("DELETE.ACCOUNT.TEXT3")))]),_v(" "),_c('FormPassword',{model:{value:(password),callback:function ($$v) {password=$$v},expression:"password"}}),_v(" "),(warning)?_c('div',{staticClass:"modal__warning account"},[_c('p',[_c('AppIcon',{attrs:{"icon":"warning"}}),_v(_s(translate("DELETE.ACCOUNT.CONFIRM")))],1),_v(" "),_c('AppButton',{attrs:{"accent":""},nativeOn:{"click":function($event){return deleteAccount()}}},[_v(_s(translate("DELETE.ACCOUNT.YES")))]),_v(" "),_c('AppButton',{nativeOn:{"click":function($event){warning=false}}},[_v(_s(translate("DELETE.ACCOUNT.CANCEL")))])],1):_e()]},proxy:true},{key:"footer",fn:function(){return [_c('AppButton',{attrs:{"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return showWarning()}}},[_v(_s(translate("DELETE.ACCOUNT")))])]},proxy:true}])})}},	components: {
	    AppButton,
	    AppModal,
	    AppIcon,
		FormPassword,
		MultiFactorAuth,
	},
        mixins:[i18n],
	data() {
		return {
			password: "",
			warning: false,
            showMultiFactorAuth: false,
		};
	},
	computed: {
		...Vuex.mapState([
			'context'
		]),
    },

	methods: {
		showWarning() {
			if(this.password.length == 0) {
				this.$toast.error(that.translate("DELETE.ACCOUNT.PASS"),{timeout:false, position: 'bottom-left' })
			} else {
				this.warning = true
			}
		},

		deleteAccount() {
            var that = this;
            let handleMfa = function(mfaReq) {
                    let future = peergos.shared.util.Futures.incomplete();
                    let mfaMethods = mfaReq.methods.toArray([]);
                    that.challenge = mfaReq.challenge;
                    that.mfaMethods = mfaMethods;
                    that.consumer_func = (credentialId, resp) => {
                        that.showMultiFactorAuth = false;
                        future.complete(resp);
                    };
                    that.consumer_cancel_func = (credentialId) => {
                        that.showMultiFactorAuth = false;
                        let resp = peergos.client.JsUtil.generateAuthResponse(credentialId, '');
                        future.complete(resp);
                    }
                    that.showMultiFactorAuth = true;
                    return future;
            };
            this.context.deleteAccount(this.password, mfaReq => handleMfa(mfaReq)).thenApply(function(result){
                if (result) {
					that.$toast(that.translate("DELETE.ACCOUNT.DONE"),{position: 'bottom-left' })
					that.$store.commit("SET_MODAL", false);
                	that.exit()
                } else {
					that.$toast(that.translate("DELETE.ACCOUNT.ERROR")+`: ${throwable.getMessage()}`,{position: 'bottom-left' })
                }
            }).exceptionally(function(throwable) {
                if (throwable.getMessage().startsWith('Invalid+TOTP+code')) {
                    that.$toast.error(that.translate("DELETE.ACCOUNT.MFA"), {timeout:false})
                } else {
                    that.$toast.error(that.uriDecode(throwable.getMessage()), {timeout:false})
                }
                console.log(throwable.getMessage())
            });
        },
		exit(){

			setTimeout(()=>{
				window.location.fragment = "";
				window.location.reload();
			 }, 3000);
		}
	},

};
},{ "../../i18n/index.js": 11, "../AppButton.vue": 2, "../AppIcon.vue": 1, "../auth/MultiFactorAuth.vue": 31, "../form/FormPassword.vue": 30, "AppModal.vue": 14}], 20:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const AppModal = require("AppModal.vue");
const Confirm = require("../confirm/Confirm.vue");
const Spinner = require("../spinner/Spinner.vue");
const Totp = require("../auth/Totp.vue");
const WebAuth = require("../auth/WebAuth.vue");
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('AppModal',{scopedSlots:_u([{key:"header",fn:function(){return [_c('h2',[_v(_s(translate("MFA.TITLE")))])]},proxy:true},{key:"body",fn:function(){return [(showSpinner)?_c('Spinner'):_e(),_v(" "),(showConfirm)?_c('Confirm',{attrs:{"confirm_message":confirm_message,"confirm_body":confirm_body,"consumer_cancel_func":confirm_consumer_cancel_func,"consumer_func":confirm_consumer_func},on:{"hide-confirm":function($event){showConfirm = false}}}):_e(),_v(" "),(showTOTPSetup)?_c('Totp',{attrs:{"consumer_func":totp_confirmed_func},on:{"hide-totp":function($event){showTOTPSetup = false}}}):_e(),_v(" "),(showWebAuthSetup)?_c('WebAuth',{attrs:{"consumer_func":webauth_confirmed_func},on:{"hide-webauth":function($event){showWebAuthSetup = false}}}):_e(),_v(" "),_c('div',{staticClass:"table-responsive"},[_c('table',{staticClass:"table"},[_c('thead',[_c('tr',{staticStyle:{"cursor":"pointer"}},[_c('th',[_v(" Type ")]),_v(" "),_c('th'),_v(" "),_c('th')])]),_v(" "),_c('tbody',[_c('tr',[_c('td',[_v(_s(translate("MFA.APP")))]),_v(" "),_c('td'),_v(" "),(totpKey.length == 0)?_c('td'):_e(),_v(" "),(totpKey.length == 1)?_c('td',[_c('button',{staticClass:"btn btn-info",on:{"click":function($event){return editAuthenticatorApp()}}},[_v(" Edit ")])]):_e(),_v(" "),(totpKey.length == 0)?_c('td',[_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return setupAuthenticatorApp()}}},[_v(" Add ")])]):_e(),_v(" "),(totpKey.length == 1)?_c('td',[_c('button',{staticClass:"btn btn-danger",on:{"click":function($event){return removeAuthenticatorApp()}}},[_v(" Remove")])]):_e()]),_v(" "),_l((webAuthKeys),function(webAuthKey,index){return _c('tr',[_c('td',[_v(_s(translate("MFA.KEY"))+": "+_s(webAuthKey.name))]),_v(" "),_c('td'),_v(" "),_c('td',[_c('button',{staticClass:"btn btn-danger",on:{"click":function($event){return removeWebAuthKey(webAuthKey)}}},[_v(_s(translate("MFA.REMOVE")))])])])})],2)]),_v(" "),_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return addWebAuthKey()}}},[_v(_s(translate("MFA.ADD.KEY")))])])]},proxy:true}])})}},    components: {
        AppButton,
        AppModal,
        Confirm,
        Spinner,
        Totp,
        WebAuth,
    },
    data() {
        return {
            showSpinner: false,
            totpKey: [],
            webAuthKeys: [],
            showConfirm: false,
            confirm_message: "",
            confirm_body: "",
            confirm_consumer_cancel_func: () => {},
            confirm_consumer_func: () => {},
            showTOTPSetup: false,
            showWebAuthSetup: false,
        };
    },
    
    computed: {
	...Vuex.mapState([
	    'context'
	]),
    },
    mixins:[i18n],
    created: function() {
        let that = this;
        this.showSpinner = true;
        this.context.network.account.getSecondAuthMethods(this.context.username, this.context.signer).thenApply(mfaMethods => {
            let methods = mfaMethods.toArray([]);
            for(var i=0; i < methods.length;i++) {
                let method = methods[i];
                if (method.type.toString() == peergos.shared.login.mfa.MultiFactorAuthMethod.Type.TOTP.toString()) {
                    that.totpKey.push({credentialId: method.credentialId});
                } else {
                    that.webAuthKeys.push({credentialId: method.credentialId, name: method.name});
                }
            }
            that.showSpinner = false;
        }).exceptionally(function(throwable) {
            that.$toast.error(that.translate("MFA.ERROR.RETRIEVAL"), {timeout:false});
            console.log('Unable to retrieve authentication methods: ' + throwable);
            that.showSpinner = false;
        });
    },
    methods: {
        setupAuthenticatorApp() {
            this.showTOTPSetup = true;
        },
        editAuthenticatorApp() {
            this.showTOTPSetup = true;
        },
        removeAuthenticatorApp() {
            let that = this;
            this.confirmRemoveAuthenticatorApp(
                () => {
                    that.showConfirm = false;
                    that.deleteAuthenticatorApp();
                },
                () => {
                    that.showConfirm = false;
                    that.showSpinner = false;
                }
            );
        },
        deleteAuthenticatorApp() {
            let that = this;
            this.showSpinner = true;
            let credentialId = this.totpKey[0].credentialId;
            this.context.network.account.deleteSecondFactor(this.context.username, credentialId, this.context.signer).thenApply(res => {
                if (res) {
                    that.totpKey = [];
                }
                that.showSpinner = false;
            }).exceptionally(function(throwable) {
                that.$toast.error(that.translate("MFA.ERROR.DELETE"), {timeout:false});
                console.log('Unable to delete authentication method: ' + throwable);
                that.showSpinner = false;
            });
        },
	    addWebAuthKey() {
	        if (this.webAuthKeys.length + this.totpKey.length >= 10) {
                that.$toast.error(that.translate("MFA.MAX.KEYS"), {timeout:false});
	        } else {
                this.showWebAuthSetup = true;
            }
        },
        removeWebAuthKey(webAuthKey) {
            let that = this;
            this.confirmRemoveWebAuthKey(webAuthKey.name,
                () => {
                    that.showConfirm = false;
                    that.deleteWebAuthKey(webAuthKey);
                },
                () => {
                    that.showConfirm = false;
                    that.showSpinner = false;
                }
            );
        },
        deleteWebAuthKey(webAuthKey) {
            let that = this;
            this.showSpinner = true;
            let credentialId = webAuthKey.credentialId;
            this.context.network.account.deleteSecondFactor(this.context.username, credentialId, this.context.signer).thenApply(res => {
                let index = that.webAuthKeys.findIndex((v) => v.credentialId === webAuthKey.credentialId);
                if (index > -1) {
                    that.webAuthKeys.splice(index, 1);
                }
                that.showSpinner = false;
            }).exceptionally(function(throwable) {
                that.$toast.error(that.translate("MFA.ERROR.DELETE"), {timeout:false});
                console.log('Unable to delete web authentication method: ' + throwable);
                that.showSpinner = false;
            });
        },
        confirmRemoveWebAuthKey(name, replaceFunction, cancelFunction) {
            this.confirm_message = this.translate("MFA.REMOVE") + " " +this.translate("MFA.KEY") + ': ' + name;
            this.confirm_body = this.translate("MFA.CONFIRM.REMOVE.KEY");
            this.confirm_consumer_cancel_func = cancelFunction;
            this.confirm_consumer_func = replaceFunction;
            this.showConfirm = true;
        },
        confirmRemoveAuthenticatorApp(replaceFunction, cancelFunction) {
            this.confirm_message = this.translate("MFA.REMOVE") + " " +this.translate("MFA.APP");
            this.confirm_body = this.translate("MFA.CONFIRM.REMOVE.APP");
            this.confirm_consumer_cancel_func = cancelFunction;
            this.confirm_consumer_func = replaceFunction;
            this.showConfirm = true;
        },
        totp_confirmed_func(credentialId, success) {
            if (success && this.totpKey.length == 0) {
                this.totpKey.push({credentialId: credentialId});
            }
        },
        webauth_confirmed_func(credentialId, name, success) {
            if (success) {
                this.webAuthKeys.push({credentialId: credentialId, name: name});
            }
        },
    },
};
},{ "../../i18n/index.js": 11, "../AppButton.vue": 2, "../auth/Totp.vue": 18, "../auth/WebAuth.vue": 19, "../confirm/Confirm.vue": 15, "../spinner/Spinner.vue": 16, "AppModal.vue": 14}], 26:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const AppModal = require("AppModal.vue");
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('AppModal',{scopedSlots:_u([{key:"header",fn:function(){return [_c('h2',[_v(_s(translate("PAID.CANCEL")))])]},proxy:true},{key:"body",fn:function(){return [_c('label',[_v("Why are you cancelling?")]),_v(" "),_c('textarea',{directives:[{name:"model",rawName:"v-model",value:(feedback),expression:"feedback"}],staticStyle:{"height":"200px"},attrs:{"placeholder":"What can we do better?"},domProps:{"value":(feedback)},on:{"input":function($event){if($event.target.composing)return;feedback=$event.target.value}}})]},proxy:true},{key:"footer",fn:function(){return [_c('AppButton',{attrs:{"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return close()}}},[_v(_s(translate("PAID.CANCEL.OK")))]),_v(" "),_c('AppButton',{staticClass:"alert",attrs:{"disabled":disabled,"type":"primary","block":""},nativeOn:{"click":function($event){return cancelPaid()}}},[_v(_s(translate("PAID.CANCEL.CONFIRM")))])]},proxy:true}])})}},	components: {
	    AppButton,
	    AppModal,
	},
        mixins:[i18n],
	data() {
		return {
		    feedback: ""
		};
	},
	computed: {
		...Vuex.mapState([
			'context',
		]),
		...Vuex.mapGetters([
			'quota',
		]),
            disabled: function() {
                return this.feedback.length == 0;
            }
    },
	methods: {
		...Vuex.mapActions([
			'updateQuota',
		]),
            requestStorage(bytes) {
		var that = this;
                var maxContextSize = peergos.shared.user.ServerMessage.MAX_CONTENT_SIZE;
                var trimmedContents = this.feedback.length > maxContextSize ? this.feedback.substring(0, maxContextSize) : this.feedback;
                this.context.sendFeedback(trimmedContents);
                this.context.requestSpace(0)
		    .thenApply(x => that.updateQuota(quotaBytes => {
			that.$store.commit("SET_MODAL", false)
			that.$toast.error(that.translate("PAID.SORRY"), {timeout:false, id: 'pro'})
		    })).exceptionally(t => {
                        that.$toast.error(that.translate("PAID.ERROR.CANCEL")+": " + t.getMessage())
                    })
	    },

            close() {
                this.$store.commit("SET_MODAL", false);
            },
            
	    cancelPaid() {
                this.requestStorage(0);
            },
	},
};
},{ "../../i18n/index.js": 11, "../AppButton.vue": 2, "AppModal.vue": 14}], 42:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const AppModal = require("AppModal.vue");
const i18n = require("../../i18n/index.js");


module.exports = {
render: function() {with(this){return _c('AppModal',{staticClass:"feedback",scopedSlots:_u([{key:"header",fn:function(){return [_c('h2',[_v(_s(translate("FEEDBACK.TITLE")))])]},proxy:true},{key:"body",fn:function(){return [_c('h3',[_v("\n                        "+_s(translate("FEEDBACK.TEXT1"))+" "),_c('a',{attrs:{"href":"https://matrix.to/#/#peergos-chat:matrix.org","target":"_blank","rel":"noopener noreferrer"}},[_c('u',[_v("Matrix")])]),_v(" "+_s(translate("FEEDBACK.TEXT2"))+": "),_c('a',{attrs:{"href":"mailto:feedback@peergos.org"}},[_v("feedback@peergos.org")])]),_v(" "),_c('p',[_c('textarea',{directives:[{name:"model",rawName:"v-model",value:(currentFeedback),expression:"currentFeedback"}],staticStyle:{"width":"100%"},attrs:{"id":"feedback-text","spellcheck":"true","rows":"5","placeholder":textAreaPlaceholder,"maxlength":"1000"},domProps:{"value":(currentFeedback)},on:{"input":function($event){if($event.target.composing)return;currentFeedback=$event.target.value}}})])]},proxy:true},{key:"footer",fn:function(){return [_c('AppButton',{attrs:{"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return sendFeedback()}}},[_v(_s(translate("FEEDBACK.SUBMIT")))])]},proxy:true}])})}},	components: {
	    AppButton,
    	    AppModal
	},
        mixins:[i18n],
	data() {
		return {
			textAreaPlaceholder: this.translate("FEEDBACK.PLACEHOLDER"),
			warning: false
		};
	},
	computed: {
		...Vuex.mapState([
			'context'
		]),
      currentFeedback: {
        get () {
          return this.$store.getters.getCurrentFeedback;
        },
        set (value) {
          this.$store.commit("SET_CURRENT_FEEDBACK", value);
        }
      }
    },
	methods: {
		sendFeedback: function() {
                    var contents = this.currentFeedback;
                    if (contents.length == 0)
                        return;
                    let that = this;
                    var maxContextSize = peergos.shared.user.ServerMessage.MAX_CONTENT_SIZE;
                    var trimmedContents = contents.length > maxContextSize ? contents.substring(0, maxContextSize) : contents;
                    this.context.sendFeedback(trimmedContents)
                        .thenApply(function(res) {
                            if (res) {
                                that.$toast.info(that.translate("FEEDBACK.SENT"),{timeout:false, position: 'bottom-left' })
                                that.$store.commit("SET_MODAL", false);
                                that.$store.commit("SET_CURRENT_FEEDBACK", "");
                            } else {
                                that.$toast.error(that.translate("FEEDBACK.ERROR"),{timeout:false, position: 'bottom-left' })
                            }
                        }).exceptionally(function(throwable) {
                            that.$toast.error(that.translate("FEEDBACK.ERROR")+': ' + throwable.getMessage(),{timeout:false, position: 'bottom-left' })
                        });
                },
	},

};
},{ "../../i18n/index.js": 11, "../AppButton.vue": 2, "AppModal.vue": 14}], 23:[function(require,module,exports){
const i18n = require("../../i18n/index.js");
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticClass:"modal-container full-height",staticStyle:{"width":"100%","overflow-y":"auto","padding":"0"},on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:"modal-header",staticStyle:{"padding":"0"}},[_c('center',[_c('h2',[_v(_s(translate("HELP.TITLE")))])]),_v(" "),_c('span',{staticStyle:{"position":"absolute","top":"-10px","right":"40px","z-index":"999","color":"black","font-size":"3em","font-weight":"bold","cursor":"pointer","font-family":"'Cambria Math'"},attrs:{"tabindex":"0"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")])],1),_v(" "),_c('div',{staticClass:"modal-body"},[_c('h2',[_v(_s(translate("HELP.HOW")))]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.UPGRADE")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.UPGRADE.TEXT")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.SPACE")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.SPACE.TEXT")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.FOLLOW")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.FOLLOW.TEXT")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.FRIENDS")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.FRIENDS.TEXT1")))]),_v(" "),_c('p',[_v(_s(translate("HELP.FRIENDS.TEXT2")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.PROFILE")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.PROFILE.TEXT1")))]),_v(" "),_c('p',[_v(_s(translate("HELP.PROFILE.TEXT2")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.SHARE")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.SHARE.TEXT1")))]),_v(" "),_c('p',[_v(_s(translate("HELP.SHARE.TEXT2")))]),_v(" "),_c('p',[_v(_s(translate("HELP.SHARE.TEXT3")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.SHARED.FILES")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.SHARED.FILES.TEXT1")))]),_v(" "),_c('p',[_v(_s(translate("HELP.SHARED.FILES.TEXT2")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.LINK")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.LINK.TEXT1")))]),_v(" "),_c('p',[_v(_s(translate("HELP.LINK.TEXT2")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.CAL")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.CAL.TEXT1")))]),_v(" "),_c('p',[_v(_s(translate("HELP.CAL.TEXT2")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.SHARE.CAL")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.SHARE.CAL.TEXT1")))]),_v(" "),_c('p',[_v(_s(translate("HELP.SHARE.CAL.TEXT2")))]),_c('p'),_c('p',[_v(_s(translate("HELP.SHARE.CAL.TEXT3")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.SHARE.EVENT")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.SHARE.EVENT.TEXT1")))]),_v(" "),_c('p',[_v(_s(translate("HELP.SHARE.EVENT.TEXT2")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.IMPORT.EVENT")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.IMPORT.EVENT.TEXT1")))]),_v(" "),_c('p',[_v(_s(translate("HELP.IMPORT.EVENT.TEXT2")))]),_v(" "),_c('p',[_v(_s(translate("HELP.IMPORT.EVENT.TEXT3")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.SHARE.TASK")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.SHARE.TASK.TEXT")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.WWW")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.WWW.TEXT1")))]),_v(" "),_c('p',[_v(_s(translate("HELP.WWW.TEXT2")))]),_v(" "),_c('p',[_v(_s(translate("HELP.WWW.TEXT3")))]),_v(" "),_c('p',[_v(_s(translate("HELP.WWW.TEXT4")))]),_v(" "),_c('p',[_v(_s(translate("HELP.WWW.TEXT5"))+": "),_c('a',{staticClass:"help-link",attrs:{"href":"https://peergos.org/posts/p2p-web-hosting","target":"_blank","rel":"noopener noreferrer"}},[_v("https://peergos.org/posts/p2p-web-hosting")])])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.CLEANUP")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.CLEANUP.TEXT")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.THUMB")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.THUMB.TEXT")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.FEEDBACK")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.FEEDBACK.TEXT")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.PASSWORD")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.PASSWORD.TEXT")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.DELETE")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.DELETE.TEXT1")))]),_v(" "),_c('p',[_v(_s(translate("HELP.DELETE.TEXT2")))])]),_v(" "),_c('h2',[_v(_s(translate("HELP.GRIPES"))+":")]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.SLOW")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.SLOW.TEXT1")))]),_v(" "),_c('p',[_v(_s(translate("HELP.SLOW.TEXT2")))])]),_v(" "),_c('button',{staticClass:"collapsible-help-item",attrs:{"type":"button"}},[_v(_s(translate("HELP.JAVA")))]),_v(" "),_c('div',{staticClass:"help-item-content"},[_c('p',[_v(_s(translate("HELP.JAVA.TEXT1")))]),_v(" "),_c('p',[_v(_s(translate("HELP.JAVA.TEXT2")))])])])])])])}},    components: {
    },
    mixins:[i18n],
    data() {
        return {
        }
    },
    mounted() {
        var coll = document.getElementsByClassName("collapsible-help-item");
        for (var i = 0; i < coll.length; i++) {
          coll[i].addEventListener("click", function() {
            this.classList.toggle("active-help-item");
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
              content.style.display = "none";
            } else {
              content.style.display = "block";
            }
          });
        }
    },
    methods: {
        close: function () {
            this.$store.commit("SET_MODAL", false);
        }
    }
}
},{ "../../i18n/index.js": 11}], 32:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const AppModal = require("AppModal.vue");
const UriDecoder = require('../../mixins/uridecoder/index.js');
const Bip39 = require('../../mixins/password/bip-0039-english.json');
const FormPassword = require("../form/FormPassword.vue");
const MultiFactorAuth = require("../auth/MultiFactorAuth.vue");
const Spinner = require("../spinner/Spinner.vue");
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('AppModal',{scopedSlots:_u([{key:"header",fn:function(){return [_c('h2',[_v(_s(translate("PASSWORD.CHANGE")))])]},proxy:true},{key:"body",fn:function(){return [(showSpinner)?_c('Spinner'):_e(),_v(" "),(showMultiFactorAuth)?_c('MultiFactorAuth',{attrs:{"mfaMethods":mfaMethods,"challenge":challenge,"consumer_cancel_func":consumer_cancel_func,"consumer_func":consumer_func},on:{"hide-confirm":function($event){showMultiFactorAuth = false}}}):_e(),_v(" "),_c('FormPassword',{attrs:{"placeholder":translate('PASSWORD.EXISTING')},model:{value:(existing),callback:function ($$v) {existing=$$v},expression:"existing"}}),_v(" "),_c('AppButton',{staticClass:"generate-password",attrs:{"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return generatePassword()}}},[_v("\n\t\t\t\t"+_s(translate("PASSWORD.GENERATE"))+"\n\t\t\t")]),_v(" "),_c('FormPassword',{attrs:{"placeholder":translate('PASSWORD.NEW'),"passwordIsVisible":showPasswords,"firstOfTwo":""},model:{value:(password),callback:function ($$v) {password=$$v},expression:"password"}}),_v(" "),_c('FormPassword',{attrs:{"placeholder":translate('PASSWORD.REENTER'),"passwordIsVisible":showPasswords},model:{value:(password2),callback:function ($$v) {password2=$$v},expression:"password2"}})]},proxy:true},{key:"footer",fn:function(){return [_c('AppButton',{attrs:{"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return updatePassword()}}},[_v(_s(translate("PASSWORD.CHANGE")))])]},proxy:true}])})}},    components: {
        AppButton,
        AppModal,
	    FormPassword,
	    MultiFactorAuth,
        Spinner,
    },
    
    data() {
        return {
            showSpinner: false,
            existing: "",
            password: "",
            password2: "",
            showPasswords: false,
            showMultiFactorAuth: false,
        };
    },
    
    computed: {
	...Vuex.mapState([
	    'context'
	]),
    },
    mixins:[UriDecoder, i18n],
    methods: {
	generatePassword() {
	    let bytes = nacl.randomBytes(16);
	    let wordIndices = [];
	    for (var i=0; i < 7; i++)
		wordIndices[i] = bytes[2*i]*8 + (bytes[2*i + 1] & 7);
	    let password = wordIndices.map(j => Bip39[j]).join("-");
	    this.password = password;
            this.showPasswords = true;
        },
        
	updatePassword() {
        if(this.existing.length == 0 || this.password.length == 0 || this.password2.length == 0) {
            this.$toast.error(this.translate("PASSWORD.FIELDS"),{timeout:false, position: 'bottom-left' })
        } else {
            if (this.password == this.password2) {
                let that = this;
                this.showSpinner = true;
                let handleMfa = function(mfaReq) {
                        let future = peergos.shared.util.Futures.incomplete();
                        let mfaMethods = mfaReq.methods.toArray([]);
                        that.challenge = mfaReq.challenge;
                        that.mfaMethods = mfaMethods;
                        that.consumer_func = (credentialId, resp) => {
                            that.showMultiFactorAuth = false;
                            future.complete(resp);
                        };
                        that.consumer_cancel_func = (credentialId) => {
                            that.showMultiFactorAuth = false;
                            let resp = peergos.client.JsUtil.generateAuthResponse(credentialId, '');
                            future.complete(resp);
                        }
                        that.showMultiFactorAuth = true;
                        return future;
                };
                this.context.changePassword(this.existing, this.password, mfaReq => handleMfa(mfaReq)).thenApply(function(newContext){
                    that.$store.commit("SET_CONTEXT", newContext);
                    that.$store.commit("SET_MODAL", false);
                    that.$toast.info(that.translate("PASSWORD.CHANGED"))
                    that.showSpinner = false;
                }).exceptionally(function(throwable) {
                    if (throwable.getMessage().startsWith('Invalid+TOTP+code')) {
                        that.$toast.error(that.translate("PASSWORDS.MFA"), {timeout:false})
                    } else {
                        that.$toast.error(that.uriDecode(throwable.getMessage()), {timeout:false})
                    }
                    that.showSpinner = false;
                    console.log(throwable.getMessage())
                });
            } else {
                this.$toast.error(this.translate("PASSWORDS.MATCH"),{timeout:false})
            }
        }
    },
    },
};
},{ "../../i18n/index.js": 11, "../../mixins/password/bip-0039-english.json": 28, "../../mixins/uridecoder/index.js": 27, "../AppButton.vue": 2, "../auth/MultiFactorAuth.vue": 31, "../form/FormPassword.vue": 30, "../spinner/Spinner.vue": 16, "AppModal.vue": 14}], 25:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const AppModal = require("AppModal.vue");
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('AppModal',{scopedSlots:_u([{key:"header",fn:function(){return [_c('h2',[_v(_s(upgradeTitle))])]},proxy:true},{key:"body",fn:function(){return [_c('h2',{staticClass:"card__meta"},[_v(" "+_s(translate("SPACE.CURRENT"))+": "+_s(quota))]),_v(" "),(!isPaid)?_c('p',[_v(_s(translate("PAID.AGREE"))+" "),_c('a',{attrs:{"href":"/terms.html","target":"_blank","rel":"noopener noreferrer"}},[_v("Terms of Service")]),_v(".")]):_e(),_v(" "),_c('center',[(!showCard)?_c('div',{staticClass:"button-group-container"},[_c('div',{staticClass:"priceslider",attrs:{"data-select":"billing"}},[_c('label',{staticClass:"entry",on:{"click":function($event){return setMonthly()}}},[_v("Monthly"),_c('input',{attrs:{"type":"radio","name":"billing","value":"monthly"},domProps:{"checked":!annual}})]),_v(" "),_c('label',{staticClass:"entry",on:{"click":function($event){return setAnnual()}}},[_v("Yearly"),_c('input',{attrs:{"type":"radio","name":"billing","value":"yearly"},domProps:{"checked":annual}})])])]):_e()]),_v(" "),(!showCard)?_c('div',{staticClass:"options_container"},[_c('div',{staticClass:"card__meta options"},[_c('h3',[_v("Pro "+_s(translate("PAID.ACCOUNT")))]),_v(" "),_c('ul',[_c('li',[_v("200 GB "+_s(translate("PAID.STORAGE")))]),_v(" "),_c('li',[_v(_s(translate("PAID.APPS")))]),_v(" "),_c('li',[_v("£"+_s(price1()))])]),_v(" "),_c('AppButton',{attrs:{"disabled":disablePro,"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return updateCard(200000000000)}}},[_v(_s(proButtonText))])],1),_v(" "),_c('div',{staticClass:"card__meta options"},[_c('h3',[_v("Visionary "+_s(translate("PAID.ACCOUNT")))]),_v(" "),_c('ul',[_c('li',[_v("1000 GB "+_s(translate("PAID.STORAGE")))]),_v(" "),_c('li',[_v(_s(translate("PAID.APPS")))]),_v(" "),_c('li',[_v("£"+_s(price2())+"  "+_s(prorataTextVisionary))])]),_v(" "),_c('AppButton',{attrs:{"disabled":disableVisionary,"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return updateCard(1000000000000)}}},[_v(_s(visionaryButtonText))])],1),_v(" "),_c('div',{staticClass:"card__meta options"},[_c('h3',[_v("Pioneer "+_s(translate("PAID.ACCOUNT")))]),_v(" "),_c('ul',[_c('li',[_v("3000 GB "+_s(translate("PAID.STORAGE")))]),_v(" "),_c('li',[_v(_s(translate("PAID.APPS")))]),_v(" "),_c('li',[_v("£"+_s(price3())+"  "+_s(prorataTextPioneer))])]),_v(" "),_c('AppButton',{attrs:{"disabled":disablePioneer,"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return updateCard(3000000000000)}}},[_v(_s(pioneerButtonText))])],1)]):_e(),_v(" "),(showCard)?_c('div',[_c('iframe',{staticStyle:{"border":"none"},attrs:{"id":"paymentframe","width":"450px","height":"420px","src":paymentUrl,"referrerpolicy":"origin"}})]):_e()]},proxy:true},{key:"footer",fn:function(){return [(isPaid)?_c('AppButton',{attrs:{"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return updateCardDetails()}}},[_v(_s(translate("PAID.CARD")))]):_e(),_v(" "),(isPaid)?_c('AppButton',{staticClass:"alert",attrs:{"type":"primary","block":""},nativeOn:{"click":function($event){return cancelPaid()}}},[_v(_s(translate("PAID.CANCEL")))]):_e()]},proxy:true}])})}},	components: {
	    AppButton,
	    AppModal,
	},
        mixins:[i18n],
	data() {
		return {
			unit:"GiB",
			space:"",
			proMb: 200*1000,
                        visionaryMb: 1000*1000,
                        pioneerMb: 3000*1000,
                        gettingCard: false,
                        paymentUrl:null,
			showCard:false,
                        currentAnnual: false,
                        annual: true,
                        currentFocusFunction:null,
		};
	},
	computed: {
		...Vuex.mapState([
			'context',
			'quotaBytes',
			'usageBytes',
			'paymentProperties'
		]),
		...Vuex.mapGetters([
			'quota',
			'usage'
		]),

		isPaid() {
            return this.quotaBytes/(1000*1000) > this.paymentProperties.freeMb() && this.paymentProperties.desiredMb() > 0;
		},
                disablePro() {
                    return this.isPro || this.usageBytes/(1000*1000) > this.proMb;
                },
		disableVisionary() {
                    return this.isVisionary || this.usageBytes/(1000*1000) > this.visionaryMb;
                },
		disablePioneer() {
                    return this.isPioneer || this.usageBytes/(1000*1000) > this.pioneerMb;
                },
		isPro() {
                    return this.quotaBytes/(1000*1000) > this.paymentProperties.freeMb() && this.paymentProperties.desiredMb() == this.proMb && this.annual == this.currentAnnual;
                },

            isVisionary() {
                return this.quotaBytes/(1000*1000) > this.paymentProperties.freeMb() && this.paymentProperties.desiredMb() == this.visionaryMb && this.annual == this.currentAnnual;
            },

            isPioneer() {
                return this.quotaBytes/(1000*1000) > this.paymentProperties.freeMb() && this.paymentProperties.desiredMb() == this.pioneerMb && this.annual == this.currentAnnual;
            },

            prorataTextVisionary() {
                if (this.isPro)
                    return " ("+this.translate("PAID.PRORATA")+")";
                else
                    return ""
            },
            prorataTextPioneer() {
                if (this.isPro || this.isVisionary)
                    return " ("+this.translate("PAID.PRORATA")+")";
                else
                    return ""
            },
            upgradeTitle(){
			return (this.isPaid)
				? this.translate("PAID.SETTINGS")
				: this.translate("PAID.UPGRADE")
	    },
            proButtonText(){
                return (this.isPro)
				? this.translate("PAID.CURRENT")
				: this.translate("PAID.PRO")
            },
            visionaryButtonText(){
                return (this.isVisionary)
				? this.translate("PAID.CURRENT")
				: this.translate("PAID.VISIONARY")
            },
            pioneerButtonText(){
                return (this.isPioneer)
				? this.translate("PAID.CURRENT")
				: this.translate("PAID.PIONEER")
            }
    },

    mounted() {
        this.updateError()
        this.currentAnnual = this.paymentProperties.isAnnual();
        console.log("annual :" + this.annual)
    },
    
	methods: {
		...Vuex.mapActions([
			'updateQuota',
			'updatePayment'
		]),
            setMonthly() {
            this.annual = false;
        },
        setAnnual() {
            this.annual = true;
        },
        price1() {
            return (this.annual ? 3 : 4) + " / " + this.translate("SIGNUP.MONTH") + ", " + (this.annual ? this.translate("SIGNUP.BILL.YEARLY") : this.translate("SIGNUP.BILL.MONTHLY"));
        },
        price2() {
            return (this.annual ? 8 : 10) + " / " + this.translate("SIGNUP.MONTH") + ", " + (this.annual ? this.translate("SIGNUP.BILL.YEARLY") : this.translate("SIGNUP.BILL.MONTHLY"));
        },
        price3() {
            return (this.annual ? 20 : 25) + " / " + this.translate("SIGNUP.MONTH") + ", " + (this.annual ? this.translate("SIGNUP.BILL.YEARLY") : this.translate("SIGNUP.BILL.MONTHLY"));
        },
        startAddCardListener: function(desired) {
                var that = this;
                this.currentFocusFunction = function(event) {
                    that.requestStorage(desired);
                };
	        window.addEventListener("focus", this.currentFocusFunction, false);
	    },
	    requestStorage(bytes) {
		var that = this;
                window.removeEventListener("focus", this.currentFocusFunction);
                console.log("requesting annual " + this.annual);
		this.context.requestSpace(bytes, this.annual)
		    .thenApply(x => that.updateQuota(quotaBytes => {
			console.log(quotaBytes,'quotaBytes')
                        
			if (quotaBytes >= bytes && bytes > 0) {
			    that.updatePayment()
			    that.$store.commit("SET_MODAL", false)
			    that.$toast.info(that.translate("PAID.THANKYOU"),{timeout:false, id: 'pro'})                            
			} else if (bytes == 0) {
			    that.updatePayment()
			    that.$store.commit("SET_MODAL", false)
			    that.$toast.error(that.translate("PAID.SORRY"), {timeout:false, id: 'pro'})
			} else if (quotaBytes < bytes && bytes > 0 ) {
                            that.updatePayment(() => {
                                that.updateError()
                                if (! that.paymentProperties.hasError())
			            that.$toast.error(that.translate("PAID.CARD.NEEDED"),{timeout:false, id: 'pro', position: 'bottom-left'})
                            });
			} else
                            that.updatePayment(() => that.updateError());
		    })).exceptionally(t => {
                        that.$toast.error(that.translate("PAID.ERROR.STORAGE")+": " + t.getMessage())
                    })
	    },
            
	    updateError() {
		if (this.paymentProperties.hasError()) {
		    this.$toast.error(this.paymentProperties.getError(),{timeout:false, id: 'payment', position: 'bottom-left'})
		}
	    },

            updateCardDetails() {
                this.updateCard(this.paymentProperties.desiredMb()*1000*1000)
            },
            
    	    updateCard(desired) {
		console.log('updateCard')
		var that = this;
		this.context.getPaymentProperties(true).thenApply(function(props) {
		    that.paymentUrl = props.getUrl() + "&username=" + that.context.username + "&client_secret=" + props.getClientSecret();
                    //  open payment card page in new tab
                    let link = document.createElement('a')
                    let click = new MouseEvent('click')
                    link.target = "_blank";
                    link.href = that.paymentUrl;
                    link.dispatchEvent(click);
		    //that.showCard = true;
            	    that.startAddCardListener(desired);
		});
	    },
            
	    cancelPaid() {
                this.$store.commit("CURRENT_MODAL", "ModalCancel");
            },
	},
};
},{ "../../i18n/index.js": 11, "../AppButton.vue": 2, "AppModal.vue": 14}], 41:[function(require,module,exports){
const AppModal = require("AppModal.vue");
const Confirm = require("../confirm/Confirm.vue");
const FolderPicker = require('../picker/FolderPicker.vue');
const Share = require("../drive/DriveShare.vue");
const Spinner = require("../spinner/Spinner.vue");
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('AppModal',{scopedSlots:_u([{key:"header",fn:function(){return [_c('h2',[_v(_s(translate("PROFILE.TITLE")))])]},proxy:true},{key:"body",fn:function(){return [(showSpinner)?_c('Spinner'):_e(),_v(" "),(showConfirm)?_c('Confirm',{attrs:{"confirm_message":confirm_message,"confirm_body":confirm_body,"consumer_cancel_func":confirm_consumer_cancel_func,"consumer_func":confirm_consumer_func},on:{"hide-confirm":function($event){showConfirm = false}}}):_e(),_v(" "),(showFolderPicker)?_c('FolderPicker',{attrs:{"baseFolder":folderPickerBaseFolder,"selectedFolder_func":selectedFoldersFromPicker,"multipleFolderSelection":multipleFolderSelection,"initiallySelectedPaths":initiallySelectedPaths}}):_e(),_v(" "),(showShare)?_c('Share',{attrs:{"data":sharedWithData,"fromApp":fromApp,"displayName":displayName,"allowReadWriteSharing":allowReadWriteSharing,"allowCreateSecretLink":allowCreateSecretLink,"files":filesToShare,"path":pathToFile,"followernames":followernames,"friendnames":friendnames,"groups":groups,"messages":messages},on:{"hide-share-with":function($event){showShare = false},"update-shared-refresh":function($event){forceSharedRefreshWithUpdate++}}}):_e(),_v(" "),_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"flex-thumbnail-container"},[_c('div',{staticStyle:{"padding":"20px"}},[(hasProfileImage())?_c('img',{staticStyle:{"width":"150px","height":"150px"},attrs:{"id":"profile-image","alt":"Profile image","src":getProfileImage()}}):_e()]),_v(" "),_c('div',{staticClass:"flex-image-button-container"},[_c('div',{staticClass:"flex-container"},[_c('button',{staticClass:"btn btn-success flex-grow",on:{"click":triggerUpload}},[_v(_s(translate("PROFILE.UPLOAD")))]),_v(" "),_c('input',{staticStyle:{"display":"none"},attrs:{"type":"file","id":"uploadImageInput","accept":"image/*"},on:{"change":uploadImageFile}})]),_v(" "),_c('div',{staticClass:"flex-container"},[(hasProfileImage())?_c('button',{staticClass:"btn btn-danger flex-grow vertical-margin",on:{"click":function($event){return removeImage()}}},[_v(_s(translate("PROFILE.REMOVE")))]):_e()]),_v(" "),_c('div',{staticClass:"flex-container"},[(hasProfileImage())?_c('button',{staticClass:"btn btn-success flex-grow",on:{"click":function($event){return share('photo', 'Profile image')}}},[_v(_s(translate("DRIVE.SHARE")))]):_e()])])]),_v(" "),_c('div',{staticClass:"flex-profile-container"},[_c('div',{staticClass:"flex-item-left"},[_c('label',{staticStyle:{"margin-right":"10px"}},[_v(_s(translate("PROFILE.FIRSTNAME")))]),_v(" "),_c('div',{staticStyle:{"flex-grow":"1","display":"flex","flex-wrap":"wrap"}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(firstName),expression:"firstName"}],staticClass:"form-control-profile",attrs:{"id":"profile-first-name","placeholder":"First Name","maxlength":FIRSTNAME_MAX_LENGTH},domProps:{"value":(firstName)},on:{"input":function($event){if($event.target.composing)return;firstName=$event.target.value}}}),_v(" "),(firstNameReadyToBeShared)?_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return share('firstname', 'First name')}}},[_v(_s(translate("DRIVE.SHARE")))]):_e()])]),_v(" "),_c('div',{staticClass:"flex-item-right"},[_c('label',{staticStyle:{"margin-right":"10px"}},[_v(_s(translate("PROFILE.LASTNAME")))]),_v(" "),_c('div',{staticClass:"flex-container flex-grow"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(lastName),expression:"lastName"}],staticClass:"form-control-profile",attrs:{"id":"profile-last-name","placeholder":"Last Name","maxlength":LASTNAME_MAX_LENGTH},domProps:{"value":(lastName)},on:{"input":function($event){if($event.target.composing)return;lastName=$event.target.value}}}),_v(" "),(lastNameReadyToBeShared)?_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return share('lastname', 'Last name')}}},[_v(_s(translate("DRIVE.SHARE")))]):_e()])]),_v(" "),_c('div',{staticClass:"flex-item-left"},[_c('label',{staticStyle:{"margin-right":"10px"}},[_v(_s(translate("PROFILE.PHONE")))]),_v(" "),_c('div',{staticClass:"flex-container flex-grow"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(primaryPhone),expression:"primaryPhone"}],staticClass:"form-control-profile",attrs:{"id":"profile-primary-phone","placeholder":"Primary Phone Number","maxlength":PHONE_MAX_LENGTH},domProps:{"value":(primaryPhone)},on:{"input":function($event){if($event.target.composing)return;primaryPhone=$event.target.value}}}),_v(" "),(primaryPhoneReadyToBeShared)?_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return share('phone', 'Phone number')}}},[_v(_s(translate("DRIVE.SHARE")))]):_e()])]),_v(" "),_c('div',{staticClass:"flex-item-right"},[_c('label',{staticStyle:{"margin-right":"10px"}},[_v(_s(translate("PROFILE.EMAIL")))]),_v(" "),_c('div',{staticClass:"flex-container flex-grow"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(primaryEmail),expression:"primaryEmail"}],staticClass:"form-control-profile",attrs:{"id":"profile-primary-email","placeholder":"Primary Email Address","maxlength":EMAIL_MAX_LENGTH},domProps:{"value":(primaryEmail)},on:{"input":function($event){if($event.target.composing)return;primaryEmail=$event.target.value}}}),_v(" "),(primaryEmailReadyToBeShared)?_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return share('email', 'Email address')}}},[_v(_s(translate("DRIVE.SHARE")))]):_e()])])]),_v(" "),_c('div',{staticClass:"flex-item"},[_c('div',[_c('label',[_v(_s(translate("PROFILE.STATUS")))])])]),_v(" "),_c('div',{staticClass:"flex-item"},[_c('div',{staticStyle:{"flex-grow":"2"}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(status),expression:"status"}],staticClass:"form-control-profile",staticStyle:{"width":"100%"},attrs:{"id":"profile-status","placeholder":"Status","maxlength":STATUS_MAX_LENGTH},domProps:{"value":(status)},on:{"input":function($event){if($event.target.composing)return;status=$event.target.value}}})]),_v(" "),_c('div',[(statusReadyToBeShared)?_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return share('status', 'Status message')}}},[_v(_s(translate("DRIVE.SHARE")))]):_e()])]),_v(" "),_c('div',{staticClass:"flex-item"},[_c('div',[_c('label',[_v(_s(translate("PROFILE.BIO")))])])]),_v(" "),_c('div',{staticClass:"flex-item"},[_c('div',{staticStyle:{"flex-grow":"2"}},[_c('textarea',{directives:[{name:"model",rawName:"v-model",value:(biography),expression:"biography"}],staticClass:"form-control-profile",staticStyle:{"width":"100%","resize":"none"},attrs:{"id":"profile-biography","spellcheck":"true","placeholder":"Biography","rows":"3","maxlength":BIO_MAX_LENGTH},domProps:{"value":(biography)},on:{"input":function($event){if($event.target.composing)return;biography=$event.target.value}}})]),_v(" "),_c('div',[(biographyReadyToBeShared)?_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return share('bio', 'Biography')}}},[_v(_s(translate("DRIVE.SHARE")))]):_e()])]),_v(" "),_c('div',{staticClass:"flex-item"},[_c('div',[_c('label',[_v(_s(translate("PROFILE.WWW")))]),_v(" "),_c('i',{staticClass:"fa fa-question-circle",staticStyle:{"cursor":"pointer"},attrs:{"aria-hidden":"true"},on:{"click":function($event){return showPublishHelp()}}})])]),_v(" "),_c('div',{staticClass:"flex-item"},[_c('div',[_c('input',{directives:[{name:"model",rawName:"v-model",value:(webRoot),expression:"webRoot"}],staticClass:"form-control-profile",staticStyle:{"width":"100%"},attrs:{"readonly":"","id":"profile-web-root","placeholder":"Website Directory","maxlength":WEBROOT_MAX_LENGTH},domProps:{"value":(webRoot)},on:{"input":function($event){if($event.target.composing)return;webRoot=$event.target.value}}})]),_v(" "),_c('div',[_c('button',{staticClass:"btn btn-info",on:{"click":function($event){return openFolderPicker()}}},[_v(_s(translate("PROFILE.CHANGE.WWW")))])]),_v(" "),_c('div',[(webRootReadyToBePublished)?_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return publishWebroot()}}},[_v(_s(translate("PROFILE.PUBLISH")))]):_e()])]),_v(" "),(webRootUrl.length > 0)?_c('div',{staticClass:"flex-item"},[_c('div',[_c('span',[_v(_s(translate("PROFILE.PUBLIC"))+":")])]),_v(" "),_c('div',[_c('a',{attrs:{"href":webRootUrl,"target":"_blank","rel":"noopener noreferrer"}},[_v(_s(webRootUrl))])])]):_e(),_v(" "),_c('div',{staticClass:"flex-line-item"},[_c('div',[_c('button',{staticClass:"btn btn-success",staticStyle:{"width":"100%"},on:{"click":function($event){return update()}}},[_v(_s(translate("PROFILE.SAVE")))])])])])]},proxy:true},{key:"footer",fn:function(){return undefined},proxy:true}])})}},    components: {
        AppModal,
        Confirm,
        FolderPicker,
	    Share,
	    Spinner
    },
    mixins:[i18n],
    data: function() {
        return {
            profile:{
                firstName: "",
                lastName: "",
                biography: "",
                primaryPhone: "",
                primaryEmail: "",
                profileImage: "",
                status: "",
                webRoot: ""
            },
            firstName: "",
            firstNameReadyToBeShared: false,
            lastName: "",
            lastNameReadyToBeShared: false,
            biography: "",
            biographyReadyToBeShared: false,
            primaryPhone: "",
            primaryPhoneReadyToBeShared: false,
            primaryEmail: "",
            primaryEmailReadyToBeShared: false,
            profileImage: "",
            status: "",
            statusReadyToBeShared: false,
            webRoot: "",
            webRootReadyToBePublished: false,
            webRootUrl: "",
            previousFirstName: "",
            previousLastName: "",
            previousBiography: "",
            previousPrimaryPhone: "",
            previousPrimaryEmail: "",
            previousStatus: "",
            previousWebRoot: "",
            BIO_MAX_LENGTH: 200,
            STATUS_MAX_LENGTH: 50,
            FIRSTNAME_MAX_LENGTH: 25,
            LASTNAME_MAX_LENGTH: 25,
            PHONE_MAX_LENGTH: 20,
            EMAIL_MAX_LENGTH: 50,
            WEBROOT_MAX_LENGTH: 40,
            showSpinner: false,
            showConfirm: false,
            showShare: false,
            confirm_message: "",
            confirm_body: "",
            confirm_consumer_cancel_func: () => {},
            confirm_consumer_func: () => {},
            showFolderPicker: false,
            folderPickerBaseFolder: "",
            multipleFolderSelection: false,
            initiallySelectedPaths: [],
        }
    },
    props: ['messages'],
    created: function() {
        this.updateProfile();
    },
    computed: {
	...Vuex.mapState([
            'socialData',
            'context',
	]),
        followernames() {
	    return this.socialData.followers;
	},
	friendnames() {
	    return this.socialData.friends;
	},
	followingnames() {
	    return this.socialData.following;
	},
	groups() {
	    return {groupsNameToUid: this.socialData.groupsNameToUid, groupsUidToName: this.socialData.groupsUidToName};
	},
    },
    methods: {
        showMessage: function(isError, title, body) {
            /*this.messages.push({
                title: title,
                body: body,
                show: true
            });*/
            let bodyContents = body == null ? '' : ' ' + body;
            if (isError) {
                this.$toast.error(title + bodyContents, {timeout:false});
            } else {
                this.$toast(title + bodyContents)
            }
        },
        processProfileUpdate: function() {
            this.firstName = this.previousFirstName = this.profile.firstName;
            if (this.firstName.length > 0)
                this.firstNameReadyToBeShared = true;
            this.lastName = this.previousLastName = this.profile.lastName;
            if (this.lastName.length > 0)
                this.lastNameReadyToBeShared = true;
            this.biography = this.previousBiography = this.profile.biography;
            if (this.biography.length > 0)
                this.biographyReadyToBeShared = true;
            this.primaryPhone = this.previousPrimaryPhone = this.profile.primaryPhone;
            if (this.primaryPhone.length > 0)
                this.primaryPhoneReadyToBeShared = true;
            this.primaryEmail = this.previousPrimaryEmail = this.profile.primaryEmail;
            if (this.primaryEmail.length > 0)
                this.primaryEmailReadyToBeShared = true;
            this.status = this.previousStatus = this.profile.status;
            if (this.status.length > 0)
                this.statusReadyToBeShared = true;
            this.webRoot = this.previousWebRoot = this.profile.webRoot;
            if (this.webRoot.length > 0) {
                let that = this;
                let directoryPath = peergos.client.PathUtils.directoryToPath(this.webRoot.split('/'));
                this.context.getPublicFile(directoryPath).thenApply(res => {
                    if(res.isPresent()) {
                        that.webRootReadyToBePublished = false;
                        that.webRootUrl = "https://" + that.context.username+".peergos.me";
                    } else {
                        that.webRootReadyToBePublished = true;
                        that.webRootUrl = "";
                    }
                }).exceptionally(function(throwable) {
                    that.webRootReadyToBePublished = true;
                    that.webRootUrl = "";
                });
            }
            this.profileImage = this.profile.profileImage;
        },
        updateProfile: function() {
            this.showSpinner = true;
            let that = this;
            let context = this.context;
            peergos.shared.user.ProfilePaths.getProfile(context.username, context).thenApply(profile => {
                var base64Image = "";
                if (profile.profilePhoto.isPresent()) {
                    var str = "";
                    let data = profile.profilePhoto.get();
                    for (let i = 0; i < data.length; i++) {
                        str = str + String.fromCharCode(data[i] & 0xff);
                    }
                    if (data.byteLength > 0) {
                        base64Image = "data:image/png;base64," + window.btoa(str);
                    }
                }
                that.profile = {
                    firstName: profile.firstName.isPresent() ? profile.firstName.get() : "",
                    lastName: profile.lastName.isPresent() ? profile.lastName.get() : "",
                    biography: profile.bio.isPresent() ? profile.bio.get() : "",
                    primaryPhone: profile.phone.isPresent() ? profile.phone.get() : "",
                    primaryEmail: profile.email.isPresent() ? profile.email.get() : "",
                    profileImage: base64Image,
                    status: profile.status.isPresent() ? profile.status.get() : "",
                    webRoot: profile.webRoot.isPresent() ? profile.webRoot.get() : ""
                };
                that.showSpinner = false;
                that.processProfileUpdate();
            });
        },
        share: function(field, fieldName) {
            this.shareWith(field, fieldName);
        },
        shareWith: function(field, fieldName) {
            let dirPath = this.context.username + "/.profile/";
            this.showShareWithForFile(dirPath, field, false, false, fieldName);
        },
        showShareWithForFile: function(dirPath, filename, allowReadWriteSharing, allowCreateSecretLink, nameToDisplay) {
            let that = this;
            var context = this.context;
            this.context.getByPath(dirPath)
                .thenApply(function(dir){dir.get().getChild(filename, that.context.crypto.hasher, that.context.network).thenApply(function(child){
                    let file = child.get();
                    if (file == null) {
                        return;
                    }
                    that.filesToShare = [file];
                    that.pathToFile = dirPath.split('/').filter(n => n.length > 0);
                    let directoryPath = peergos.client.PathUtils.directoryToPath(that.pathToFile);
                    context.getDirectorySharingState(directoryPath).thenApply(function(updatedSharedWithState) {
                        let fileSharedWithState = updatedSharedWithState.get(file.getFileProperties().name);
                        let read_usernames = fileSharedWithState.readAccess.toArray([]);
                        let edit_usernames = fileSharedWithState.writeAccess.toArray([]);
                        that.sharedWithData = {read_shared_with_users:read_usernames, edit_shared_with_users:edit_usernames};
                        that.fromApp = true;
                        that.displayName = nameToDisplay != null && nameToDisplay.length > 0 ?
                                                     nameToDisplay : file.getFileProperties().name;
                        that.allowReadWriteSharing = allowReadWriteSharing;
                        that.allowCreateSecretLink = allowCreateSecretLink;
                        that.showShare = true;
                    });
                })});
        },
        triggerUpload: function() {
            document.getElementById('uploadImageInput').click()
        },
        uploadImageFile: function(evt) {
            let files = evt.target.files || evt.dataTransfer.files;
            let file = files[0];
            let that = this;
            let filereader = new FileReader();
            filereader.file_name = file.name;
            let thumbnailWidth = 400;
            let thumbnailHeight = 400;
            filereader.onload = function(){
                let canvas = document.createElement("canvas");
                canvas.width = thumbnailWidth;
                canvas.height = thumbnailHeight;
                let context = canvas.getContext("2d");
                let image = new Image();
                image.onload = function() {
                    context.drawImage(image, 0, 0, thumbnailWidth, thumbnailHeight);
                    let binFilereader = new FileReader();
                    binFilereader.file_name = file.name;
                    binFilereader.onload = function(){
                        const data = convertToByteArray(new Int8Array(this.result));
                        that.profileImage = canvas.toDataURL();
                        let binaryThumbnail = window.atob(that.profileImage.substring("data:image/png;base64,".length));
                        var ta = new Int8Array(binaryThumbnail.length);
                        for (var i = 0; i < binaryThumbnail.length; i++) {
                            ta[i] = binaryThumbnail.charCodeAt(i);
                        }
                        that.updateThumbnail(data, convertToByteArray(ta));
                    };
                    binFilereader.readAsArrayBuffer(file);
                };
                image.onerror = function() {
                    that.showMessage(true, that.translate("PROFILE.ERROR.IMAGE"));
                };
                image.src = this.result;
            };
            filereader.readAsDataURL(file);
        },
        getProfileImage: function() {
            return this.profileImage;
        },
        hasProfileImage: function() {
            return this.profileImage.length > 0;
        },
        removeImage: function() {
            this.profileImage = "";
            this.updateThumbnail(peergos.shared.user.JavaScriptPoster.emptyArray(), peergos.shared.user.JavaScriptPoster.emptyArray());
        },
        update: function() {
            var that = this;
            let changes = [];
            let context = this.context;
            if (this.firstName != this.previousFirstName) {
                changes.push({func: function(){
                        var future = peergos.shared.util.Futures.incomplete();
                        peergos.shared.user.ProfilePaths.setFirstName(context, that.firstName).thenApply(res => {
                            if(res) {
                                that.previousFirstName = that.firstName;
                                if (that.firstName.length == 0) {
                                    that.firstNameReadyToBeShared = false;
                                } else {
                                    that.firstNameReadyToBeShared = true;
                                }
                            }
                            future.complete(res);
                        });
                        return future;
                    }
                });
            }
            if (this.lastName != this.previousLastName) {
                changes.push({func: function(){
                        var future = peergos.shared.util.Futures.incomplete();
                        peergos.shared.user.ProfilePaths.setLastName(context, that.lastName).thenApply(res => {
                            if(res) {
                                that.previousLastName = that.lastName;
                                if (that.lastName.length == 0) {
                                    that.lastNameReadyToBeShared = false;
                                } else {
                                    that.lastNameReadyToBeShared = true;
                                }
                            }
                            future.complete(res);
                        });
                        return future;
                    }
                });
            }
            if (this.biography != this.previousBiography) {
                changes.push({func: function(){
                        var future = peergos.shared.util.Futures.incomplete();
                        peergos.shared.user.ProfilePaths.setBio(context, that.biography).thenApply(res => {
                            if(res) {
                                that.previousBiography = that.biography;
                                if (that.biography.length == 0) {
                                    that.biographyReadyToBeShared = false;
                                } else {
                                    that.biographyReadyToBeShared = true;
                                }
                            }
                            future.complete(res);
                        });
                        return future;
                    }
                });
            }
            if (this.primaryPhone != this.previousPrimaryPhone) {
                changes.push({func: function(){
                        var future = peergos.shared.util.Futures.incomplete();
                        peergos.shared.user.ProfilePaths.setPhone(context, that.primaryPhone).thenApply(res => {
                            if(res) {
                                that.previousPrimaryPhone = that.primaryPhone;
                                if (that.primaryPhone.length == 0) {
                                    that.primaryPhoneReadyToBeShared = false;
                                } else {
                                    that.primaryPhoneReadyToBeShared = true;
                                }
                            }
                            future.complete(res);
                        });
                        return future;
                    }
                });
            }
            if (this.primaryEmail != this.previousPrimaryEmail) {
                changes.push({func: function(){
                        var future = peergos.shared.util.Futures.incomplete();
                        peergos.shared.user.ProfilePaths.setEmail(context, that.primaryEmail).thenApply(res => {
                            if(res) {
                                that.previousPrimaryEmail = that.primaryEmail;
                                if (that.primaryEmail.length == 0) {
                                    that.primaryEmailReadyToBeShared = false;
                                } else {
                                    that.primaryEmailReadyToBeShared = true;
                                }
                            }
                            future.complete(res);
                        });
                        return future;
                    }
                });
            }
            if (this.status != this.previousStatus) {
                changes.push({func: function(){
                        var future = peergos.shared.util.Futures.incomplete();
                        peergos.shared.user.ProfilePaths.setStatus(context, that.status).thenApply(res => {
                            if(res) {
                                that.previousStatus = that.status;
                                if (that.status.length == 0) {
                                    that.statusReadyToBeShared = false;
                                } else {
                                    that.statusReadyToBeShared = true;
                                }
                            }
                            future.complete(res);
                        });
                        return future;
                    }
                });
            }
            if (this.webRoot == this.previousWebRoot) {
                this.saveChanges(changes); // save other changes
            } else {
                var updatedPath = this.webRoot.trim();
                let changeWebRootFunc = function(){
                    var publishFuture = peergos.shared.util.Futures.incomplete();
                    var unPublishFuture = peergos.shared.util.Futures.incomplete();
                    if (that.webRootUrl.length > 0) {
                        that.unpublishWebroot(unPublishFuture);
                    } else {
                        unPublishFuture.complete(true);
                    }
                    unPublishFuture.thenApply(done => {
                        peergos.shared.user.ProfilePaths.setWebRoot(context, updatedPath).thenApply(res => {
                            that.$emit("update-refresh");
                            if(res) {
                                that.webRoot = updatedPath;
                                that.previousWebRoot = updatedPath;
                                if (updatedPath.length != 0) {
                                    that.webRootReadyToBePublished = true;
                                }
                            }
                            publishFuture.complete(res);
                        });
                    });
                    return publishFuture;
                }
                changes.push({func: changeWebRootFunc});
                this.saveChanges(changes);
            }
        },
        unpublishWebroot: function(future) {
            let that = this;
            peergos.shared.user.ProfilePaths.unpublishWebRoot(this.context).thenApply(function(success){
                that.$emit("update-refresh");
                that.webRootUrl = "";
                future.complete(true);
            });
        },
        showPublishHelp: function(future) {
            var text = this.translate("PROFILE.PUBLISH.HELP")
                .replace("$NAME", this.context.username)
                .replace("$NAME", this.context.username);
            this.showMessage(false, "Website Directory", text);
        },
        publishWebroot: function() {
            let that = this;
            if (this.webRoot.length > 0) {
                this.confirm_message=this.translate("PROFILE.CONFIRM.PUBLISH").replace("$PATH", this.webRoot);
                this.confirm_body=this.translate("PROFILE.CONFIRM.PUBLISH.TEXT");
                this.confirm_consumer_cancel_func = () => { that.showConfirm = false;};
                this.confirm_consumer_func = function() {
                    that.showConfirm = false;
                    that.showSpinner = true;
                    try {
                        let dirPath = peergos.client.PathUtils.directoryToPath(that.webRoot.split('/'));
                        that.context.getByPath(dirPath.toString()).thenApply(function(dirOpt){
                            if (dirOpt.isEmpty()) {
                                that.showMessage(true, that.translate("PROFILE.ERROR.PUBLISH"), that.translate("PROFILE.ERROR.NOT.FOUND"));
                            } else {
                                peergos.shared.user.ProfilePaths.publishWebroot(that.context).thenApply(function(success){
                                    that.showSpinner = false;
                                    that.$emit("update-refresh");
                                    if (success) {
                                        that.showMessage(false, that.translate("PROFILE.PUBLISH.SUCCESS"),
                                                         that.translate("PROFILE.PUBLISH.AVAILABLE")
                                                         .replace("$NAME", that.context.username));
                                        that.webRootUrl = "https://" + that.context.username + ".peergos.me";
                                        that.webRootReadyToBePublished = false;
                                    } else {
                                        that.showMessage(true, that.translate("PROFILE.ERROR.PUBLISH"), "");
                                    }
                                }).exceptionally(function(throwable) {
                                  that.showMessage(true, that.translate("PROFILE.ERROR.PUBLISH"), throwable.getMessage());
                                  console.log(throwable.getMessage());
                                  that.showSpinner = false;
                                });
                            }
                        });
                    } catch (pathException) {
                        that.showMessage(true, that.translate("PROFILE.ERROR.PUBLISH"), that.translate("PROFILE.ERROR.PATH"));
                        that.showSpinner = false;
                    }
                };
                this.showConfirm = true;
            }
        },
        updateThumbnail: function(hires, thumbnail) {
            let that = this;
            that.showSpinner = true;

            peergos.shared.user.ProfilePaths.setHighResProfilePhoto(that.context, hires).thenApply(function(success){
                peergos.shared.user.ProfilePaths.setProfilePhoto(that.context, thumbnail).thenApply(function(success){
                    that.showSpinner = false;
                    that.$emit("update-refresh");
                }).exceptionally(function(throwable) {
                  that.showMessage(true, that.translate("PROFILE.ERROR.UNEXPECTED"), throwable.getMessage());
                  console.log(throwable.getMessage());
                  that.showSpinner = false;
                  that.$emit("update-refresh");
                });
            }).exceptionally(function(throwable) {
              that.showMessage(true, that.translate("PROFILE.ERROR.UNEXPECTED"), throwable.getMessage());
              console.log(throwable.getMessage());
              that.showSpinner = false;
            });
        },
        openFolderPicker: function() {
            let that = this;
            this.folderPickerBaseFolder = "/" + this.context.username;
            let updatedPath = this.webRoot.trim();

            this.selectedFoldersFromPicker = function (chosenFolders) {
                if (chosenFolders.length == 0) {
                    that.webRoot = "";
                    that.webRootReadyToBePublished = false;
                } else {
                    that.webRoot = chosenFolders[0].substring(1);
                    if (updatedPath != that.webRoot) {
                        that.webRootReadyToBePublished = false;
                    }
                }
                that.showFolderPicker = false;
            };
            this.initiallySelectedPaths = [];
            if (updatedPath.length > 0) {
                this.context.getByPath(updatedPath).thenApply(function(dir) {
                        if (dir.ref != null) {
                            let file = dir.get();
                            let props = file.getFileProperties();
                            if (!props.isHidden && props.isDirectory) {
                                that.initiallySelectedPaths.push("/" + updatedPath);
                            }
                        }
                        that.showFolderPicker = true;
                });
            } else {
                this.showFolderPicker = true;
            }
        },
        saveChanges: function(changes) {
            if (changes.length == 0) {
                return;
            }
            let that = this;
            this.showSpinner = true;
            this.reduceAll(changes);
        },
         reduceAll: function(changes) {
            let that = this;
            let func = changes.pop();
            if(func == null) {
                that.showMessage(false, that.translate("PROFILE.UPDATED"));
                that.showSpinner = false;
                that.$emit("update-refresh");
                return;
            } else {
                func.func().thenApply(function(success) {
                    if(success) {
                        that.reduceAll(changes);
                    } else {
                        that.showMessage(true, that.translate("PROFILE.ERROR.UPDATE"));
                        that.showSpinner = false;
                    }
                }).exceptionally(function(throwable) {
                    that.showMessage(true, that.translate("PROFILE.ERROR.UNEXPECTED"), throwable.getMessage());
                    that.showSpinner = false;
                });
            }
         }
    }
}
},{ "../../i18n/index.js": 11, "../confirm/Confirm.vue": 15, "../drive/DriveShare.vue": 40, "../picker/FolderPicker.vue": 36, "../spinner/Spinner.vue": 16, "AppModal.vue": 14}], 24:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const AppModal = require("AppModal.vue");
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('AppModal',{staticClass:"space",scopedSlots:_u([{key:"header",fn:function(){return [_c('h2',[_v(_s(translate("SPACE.TITLE")))])]},proxy:true},{key:"body",fn:function(){return [_c('h2',{staticClass:"card__meta"},[_v(" "+_s(translate("SPACE.CURRENT"))+": "+_s(quota))]),_v(" "),_c('fieldset',{staticClass:"modal-space-form"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(space),expression:"space"}],attrs:{"type":"text","name":"space","placeholder":translate('SPACE.PLACEHOLDER')},domProps:{"value":(space)},on:{"keyup":function($event){return validateSpace()},"input":function($event){if($event.target.composing)return;space=$event.target.value}}}),_v(" "),_c('select',{directives:[{name:"model",rawName:"v-model",value:(unit),expression:"unit"}],on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); unit=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},[_c('option',{attrs:{"value":"MB"}},[_v("MB")]),_v(" "),_c('option',{attrs:{"value":"GB"}},[_v("GB")])])])]},proxy:true},{key:"footer",fn:function(){return [_c('AppButton',{attrs:{"type":"primary","block":"","accent":""},nativeOn:{"click":function($event){return requestStorage()}}},[_v(_s(translate("SPACE.TITLE")))])]},proxy:true}])})}},    components: {
        AppButton,
        AppModal,
    },
        mixins:[i18n],
	data() {
		return {
			unit:"GB",
			space:"",
		};
	},
	computed: {
		...Vuex.mapState([
			'context'
		]),
		...Vuex.mapGetters([
			'quota',
			'usage'
		]),
    },

	methods: {
		getRequestedBytes() {
			if (this.unit == "GB")
				return this.space*1000*1000*1000;
			return this.space*1000*1000;
		},

        validateSpace() {

            var bytes = parseInt(this.getRequestedBytes())
            if (bytes != this.getRequestedBytes()) {
				this.$toast.error(this.translate("SPACE.POSITIVE"), { position: 'bottom-left' })
                return false;
            }
            if (bytes < this.usage) {
                this.$toast.error(this.translate("SPACE.SMALL"), { position: 'bottom-left' })
                return false;
            }
            return true;
        },

        requestStorage() {
            if (!this.validateSpace())
                return;

            const that = this;
            this.context.requestSpace(this.getRequestedBytes()).thenApply(x => {
                that.$toast(that.translate("SPACE.SENT"));
                that.close();
            })
        },
		close(){
			this.$store.commit("SET_MODAL", false);
		}

	},

};
},{ "../../i18n/index.js": 11, "../AppButton.vue": 2, "AppModal.vue": 14}], 22:[function(require,module,exports){
const AppModal = require("AppModal.vue");
const Slider = require("../slider/Slider.vue");
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('AppModal',{attrs:{"position":"center"},scopedSlots:_u([{key:"header",fn:function(){return [_c('h2',[_v(_s(translate("TOUR.TITLE")))])]},proxy:true},{key:"body",fn:function(){return [_c('Slider',{attrs:{"slides":slides}})]},proxy:true},{key:"footer",fn:function(){return undefined},proxy:true}])})}},components: {
    AppModal,
	Slider,
},
data() {
	return {
	    slides: [
			{
				title: this.translate("TOUR.STORAGE"),
				description: this.translate("TOUR.STORAGE.DESC"),
				image: "images/tour/drive.png"
			},
			{
				title: this.translate("TOUR.SHARE"),
				description: this.translate("TOUR.SHARE.DESC"),
				image: "images/tour/share.jpg"
			},
			{
				title: this.translate("TOUR.PHOTOS"),
				description: this.translate("TOUR.PHOTOS.DESC"),
				image: "images/tour/images.jpg"
			},
			{
				title: this.translate("TOUR.DOCS"),
				description: this.translate("TOUR.DOCS.DESC"),
				image: "images/tour/markdown.png"
			},
			{
				title: this.translate("TOUR.MUSIC"),
				description: this.translate("TOUR.MUSIC.DESC"),
				image: "images/tour/music.jpg"
			},
			{
				title: this.translate("TOUR.VIDEOS"),
				description: this.translate("TOUR.VIDEOS.DESC"),
				image: "images/tour/video.jpg"
			},
			{
				title: this.translate("TOUR.PDF"),
				description: this.translate("TOUR.PDF.DESC"),
				image: "images/tour/pdf.jpg"
			},
			{
				title: this.translate("TOUR.CAL"),
				description: this.translate("TOUR.CAL.DESC"),
				image: "images/tour/calendar.png"
			},
			{
				title: this.translate("TOUR.SOCIAL"),
				description: this.translate("TOUR.SOCIAL.DESC"),
				image: "images/tour/social-feed.jpg"
			},
		]
	}
},
    mixins:[i18n],  
}

},{ "../../i18n/index.js": 11, "../slider/Slider.vue": 21, "AppModal.vue": 14}], 13:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const AppIcon = require("../AppIcon.vue");
const MenuItem = require('./NavigationMenuItem.vue');
const NavigationStorage = require('./NavigationStorage.vue');
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('nav',{staticClass:"app-navigation",class:{ expanded: isOpen }},[_c('AppIcon',{staticClass:"logo",attrs:{"icon":isOpen ? 'logo-full' : 'logo-min'},nativeOn:{"click":function($event){return toggleSidebar()}}}),_v(" "),_c('AppButton',{staticClass:"toggle-button--mobile desktop-hidden",attrs:{"round":"","size":"small","icon":"dot-menu"},nativeOn:{"click":function($event){return toggleSidebar($event)}}}),_v(" "),_c('AppButton',{staticClass:"toggle-theme--mobile desktop-hidden",attrs:{"size":"small","icon":isDark ? 'sun' : 'moon',"aria-label":"Toggle themes"},nativeOn:{"click":function($event){return toggleTheme()}}}),_v(" "),_c('ul',{staticClass:"nav-list"},[_c('MenuItem',{attrs:{"label":translate('APPNAV.LAUNCHER'),"icon":"launcher","view":"Launcher"}}),_v(" "),_c('MenuItem',{attrs:{"label":translate('APPNAV.DRIVE'),"icon":"folder","view":"Drive"}}),_v(" "),_c('MenuItem',{attrs:{"label":translate('APPNAV.NEWSFEED'),"icon":"news","view":"NewsFeed"}}),_v(" "),_c('MenuItem',{attrs:{"label":translate('APPNAV.SOCIAL'),"icon":"social","view":"Social"}}),_v(" "),_c('MenuItem',{attrs:{"label":translate('APPNAV.CAL'),"icon":"calendar","view":"Calendar"}})],1),_v(" "),_c('NavigationStorage',{attrs:{"is-premium":false}})],1)}},	components: {
	    AppButton,
    	AppIcon,
		MenuItem,
		NavigationStorage,
	},
        mixins:[i18n],
	computed: {
		isOpen() {
			return this.$store.state.isSidebarOpen;
		},
		currentTheme() {
			return this.$store.getters.currentTheme;
		},
		isDark() {
			return this.$store.state.isDark;
		},
	},
	methods: {
		toggleSidebar() {
			this.$store.commit("TOGGLE_SIDEBAR");
		},
		toggleTheme() {
			this.$store.commit("TOGGLE_THEME");

			document.documentElement.setAttribute(
				"data-theme",
				this.currentTheme
			);
			localStorage.setItem("theme", this.currentTheme);
		},
	},
};

},{ "../../i18n/index.js": 11, "../AppButton.vue": 2, "../AppIcon.vue": 1, "./NavigationMenuItem.vue": 4, "./NavigationStorage.vue": 12}], 4:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const AppIcon = require("../AppIcon.vue");
const router = require("../../mixins/router/index.js");
module.exports = {
render: function() {with(this){return _c('li',{staticClass:"menu-item",class:{ 'active': isCurrentView }},[_c('AppButton',{nativeOn:{"click":function($event){return setView(view)}}},[_c('AppIcon',{staticClass:"menu__icon",attrs:{"icon":icon}}),_v(" "),_c('span',{staticClass:"menu__name"},[_v(_s(label)+" ")])],1),_v(" "),_c('span',{staticClass:"menu__tooltip"},[_v(_s(label))])],1)}},	components: {
	    AppButton,
    	AppIcon,
	},
	props: {
		icon: {
			type: String,
			default: "",
		},
		label: {
			type: String,
			default: "",
		},
		view: {
			type: String,
			default: "",
		},
	},
    	mixins:[router],
	computed: {
		...Vuex.mapState([
			'context'
		]),...Vuex.mapGetters([
		    'isMobile',
                    'getPath'
		]),
		isCurrentView() {
			return  this.view === this.$store.state.currentView;
		},

	},
	methods: {
		setView(view) {
			if(this.isMobile){
				this.$store.commit("TOGGLE_SIDEBAR");
			}
			this.openFileOrDir(view, this.context.username, {filename:""});
		},
	},
};

},{ "../../mixins/router/index.js": 3, "../AppButton.vue": 2, "../AppIcon.vue": 1}], 12:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const i18n = require("../../i18n/index.js");
module.exports = {
render: function() {with(this){return _c('div',{staticClass:"navigation-storage"},[_c('p',{staticClass:"storage"},[_v(_s(usage)+" / "+_s(quota))]),_v(" "),_c('div',{staticStyle:{"width":"100%"}},[_c('div',[(percentage > 0)?_c('meter',{staticStyle:{"width":"100%"},attrs:{"min":"0","low":"0","high":"90","max":"100","value":percentage}}):_e()])]),_v(" "),(!isPro)?_c('AppButton',{staticClass:"upgrade",attrs:{"size":"small"},nativeOn:{"click":function($event){return showRequestStorage()}}},[_v("\n\t\t\t"+_s(translate("APPNAV.UPGRADE"))+"\n\t\t")]):_e()],1)}},	components: {
	    AppButton,
	},
        mixins:[i18n],
	props: {
		isPro: {
			type: Boolean,
			default: false,
		},
	},
	computed: {
        ...Vuex.mapState([
            'quotaBytes',
            'usageBytes',
        ]),
		...Vuex.mapGetters([
			'quota',
			'usage',
			'isPaid',
            'isSecretLink',
		]),
        percentage() {
            if (!this.isSecretLink && this.quotaBytes.toString() != '0' && this.usageBytes.toString() != '0') {
                let accountQuota = Number(this.quotaBytes.toString());
                let accountUsage = Number(this.usageBytes.toString());
                var value = Math.floor(accountUsage/accountQuota * 100.0);
                return value;
            } else {
                return 0;
            }
        },
	},
	methods: {
		showRequestStorage() {
			if(this.isPaid){
				this.$store.commit('CURRENT_MODAL', 'ModalPro');
			}else{
				this.$store.commit('CURRENT_MODAL', 'ModalSpace');
			}
		},
	},
};

},{ "../../i18n/index.js": 11, "../AppButton.vue": 2}], 87:[function(require,module,exports){
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticClass:"modal-container full-height",staticStyle:{"width":"100%","overflow-y":"auto","padding":"0","display":"flex","flex-flow":"column"},on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:"modal-header",staticStyle:{"padding":"0"}},[_c('center',[_c('h2',[_v(_s(file.getName()))])]),_c('span',{staticStyle:{"color":"black","font-size":"3em","font-weight":"bold","position":"absolute","top":"0","right":"0.2em","cursor":"pointer","font-family":"'Cambria Math'"},attrs:{"tabindex":"0"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")])],1),_v(" "),_c('div',{staticClass:"modal-body",staticStyle:{"margin":"0","padding":"0","display":"flex","flex-grow":"1"}},[_c('iframe',{staticStyle:{"width":"100%","height":"100%"},attrs:{"id":"pdf","src":frameUrl(),"frameBorder":"0"}})])])])])}},    data: function() {
        return {
            showSpinner: false,
            isIframeInitialised: false
        }
    },
    props: ['context', 'file'],
    created: function() {
        this.startListener();
    },
    methods: {
	frameUrl: function() {
            return this.frameDomain() + "/apps/pdf/index.html";
        },
        frameDomain: function() {
            return window.location.protocol + "//pdf." + window.location.host;
        },
        startListener: function() {
	    var iframe = document.getElementById("pdf");
	    if (iframe == null) {
		setTimeout(this.startListener, 500);
		return;
	    }
        var that = this;
	    // Listen for response messages from the frames.
	    window.addEventListener('message', function (e) {
		// Normally, you should verify that the origin of the message's sender
		// was the origin and source you expected. This is easily done for the
		// unsandboxed frame. The sandboxed frame, on the other hand is more
		// difficult. Sandboxed iframes which lack the 'allow-same-origin'
		// header have "null" rather than a valid origin. This means you still
		// have to be careful about accepting data via the messaging API you
		// create. Check that source, and validate those inputs!
		if ((e.origin === "null" || e.origin === that.frameDomain()) && e.source === iframe.contentWindow) {
            if (e.data.action == 'pong') {
                that.isIframeInitialised = true;
            } else if (e.data == "sw-registration-failure" ) {
                console.log("failed to register service worker for PDF viewer")
                } else {
    		    console.log('Message from Iframe: ' + e.data);
            }
		}
	    });
	    // Note that we're sending the message to "*", rather than some specific
            // origin. Sandboxed iframes which lack the 'allow-same-origin' header
            // don't have an origin which you can target: you'll have to send to any
            // origin, which might alow some esoteric attacks. Validate your output!
	    const props = this.file.getFileProperties();
	    const name = this.file.getName();
	    this.file.getInputStream(this.context.network, this.context.crypto, props.sizeHigh(), props.sizeLow(), function(read){}).thenCompose(function(reader) {
		var size = that.getFileSize(props);
		var data = convertToByteArray(new Int8Array(size));
		return reader.readIntoArray(data, 0, data.length)
		    .thenApply(function(read){
                let func = function() {
    			    iframe.contentWindow.postMessage({name:name,bytes:data}, '*');
                };
                that.setupIFrameMessaging(iframe, func);
		    });
	    });
            setTimeout(() => {
                if (!that.isIframeInitialised)
                    that.$toast.error("Unable to register service worker. PDF viewer will not work offline. \nTo enable offline usage, allow 3rd party cookies for " + window.location.protocol + "//[*]." + window.location.host + "\n Note: this is not tracking", {timeout:false});
            }, 1000 * 10)
	},
		getFileSize: function(props) {
                var low = props.sizeLow();
                if (low < 0) low = low + Math.pow(2, 32);
                return low + (props.sizeHigh() * Math.pow(2, 32));
    	},
        setupIFrameMessaging: function(iframe, func) {
            if (this.isIframeInitialised) {
                func();
            } else {
                iframe.contentWindow.postMessage({type: 'ping'}, '*');
                let that = this;
                window.setTimeout(function() {that.setupIFrameMessaging(iframe, func);}, 20);
            }
        },
        close: function () {
            this.$emit("hide-pdf-viewer");
        }
    },
}
},{}], 58:[function(require,module,exports){
const Spinner = require("../spinner/Spinner.vue");
const SelectableTreeItem = require("SelectableTreeItem.vue");
const folderTreeMixin = require("../../mixins/tree-walker/index.js");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('meta',{attrs:{"http-equiv":"content-type","content":"text/html; charset=utf-8"}}),_v(" "),_c('div',{staticClass:"file-picker-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('span',{staticClass:"close",attrs:{"tabindex":"0","aria-label":"close"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")]),_v(" "),_c('div',{staticClass:"modal-header"},[_c('h2',[_v("File Picker")])]),_v(" "),_c('div',{staticClass:"modal-body"},[(showSpinner)?_c('Spinner',{attrs:{"message":spinnerMessage}}):_e(),_v(" "),_c('div',{staticClass:"scroll-style",attrs:{"class":"scroll-style"}},[_c('ul',[_c('SelectableTreeItem',{staticClass:"item",attrs:{"model":treeData,"select_func":selectFile,"load_func":loadFolderLazily,"spinnerEnable_func":spinnerEnable,"spinnerDisable_func":spinnerDisable,"selectLeafOnly":selectLeafOnly}})],1)]),_v(" "),(!pickerShowThumbnail)?_c('div',[_c('input',{directives:[{name:"model",rawName:"v-model",value:(selectedFile),expression:"selectedFile"}],staticStyle:{"background-color":"lightgrey"},attrs:{"type":"text","disabled":"true"},domProps:{"value":(selectedFile)},on:{"input":function($event){if($event.target.composing)return;selectedFile=$event.target.value}}})]):_e(),_v(" "),(pickerShowThumbnail)?_c('div',{staticClass:"file-thumbnail"},[(fileThumbnail.length > 0)?_c('img',{staticClass:"cover",attrs:{"src":fileThumbnail}}):_e()]):_e(),_v(" "),_c('div',{staticClass:"flex-line-item"},[_c('div',[_c('button',{staticClass:"btn btn-success",staticStyle:{"width":"80%"},on:{"click":function($event){return fileSelected()}}},[_v("Done")])])])],1)])])])}},    components: {
        Spinner,
        SelectableTreeItem
    },
    data: function() {
        return {
            showSpinner: true,
            spinnerMessage: 'Loading folders...',
            treeData: {},
            selectedFile: null,
            selectLeafOnly: true,
            fileThumbnail : ''
        }
    },
    props: ['baseFolder', 'selectedFile_func', 'pickerFileExtension', 'pickerFilterMedia', 'pickerShowThumbnail', 'pickerFilters'],
    mixins:[folderTreeMixin],
    computed: {
        ...Vuex.mapState([
            'context',
        ]),
    },
    created: function() {
        let that = this;
        let callback = (baseOfFolderTree) => {
            that.treeData = baseOfFolderTree;
            that.showSpinner = false;
            that.spinnerMessage = '';
        };
        this.loadSubFoldersAndFiles(this.baseFolder + "/", this.pickerFileExtension, this.pickerFilterMedia, this.pickerFilters, callback);
    },
    methods: {
        close: function () {
            this.selectedFile_func(null);
        },
        selectFile: function (file) {
            this.selectedFile = file;
            let that = this;
            if (this.pickerShowThumbnail) {
                this.context.getByPath(file).thenApply(function(optFile){
                    let mediaFile = optFile.ref;
                    if (mediaFile != null) {
                        that.fileThumbnail = mediaFile.getBase64Thumbnail();
                    }
                });
            }
        },
        spinnerEnable: function () {
            this.showSpinner = true;
        },
        spinnerDisable: function () {
            this.showSpinner = false;
        },
        loadFolderLazily: function(path, callback) {
            this.loadSubFoldersAndFiles(path, this.pickerFileExtension, this.pickerFilterMedia, this.pickerFilters, callback);
        },
        fileSelected: function() {
            this.selectedFile_func(this.selectedFile);
        }
    }
}

},{ "../../mixins/tree-walker/index.js": 35, "../spinner/Spinner.vue": 16, "SelectableTreeItem.vue": 57}], 36:[function(require,module,exports){
const Spinner = require("../spinner/Spinner.vue");
const TreeItem = require("TreeItem.vue");
const folderTreeMixin = require("../../mixins/tree-walker/index.js");
const i18n = require("../../i18n/index.js");
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('meta',{attrs:{"http-equiv":"content-type","content":"text/html; charset=utf-8"}}),_v(" "),_c('div',{staticClass:"folder-picker-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('span',{staticClass:"close",attrs:{"tabindex":"0","aria-label":"close"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")]),_v(" "),_c('div',{staticClass:"modal-header"},[_c('h2',[_v("Folder Picker")])]),_v(" "),_c('div',{staticClass:"modal-body"},[(showSpinner)?_c('Spinner',{attrs:{"message":spinnerMessage}}):_e(),_v(" "),_c('div',{staticClass:"scroll-style",attrs:{"class":"scroll-style"}},[_c('ul',[_c('TreeItem',{staticClass:"item",attrs:{"model":treeData,"selectFolder_func":selectFolder,"load_func":loadFolderLazily,"spinnerEnable_func":spinnerEnable,"spinnerDisable_func":spinnerDisable,"initiallySelectedPaths":selectedPaths}})],1)]),_v(" "),_c('h4',[_v("Selected:")]),_v(" "),(selectedFoldersList.length == 0 && multipleFolderSelection)?_c('div',[_v("\n            "+_s(translate("FOLDER.PICKER.NO.FOLDERS"))+"\n            ")]):_e(),_v(" "),(selectedFoldersList.length == 0 && !multipleFolderSelection)?_c('div',[_v("\n            "+_s(translate("FOLDER.PICKER.NO.FOLDER"))+"\n            ")]):_e(),_v(" "),(selectedFoldersList.length != 0)?_c('div',[_c('div',{staticClass:"scroll-style",attrs:{"class":"scroll-style"}},[_c('ul',_l((selectedFoldersList),function(selectedFolder){return _c('li',[_v("\n                            "+_s(selectedFolder)+"\n                        ")])}),0)])]):_e(),_v(" "),_c('div',{staticClass:"flex-line-item"},[_c('div',[_c('button',{staticClass:"btn btn-success",staticStyle:{"width":"80%"},on:{"click":function($event){return foldersSelected()}}},[_v("Done")])])])],1)])])])}},    components: {
        Spinner,
        TreeItem
    },
    data: function() {
        return {
            showSpinner: true,
            spinnerMessage: 'Loading folders...',
            treeData: {},
            selectedFoldersList: [],
            selectedPaths: [],
        }
    },
    props: ['baseFolder', 'selectedFolder_func', 'multipleFolderSelection', 'initiallySelectedPaths'],
    mixins:[folderTreeMixin, i18n],
    computed: {
        ...Vuex.mapState([
            'context',
        ]),
    },
    created: function() {
        let that = this;
        this.selectedPaths = this.initiallySelectedPaths.slice();
        this.selectedFoldersList = this.selectedPaths.slice();
        let callback = (baseOfFolderTree) => {
            that.treeData = baseOfFolderTree;
            that.showSpinner = false;
            that.spinnerMessage = '';
        };
        this.loadSubFolders(this.baseFolder + "/", callback);
    },
    methods: {
        close: function () {
            this.selectedFolder_func(this.selectedFoldersList);
        },
        spinnerEnable: function () {
            this.showSpinner = true;
        },
        spinnerDisable: function () {
            this.showSpinner = false;
        },
        loadFolderLazily: function(path, callback) {
            this.loadSubFolders(path, callback);
        },
        showError: function(msg) {
            console.log(msg);
            this.$toast.error(msg, {timeout:false});
        },
        selectFolder: function (folderName, add) {
            if (add) {
                if (this.multipleFolderSelection) {
                    this.selectedFoldersList.push(folderName);
                } else {
                    if (this.selectedFoldersList.length > 0) {
                        this.showError(this.translate("FOLDER.PICKER.MULTIPLE.SELECTION.NOT.SUPPORTED"));
                        return false;
                    } else {
                        this.selectedFoldersList.push(folderName);
                    }
                }
            } else {
                let index = this.selectedFoldersList.findIndex(v => v === folderName);
                if (index > -1) {
                    this.selectedFoldersList.splice(index, 1);
                }
            }
            return true;
        },
        foldersSelected: function() {
            let selectedFolders = this.selectedFoldersList;
            // remove duplicates (one folder includes another)
            let dedupList = [];
            for(var i = 0; i < selectedFolders.length; i++) {
                let folder = selectedFolders[i] + '/';
                var isDuplicated = false;
                for(var j = 0; j < selectedFolders.length; j++) {
                    if (i != j) {
                        let anotherFolder = selectedFolders[j];
                        if (anotherFolder.startsWith(folder)) {
                            isDuplicated = true;
                            break;
                        }
                    }
                }
                if (! isDuplicated) {
                    dedupList.push(selectedFolders[i]);
                }
            }
            this.selectedFolder_func(dedupList);
        }
    }
}

},{ "../../i18n/index.js": 11, "../../mixins/tree-walker/index.js": 35, "../spinner/Spinner.vue": 16, "TreeItem.vue": 34}], 99:[function(require,module,exports){const AppButton = require("../AppButton.vue");
const SelectableTreeItem = require("SelectableTreeItem.vue");
const Spinner = require("../spinner/Spinner.vue");
const folderTreeMixin = require("../../mixins/tree-walker/index.js");
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal","appear":""}},[_c('div',{staticClass:"app-prompt app-modal__overlay",on:{"click":function($event){return closePrompt()}}},[_c('div',{staticClass:"app-prompt__container",on:{"click":function($event){$event.stopPropagation();}}},[_c('header',{staticClass:"prompt__header"},[_c('AppButton',{staticClass:"close",attrs:{"icon":"close"},nativeOn:{"click":function($event){return closePrompt()}}}),_v(" "),_c('h3',[_v("Create new \""+_s(pickerFileExtension)+"\" file")])],1),_v(" "),(showSpinner)?_c('Spinner',{attrs:{"message":spinnerMessage}}):_e(),_v(" "),_c('div',{staticClass:"prompt__body"},[_c('div',{staticClass:"scroll-style",attrs:{"class":"scroll-style"}},[_c('ul',[_c('SelectableTreeItem',{staticClass:"item",attrs:{"model":treeData,"load_func":loadFolderLazily,"select_func":selectFolder,"spinnerEnable_func":spinnerEnable,"spinnerDisable_func":spinnerDisable,"selectLeafOnly":selectLeafOnly}})],1)]),_v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(folder_result),expression:"folder_result"}],staticStyle:{"background-color":"lightgrey"},attrs:{"type":"text","disabled":"true"},domProps:{"value":(folder_result)},on:{"input":function($event){if($event.target.composing)return;folder_result=$event.target.value}}})]),_v(" "),_c('div',{staticClass:"prompt__body"},[(placeholder)?_c('input',{directives:[{name:"model",rawName:"v-model",value:(prompt_result),expression:"prompt_result"}],ref:"prompt",attrs:{"id":"prompt-input","type":"text","placeholder":placeholder,"maxlength":maxLength,"autofocus":""},domProps:{"value":(prompt_result)},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return getPrompt(this.prompt_result)},"input":function($event){if($event.target.composing)return;prompt_result=$event.target.value}}}):_e()]),_v(" "),_c('footer',{staticClass:"prompt__footer"},[_c('AppButton',{attrs:{"outline":""},nativeOn:{"click":function($event){return closePrompt()}}},[_v("\n\t\t\t\t\t\tCancel\n\t\t\t\t\t")]),_v(" "),_c('AppButton',{attrs:{"id":"prompt-button-id","type":"primary","accent":""},nativeOn:{"click":function($event){return getPrompt(this.prompt_result)}}},[_v("\n\t\t\t\t\t"+_s(action)+"\n\t\t\t\t\t")])],1)],1)])])}},    components: {
        AppButton,
        SelectableTreeItem,
        Spinner,
    },
	data() {
		return {
			prompt_result: '',
			placeholder: '',
			value: '',
			max_input_size: 30,
			action: 'ok',
			folder_result: '',
            showSpinner: false,
            spinnerMessage: 'Loading...',
            treeData: {},
            selectLeafOnly: false
		}
	},
	props: {
		consumer_func: {
			type: Function
		},
        pickerFileExtension: {
            type: String,
            default: 'txt'
        }
	},
    mixins:[folderTreeMixin],
	computed: {
        ...Vuex.mapState([
            'context',
        ]),
		maxLength() {
			return this.max_input_size;
		}
	},

	mounted() {
		this.prompt_result = this.value;

		if(this.placeholder !== null){
			this.$refs.prompt.focus()
		}
	},
    created: function() {
        let that = this;
        this.placeholder = 'filename.' + this.pickerFileExtension;
        this.showSpinner = true;
        let callback = (baseOfFolderTree) => {
            that.treeData = baseOfFolderTree;
            that.showSpinner = false;
            that.spinnerMessage = '';
        };
        this.loadSubFolders(this.context.username + "/", callback);
    },
	methods: {
		closePrompt() {
			this.consumer_func(null);
			this.$emit("hide-prompt");
		},

		getPrompt() {
		    var filename = this.prompt_result;
		    if (filename.length > 0 && this.folder_result.length > 0) {
                if (!filename.endsWith("." + this.pickerFileExtension)) {
                    filename = filename + '.' + this.pickerFileExtension;
                }
                this.consumer_func(filename, this.folder_result);
                this.$emit("hide-prompt");
            }
		},
        spinnerEnable: function () {
            this.showSpinner = true;
        },
        spinnerDisable: function () {
            this.showSpinner = false;
        },
        loadFolderLazily: function(path, callback) {
            this.loadSubFolders(path, callback);
        },
        selectFolder: function (folderName) {
            this.folder_result = folderName;
        },
	}
}


},{ "../../mixins/tree-walker/index.js": 35, "../AppButton.vue": 2, "../spinner/Spinner.vue": 16, "SelectableTreeItem.vue": 57}], 57:[function(require,module,exports){
module.exports = {
render: function() {with(this){return _c('ul',{staticStyle:{"list-style-type":"none"}},[(selectLeafOnly && isLeaf)?_c('div',[_c('span',{attrs:{"id":model.path},on:{"click":selectItem}},[_v(_s(displayName(model.path)))])]):_e(),_v(" "),(selectLeafOnly && !isLeaf)?_c('div',[_c('span',{attrs:{"id":model.path}},[_v(_s(displayName(model.path)))]),_v(" "),(isFolder)?_c('span',{on:{"click":toggle}},[_v("["+_s(model.isOpen ? '-' : '+')+"]")]):_e()]):_e(),_v(" "),(!selectLeafOnly)?_c('div',[_c('span',{attrs:{"id":model.path},on:{"click":selectItem}},[_v(_s(displayName(model.path)))]),_v(" "),(isFolder)?_c('span',{on:{"click":toggle}},[_v("["+_s(model.isOpen ? '-' : '+')+"]")]):_e()]):_e(),_v(" "),(isFolder)?_c('li',{directives:[{name:"show",rawName:"v-show",value:(model.isOpen),expression:"model.isOpen"}],staticStyle:{"list-style-type":"none"}},_l((model.children),function(model){return _c('SelectableTreeItem',{staticClass:"item",attrs:{"model":model,"select_func":select_func,"load_func":load_func,"spinnerEnable_func":spinnerEnable_func,"spinnerDisable_func":spinnerDisable_func,"selectLeafOnly":selectLeafOnly}})}),1):_e()])}},  name: 'SelectableTreeItem', // necessary for self-reference
  props: {
    model: Object,
    load_func: Function,
    select_func: Function,
    selectLeafOnly: {
        type: Boolean,
        default: false,
    },
    spinnerEnable_func: Function,
    spinnerDisable_func: Function,
  },
  data() {
    return {
    }
  },
  computed: {
    isFolder() {
      return this.model.children && this.model.children.length
    },
    isLeaf() {
      return this.model.isLeaf === true
    }
  },
  methods: {
    displayName(name) {
        if (name == null) {
            return "";
        } else {
            let index = name.lastIndexOf('/');
            return name.substring(index + 1);
        }
    },
    toggle(e) {
        e.preventDefault()
        if (this.isFolder) {
            if (this.model.isOpen) {
                this.model.isOpen = !this.model.isOpen
            } else {
                this.lazyLoadSubFolders();
            }
        }
    },
    lazyLoadSubFolders() {
        let that = this;
        this.spinnerEnable_func();
        let callback = (baseOfSubFolderTree) => {
            that.model.children = [];
            for(var i=0; i < baseOfSubFolderTree.children.length; i++) {
                that.model.children.push(baseOfSubFolderTree.children[i]);
            }
            that.spinnerDisable_func();
            that.model.isOpen = !that.model.isOpen;
        };
        this.load_func(this.model.path + "/", callback);
    },
    selectItem(selectedItem) {
        this.select_func(selectedItem.currentTarget.id);
    }
  }
}

},{}], 34:[function(require,module,exports){
module.exports = {
render: function() {with(this){return _c('ul',{staticStyle:{"list-style-type":"none"}},[_c('label',{staticClass:"checkbox__group"},[(!model.isRoot)?_c('input',{attrs:{"id":model.path,"type":"checkbox"},domProps:{"value":model.path},on:{"click":addChild}}):_e(),_v(" "),(!model.isRoot)?_c('span',{staticClass:"checkmark"}):_e(),_v(" "),_c('div',{class:{ bold: isFolder },on:{"click":toggle}},[_v("\n              "+_s(displayFolderName(model.path))+"\n              "),(isFolder)?_c('span',[_v("["+_s(model.isOpen ? '-' : '+')+"]")]):_e()])]),_v(" "),(isFolder)?_c('li',{directives:[{name:"show",rawName:"v-show",value:(model.isOpen),expression:"model.isOpen"}],staticStyle:{"list-style-type":"none"}},_l((model.children),function(model){return _c('TreeItem',{staticClass:"item",attrs:{"model":model,"selectFolder_func":selectFolder_func,"load_func":load_func,"spinnerEnable_func":spinnerEnable_func,"spinnerDisable_func":spinnerDisable_func,"initiallySelectedPaths":initiallySelectedPaths}})}),1):_e()])}},  name: 'TreeItem', // necessary for self-reference
  props: {
    model: Object,
    selectFolder_func: Function,
    load_func: Function,
    spinnerEnable_func: Function,
    spinnerDisable_func: Function,
    initiallySelectedPaths: Array,
  },
  data() {
    return {
    }
  },
  computed: {
    isFolder() {
      return this.model.children && this.model.children.length
    }
  },
  created: function() {
        let that = this;
        Vue.nextTick(function() {
            let path = that.model.path;
            if (path != null) {
                let index = that.initiallySelectedPaths.findIndex(v => v === path);
                if (index > -1) {
                    let inputEl = document.getElementById(path);
                    if (inputEl != null) {
                        inputEl.checked = true;
                    }
                }
            }
        });
  },
  methods: {
    displayFolderName(folderName) {
        if (folderName == null) {
            return "";
        } else {
            let index = folderName.lastIndexOf('/');
            return folderName.substring(index + 1);
        }
    },
    toggle(e) {
        e.preventDefault()
        if (this.isFolder) {
            if (this.model.isOpen) {
                this.model.isOpen = !this.model.isOpen
            } else {
                this.lazyLoadSubFolders();
            }
        }
    },
    lazyLoadSubFolders() {
        let that = this;
        this.spinnerEnable_func();
        let callback = (baseOfSubFolderTree) => {
            that.model.children = [];
            for(var i=0; i < baseOfSubFolderTree.children.length; i++) {
                that.model.children.push(baseOfSubFolderTree.children[i]);
            }
            that.spinnerDisable_func();
            that.model.isOpen = !that.model.isOpen;
        };
        this.load_func(this.model.path + "/", callback);
    },
    addChild(selectedFolder) {
        let ok = this.selectFolder_func(selectedFolder.currentTarget.value, selectedFolder.currentTarget.checked);
        if (!ok) {
            selectedFolder.currentTarget.checked = false;
        }
    }
  }
}

},{}], 64:[function(require,module,exports){
const Spinner = require("../spinner/Spinner.vue");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('meta',{attrs:{"http-equiv":"content-type","content":"text/html; charset=utf-8"}}),_v(" "),_c('div',{staticClass:"profile-page-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('span',{staticClass:"close",attrs:{"tabindex":"0","aria-label":"close"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")]),_v(" "),_c('div',{staticClass:"modal-header"},[_c('h2',[_v("Profile")])]),_v(" "),_c('div',{staticClass:"modal-body"},[(showSpinner)?_c('Spinner'):_e(),_v(" "),(hasProfileImage())?_c('div',{staticClass:"profile-image",attrs:{"id":"profile-container"}},[_c('img',{staticStyle:{"width":"150px","height":"150px"},attrs:{"id":"profile-image","alt":"profile image","src":getProfileImage()}})]):_e(),_v(" "),(status.length == 0 && firstName.length == 0 && primaryPhone.length == 0 && primaryEmail.length == 0 && biography.length == 0 )?_c('div',{staticClass:"profile-view"},[_v("\n                This user hasn't shared any of their profile with you yet.\n            ")]):_e(),_v(" "),(status.length > 0 || firstName.length > 0 || primaryPhone.length > 0 || primaryEmail.length > 0 || biography.length > 0 )?_c('div',{staticClass:"profile-view"},[(status.length > 0)?_c('p',[_c('span',{staticClass:"profile-span"},[_v("Status:")]),_c('span',[_v(_s(status))])]):_e(),_v(" "),(firstName.length > 0)?_c('p',[_c('span',{staticClass:"profile-span"},[_v("Name:")]),_c('span',[_v(_s(firstName))]),_v(" "),_c('span',[_v(_s(lastName))])]):_e(),_v(" "),(primaryPhone.length > 0)?_c('p',[_c('span',{staticClass:"profile-span"},[_v("Phone:")]),_c('span',[_v(_s(primaryPhone))])]):_e(),_v(" "),(primaryEmail.length > 0)?_c('p',[_c('span',{staticClass:"profile-span"},[_v("Email:")]),_c('span',[_v(_s(primaryEmail))])]):_e(),_v(" "),(biography.length > 0)?_c('p',[_c('span',{staticClass:"profile-span"},[_v("Biography:")])]):_e(),_v(" "),_c('p',{staticStyle:{"white-space":"pre-wrap","margin-top":"10px","margin-bottom":"0"}},[_v(_s(biography))])]):_e()],1)])])])}},	components: {
	    Spinner
	},
    data: function() {
        return {
        firstName: "",
        lastName: "",
        biography: "",
        primaryPhone: "",
        primaryEmail: "",
        profileImage: "",
        status: "",
        showSpinner: false,
        }
    },
    props: ['profile'],
    created: function() {
        this.firstName = this.profile.firstName;
        this.lastName = this.profile.lastName;
        this.biography = this.profile.biography;
        this.primaryPhone = this.profile.primaryPhone;
        this.primaryEmail = this.profile.primaryEmail;
        this.profileImage = this.profile.profileImage;
        this.status = this.profile.status;
    },
    methods: {
        close: function () {
            this.$emit("hide-profile-view");
        },
        getProfileImage: function() {
            return this.profileImage;
        },
        hasProfileImage: function() {
            return this.profileImage.length > 0;
        }
    }
}

},{ "../spinner/Spinner.vue": 16}], 56:[function(require,module,exports){
const AppButton = require("../AppButton.vue");
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal","appear":""}},[_c('div',{staticClass:"app-prompt app-modal__overlay",on:{"click":function($event){return closePrompt()}}},[_c('div',{staticClass:"app-prompt__container",on:{"click":function($event){$event.stopPropagation();}}},[_c('header',{staticClass:"prompt__header"},[_c('AppButton',{staticClass:"close",attrs:{"icon":"close"},nativeOn:{"click":function($event){return closePrompt()}}}),_v(" "),_c('h3',[_v(_s(message))])],1),_v(" "),_c('div',{staticClass:"prompt__body"},[(placeholder)?_c('input',{directives:[{name:"model",rawName:"v-model",value:(prompt_result),expression:"prompt_result"}],ref:"prompt",attrs:{"id":"prompt-input","type":"text","placeholder":placeholder,"maxlength":maxLength,"autofocus":""},domProps:{"value":(prompt_result)},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return getPrompt(this.prompt_result)},"input":function($event){if($event.target.composing)return;prompt_result=$event.target.value}}}):_e()]),_v(" "),_c('footer',{staticClass:"prompt__footer"},[_c('AppButton',{attrs:{"outline":""},nativeOn:{"click":function($event){return closePrompt()}}},[_v("\n\t\t\t\t\t\t"+_s(translate("PROMPT.CANCEL"))+"\n\t\t\t\t\t")]),_v(" "),_c('AppButton',{attrs:{"id":"prompt-button-id","type":"primary","accent":""},nativeOn:{"click":function($event){return getPrompt(this.prompt_result)}}},[_v("\n\t\t\t\t\t"+_s(action)+"\n\t\t\t\t\t")])],1)])])])}},    components: {
        AppButton,
    },
    mixins:[i18n],
	data() {
		return {
			prompt_result: '',
		}
	},
	props: {
		message: {
			type: String,
			default: ''
		},
		placeholder: {
			type: String,
			default: null
		},
		value:{
			type: String,
			default: ''
		},
		max_input_size:{
			type: Number,
			default: 255
		},
		consumer_func: {
			type: Function
		},
		action:{
			type: String,
		}


	},
	computed: {
		maxLength() {
			return (this.max_input_size == null || this.max_input_size == '') ? 255 : this.max_input_size;
		}
	},

	mounted() {
		this.prompt_result = this.value;

		if(this.placeholder !== null){
			this.$refs.prompt.focus()
		}
	},

	methods: {
		closePrompt() {
			this.consumer_func(null);
			this.$emit("hide-prompt");
		},

		getPrompt() {
			this.consumer_func(this.prompt_result);
			this.$emit("hide-prompt");
		}
	}
}


},{ "../../i18n/index.js": 11, "../AppButton.vue": 2}], 62:[function(require,module,exports){
const i18n = require("../../i18n/index.js");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticStyle:{"height":"30%"}}),_v(" "),_c('div',{staticClass:"prompt-modal-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:"modal-header"},[_c('h3',[_v(_s(prompt_message))])]),_v(" "),_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"container"},[_c('table',[_c('tr',[_c('td',{staticStyle:{"text-align":"right","padding":"20px"}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(prompt_result),expression:"prompt_result"}],staticClass:"form-control",staticStyle:{"width":"200px"},attrs:{"id":"prompt-input","type":"text","placeholder":placeholder,"maxlength":input_length,"autofocus":""},domProps:{"value":(prompt_result)},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return getPrompt($event)},"input":function($event){if($event.target.composing)return;prompt_result=$event.target.value}}})]),_v(" "),_c('td',{staticStyle:{"text-align":"right"}},[_c('button',{staticClass:"btn btn-success",attrs:{"id":"prompt-button-id"},on:{"click":function($event){return getPrompt(this.prompt_result)}}},[_v(_s(translate("PROMPT.OK")))])])])])])])])])])}},    data: function() {
        return {'prompt_result': '',
                input_length: 255
        }
    },
    mixins:[i18n],
    props: ['prompt_message', 'placeholder', 'value', 'consumer_func', 'max_input_size'],
    created: function() {
        this.prompt_result = this.value;
        this.input_length = (this.max_input_size == null || this.max_input_size == '') ? 255 : this.max_input_size;
        Vue.nextTick(function() {
                document.getElementById("prompt-input").focus();
        });
    },
    methods: {
        close: function () {
            this.$emit("hide-prompt");
        },

        getPrompt: function() {
	    var res = this.prompt_result;
            this.close();
            this.prompt_result='';
            this.consumer_func(res);
        }
    }
}
},{ "../../i18n/index.js": 11}], 88:[function(require,module,exports){
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticStyle:{"height":"30%"}}),_v(" "),_c('div',{staticClass:"replace-modal-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:"modal-header"},[_c('h3',{attrs:{"id":"replace-header-id"}},[_v(_s(replace_message))])]),_v(" "),_c('div',{staticClass:"modal-body",staticStyle:{"margin":"0px 0"}},[_c('div',{staticClass:"replace-container",staticStyle:{"margin":"0px"}},[_c('p',{attrs:{"id":"replace-body-id"}},[_v(_s(replace_body))])]),_v(" "),(showApplyAll)?_c('div',[_c('label',{staticClass:"checkbox-container"},[_v("Do this for all conflicts\n          "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(applyToAll),expression:"applyToAll"}],attrs:{"type":"checkbox","name":"applyToAll","id":"applyToAll","placeholder":"Do this for all conflicts"},domProps:{"checked":Array.isArray(applyToAll)?_i(applyToAll,null)>-1:(applyToAll)},on:{"change":function($event){var $$a=applyToAll,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(applyToAll=$$a.concat([$$v]))}else{$$i>-1&&(applyToAll=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{applyToAll=$$c}}}}),_v(" "),_c('span',{staticClass:"checkmark"})])]):_e(),_v(" "),_c('div',[_c('button',{staticClass:"btn btn-success btn-lg",staticStyle:{"margin":"10%"},on:{"click":function($event){return no()}}},[_v("\n            No\n          ")]),_v(" "),_c('button',{staticClass:"btn btn-success btn-lg",staticStyle:{"margin":"10%"},on:{"click":function($event){return yes()}}},[_v("\n            Yes\n          ")])])])])])])}},    data: function() {
        return {
            applyToAll:false
        }
    },
    props: ['replace_message', 'replace_body', 'consumer_cancel_func', 'consumer_func', 'showApplyAll'],
    created: function() {
    },
    methods: {
        close: function() {
            this.$emit("hide-replace");
        },
        no: function() {
            this.close();
            this.consumer_cancel_func(this.applyToAll);
        },
        yes: function() {
            this.close();
            this.consumer_func(this.applyToAll);
        }
    }
}
},{}], 55:[function(require,module,exports){
const FormAutocomplete = require("../form/FormAutocomplete.vue");
const Spinner = require("../spinner/Spinner.vue");

module.exports = {
render: function() {with(this){return _c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticClass:"modal-container full-height",staticStyle:{"overflow-y":"auto","max-width":"1000px"},on:{"click":function($event){$event.stopPropagation();}}},[_c('span',{staticClass:"close",on:{"click":close}},[_v("×")]),_v(" "),(showSpinner)?_c('Spinner'):_e(),_v(" "),_c('div',{staticClass:"modal-header"},[_c('span',[_c('h4',{staticStyle:{"text-align":"center"}},[_v(_s(title)+" "+_s(appDisplayName))])])]),_v(" "),_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"container"},[_c('div',{staticClass:"flex-container"},[_c('FormAutocomplete',{attrs:{"is-multiple":"","options":friendNames,"maxitems":friendsToAddCount,"placeholder":"please select user"},model:{value:(targetUsernames),callback:function ($$v) {targetUsernames=$$v},expression:"targetUsernames"}}),_v(" "),_c('div',{staticStyle:{"padding":"5px","margin-top":"10px"}},[_c('button',{staticClass:"btn btn-success",attrs:{"disabled":this.targetUsernames.slice().length == 0},on:{"click":addFriends}},[_v(" "+_s(addLabel))])])],1)]),_v(" "),_c('div',{staticClass:"modal-prominent"},[(addedFriends.length > 0)?_c('div',{staticClass:"container"},[_c('p',{staticStyle:{}},[_v("\n                    Invited:")]),_v(" "),_l((addedFriends),function(user){return _c('div',[_c('label',{staticClass:"checkbox__group"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(friendsSelected),expression:"friendsSelected"}],attrs:{"type":"checkbox","id":user},domProps:{"value":user,"checked":Array.isArray(friendsSelected)?_i(friendsSelected,user)>-1:(friendsSelected)},on:{"change":function($event){var $$a=friendsSelected,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=user,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(friendsSelected=$$a.concat([$$v]))}else{$$i>-1&&(friendsSelected=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{friendsSelected=$$c}}}}),_v(" "),_c('span',{staticClass:"checkmark"}),_v(" "),_c('span',{staticStyle:{"margin-left":"10px"}},[_v(_s(user))])])])}),_v(" "),_c('button',{staticClass:"btn btn-success",attrs:{"disabled":this.friendsSelected.length == 0},on:{"click":function($event){return removeFriends()}}},[_v("Remove")])],2):_e()])]),_v(" "),_c('div',{staticClass:"modal-footer"},[_t("footer",[_c('button',{staticClass:"btn btn-success",on:{"click":applyChange}},[_v("\n                    "+_s(updateLabel)+"\n                ")])])],2)],1)])}},	components: {
	    FormAutocomplete,
	    Spinner
	},
    data() {
        return {
            showSpinner: false,
            targetUsernames: [],
            addedFriends: [],
            friendsSelected: [],
            friendsToAddCount: 0,
            title: "Add Friends to: ",
            updateLabel: "Apply",
            addLabel: "Invite to App",
        }
    },
    props: ['appDisplayName', 'maxFriendsToAdd', 'chatTitle', 'friendNames', 'updateChat'],
    computed: {
        ...Vuex.mapState([
            'context',
        ])
    },
    created: function() {
        this.friendsToAddCount = this.maxFriendsToAdd;
    },
    methods: {
        close: function () {
            this.$emit("hide-add-to-chat");
        },
        addFriends: function() {
            var usersToAdd = this.targetUsernames.slice();
            for (var i = usersToAdd.length - 1; i >= 0; i--) {
                let targetUsername = usersToAdd[i];
                if(this.addedFriends.indexOf(targetUsername) == -1 && this.friendsToAddCount > 0) {
                    this.addedFriends.push(targetUsername);
                    this.friendsToAddCount--;
                }
            }
            this.targetUsernames = [];
        },
        removeFriends : function () {
            for (var i = 0; i < this.friendsSelected.length; i++) {
                let targetUsername = this.friendsSelected[i];
                let index = this.addedFriends.indexOf(targetUsername);
                if (index > -1) {
                    this.addedFriends.splice(index, 1);
                    this.friendsToAddCount++;
                }
            }
            this.friendsSelected = [];
        },
        applyChange: function() {
            this.updateChat(this.addedFriends, this.chatTitle);
            this.close();
        }
    }
}
},{ "../form/FormAutocomplete.vue": 38, "../spinner/Spinner.vue": 16}], 97:[function(require,module,exports){
const Spinner = require("../spinner/Spinner.vue");
const sandboxMixin = require("../../mixins/sandbox/index.js");
const routerMixins = require("../../mixins/router/index.js");
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('meta',{attrs:{"http-equiv":"content-type","content":"text/html; charset=utf-8"}}),_v(" "),_c('div',{staticClass:"app-details-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('span',{staticClass:"close",attrs:{"tabindex":"0","aria-label":"close"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")]),_v(" "),_c('div',{staticClass:"modal-header"},[_c('h2',[_v("App Details")])]),_v(" "),_c('div',{staticClass:"modal-body"},[(showSpinner)?_c('Spinner'):_e(),_v(" "),(appProperties != null)?_c('div',[_c('div',{staticClass:"app-details-view"},[_c('p',[_c('span',{staticClass:"app-details-span"},[_v("Name:")]),_c('span',[_v(_s(appProperties.displayName)+" \n                        "+_s(appProperties.version)+"\n                        ")])]),_v(" "),_c('p',[_c('span',{staticClass:"app-details-span"},[_v("Description:")]),_c('span',{staticClass:"app-details-text"},[_v(_s(appProperties.description))])]),_v(" "),(appProperties.author.length > 0)?_c('p',[_c('span',{staticClass:"app-details-span"},[_v("Author:")]),_c('span',{staticClass:"app-details-text"},[_v(_s(appProperties.author))])]):_e(),_v(" "),(appProperties.source.length > 0)?_c('p',[_c('span',{staticClass:"app-details-span"},[_v("Source:")]),_c('span',{staticClass:"app-details-text"},[_c('a',{on:{"click":function($event){return navigateToInstallFolder()}}},[_v(_s(appProperties.source))])])]):_e(),_v(" "),_c('p',[(appProperties.fileExtensions.length > 0)?_c('span',{staticClass:"app-install-span"},[_v("Associated File extensions:")]):_e(),_c('span',{staticClass:"app-install-text"},[_v(_s(appProperties.fileExtensions.join(", ")))])]),_v(" "),_c('p',[(appProperties.mimeTypes.length > 0)?_c('span',{staticClass:"app-install-span"},[_v("Associated Mime types:")]):_e(),_c('span',{staticClass:"app-install-text"},[_v(_s(appProperties.mimeTypes.join(", ")))])]),_v(" "),_c('p',[(appProperties.fileTypes.length > 0)?_c('span',{staticClass:"app-install-span"},[_v("Associated File types:")]):_e(),_c('span',{staticClass:"app-install-text"},[_v(_s(appProperties.fileTypes.join(", ")))])]),_v(" "),_c('p',[(appProperties.folderAction==true)?_c('span',{staticClass:"app-install-span"},[_v("Is a Folder Action")]):_e()]),_v(" "),(!appHasFileAssociation && appProperties.permissions.length == 0)?_c('p',[_c('span',{staticClass:"app-install-span"},[_v("Permissions:")]),_c('span',{staticClass:"app-install-text"},[_v("None Required")])]):_e(),_v(" "),(appProperties.permissions.length > 0)?_c('p',[_c('span',{staticClass:"app-install-span"},[_v("Permissions:")]),_c('span',{staticClass:"app-install-text"})]):_e(),_v(" "),(appProperties.permissions.length > 0)?_c('p'):_e(),_l((appProperties.permissions),function(permission){return _c('li',[_v("\n                            "+_s(convertPermissionToHumanReadable(permission))+"\n                            "),(permission === 'STORE_APP_DATA')?_c('button',{staticClass:"btn btn-info",on:{"click":function($event){return displayDataFolder()}}},[_v("Show Data Folder")]):_e()])}),_v(" "),_c('p')],2)]):_e()],1)])])])}},	components: {
	    Spinner
	},
    data: function() {
        return {
            showSpinner: false,
            appProperties: null,
            appHasFileAssociation: false
        }
    },
    props: ['appPropsFile'],
    mixins:[sandboxMixin, routerMixins],
    created: function() {
        this.loadAppProperties();
    },
    methods: {
        displayDataFolder() {
            let path = '/' + this.context.username + '/.apps/' + this.appProperties.name + '/data';
            this.openFileOrDir("Drive", path, {filename:""});
        },
        close: function () {
            this.$emit("hide-app-details");
        },
        loadAppProperties: function() {
            let that = this;
            this.showSpinner = true;
            that.readJSONFile(this.appPropsFile).thenApply((res) => {
                that.showSpinner = false;
                that.appHasFileAssociation = res.fileExtensions.length > 0 || res.mimeTypes.length > 0 || res.fileTypes.length > 0;
                that.appProperties = res;
            });
        },
        navigateToInstallFolder: function() {
            this.openFileOrDir("Drive", this.appProperties.source, {filename:""});
        }
    }
}
},{ "../../mixins/router/index.js": 3, "../../mixins/sandbox/index.js": 49, "../spinner/Spinner.vue": 16}], 54:[function(require,module,exports){
const Confirm = require("../confirm/Confirm.vue");
const Spinner = require("../spinner/Spinner.vue");
const mixins = require("../../mixins/mixins.js");
const downloaderMixin = require("../../mixins/downloader/index.js");
const sandboxMixin = require("../../mixins/sandbox/index.js");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('meta',{attrs:{"http-equiv":"content-type","content":"text/html; charset=utf-8"}}),_v(" "),_c('div',{staticClass:"app-install-container",on:{"click":function($event){$event.stopPropagation();}}},[_c('span',{staticClass:"close",attrs:{"tabindex":"0","aria-label":"close"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")]),_v(" "),_c('div',{staticClass:"modal-header"},[_c('h2',[_v("App Installation")])]),_v(" "),_c('div',{staticClass:"modal-body"},[(showSpinner)?_c('Spinner',{attrs:{"message":spinnerMessage}}):_e(),_v(" "),(showConfirm)?_c('Confirm',{attrs:{"confirm_message":confirm_message,"confirm_body":confirm_body,"consumer_cancel_func":confirm_consumer_cancel_func,"consumer_func":confirm_consumer_func},on:{"hide-confirm":function($event){showConfirm = false}}}):_e(),_v(" "),(appProperties != null)?_c('div',[_c('div',{staticClass:"app-install-view"},[_c('p',[_c('span',{staticClass:"app-install-span"},[_v("Name:")]),_c('span',[_v(_s(appProperties.displayName)+" \n                        "+_s(appProperties.version)+"\n                        ")])]),_v(" "),_c('p',[_c('span',{staticClass:"app-install-span"},[_v("Description:")]),_c('span',{staticClass:"app-install-text"},[_v(_s(appProperties.description))])]),_v(" "),(appProperties.author.length > 0)?_c('p',[_c('span',{staticClass:"app-install-span"},[_v("Author:")]),_c('span',{staticClass:"app-install-text"},[_v(_s(appProperties.author))])]):_e(),_v(" "),_c('p',[(appProperties.fileExtensions.length > 0)?_c('span',{staticClass:"app-install-span"},[_v("Associated File extensions:")]):_e(),_c('span',{staticClass:"app-install-text"},[_v(_s(appProperties.fileExtensions.join(", ")))])]),_v(" "),_c('p',[(appProperties.mimeTypes.length > 0)?_c('span',{staticClass:"app-install-span"},[_v("Associated Mime types:")]):_e(),_c('span',{staticClass:"app-install-text"},[_v(_s(appProperties.mimeTypes.join(", ")))])]),_v(" "),_c('p',[(appProperties.fileTypes.length > 0)?_c('span',{staticClass:"app-install-span"},[_v("Associated File types:")]):_e(),_c('span',{staticClass:"app-install-text"},[_v(_s(appProperties.fileTypes.join(", ")))])]),_v(" "),_c('p',[(appProperties.folderAction==true)?_c('span',{staticClass:"app-install-span"},[_v("Is a Folder Action")]):_e()]),_v(" "),(!appHasFileAssociation && appProperties.permissions.length == 0)?_c('p',[_c('span',{staticClass:"app-install-span"},[_v("Permissions:")]),_c('span',{staticClass:"app-install-text"},[_v("None Required")])]):_e(),_v(" "),(appProperties.permissions.length > 0)?_c('p',[_c('span',{staticClass:"app-install-span"},[_v("Permissions:")]),_c('span',{staticClass:"app-install-text"})]):_e(),_v(" "),(appProperties.permissions.length > 0)?_c('p'):_e(),_l((appProperties.permissions),function(permission){return _c('li',[_v("\n                          "+_s(convertPermissionToHumanReadable(permission))+"\n                        ")])}),_v(" "),_c('p')],2),_v(" "),_c('div',{staticClass:"flex-line-item"},[_c('div',[_c('button',{staticClass:"btn btn-success",staticStyle:{"width":"100%"},on:{"click":function($event){return installNewApp()}}},[_v("Install")])])])]):_e()],1)])])])}},    components: {
        Confirm,
        Spinner
    },
    data: function() {
        return {
            showSpinner: false,
            spinnerMessage: '',
            appProperties: null,
            appHasFileAssociation: false,
            showConfirm: false,
            confirm_message: "",
            confirm_body: "",
            confirm_consumer_cancel_func: () => {},
            confirm_consumer_func: () => {},
            installAppFromFolder: "",
        }
    },
    props: ['appPropsFile','installFolder', "appInstallSuccessFunc"],
    mixins:[mixins, downloaderMixin, sandboxMixin],
    computed: {
        ...Vuex.mapState([
            'quotaBytes',
            'usageBytes',
            'context',
            'mirrorBatId'
        ]),
    },
    created: function() {
        this.installAppFromFolder = this.installFolder.endsWith('/')  ?
            this.installFolder.substring(0, this.installFolder.length -1) : this.installFolder;
        this.loadAppProperties();
    },
    methods: {
        getMirrorBatId(file) {
            return file.getOwnerName() == this.context.username ? this.mirrorBatId : java.util.Optional.empty()
        },
        close: function () {
            this.$emit("hide-app-installation");
        },
        indicateAppInstallSuccess: function (appName) {
            this.appInstallSuccessFunc(appName);
        },
        loadAppProperties: function() {
            let that = this;
            this.showSpinner = true;
            that.verifyJSONFile(this.appPropsFile, this.installAppFromFolder).thenApply((res) => {
                that.showSpinner = false;
                if (res.errors.length > 0) {
                    that.showError("Unable to install App: " + res.errors.join(', '));
                    that.close();
                } else {
                    that.appHasFileAssociation = res.props.fileExtensions.length > 0
                        || res.props.mimeTypes.length > 0
                        || res.props.fileTypes.length > 0;
                    that.appProperties = res.props;
                }
            });
        },
        checkAvailableSpace: function(fileSize) {
            return Number(this.quotaBytes.toString()) - (Number(this.usageBytes.toString()) + fileSize);
        },
        confirmReplaceAppInstall(appName, oldVersion, newVersion, replaceFunction, cancelFunction) {
            this.confirm_message = 'App: ' + appName + ' ' + oldVersion + ' currently installed';
            this.confirm_body = "Are you sure you want to replace with version: " + newVersion + "?";
            this.confirm_consumer_cancel_func = cancelFunction;
            this.confirm_consumer_func = replaceFunction;
            this.showConfirm = true;
        },
        installNewApp: function() {
            if (this.appProperties == null) {
                return;
            }
            let appName = this.appProperties.name;
            let displayName = this.appProperties.displayName;
            let newVersion = this.appProperties.version;
            let that = this;
            this.showSpinner = true;
            this.context.getByPath("/" + this.context.username + "/.apps/" + appName).thenApply(appOpt => {
                if (appOpt.ref != null) {
                    that.readAppProperties(appName).thenApply(props => {
                        if (props == null) {
                            that.installApp();
                        } else {
                            let oldVersion = props.version;
                            that.confirmReplaceAppInstall(displayName, oldVersion, newVersion,
                                () => {
                                    that.showConfirm = false;
                                    that.installApp({app:props});
                                },
                                () => {
                                    that.showConfirm = false;
                                    that.showSpinner = false;
                                    that.close();
                                }
                            );
                        }
                    });
                } else {
                    that.installApp();
                }
            });
        },
       installApp: function(oldProperties) {
           let that = this;
           let displayName = this.appProperties.displayName;
           let appName = this.appProperties.name;
           that.context.getByPath(that.installAppFromFolder).thenApply(srcDirectoryOpt => {
               that.calculateTotalSize(srcDirectoryOpt.ref, that.installAppFromFolder).thenApply(statistics => {
                   let spaceAfterOperation = that.checkAvailableSpace(statistics.apparentSize);
                   if (spaceAfterOperation < 0) {
                       that.showError("App installation size exceeds available Space.  Please free up " + that.convertBytesToHumanReadable('' + -spaceAfterOperation) + " and try again");
                       that.showSpinner = false;
                   } else {
                       that.spinnerMessage = "Installing App: " + displayName;
                       peergos.shared.user.App.init(that.context, appName).thenApply(ready => {
                             that.backupPropertiesFile(appName, oldProperties).thenApply(done => {
                                 let future = that.gatherDataFiles(appName, srcDirectoryOpt.ref);
                                 future.thenApply(dataFiles => that.copyAppFiles(dataFiles, appName, displayName));
                             });
                       });
                   }
               });
           });
       },
       backupPropertiesFile: function(appName, oldProperties) {
           var future = peergos.shared.util.Futures.incomplete();
           if (oldProperties == null) {
                future.complete(true);
           } else {
               let that = this;
               peergos.shared.user.App.init(that.context, appName).thenApply(app => {
                    let filePath = peergos.client.PathUtils.directoryToPath(['peergos-app-previous.json']);
                    let encoder = new TextEncoder();
                    let uint8Array = encoder.encode(JSON.stringify(oldProperties, null, 2));
                    let bytes = convertToByteArray(uint8Array);
                    app.writeInternal(filePath, bytes).thenApply(done => {
                        that.deletePropertiesFile(appName).thenApply(done => {
                            future.complete(true);
                        });
                    });
                });
            }
            return future;
       },
        gatherDataFiles: function(appName, appDirectory) {
            let future = peergos.shared.util.Futures.incomplete();
            let dataFolderName = 'data';
            let that = this;
            appDirectory.getChild(dataFolderName, this.context.crypto.hasher, this.context.network).thenApply(dataFolderOpt => {
                if (dataFolderOpt.ref != null) {
                    let dataFolderEntries = [{directory: dataFolderOpt.ref, path: that.installAppFromFolder + "/" + dataFolderName}];
                    that.gatherDataFilesRecursively(dataFolderEntries, 0, future, []);
                } else {
                    future.complete([]);
                }
            });
            return future;
        },
        gatherDataFilesRecursively: function(directoryEntries, index, future, accumulator) {
            if (index == directoryEntries.length) {
                let appFiles = peergos.client.JsUtil.asList(accumulator);
                future.complete(appFiles);
            } else {
                let that = this;
                let directoryEntry = directoryEntries[index];
                let fileProperties = directoryEntry.directory.getFileProperties();
                if (fileProperties.isHidden) {
                    this.gatherDataFilesRecursively(directoryEntries, index +1, future, accumulator);
                } else {
                    directoryEntry.directory.getChildren(this.context.crypto.hasher, this.context.network).thenApply(function(children) {
                        let arr = children.toArray();
                        let fileUploadList = [];
                        var lastEntryWasFolder = false;
                        let files = [];
                        arr.forEach(file => {
                            let fileProps = file.getFileProperties();
                            if (fileProps.isDirectory) {
                                directoryEntries.push({directory: file, path: directoryEntry.path + "/" + fileProps.name});
                            } else {
                                files.push(file);
                            }
                        });
                        if (files.length == 0) {
                            this.gatherDataFilesRecursively(directoryEntries, index +1, future, accumulator);
                        } else {
                            var filesProcessedCounter = 0;
                            files.forEach( (file) => {
                                let fileProps = file.getFileProperties();
                                file.getInputStream(that.context.network, that.context.crypto, fileProps.sizeHigh(), fileProps.sizeLow(), function(read){})
                                    .thenApply(function(reader) {
                                        filesProcessedCounter++;
                                        let fup = new peergos.shared.user.fs.FileWrapper.FileUploadProperties(fileProps.name, {get_0: () => reader},
                                            (fileProps.size_0 - (fileProps.size_0 % Math.pow(2, 32))) / Math.pow(2, 32), fileProps.size_0, java.util.Optional.empty(), java.util.Optional.empty(), false,
                                            true, x => {});
                                        fileUploadList.push(fup);
                                        if (filesProcessedCounter == files.length) {
                                            let basePath = that.installAppFromFolder;
                                            let relativePath = directoryEntry.path.substring(basePath.length);
                                            let pathList = peergos.client.JsUtil.asList(relativePath.split('/').filter(n => n.length > 0));
                                            let filePropsList = peergos.client.JsUtil.asList(fileUploadList);
                                            let folderUP = new peergos.shared.user.fs.FileWrapper.FolderUploadProperties(pathList, filePropsList);
                                            accumulator.push(folderUP);
                                            that.gatherDataFilesRecursively(directoryEntries, index +1, future, accumulator);
                                        }
                                });
                            });
                        }
                    });
                }
            }
        },
        deletePropertiesFile(appName) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let folderPath = "/" + this.context.username + "/.apps/" + appName;
            let filename = 'peergos-app.json';
            this.context.getByPath(folderPath).thenApply(appDirOpt => {
                if (appDirOpt.ref != null) {
                    appDirOpt.ref.getChild(filename, that.context.crypto.hasher, that.context.network).thenApply(fileToDeleteOpt => {
                        if (fileToDeleteOpt.ref != null) {
                            that.removeFile(folderPath + '/' + filename, fileToDeleteOpt.ref, appDirOpt.ref).thenApply(res => {
                                future.complete(true);
                            });
                        } else {
                            future.complete(false);
                        }
                    });
                }else {
                    future.complete(false);
                }
            });
            return future;
        },
        copyAssetsFolder(appName) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let appFolderPath = "/" + this.context.username + "/.apps/" + appName;
            this.context.getByPath(this.installAppFromFolder + '/assets').thenApply(srcAssetsDirOpt => {
                if (srcAssetsDirOpt.ref != null) {
                    that.context.getByPath(appFolderPath).thenApply(destAppDirOpt => {
                        srcAssetsDirOpt.ref.copyTo(destAppDirOpt.ref, that.context)
                            .thenApply(function () {
                                future.complete(true);
                            }).exceptionally(function (throwable) {
                                console.log('unable to copy app assets. error: ' + throwable.getMessage());
                                future.complete(false);
                            });
                    });
                }else {
                    future.complete(false);
                }
            });
            return future;
        },
        deleteAssetsFolder(appName) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let folderPath = "/" + this.context.username + "/.apps/" + appName;
            this.context.getByPath(folderPath).thenApply(appDirOpt => {
                if (appDirOpt.ref != null) {
                    appDirOpt.ref.getChild('assets', that.context.crypto.hasher, that.context.network).thenApply(assetsFolderToDeleteOpt => {
                        if (assetsFolderToDeleteOpt.ref != null) {
                            that.removeFile(folderPath + '/assets', assetsFolderToDeleteOpt.ref, appDirOpt.ref).thenApply(res => {
                                future.complete(true);
                            });
                        } else {
                            future.complete(true);
                        }
                    });
                }else {
                    future.complete(false);
                }
            });
            return future;
        },
        removeFile: function(filename, file, parent) {
            let future = peergos.shared.util.Futures.incomplete();
            let that = this;
            let filePath = peergos.client.PathUtils.directoryToPath(filename.split('/').filter(n => n.length > 0));
            file.remove(parent, filePath, this.context).thenApply(function(b){
                future.complete(true);
            }).exceptionally(function(throwable) {
                console.log('Unexpected error: ' + throwable);
                future.complete(false);
            });
            return future;
        },
        copyAppFiles: function(appDataFiles, app, displayName) {
            let future = peergos.shared.util.Futures.incomplete();
            let that = this;
            this.deleteAssetsFolder(app).thenApply(res => {
                that.copyAssetsFolder(app).thenApply(res2 => {
                    that.copyAllDataFiles(appDataFiles, app, displayName).thenApply(res3 => {
                        if (res3) {
                            that.updateSourceInAppManifest(app).thenApply(function(props){
                                that.appProperties = props;
                                that.showSpinner = false;
                                that.spinnerMessage = "";
                                that.registerApp(that.appProperties);
                                that.showMessage("Installed App: " + displayName);
                                that.indicateAppInstallSuccess(app);
                                that.close();
                                future.complete(true);
                            });
                        } else {
                            that.showSpinner = false;
                            that.spinnerMessage = "";
                            that.showError("Unable to install App. See console for details");
                            future.complete(false);
                        }
                    });
                });
            });
            return future;
        },
        copyAllDataFiles: function(appDataFiles, app, displayName) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            if (appDataFiles.length == 0) {
                future.complete(true);
            } else {
                var commitWatcher = {
                    get_0: function() {
                        return true;
                    }
                };
                let folderStream = appDataFiles.stream();
                let resumeFileUpload = function(f) {
                    let resumeFuture = peergos.shared.util.Futures.incomplete();
                    resumeFuture.complete(true);
                    return resumeFuture;
                }
                let destinationPath = "/" + this.context.username + "/.apps/" + app;
                this.context.getByPath(destinationPath).thenApply(appDirOpt => {
                    appDirOpt.ref.uploadSubtree(folderStream, that.getMirrorBatId(appDirOpt.ref), that.context.network,
                        that.context.crypto, that.context.getTransactionService(),
                        f => resumeFileUpload(f),commitWatcher).thenApply(res => {
                            future.complete(true);
                        }).exceptionally(function (throwable) {
                            console.log('Unable to install App. Error: ' +  + throwable.getMessage());
                            future.complete(false);
                        });
                });
            }
            return future;
        },
        updateSourceInAppManifest: function(appName) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            this.context.getByPath(this.installAppFromFolder + '/peergos-app.json').thenApply(propsFileOpt => {
                that.readJSONFile(propsFileOpt.ref).thenApply(props => {
                    props.source = props.source.length > 0 ? props.source : that.installAppFromFolder;
                    let encoder = new TextEncoder();
                    let uint8Array = encoder.encode(JSON.stringify(props, null, 2));
                    let bytes = convertToByteArray(uint8Array);
                    let reader = new peergos.shared.user.fs.AsyncReader.ArrayBacked(bytes);
                    let filename = 'peergos-app.json';
                    that.context.getByPath("/" + that.context.username + "/.apps/" + appName).thenApply(appDirOpt => {
                          appDirOpt.get().uploadFileJS(filename, reader, 0, bytes.byteLength,
                              true, that.getMirrorBatId(appDirOpt.get()), that.context.network, that.context.crypto, function (len) { },
                              that.context.getTransactionService(), f => peergos.shared.util.Futures.of(true)
                          ).thenApply(function (res) {
                              future.complete(props);
                          }).exceptionally(function (throwable) {
                              console.log('unable to update manifest: ' + filename + ' error: ' + throwable.getMessage());
                              future.complete(props);
                          })
                    });
                });
            });
            return future;
        },
        showMessage: function(message) {
            this.$toast(message)
        },
        showError: function(message) {
            this.$toast.error(message, {timeout:false});
        }
    }
}
},{ "../../mixins/downloader/index.js": 53, "../../mixins/mixins.js": 52, "../../mixins/sandbox/index.js": 49, "../confirm/Confirm.vue": 15, "../spinner/Spinner.vue": 16}], 67:[function(require,module,exports){
const sandboxMixin = require("../../mixins/sandbox/index.js");
const AppSandbox = require("./AppSandbox.vue");
const Spinner = require("../spinner/Spinner.vue");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('meta',{attrs:{"http-equiv":"content-type","content":"text/html; charset=utf-8"}}),_v(" "),_c('span',{staticClass:"close",attrs:{"tabindex":"0","aria-label":"close"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")]),_v(" "),_c('div',{staticClass:"modal-body"},[(showSpinner)?_c('Spinner'):_e()],1),_v(" "),(showAppSandbox)?_c('AppSandbox',{attrs:{"sandboxAppName":sandboxAppName,"currentProps":currentProps},on:{"hide-app-sandbox":closeAppSandbox}}):_e()],1)])}},    components: {
		AppSandbox,
		Spinner
    },
    data: function() {
        return {
            showSpinner: false,
            showAppSandbox: false,
            sandboxAppName: '',
            currentProps: null
        }
    },
    props: ['appPropsFile'],
    mixins:[sandboxMixin],
    computed: {
        ...Vuex.mapState([
            'context',
        ])
    },
    created: function() {
        this.loadAppProperties();
    },
    methods: {
        close: function () {
            this.$emit("hide-app-run");
        },
        loadAppProperties: function() {
            let that = this;
            this.showSpinner = true;
            that.verifyJSONFile(this.appPropsFile).thenApply((res) => {
                that.showSpinner = false;
                if (res.errors.length > 0) {
                    that.showError("Unable to run App: " + res.errors.join(', '));
                    that.close();
                } else {
                    let messagePermission = res.props.permissions.filter(p => (p === "EXCHANGE_MESSAGES_WITH_FRIENDS" || p === "USE_MAILBOX")).length > 0;
                    let editPermission = res.props.permissions.filter(p => p == 'EDIT_CHOSEN_FILE').length > 0;
                    let hasFileExtensions = res.props.fileExtensions.length > 0;
                    let createFile = editPermission && hasFileExtensions;
                    if (!res.props.launchable || (res.props.launchable && createFile) || messagePermission) {
                        that.showError("App must be installed first!");
                        that.close();
                    } else {
                        that.runApp(res.props);
                    }
                }
            });
        },
        showError: function(message) {
            this.$toast.error(message, {timeout:false});
        },
        runApp: function(props) {
            this.showAppSandbox = true;
            this.sandboxAppName = props.name;
            this.currentProps = props;
        },
        closeAppSandbox() {
            this.showAppSandbox = false;
            this.$emit("hide-app-run");
        },
    }
}
},{ "../../mixins/sandbox/index.js": 49, "../spinner/Spinner.vue": 16, "./AppSandbox.vue": 66}], 66:[function(require,module,exports){
const AddToChat = require("AddToChat.vue");
const AppInstall = require("AppInstall.vue");
const AppPrompt = require("../prompt/AppPrompt.vue");
const Confirm = require("../confirm/Confirm.vue");
const FilePicker = require('../picker/FilePicker.vue');
const FolderPicker = require('../picker/FolderPicker.vue');
const Gallery = require("../drive/DriveGallery.vue");
const Group = require("../Group.vue");
const ProgressBar = require("../drive/ProgressBar.vue");
const Spinner = require("../spinner/Spinner.vue");
const ViewProfile = require("../profile/ViewProfile.vue");

const mixins = require("../../mixins/mixins.js");
const downloaderMixins = require("../../mixins/downloader/index.js");
const router = require("../../mixins/router/index.js");
const sandboxMixin = require("../../mixins/sandbox/index.js");
const launcherMixin = require("../../mixins/launcher/index.js");
const UriDecoder = require('../../mixins/uridecoder/index.js');

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":closeAppFromToolbar}},[_c('div',{staticClass:"modal-container full-height",staticStyle:{"width":"100%","overflow-y":"auto","padding":"0","display":"flex","flex-flow":"column"},on:{"click":function($event){$event.stopPropagation();}}},[(showGroupMembership)?_c('Group',{attrs:{"groupId":groupId,"groupTitle":groupTitle,"existingGroupMembers":existingGroupMembers,"existingAdmins":existingAdmins,"friendNames":friendnames,"updatedGroupMembership":updatedGroupMembership,"existingGroups":existingGroups},on:{"hide-group":closeGroupMembership}}):_e(),_v(" "),(showProfileViewForm)?_c('ViewProfile',{attrs:{"profile":profile},on:{"hide-profile-view":function($event){showProfileViewForm = false}}}):_e(),_v(" "),(showInviteFriends)?_c('AddToChat',{attrs:{"appDisplayName":appDisplayName,"maxFriendsToAdd":maxFriendsToAdd,"chatTitle":chatTitle,"friendNames":friendnames,"updateChat":updateChat},on:{"hide-add-to-chat":function($event){showInviteFriends = false}}}):_e(),_v(" "),(showFilePicker)?_c('FilePicker',{attrs:{"baseFolder":filePickerBaseFolder,"pickerFileExtension":pickerFileExtension,"pickerFilterMedia":pickerFilterMedia,"pickerFilters":pickerFilters,"pickerShowThumbnail":pickerShowThumbnail,"selectedFile_func":selectedFileFromPicker}}):_e(),_v(" "),(showFolderPicker)?_c('FolderPicker',{attrs:{"baseFolder":folderPickerBaseFolder,"selectedFolder_func":selectedFoldersFromPicker,"multipleFolderSelection":multipleFolderSelection,"initiallySelectedPaths":initiallySelectedPaths}}):_e(),_v(" "),(showPrompt)?_c('AppPrompt',{attrs:{"message":prompt_message,"placeholder":prompt_placeholder,"max_input_size":prompt_max_input_size,"value":prompt_value,"consumer_func":prompt_consumer_func,"action":prompt_action},on:{"hide-prompt":function($event){return closePrompt()}}}):_e(),_v(" "),(showAppInstallation)?_c('AppInstall',{attrs:{"appInstallSuccessFunc":appInstallSuccess,"appPropsFile":appInstallPropsFile,"installFolder":appInstallFolder},on:{"hide-app-installation":closeAppInstallation}}):_e(),_v(" "),(showEmbeddedGallery)?_c('Gallery',{attrs:{"files":filesToViewInGallery,"hideGalleryTitle":true,"context":context},on:{"hide-gallery":function($event){showEmbeddedGallery = false}}}):_e(),_v(" "),(showConfirm)?_c('Confirm',{attrs:{"confirm_message":confirm_message,"confirm_body":confirm_body,"consumer_cancel_func":confirm_consumer_cancel_func,"consumer_func":confirm_consumer_func},on:{"hide-confirm":function($event){showConfirm = false}}}):_e(),_v(" "),(!fullscreenMode)?_c('div',{staticClass:"modal-header",staticStyle:{"padding":"0","min-height":"52px"}},[_c('center',[_c('h2',[(browserMode && !isSecretLink && fullPathForDisplay.length > 0)?_c('span',{staticStyle:{"z-index":"9999"}},[(displayToBookmark)?_c('img',{staticStyle:{"height":"24px","width":"24px","cursor":"pointer"},attrs:{"src":"./images/bookmark-o.svg"},on:{"click":function($event){return toggleBookmark(false)}}}):_e(),_v(" "),(!displayToBookmark)?_c('img',{staticStyle:{"height":"24px","width":"24px","cursor":"pointer"},attrs:{"src":"./images/bookmark.svg"},on:{"click":function($event){return toggleBookmark(true)}}}):_e()]):_e(),_v("\n                "+_s(getFullPathForDisplay())+"\n                "),(displayFullScreenIcon)?_c('span',{staticStyle:{"cursor":"pointer"},on:{"click":requestFullscreenFromToolbar,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return requestFullscreenFromToolbar($event)}}},[_c('img',{staticStyle:{"height":"24px","width":"24px","cursor":"pointer"},attrs:{"src":"./images/arrows-alt.svg"}})]):_e()])]),_v(" "),_c('span',{staticStyle:{"position":"absolute","top":"0","right":"0.2em"}},[_c('span',{staticStyle:{"color":"black","font-size":"3em","font-weight":"bold","cursor":"pointer","font-family":"'Cambria Math'"},attrs:{"tabindex":"0"},on:{"click":closeAppFromToolbar,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return closeAppFromToolbar($event)}}},[_v("×")])])],1):_e(),_v(" "),_c('div',[_c('iframe',{staticStyle:{"display":"none"},attrs:{"id":"print-data-container","aria-hidden":"true","tabindex":"-1"}})]),_v(" "),_c('div',{staticClass:"modal-body",staticStyle:{"margin":"0","padding":"0","display":"flex","flex-grow":"1"},attrs:{"id":"sandbox-container"}}),_v(" "),(showSpinner)?_c('Spinner',{attrs:{"message":spinnerMessage}}):_e()],1)])])}},	mixins:[mixins, downloaderMixins, router, sandboxMixin, launcherMixin, UriDecoder],
    components: {
        AddToChat,
        AppInstall,
        AppPrompt,
        Confirm,
        FilePicker,
        FolderPicker,
        Group,
        Gallery,
        ProgressBar,
        Spinner,
        ViewProfile,
    },
    data: function() {
        return {
            showSpinner: false,
            spinnerMessage: '',
            maxBlockSize: 1024 * 1024 * 5,
            sandboxedApp: null,
            FILE_NOT_FOUND: 2,
            ACTION_FAILED: 3,
            DELETE_SUCCESS: 4,
            DIRECTORY_NOT_FOUND: 5,
            CREATE_SUCCESS: 6,
            UPDATE_SUCCESS: 7,
            GET_SUCCESS: 8,
            PATCH_SUCCESS: 9,
            NAVIGATE_TO: 10,
            isIframeInitialised: false,
            appPath: '',
            appSubdomain: '',
            isAppPathAFolder: false,
            permissionsMap: new Map(),
            PERMISSION_STORE_APP_DATA: 'STORE_APP_DATA',
            PERMISSION_EDIT_CHOSEN_FILE: 'EDIT_CHOSEN_FILE',
            PERMISSION_READ_CHOSEN_FOLDER: 'READ_CHOSEN_FOLDER',
            PERMISSION_EXCHANGE_MESSAGES_WITH_FRIENDS: 'EXCHANGE_MESSAGES_WITH_FRIENDS',
            PERMISSION_USE_MAILBOX: 'USE_MAILBOX',
            PERMISSION_ACCESS_PROFILE_PHOTO: 'ACCESS_PROFILE_PHOTO',
            PERMISSION_CSP_UNSAFE_EVAL: 'CSP_UNSAFE_EVAL',
            browserMode: false,
            fullPathForDisplay: '',
            launcherApp: null,
            running: false,
            workspaceName: '',
            navigateTo: null,
            appProperties: null,
            appRegisteredWithFileAssociation: false,
            appRegisteredWithWildcardFileAssociation : false,
            targetFile: null,
            apiRequest: "/peergos-api/v0",
            recreateFileThumbnailOnClose : false,
            currentChatId: '',
            showInviteFriends: false,
            appDisplayName: '',
            chatResponseHeader: null,
            showPrompt: false,
            prompt_message: '',
            prompt_placeholder: '',
            prompt_max_input_size: null,
            prompt_value: '',
            prompt_consumer_func: () => {},
            prompt_action: 'ok',
            isSaveActionEnabled: true,
            isAppGalleryMode: false,
            showAppInstallation: false,
            appInstallPropsFile: null,
            appInstallFolder: '',
            currentAppName: null,
            showFolderPicker: false,
            folderPickerBaseFolder: "",
            multipleFolderSelection: true,
            initiallySelectedPaths: [],
            filePickerBaseFolder: "",
            selectedFolders: [],
            selectedFolderStems: [],
            showFilePicker: false,
            selectedFileFromPicker: null,
            pickerFileExtension: "",
            pickerFilterMedia: false,
            pickerFilters: null,
            pickerShowThumbnail: false,
            commandQueue: [],
            executingCommands: false,
            commandFileRefs: new Map(),
            messenger: null,
            groupId: "",
            groupTitle: "",
            showGroupMembership: false,
            existingGroupMembers: [],
            existingAdmins: [],
            progressMonitors: [],
            showProfileViewForm:false,
            profile: {
                firstName: "",
                lastName: "",
                biography: "",
                primaryPhone: "",
                primaryEmail: "",
                profileImage: "",
                status: "",
                webRoot: "",
            },
            showEmbeddedGallery: false,
            filesToViewInGallery: [],
            isFileViewerMode: false, //run app from app store
            displayFullScreenIcon: false,
            fullscreenMode: false,
            mailboxFolderPrefix: 'default',
            mailboxClientProperties: null,
            clientMailboxAddress: "",
            mailboxClient: null,
            MAILBOX_CONFIG_FILENAME: 'App.config',
            EMAIL_FILE_EXTENSION: '.cbor',
            messageToTimestamp: new Map(),
            showConfirm: false,
            confirm_message: "",
            confirm_body: "",
            confirm_consumer_cancel_func: () => {},
            confirm_consumer_func: () => {},
            displayToBookmark: true,
            pickerSelectedFile: "",
        }
    },
    computed: {
        ...Vuex.mapState([
            'quotaBytes',
            'usageBytes',
            'context',
            "sandboxedApps",
            'mirrorBatId',
            "socialData",
            "shortcuts"
        ]),
        ...Vuex.mapGetters([
            'isSecretLink',
            'getPath',
            'isMobile'
        ]),
        friendnames: function() {
            return this.socialData.friends;
        }
    },
    props: ['sandboxAppName', 'currentFile', 'currentPath', 'currentProps', 'sandboxAppChatId', 'htmlAnchor'],
    created: function() {
        let that = this;
        this.messenger = new peergos.shared.messaging.Messenger(this.context);
        this.currentAppName = this.sandboxAppName;
        let currentFilename = this.currentFile == null ? '' : this.currentFile.getName();
        var path = '';
        if (this.currentPath != null) {
            path = this.currentPath.endsWith('/') ? this.currentPath : this.currentPath + '/';
        }
        this.appPath = this.currentFile == null ? '' : path + currentFilename;
        if (this.currentAppName == 'htmlviewer') {
            this.browserMode = true;
            this.workspaceName = this.extractWorkspace(this.appPath);
        }else if (this.currentAppName == '$$app-gallery$$') {
            this.currentAppName = 'htmlviewer'
            this.browserMode = true;
            this.isAppGalleryMode = true;
            this.workspaceName = this.extractWorkspace(this.appPath);
        } else {
            if (this.currentProps != null && this.currentFile == null) {
                this.workspaceName = this.getPath;
            } else if (this.currentProps != null && this.currentFile != null) {
                this.isFileViewerMode = true;
                this.workspaceName = "/peergos/recommended-apps/" + this.currentAppName;
            } else {
                this.workspaceName = this.context.username + "/.apps/" + this.currentAppName;
            }
        }
        if (this.currentFile != null) {
            this.targetFile = this.currentFile;
            if (this.currentFile.getFileProperties().isDirectory) {
                this.isAppPathAFolder = true;
            } else {
                let props = this.targetFile.getFileProperties();
                let filename = props.name.toLowerCase();
                if (filename.endsWith('jpg') || filename.endsWith('png')) {
                    this.recreateFileThumbnailOnClose = this.targetFile.isWritable();
                }
            }
        }
        if (!this.appSandboxIsCrossOriginIsolated()) {
            this.fatalError('Cannot create secure app sandbox. Browser reports window.crossOriginIsolated=false');
        } else if (!this.appSandboxSupportAvailable()) {
            this.giveUp();
        } else {
            if (this.isSecretLink) {
                that.getAppSubdomain().thenApply(appSubdomain => {
                    that.appSubdomain = appSubdomain;
                    if (that.isFileViewerMode) {
                        that.appProperties = that.currentProps;
                        that.appRegisteredWithFileAssociation = that.appHasFileAssociation(that.currentProps);
                        that.appRegisteredWithWildcardFileAssociation = that.appHasWildcardFileRegistration(that.currentProps);
                    }
                    that.start();
                });
            } else {
                this.loadAppProperties().thenApply(props => {
                    if (props == null) {
                        that.fatalError('Application properties not found');
                    } else if (!that.validatePermissions(props)) {
                        that.fatalError('Application configuration error. See console for further details');
                    } else {
                        that.appProperties = props;
                        that.appRegisteredWithFileAssociation = that.appHasFileAssociation(props);
                        that.appRegisteredWithWildcardFileAssociation = that.appHasWildcardFileRegistration(props);
                        that.currentChatId = that.sandboxAppChatId != null ? that.sandboxAppChatId : '';
                        peergos.shared.user.App.init(that.context, that.currentAppName).thenApply(sandboxedApp => {
                            that.sandboxedApp = sandboxedApp;
                            that.getAppSubdomain().thenApply(appSubdomain => {
                                that.appSubdomain = appSubdomain;
                                if (that.permissionsMap.get(that.PERMISSION_USE_MAILBOX)) {
                                    that.isMailboxPendingDirectoryCreated().thenApply(isInit => {
                                        if (! isInit) {
                                            that.askForMailboxBridgeUser();
                                        } else {
                                            peergos.shared.email.EmailClient.load(sandboxedApp, that.context.crypto, that.context).thenApply(client => {
                                                that.mailboxClient = client;
                                                client.getEmailAddress().thenApply(clientAddress => {
                                                    if (clientAddress.ref == null) {
                                                        that.showToastError("Awaiting approval from " + that.currentAppName + " Mailbox Administrator");
                                                        that.closeSandbox();
                                                    } else {
                                                        that.clientMailboxAddress = clientAddress.ref.toLowerCase();
                                                        that.getMailboxPropertiesFile().thenApply(props => {
                                                            that.mailboxClientProperties = props;
                                                            that.start();
                                                        });
                                                    }
                                                });
                                            });
                                        }
                                    });
                                } else {
                                    that.start();
                                }
                            });
                        });
                    }
                });
            }
        }
    },
    methods: {
        getMailboxPropertiesFile: function() {
            let that = this;
            let filePath = peergos.client.PathUtils.directoryToPath([this.mailboxFolderPrefix, this.MAILBOX_CONFIG_FILENAME]);
            return that.sandboxedApp.readInternal(filePath).thenApply(data => {
                return JSON.parse(new TextDecoder().decode(data));
            }).exceptionally(function(throwable) {//File not found
                if (throwable.detailMessage.startsWith("File not found")) {
                    let props = new Object();
                    props.userFolders = [];
                    return props;
                } else {
                    that.showError("Unable to load mailbox config file","Please close app and try again");
                }
            });
        },
        askForMailboxBridgeUser: function() {
            let that = this;
            this.prompt_placeholder= that.currentAppName + ' Mailbox username';
            this.prompt_message='Set ' + that.currentAppName+ ' Mailbox user';
            this.prompt_value='';
            this.prompt_consumer_func = function(prompt_result) {
                var valid = true;
                let bridgeUsername = null;
                if (prompt_result === null) {
                    valid = false;
                } else {
                    bridgeUsername = prompt_result.trim().toLowerCase();
                    let knownUsers = that.context.network.usernames.toArray([]);
                    let index = knownUsers.findIndex(v => v === bridgeUsername);
                    if (index == -1 || bridgeUsername == that.context.username) {
                        valid = false;
                    }
                }
                if (! valid) {
                    let usernameForDisplay = bridgeUsername == null ? "" : bridgeUsername;
                    that.showError("Username does not exist: " + usernameForDisplay);
                    that.closeSandbox();
                } else {
                    that.showSpinner = true;
                    that.spinnerMessage = "Creating mailbox folders";
                    peergos.shared.email.EmailClient.load(that.sandboxedApp, that.context.crypto).thenApply(client => {
                        client.connectToBridge(that.context, bridgeUsername).thenApply(res => {
                            that.showSpinner = false;
                            that.spinnerMessage = "";
                            that.showToastError("Awaiting approval from " + that.currentAppName + " Mailbox Administrator");
                            that.closeSandbox();
                        });
                    });
                }
            };
            this.showPrompt = true;
        },
        isMailboxPendingDirectoryCreated: function() {
            let path = peergos.client.PathUtils.directoryToPath([this.mailboxFolderPrefix, 'pending']);
            let future = peergos.shared.util.Futures.incomplete();
            this.sandboxedApp.dirInternal(path).thenApply(files => {
                let filesArray = files.toArray([]);
                future.complete(filesArray.length != 0);
            });
            return future;
        },
        closeGroupMembership() {
            let that = this;
            Vue.nextTick(function() {
                that.showGroupMembership = false;
                Vue.nextTick(function() {
                    that.buildResponse(that.chatResponseHeader, null, that.ACTION_FAILED);
                });
            });
        },
        appInstallSuccess(appName) {
        },
        closeAppInstallation() {
            this.showAppInstallation = false;
        },
        appSandboxSupportAvailable() {
            return this.supportsStreaming();
        },
        appSandboxIsCrossOriginIsolated() {
            return window.crossOriginIsolated;
        },
        getMirrorBatId(file) {
            return file.getOwnerName() == this.context.username ? this.mirrorBatId : java.util.Optional.empty()
        },
        appHasFileAssociation: function(props) {
            return props.fileExtensions.length > 0
                || props.mimeTypes.length > 0
                || props.fileTypes.length > 0;
        },
        appHasWildcardFileRegistration: function(props) {
            let matchOnFileExtension = this.sandboxedApps.appFileExtensionWildcardRegistrationList
                        .filter(a => a.name == props.name);
            if (matchOnFileExtension.length > 0) {
                return true;
            }
            let matchOnMimeType = this.sandboxedApps.appMimeTypeWildcardRegistrationList
                        .filter(a => a.name == props.name);
            if (matchOnMimeType.length > 0) {
                return true;
            }
            let matchOnFileType = this.sandboxedApps.appFileTypeWildcardRegistrationList
                        .filter(a => a.name == props.name);
            if (matchOnFileType.length > 0) {
                return true;
            }
            return false;
        },
        getAppSubdomain: function() {
            let that = this;
            var future = peergos.shared.util.Futures.incomplete();
            if (this.currentAppName == 'htmlviewer') {
                peergos.shared.user.App.getAppSubdomainWithAnonymityClass(that.workspaceName, this.appPath, that.context.crypto.hasher).thenApply(appSubdomain => {
                    future.complete(appSubdomain);
                });
            } else {
                peergos.shared.user.App.getAppSubdomain(that.workspaceName, that.context.crypto.hasher).thenApply(appSubdomain => {
                    future.complete(appSubdomain);
                });
            }
            return future;
        },
        extractWorkspace: function(path) {
                return path.substring(1, path.indexOf('/', 1));
        },
        loadAppProperties: function(appFolderLocation) {
           let that = this;
           var future = peergos.shared.util.Futures.incomplete();
           if (this.currentProps != null) {
                future.complete(this.currentProps);
           } else {
                this.readAppProperties(that.currentAppName, appFolderLocation).thenApply(props => {
                    future.complete(props);
                });
            }
            return future;
        },
        getFullPathForDisplay: function() {
            let pathToDisplay = this.fullPathForDisplay;
            if (pathToDisplay.length > 0 && this.browserMode && !this.isMobile) {
                this.displayFullScreenIcon = true;
            }
            return pathToDisplay;
        },
        toggleBookmark: function(remove) {
            if(this.showSpinner || this.isSecretLink) {
                return;
            }
            let that = this;
            let address = this.fullPathForDisplay;
            if (address.length <= 1) {
                return;
            }
            let bookmark = this.shortcuts.shortcutsMap.get(address);
            let fileCreatedDate = new Date(this.targetFile.getFileProperties().created.toString() + "+00:00")
            if (remove) {
                if (bookmark != null) {
                    this.refreshAndDeleteBookmark(address);
                }
            } else {
                if (bookmark == null) {
                    this.refreshAndAddBookmark(address, fileCreatedDate);
                }
            }
        },
        refreshAndAddBookmark(link, created) {
            let that = this;
            this.showSpinner = true;
            this.loadShortcutsFile(this.launcherApp).thenApply(shortcutsMap => {
                if (shortcutsMap.get(link) == null) {
                    let entry = {added: new Date(), created: created};
                    shortcutsMap.set(link, entry)
                    that.updateShortcutsFile(that.launcherApp, shortcutsMap).thenApply(res => {
                        that.showSpinner = false;
                        that.displayToBookmark = false;
                        that.$store.commit("SET_SHORTCUTS", shortcutsMap);
                    });
                } else {
                    that.showSpinner = false;
                }
            })
        },
        refreshAndDeleteBookmark(link) {
            let that = this;
            this.showSpinner = true;
            this.loadShortcutsFile(this.launcherApp).thenApply(shortcutsMap => {
                if (shortcutsMap.get(link) != null) {
                    shortcutsMap.delete(link)
                    that.updateShortcutsFile(that.launcherApp, shortcutsMap).thenApply(res => {
                        that.showSpinner = false;
                        that.displayToBookmark = true;
                        that.$store.commit("SET_SHORTCUTS", shortcutsMap);
                    });
                } else {
                    that.showSpinner = false;
                }
            })
        },
        validatePermissions: function(props) {
            let allPermissions = new Map();
            props.permissions.forEach(permission => {
                allPermissions.set(permission, new Date());
            });
            this.permissionsMap = allPermissions;
            if (!props.folderAction && this.isAppPathAFolder) {
                console.log('App configured as NOT a FolderAction, but Path is a folder!');
                return false;
            }
            if (props.folderAction && !this.isAppPathAFolder) {
                console.log('App configured as a FolderAction, but Path is not a folder!');
                return false;
            }
            if (this.isAppPathAFolder) {
                if (!this.permissionsMap.get(this.PERMISSION_READ_CHOSEN_FOLDER)) {
                    console.log('App configured as a FolderAction, but permission READ_CHOSEN_FOLDER not set!');
                    return false;
                }
                this.isSaveActionEnabled = false;
            }
            return true;
        },
    	giveUp: function() {
            this.fatalError('Unable to start sandbox. Are you running incognito mode? Perhaps restart browser');
    	},
        fatalError: function(msg) {
            this.showError(msg);
            this.closeSandbox();
        },
        frameUrl: function() {
            let url= this.frameDomain() + "/sandbox.html";
            return url;
        },
        printFrameUrl: function() {
            let url= this.frameDomain() + "/print-preview.html";
            return url;
        },
        frameDomain: function() {
            return window.location.protocol + "//" + this.appSubdomain + "." + window.location.host;
        },
        postMessage: function(obj) {
            let iframe = document.getElementById("sandboxId");
            try {
                iframe.contentWindow.postMessage(obj, '*');
            } catch(ex) {
                this.closeSandbox();
            }
        },
        postPrintMessage: function(obj) {
            let iframe = document.getElementById("print-data-container");
            try {
                iframe.contentWindow.postMessage(obj, '*');
            } catch(ex) {
                console.log('unable to open print preview modal: ' + ex);
            }
        },
        resizeHandler: function() {
            // https://stackoverflow.com/a/35175835
            let fullscreenElement = document.fullscreenElement || document.mozFullScreenElement
                || document.webkitFullscreenElement || document.msFullscreenElement;
            this.fullscreenMode = fullscreenElement != null;

            let iframe = document.getElementById("sandboxId");
            if (iframe == null) {
                return;
            }
            iframe.style.width = '100%';
            iframe.style.height = '100%';
        },
        messageHandler: function(e) {
            let that = this;
            let iframe = document.getElementById("sandboxId");
            let win = iframe.contentWindow;
            if (win == null ) {
                that.closeSandbox();
            } else {
                if ((e.origin === "null" || e.origin === that.frameDomain()) && e.source === iframe.contentWindow) {
                    if (e.data.action == 'pong') {
                        that.isIframeInitialised = true;
                    } else if (e.data.action == 'failedInit') {
                        that.giveUp();
                    } else if (e.data.action == 'streamFile') {
                        that.streamFile(e.data.seekHi, e.data.seekLo, e.data.seekLength, e.data.streamFilePath);
                    } else if(e.data.action == 'actionRequest') {
                        that.actionRequest(e.data.filePath, e.data.requestId, e.data.api, e.data.apiMethod, e.data.bytes,
                            e.data.hasFormData, e.data.params, e.data.isFromRedirect, e.data.isNavigate);
                    }
                }
            }
        },
        start: function() {
            let that = this;
            peergos.shared.user.App.init(this.context, "launcher").thenApply(launcher => {
                that.launcherApp = launcher;
                that.startListener();
            });
        },
        startListener: function() {
            var that = this;
            var iframeContainer = document.getElementById("sandbox-container");
            var iframe = document.createElement('iframe');
            iframe.id = 'sandboxId';
            iframe.style.width = '100%';
            iframe.style.height = '100%';
            iframe.frameBorder="0";
            iframe.scrolling="no";
            iframe.allow="cross-origin-isolated";
            iframeContainer.appendChild(iframe);
            Vue.nextTick(function() {
                iframe.src = that.frameUrl();
                window.addEventListener('message', that.messageHandler);
                window.addEventListener("resize", that.resizeHandler);
                that.resizeHandler();
                let theme = that.$store.getters.currentTheme;
                let href = window.location.href;
                let appDevMode = href.includes("?local-app-dev=true");
                let allowUnsafeEvalInCSP = that.permissionsMap.get(that.PERMISSION_CSP_UNSAFE_EVAL) != null;
                let props = { appDevMode: appDevMode, allowUnsafeEvalInCSP: allowUnsafeEvalInCSP, isPathWritable: that.isPathWritable(),
                    htmlAnchor: that.htmlAnchor == null ? "" : that.htmlAnchor};
                let func = function() {
                    that.postMessage({type: 'init', appName: that.currentAppName, appPath: that.appPath,
                    allowBrowsing: that.browserMode, theme: theme, chatId: that.currentChatId,
                    username: that.context.username, props: props});
                };
                that.setupIFrameMessaging(iframe, func);
            });
            let iframeForPrint = document.getElementById("print-data-container");
            iframeForPrint.src = that.printFrameUrl();
        },
        setupIFrameMessaging: function(iframe, func) {
            if (this.isIframeInitialised) {
                func();
            } else {
                iframe.contentWindow.postMessage({type: 'ping'}, '*');
                let that = this;
                window.setTimeout(function() {that.setupIFrameMessaging(iframe, func);}, 30);
            }
        },
        isPathWritable: function() {
                return this.targetFile != null && this.targetFile.isWritable();
        },
        streamFile: function(seekHi, seekLo, seekLength, streamFilePath) {
            let that = this;
            let originalStreamFilePath = streamFilePath;
            if (this.browserMode && streamFilePath.includes('/.')) {
                that.showError('Path not accessible: ' + streamFilePath);
            } else {
                var prefix = '';
                if (!this.browserMode && !streamFilePath.startsWith(this.appPath)) {
                    if(streamFilePath.startsWith(that.apiRequest + '/data')) {
                        streamFilePath = streamFilePath.substring(that.apiRequest.length);
                    } else {
                        prefix = '/assets';
                    }
                }
                this.findFile(prefix + streamFilePath).thenApply(file => {
                    if (file != null) {
                        that.stream(seekHi, seekLo, seekLength, file, originalStreamFilePath);
                    }
                });
            }
        },
        fixMimeType: function (filePath, mimeTypeInput) {
            var mimeType = "application/octet-stream";
            if (mimeTypeInput != null && mimeTypeInput.trim().length > 0) {
                if (filePath.toLowerCase().endsWith('.html')) {
                    mimeType = "text/html";
                } else if (filePath.toLowerCase().endsWith('.css')) {
                    mimeType = "text/css";
                } else if (filePath.toLowerCase().endsWith('.js')) {
                    mimeType = "text/javascript";
                } else if (filePath.toLowerCase().endsWith('.wasm')) {
                    mimeType = "application/wasm";
                } else {
                    let lastSlashIdx = filePath.lastIndexOf('/');
                    let dotIndex =  filePath.indexOf('.', lastSlashIdx);
                    if (dotIndex == -1 && mimeTypeInput.startsWith('text/')) {
                        mimeType = "text/html";
                    } else {
                        mimeType = mimeTypeInput;
                    }
                }
            }
            return mimeType;
        },
        buildHeader: function(filePath, mimeTypeInput, requestId, streamingInfo) {
            var mimeType = this.fixMimeType(filePath, mimeTypeInput);
            let encoder = new TextEncoder();
            let filePathBytes = encoder.encode(filePath + requestId);
            let mimeTypeBytes = encoder.encode(mimeType);
            let pathSize = filePathBytes.byteLength;
            if (pathSize >= 255) {
                throw new Error("Path too long!");
            }
            let mimeTypeSize = mimeTypeBytes.byteLength;
            if (mimeTypeSize >= 255) {
                throw new Error("MimeType too long!");
            }
            var headerSize = 1 + 1 + pathSize + 1 + mimeTypeSize;
            let sizeHighBytes = 0;
            let sizeLowBytes = 0;
            if (streamingInfo != null) {
                sizeHighBytes = this.writeUnsignedLeb128(streamingInfo.sizeHigh);
                sizeLowBytes = this.writeUnsignedLeb128(streamingInfo.sizeLow);
                headerSize = headerSize + sizeHighBytes.byteLength + sizeLowBytes.byteLength;
            }
            var data = new Uint8Array(headerSize);
            var offset = 0;
            var mode = 0;
            if (streamingInfo != null) {
                if (streamingInfo.appFileStreaming) {
                    mode = 11;
                } else {
                    mode = 1;
                }
            }
            data.set([mode], offset); //status code (or mode)
            offset = offset + 1;
            data.set([pathSize], offset);
            offset = offset + 1;
            data.set(filePathBytes, offset);
            offset = offset + pathSize;
            data.set([mimeTypeSize], offset);
            offset = offset + 1;
            data.set(mimeTypeBytes, offset);
            if (streamingInfo != null) {
                offset = offset + mimeTypeSize;
                data.set(sizeHighBytes, offset);
                offset = offset + sizeHighBytes.byteLength;
                data.set(sizeLowBytes, offset);
            }
            return data;
        },
        buildResponse: function(header, body, mode) {
            var bytes = body == null ? new Uint8Array(header.byteLength)
                : new Uint8Array(body.byteLength + header.byteLength);
            for(var i=0;i < header.byteLength;i++){
                bytes[i] = header[i];
            }
            if (body != null) {
                for(var j=0;j < body.byteLength;j++){
                    bytes[i+j] = body[j];
                }
            }
            bytes[0] = mode;
            let data = convertToByteArray(bytes);
            this.postData(data);
        },
        actionRequest: function(path, requestId, api, apiMethod, data, hasFormData, params, isFromRedirect, isNavigate) {
            let that = this;
            let headerFunc = (mimeType, streamingInfo) => that.buildHeader(path, mimeType, requestId, streamingInfo);
            if (this.browserMode) {
                if (this.isAppGalleryMode) {
                    if (!(apiMethod == 'GET' || apiMethod == 'POST' )) {
                        that.showError("app-gallery does not support: " + apiMethod);
                        that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                        return;
                    }
                } else if (apiMethod != 'GET') {
                    that.showError("HTMLViewer does not support: " + apiMethod);
                    that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                    return;
                }
            }
            try {
                if (api =='/peergos-api/v0/install-app/') {
                    that.handleInstallAppRequest(headerFunc(), path, apiMethod, data, hasFormData, params);
                }else if (api =='/peergos-api/v0/chat/') {
                    if (!that.permissionsMap.get(that.PERMISSION_EXCHANGE_MESSAGES_WITH_FRIENDS)) {
                        that.showError("App attempted to access chat without permission :" + path);
                        that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                    } else {
                        that.handleChatRequestV0(headerFunc(), path, apiMethod, data, hasFormData, params);
                    }
                }else if (api =='/peergos-api/v1/chat/') {
                    if (!that.permissionsMap.get(that.PERMISSION_EXCHANGE_MESSAGES_WITH_FRIENDS)) {
                        that.showError("App attempted to access chat without permission :" + path);
                        that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                    } else {
                        that.handleChatRequestV1(headerFunc(), path, apiMethod, data, hasFormData, params);
                    }
                }else if (api =='/peergos-api/v0/mailbox/') {
                    if (!that.permissionsMap.get(that.PERMISSION_USE_MAILBOX)) {
                        that.showError("App attempted to access mailbox without permission :" + path);
                        that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                    } else {
                        that.handleMailboxRequest(headerFunc(), path, apiMethod, data, hasFormData, params);
                    }
                } else if (api =='/peergos-api/v0/print/') {
                    that.handlePrintPreviewRequest(headerFunc, path, apiMethod, data, hasFormData, params);
                } else if (api =='/peergos-api/v0/save/') {
                    if (this.isSaveActionEnabled) {
                        that.handleSaveFileRequest(headerFunc, path, apiMethod, data, hasFormData, params);
                    } else {
                        that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                    }
                } else if (api =='/peergos-api/v0/file-picker/') {
                    that.handleFilePickerRequest(headerFunc, path, apiMethod, data, hasFormData, params);
                } else if (api =='/peergos-api/v0/folders/') {
                    that.handleFolderPickerRequest(headerFunc, path, apiMethod, data, hasFormData, params);
                } else if (api =='/peergos-api/v0/profile/') {
                    that.handleProfileRequest(headerFunc(), path, apiMethod, data, hasFormData, params);
                } else {
                    var bytes = convertToByteArray(new Int8Array(data));
                    if (apiMethod == 'GET') {
                        //requestId is set if it is a GET request to /peergos-api/v0/form or /peergos-api/v0/data
                        if (requestId.length > 0 && !requestId.startsWith("HEAD-") && !requestId.startsWith("GET-")) {
                            if (!that.permissionsMap.get(that.PERMISSION_STORE_APP_DATA)) {
                                that.showError("App attempted to access file without permission :" + path);
                                that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                            } else {
                                that.readFileOrFolder(headerFunc, '/data/' + path, params, true, false);
                            }
                        } else {
                            let prefix = !this.browserMode
                                && !(path == this.appPath || (this.isAppPathAFolder && path.startsWith(this.appPath)))
                                && !(this.appPath.length > 0 && !this.isAppPathAFolder && path.startsWith(that.getPath))
                                && !path.startsWith(that.apiRequest + '/data')
                                && !(this.isSelectedFolder(path))
                                && !(path == this.pickerSelectedFile)
                                ? '/assets' : '';
                            if (this.browserMode) {
                                that.handleBrowserRequest(headerFunc, path, params, isFromRedirect, isNavigate);
                            } else {
                                that.readFileOrFolder(headerFunc, prefix + path, params, false, false);
                            }
                        }
                    } else {
                        if (that.appPath.length > 0 && path == that.appPath) {
                            if (path.includes('/.')) {
                                that.showError('Path not accessible: ' + path);
                                that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                            }
                            if (that.isAppPathAFolder) {
                                that.showError("App attempted to write folder without permission :" + path);
                                that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                            } else {
                                if (apiMethod == 'POST' || apiMethod == 'PUT') {
                                    if (!that.permissionsMap.get(that.PERMISSION_EDIT_CHOSEN_FILE)) {
                                        that.showError("App attempted to write to file without permission :" + path);
                                        that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                                    } else {
                                        that.overwriteFile(headerFunc(), path, bytes, that.targetFile, true);
                                    }
                                } else {
                                    that.showError("App attempted unexpected action: " + apiMethod);
                                    that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                                }
                            }
                        } else {
                            if (!that.permissionsMap.get(that.PERMISSION_STORE_APP_DATA)) {
                                that.showError("App attempted to access file without permission :" + path);
                                that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                            } else {
                                if(apiMethod == 'DELETE') {
                                    that.deleteAction(headerFunc(), path);
                                } else if(apiMethod == 'POST') {
                                    that.createAction(headerFunc(), path, bytes, hasFormData);
                                } else if(apiMethod == 'PUT') {
                                    that.putAction(headerFunc(), path, bytes);
                                } else if(apiMethod == 'PATCH') {
                                    that.patchAction(headerFunc(), path, bytes);
                                }
                            }
                        }
                    }
                }
            } catch(ex) {
                console.log('Exception:' + ex);
                that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
            }
        },
        handlePrintPreviewRequest: function(headerFunc, path, apiMethod, data, hasFormData, params) {
            let that = this;
            if (apiMethod == 'POST' && hasFormData) {
                let requestBody = JSON.parse(new TextDecoder().decode(data));
                that.postPrintMessage({type: 'printPreviewRequest', html: requestBody.html, css: requestBody.css, title: requestBody.title});
                that.buildResponse(headerFunc(), null, that.UPDATE_SUCCESS);
            } else {
                that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
            }
        },
        handleSaveFileRequest: function(headerFunc, path, apiMethod, data, hasFormData, params) {
            let that = this;
            if (that.appPath.length > 0) {
                if (path.includes('/')) {
                    that.showError('Path includes invalid filename: ' + path);
                    that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                    return
                }
                if (apiMethod == 'POST' || apiMethod == 'PUT') {
                    let folderPath = that.appPath.substring(0, that.appPath.lastIndexOf('/') + 1);
                    this.prompt_placeholder = 'Save File';
                    this.prompt_message = 'Folder: ' + folderPath;
                    this.prompt_value = path;
                    this.prompt_consumer_func = function (prompt_result) {
                        this.showPrompt = false;
                        if (prompt_result === null) {
                            that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                            return;
                        }
                        let filename = prompt_result.trim();
                        if (filename === '') {
                            that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                            return;
                        }
                        if (filename.startsWith('.')) {
                            that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                            return;
                        }
                        if (filename.includes('/') || filename.includes('\\')) {
                            that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                            return;
                        }
                        if (folderPath + filename  == that.appPath) {
                            that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                            return;
                        }
                        var bytes = convertToByteArray(new Int8Array(data));
                        let fullPathToNewFile = folderPath + filename;
                        that.findFile(fullPathToNewFile, false).thenApply(file => {
                            if (file != null) {
                                that.overwriteFile(headerFunc(), fullPathToNewFile, bytes, file, false);
                            } else {
                                let filePath = peergos.client.PathUtils.directoryToPath(fullPathToNewFile.split('/').filter(n => n.length > 0));
                                that.writeNewFile(filePath, bytes).thenApply(res => {
                                    that.buildResponse(headerFunc(), null, that.UPDATE_SUCCESS);
                                });
                            }
                        });
                    }.bind(this);
                    this.showPrompt = true;
                } else {
                    that.showError("App attempted unexpected action: " + apiMethod);
                    that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                }
            } else {
                that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
            }
        },
        closePrompt() {
            this.showPrompt = false;
        },
        handleFilePickerRequest: function(headerFunc, path, apiMethod, data, hasFormData, params) {
            let that = this;
            if (apiMethod == 'GET') {
                let fromCurrentFolder = params.get('currentFolder');
                let baseCurrentFolder = fromCurrentFolder != null && fromCurrentFolder.toLowerCase() == "true";
                let currentPathExtract = this.getPath;
                let currentPathExtractWithoutSlash = currentPathExtract.substring(0, currentPathExtract.length -1);
                this.filePickerBaseFolder =  baseCurrentFolder ? currentPathExtractWithoutSlash : "/" + this.context.username;
                let fileExtensionFilter = params.get('extension');
                this.pickerFileExtension = fileExtensionFilter == null ? "" : fileExtensionFilter;
                let fileMediaFilter = params.get('media');
                this.pickerFilterMedia = fileMediaFilter == null ? false : fileMediaFilter.toLowerCase() == 'true';
                let thumbnail = params.get('thumbnail');
                this.pickerShowThumbnail = thumbnail == null ? false : thumbnail.toLowerCase() == 'true';
                this.selectedFileFromPicker = function (chosenFile) {
                    var selectedFile = chosenFile == null ? "" : chosenFile;
                    if (baseCurrentFolder) {
                        selectedFile = selectedFile.substring(currentPathExtract.length);
                    }
                    that.showFilePicker = false;
                    let encoder = new TextEncoder();
                    that.pickerSelectedFile = selectedFile;
                    let data = encoder.encode(JSON.stringify([selectedFile]));
                    that.buildResponse(headerFunc(), data, that.UPDATE_SUCCESS);
                }.bind(this);
                this.showFilePicker = true;
            } else {
                that.showError("App attempted unexpected action: " + apiMethod);
                that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
            }
        },
        handleFolderPickerRequest: function(headerFunc, path, apiMethod, data, hasFormData, params) {
            let that = this;
            if (apiMethod == 'GET') {
                this.folderPickerBaseFolder = "/" + this.context.username;
                this.selectedFoldersFromPicker = function (chosenFolders) {
                    that.selectedFolders = chosenFolders;
                    that.selectedFolderStems = chosenFolders.map(n => n + '/');
                    that.showFolderPicker = false;
                    let encoder = new TextEncoder();
                    let data = encoder.encode(JSON.stringify(chosenFolders));
                    that.buildResponse(headerFunc(), data, that.UPDATE_SUCCESS);
                }.bind(this);
                this.showFolderPicker = true;
            } else {
                that.showError("App attempted unexpected action: " + apiMethod);
                that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
            }
        },
        parsePositiveInt: function(num) {
            let number = parseInt(num, 10);
            if (isNaN(number)) {
                return 0;
            }
            if (number < 0) {
                return 0;
            }
            return number;
        },
        validateRange: function(from, to) {
            if (from == null || to == null) {
                return false;
            }
            let fromNumber = parseInt(from, 10);
            let toNumber = parseInt(to, 10);
            if (isNaN(fromNumber) || isNaN(toNumber)) {
                return false;
            }
            if (fromNumber < 0 || toNumber < 0 || fromNumber > toNumber) {
                return false;
            }
            return true;
        },
        handleInstallAppRequest: function(header, path, apiMethod, data, hasFormData, params) {
            let that = this;
            if (!this.isAppGalleryMode || !hasFormData || apiMethod != 'POST') {
                console.log('Install App API call is invalid');
                that.buildResponse(header, null, that.ACTION_FAILED);
                return;
            }
            let requestBody = JSON.parse(new TextDecoder().decode(data));
            var appPath = requestBody.path.startsWith('/') ? requestBody.path : '/' + requestBody.path;
            appPath = appPath.endsWith('/') ? appPath.substring(0, appPath.length -1) : appPath;
            let appName = requestBody.appName;
            let pathStr = appPath + '/' + appName + '/';
            this.context.getByPath(pathStr + 'peergos-app.json').thenApply(propsFileOpt => {
                if (propsFileOpt.ref != null) {
                    that.appInstallPropsFile = propsFileOpt.ref;
                    that.appInstallFolder = pathStr;
                    that.showAppInstallation = true;
                    that.buildResponse(header, null, that.CREATE_SUCCESS);
                } else {
                    console.log('App manifest file not found!');
                    that.buildResponse(header, null, that.ACTION_FAILED);
                }
            });
        },
        extractBase64Image: function(data) {
            var str = "";
            for (let i = 0; i < data.length; i++) {
                str = str + String.fromCharCode(data[i] & 0xff);
            }
            if (data.byteLength > 0) {
                return "data:image/png;base64," + window.btoa(str);
            }
            return "";
        },
        spinner: function(val) {
            this.showSpinner = val;
            if (!val) {
                this.spinnerMessage = "";
            }
        },
        handleProfileRequest: function(headerFunc, path, apiMethod, data, hasFormData, params) {
            if(apiMethod == 'GET') {
                let username = path;
                index = this.friendnames.indexOf(username);
                if (index > -1) {
                    let that = this;
                    if (params.get('thumbnail') == 'true') {
                        if (!this.permissionsMap.get(this.PERMISSION_ACCESS_PROFILE_PHOTO)) {
                            this.showError("App attempted to access profile photo without permission");
                            this.buildResponse(headerFunc, null, this.ACTION_FAILED);
                        } else {
                            let encoder = new TextEncoder();
                            peergos.shared.user.ProfilePaths.getProfilePhoto(username, this.context).thenApply(result => {
                                if (result.ref != null) {
                                    let data = encoder.encode(JSON.stringify({profileThumbnail: that.extractBase64Image(result.ref)}));
                                    that.buildResponse(headerFunc, data, that.GET_SUCCESS);
                                } else {
                                    let data = encoder.encode(JSON.stringify({profileThumbnail: ''}));
                                    that.buildResponse(headerFunc, data, that.GET_SUCCESS);
                                }
                            }).exceptionally(function(throwable) {
                                console.log(throwable);
                                let data = encoder.encode(JSON.stringify({profileThumbnail: ''}));
                                that.buildResponse(headerFunc, data, that.GET_SUCCESS);
                            });
                        }
                    } else {
                        peergos.shared.user.ProfilePaths.getProfile(username, this.context).thenApply(profileInfo => {
                            let base64Image = profileInfo.profilePhoto.isPresent() ? that.extractBase64Image(profileInfo.profilePhoto.get()) : "";
                            let json = {
                                firstName: profileInfo.firstName.isPresent() ? profileInfo.firstName.get() : "",
                                lastName: profileInfo.lastName.isPresent() ? profileInfo.lastName.get() : "",
                                biography: profileInfo.bio.isPresent() ? profileInfo.bio.get() : "",
                                primaryPhone: profileInfo.phone.isPresent() ? profileInfo.phone.get() : "",
                                primaryEmail: profileInfo.email.isPresent() ? profileInfo.email.get() : "",
                                profileImage: base64Image,
                                status: profileInfo.status.isPresent() ? profileInfo.status.get() : "",
                                webRoot: profileInfo.webRoot.isPresent() ? profileInfo.webRoot.get() : ""
                            };
                            that.profile = json;
                            that.showProfileViewForm = true;
                            that.buildResponse(headerFunc, null, that.GET_SUCCESS);
                        }).exceptionally(function(throwable) {
                            console.log(throwable);
                            that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                        });
                    }
                } else {
                    that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                }
            } else {
                that.buildResponse(headerFunc, null, that.ACTION_FAILED);
            }
        },
        copyArray: function(jArray) {
            let arr = [];
            for(var i=0; i < jArray.length; i++) {
                arr.push(jArray[i]);
            }
            return arr;
        },
        filterChats: function(allChats) {
            let that = this;
            let filteredChats = [];
            let recentMessages = [];
            for(var i = 0; i < allChats.length; i++) {
                let chat = allChats[i];
                if (this.currentAppName == "chat") {
                    if(!chat.chatUuid.startsWith("chat-")) { //chat-<appname>
                        filteredChats.push({chatId: chat.chatUuid, title: chat.getTitle()
                        , members: that.copyArray(chat.getMemberNames().toArray())
                        , admins: that.copyArray(chat.getAdmins().toArray()) });
                        recentMessages.push(chat.getRecent().toArray());
                    }
                } else {
                    if(chat.chatUuid.startsWith("chat-" + this.currentAppName)) {
                        filteredChats.push({chatId: chat.chatUuid, title: chat.getTitle()
                        , members: that.copyArray(chat.getMemberNames().toArray())
                        , admins: that.copyArray(chat.getAdmins().toArray()) });
                        recentMessages.push(chat.getRecent().toArray());
                    }
                }
            }
            return {chats: filteredChats, recentMessages: recentMessages};
        },
        addPendingAttachments: function(messagePairs) {
            let refs = [];
            for(var j = 0; j < messagePairs.length; j++) {
                let chatEnvelope = messagePairs[j].message;
                let payload = chatEnvelope.payload;
                let type = payload.type().toString();
                if (type == 'Application' || type == 'ReplyTo') {
                    let body = type == 'Application' ? payload.body.toArray() : payload.content.body.toArray();
                    if (body.length > 1) {
                        for(var i = 1; i < body.length; i++) {
                            let mediaRef = body[i].reference().ref;
                            if (refs.findIndex(v => v.path == mediaRef.path) == -1) {
                                refs.push(mediaRef);
                            }
                        }
                    }
                }
            }
            return refs;
        },
        decodeLatestMessage: function (controller, message) {
            let chatEnvelope = message;
            let payload = chatEnvelope.payload;
            let type = payload.type().toString();
            let author = controller.getUsername(chatEnvelope.author);
            if (type == 'GroupState') {//type
                if(payload.key == "title") {
                    return "Chat name changed to " + payload.value;
                } else if(payload.key == "admins") {
                    return "Chat admins changed to " + payload.value;
                }
            } else if(type == 'Invite') {
                let username = chatEnvelope.payload.username;
                return author + " invited " + username;
            } else if(type == 'RemoveMember') {
                let username = controller.getUsername(chatEnvelope.payload.memberToRemove);
                return author + " removed " + username;
            } else if(type == 'Join') {
                let username = chatEnvelope.payload.username;
                return username + " joined the chat";
            } else if(type == 'Application') {
                return payload.body.toArray()[0].inlineText();
            } else if(type == 'Edit') {
                return payload.content.body.toArray()[0].inlineText();
            } else if(type == 'Delete') {
                return "[Message Deleted]";
            } else if(type == 'ReplyTo') {
                return payload.content.body.toArray()[0].inlineText();
            }
        },
        fromUTCtoLocal: function(dateTime) {
            let date = new Date(dateTime.toString() + "+00:00");//adding UTC TZ in ISO_OFFSET_DATE_TIME ie 2021-12-03T10:25:30+00:00
            let formatted = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate()
                + ' ' + (date.getHours() < 10 ? '0' : '') + date.getHours()
                + ':' + (date.getMinutes() < 10 ? '0' : '') + date.getMinutes()
                + ':' + (date.getSeconds() < 10 ? '0' : '') + date.getSeconds();
            return formatted;
        },
        buildLatestMessageMap: function(index, chats, chatRecentMessages, latestMessageMap, future) {
            let that = this;
            if (index == chats.length) {
                future.complete(true);
            } else {
                let chatInfo = chats[index];
                this.messenger.getChat(chatInfo.chatId).thenApply(function(controller) {
                    let recentMessages = chatRecentMessages[index];
                    let latestMessage = recentMessages.length == 0 ? null : recentMessages[recentMessages.length-1];
                    if (latestMessage != null) {
                        latestMessageMap.set(chatInfo.chatId, {message: that.decodeLatestMessage(controller, latestMessage),
                            creationTime: that.fromUTCtoLocal(latestMessage.creationTime)
                        });
                    }
                    that.buildLatestMessageMap(index + 1, chats, chatRecentMessages, latestMessageMap, future);
                });
            }
        },
        reduceGetAllMessages: function(chatController, messages, startIndex, future) {
            let that = this;
            chatController.getMessages(startIndex, startIndex + 1000).thenApply(result => {
                let newMessages = result.toArray();
                if (newMessages.length < 1000) {
                    future.complete({messages: messages.concat(newMessages), startIndex: startIndex + newMessages.length});
                } else {
                    that.reduceGetAllMessages(chatController, messages.concat(newMessages),
                        startIndex + newMessages.length, future);
                }
            }).exceptionally(err => {
                console.log(err);
                future.complete({messages: messages, startIndex: startIndex});
            });
        },
        getAllMessages: function(chatController, startIndex) {
            let future = peergos.shared.util.Futures.incomplete();
            this.reduceGetAllMessages(chatController, [], startIndex, future);
            return future;
        },
        generateMessageHashes: function(chatController, messages) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let messagePairs = [];
            if (messages.length == 0) {
                future.complete(messagePairs);
            } else {
                messages.forEach(message => {
                    chatController.generateHash(message).thenApply(messageRef => {
                        messagePairs.push({message: message, messageRef: messageRef});
                        if(messagePairs.length == messages.length) {
                            future.complete(messagePairs);
                        }
                    });
                });
            }
            return future;
        },
        replaceOwnerInPath: function(owner, path) {
            let pathWithoutLeadingSlash = path.startsWith("/") ? path.substring(1) : path;
            let pathWithoutOwner = pathWithoutLeadingSlash.substring(pathWithoutLeadingSlash.indexOf("/"));
            return owner + pathWithoutOwner;
        },
        extractOwnerFromPath: function(path) {
            let pathWithoutLeadingSlash = path.startsWith("/") ? path.substring(1) : path;
            return pathWithoutLeadingSlash.substring(0, pathWithoutLeadingSlash.indexOf("/"));
        },
        loadAttachments: function(refs) {
            let future = peergos.shared.util.Futures.incomplete();
            let that = this;
            let attachmentMap = new Map();
            if (refs.length == 0) {
                future.complete(attachmentMap);
            } else {
                var loadedCount = 0;
                refs.forEach(ref => {
                    //Load media from local mirror
                    let mirrorPath = that.replaceOwnerInPath(that.context.username, ref.path);
                    that.context.getByPath(mirrorPath).thenApply(function(optFile) {
                        let mediaFile = optFile.ref;
                        if (mediaFile != null) {
                            let fullPath = ref.path.startsWith("/") ? ref.path : "/" + ref.path;
                            attachmentMap.set(fullPath, {fileRef: JSON.parse(ref.toJson()), mimeType: mediaFile.getFileProperties().mimeType, fileType: mediaFile.getFileProperties().getType(),
                                thumbnail: mediaFile.getFileProperties().thumbnail.ref != null ? mediaFile.getBase64Thumbnail() : ""});
                            loadedCount++;
                            if (loadedCount == refs.length) {
                                future.complete(attachmentMap);
                            }
                        } else {
                            //fallback to attachment sender
                            let owner = that.extractOwnerFromPath(ref.path);
                            that.context.network.getFile(ref.cap, owner).thenApply(optFile => {
                               let mediaFile = optFile.ref;
                               if (mediaFile != null) {
                                   let fullPath = ref.path.startsWith("/") ? ref.path : "/" + ref.path;
                                   attachmentMap.set(fullPath, {fileRef: JSON.parse(ref.toJson()), mimeType: mediaFile.getFileProperties().mimeType, fileType: mediaFile.getFileProperties().getType(),
                                        thumbnail: mediaFile.getFileProperties().thumbnail.ref != null ? mediaFile.getBase64Thumbnail() : ""});
                               }
                               loadedCount++;
                               if (loadedCount == refs.length) {
                                   future.complete(attachmentMap);
                               }
                            }).exceptionally(err => {
                                console.log(err);
                                loadedCount++;
                                if (loadedCount == refs.length) {
                                    future.complete(attachmentMap);
                                }
                            });
                        }
                    }).exceptionally(err => {
                        console.log(err);
                        loadedCount++;
                        if (loadedCount == refs.length) {
                            future.complete(attachmentMap);
                        }
                    });
                });
            }
            return future;
        },
        showToastError: function(msg) {
            console.log(msg);
            this.$toast.error(msg, {timeout:false});
            this.showSpinner = false;
        },
        updatedGroupMembership: function(chatId, updatedGroupTitle, updatedMembers, updatedAdmins) {
            this.showGroupMembership = false;
            let that = this;
            Vue.nextTick(function() {
                if (chatId.length == 0) {
                    that.createNewChatGroup(chatId, updatedGroupTitle, updatedMembers, updatedAdmins);
                }else {
                    that.updateExistingChatGroup(chatId, updatedGroupTitle, updatedMembers, updatedAdmins);
                }
            });
        },
        createNewChatGroup: function(chatId, updatedGroupTitle, updatedMembers, updatedAdmins) {
            let that = this;
            if (updatedMembers.length == 0 || updatedAdmins.length == 0) {
                that.buildResponse(this.chatResponseHeader, null, that.ACTION_FAILED);
                return;
            }
            this.spinner(true);
            this.spinnerMessage = "Creating new chat";
            this.messenger.createAppChat(this.currentAppName == "chat" ? null : this.currentAppName).thenApply(function(controller){
                let chatId = controller.chatUuid;
                let addedAdmins = that.extractAddedParticipants(controller.getAdmins().toArray(), updatedAdmins);
                let addedMembers = that.extractAddedParticipants(controller.getMemberNames().toArray(), updatedMembers);
                that.changeTitle(chatId, updatedGroupTitle).thenApply(function(res1) {
                    that.inviteNewMembers(chatId, addedMembers).thenApply(function(res2) {
                        that.inviteNewAdmins(chatId, addedAdmins).thenApply(function(res3) {
                            let chatItem = {chatId: chatId, title: updatedGroupTitle, members: updatedMembers.slice(), admins: updatedAdmins.slice()};
                            let encoder = new TextEncoder();
                            let data = encoder.encode(JSON.stringify(chatItem));
                            Vue.nextTick(function() {
                                that.spinner(false);
                                Vue.nextTick(function() {
                                    that.buildResponse(that.chatResponseHeader, data, that.CREATE_SUCCESS);
                                });
                            });
                        });
                    });
                });
            }).exceptionally(err => {
                that.showToastError("Unable to create chat");
                console.log(err);
                Vue.nextTick(function() {
                    that.spinner(false);
                    Vue.nextTick(function() {
                        that.buildResponse(that.chatResponseHeader, null, that.ACTION_FAILED);
                    });
                });
            });
        },
        updateExistingChatGroup: function(chatId, updatedGroupTitle, updatedMembers, updatedAdmins) {
            let that = this;
            this.spinner(true);
            let existingChatItem = {chatId: chatId};
            that.messenger.getChat(chatId).thenApply(function(controller) {
                let existingMembers = controller.getMemberNames().toArray();
                let added = that.extractAddedParticipants(existingMembers, updatedMembers);
                let removed = that.extractRemovedParticipants(existingMembers, updatedMembers);
                let existingAdmins = controller.getAdmins().toArray();
                let addedAdmins = that.extractAddedParticipants(existingAdmins, updatedAdmins);
                let removedAdmins = that.extractRemovedParticipants(existingAdmins, updatedAdmins);
                var proposedAdminsLength = existingAdmins.length - removedAdmins.length + addedAdmins.length;
                if (proposedAdminsLength < 1) {
                    that.buildResponse(that.chatResponseHeader, null, that.ACTION_FAILED);
                }
                if (existingAdmins.filter(v => v == that.context.username).length == -1) {
                    if (removedAdmins.length > 0 || addedAdmins.length > 0) {
                        that.buildResponse(that.chatResponseHeader, null, that.ACTION_FAILED);
                    }
                }
                that.changeChatTitleIfNecessary(controller, existingChatItem, updatedGroupTitle).thenApply(function(res) {
                    that.inviteNewAdmins(chatId, addedAdmins).thenApply(function(res3) {
                       that.removeAdmins(chatId, removedAdmins).thenApply(function(res4) {
                            that.inviteNewMembers(chatId, added).thenApply(function(res1) {
                                that.removeMembers(chatId, removed).thenApply(function(res2) {
                                    Vue.nextTick(function() {
                                        that.spinner(false);
                                        Vue.nextTick(function() {
                                            that.buildResponse(that.chatResponseHeader, null, that.UPDATE_SUCCESS);
                                        });
                                    });
                               });
                            });
                        });
                    });
                });
            });
        },
        changeChatTitleIfNecessary: function(controller, existingChatItem, updatedGroupTitle) {
            let future = peergos.shared.util.Futures.incomplete();
            if (controller.getTitle() != updatedGroupTitle) {
                existingChatItem.title = updatedGroupTitle;
                this.changeTitle(existingChatItem.chatId, updatedGroupTitle).thenApply(function(res) {
                    future.complete(res);
                });
            } else {
                    future.complete(true);
            }
            return future;
        },
        diff: function(origList, updatedList) {
            let notFoundList = [];
            updatedList.forEach(member => {
                let index = origList.findIndex(v => v === member);
                if (index == -1) {
                    notFoundList.push(member);
                }
            });
            return notFoundList;
        },
        extractAddedParticipants: function(origParticipants, updatedParticipants) {
            return this.diff(origParticipants, updatedParticipants);
        },
        extractRemovedParticipants: function(origParticipants, updatedParticipants) {
            return this.diff(updatedParticipants, origParticipants);
        },
        changeTitle: function(chatId, text) {
            let future = peergos.shared.util.Futures.incomplete();
            let that = this;
            this.messenger.getChat(chatId).thenApply(function(controller) {
                that.messenger.setGroupProperty(controller, "title", text).thenApply(function(updatedController) {
                    future.complete(true);
                }).exceptionally(function(throwable) {
                    console.log(throwable);
                    that.showToastError("Unable to change Title");
                    future.complete(false);
                });
            });
            return future;
        },
        inviteNewMembers: function(chatId, updatedMembers) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            if (updatedMembers.length == 0) {
                future.complete(true);
            } else {
                let usernames = peergos.client.JsUtil.asList(updatedMembers);
                this.spinnerMessage = "adding participant(s) to chat";
                this.messenger.getChat(chatId).thenApply(function(controller) {
                    that.getPublicKeyHashes(updatedMembers).thenApply(pkhList => {
                        that.messenger.invite(controller, usernames, pkhList).thenApply(updatedController => {
                            that.spinnerMessage = "";
                            future.complete(true);
                        }).exceptionally(err => {
                            that.spinnerMessage = "";
                            that.showToastError("Unable to add members to chat");
                            console.log(err);
                            future.complete(false);
                        });
                    });
                });
            }
            return future;
        },
        getPublicKeyHashes: function(usernames) {
            let that = this;
            const usernameToPKH = new Map();
            let future = peergos.shared.util.Futures.incomplete();
            usernames.forEach(username => {
                that.context.getPublicKeys(username).thenApply(pkOpt => {
                    usernameToPKH.set(username, pkOpt.get().left);
                    if(usernameToPKH.size == usernames.length) {
                        let pkhs = [];
                        usernames.forEach(user => {
                            pkhs.push(usernameToPKH.get(user));
                        });
                        future.complete(peergos.client.JsUtil.asList(pkhs));
                    }
                });
            });
            return future;
        },
        reduceAddingAdmins: function(chatId, adminsToAdd, index, future) {
            let that = this;
            if (index == adminsToAdd.length) {
                future.complete(true);
            } else {
                let username = adminsToAdd[index];
                this.spinnerMessage = "adding " + username + " as chat admin";
                this.messenger.getChat(chatId).thenApply(function(controller) {
                    controller.addAdmin(username).thenApply(updatedController => {
                        that.spinnerMessage = "";
                        that.reduceAddingAdmins(chatId, adminsToAdd, ++index, future);
                    }).exceptionally(function(throwable) {
                        that.spinnerMessage = "";
                        console.log(throwable);
                        that.showToastError("Unable to add " + username + " as chat admin");
                        that.reduceAddingAdmins(chatId, adminsToAdd, ++index, future);
                    });
                });
            }
            return future;
        },
        inviteNewAdmins: function(chatId, adminsToAdd) {
            let future = peergos.shared.util.Futures.incomplete();
            this.reduceAddingAdmins(chatId, adminsToAdd, 0, future);
            return future;
        },
        reduceRemovingInvitations: function(chatId, membersToRemove, index, future) {
            let that = this;
            if (index == membersToRemove.length) {
                future.complete(true);
            } else {
                let username = membersToRemove[index];
                this.spinnerMessage = "removing " + username + " from chat";
                this.messenger.getChat(chatId).thenApply(function(controller) {
                    that.messenger.removeMember(controller, username).thenApply(updatedController => {
                        that.spinnerMessage = "";
                        that.reduceRemovingInvitations(chatId, membersToRemove, ++index, future);
                    }).exceptionally(function(throwable) {
                        that.spinnerMessage = "";
                        console.log(throwable);
                        that.showToastError("Unable to remove " + username + " from chat");
                        that.reduceRemovingInvitations(chatId, membersToRemove, ++index, future);
                    });
                });
            }
            return future;
        },
        removeMembers: function(chatId, membersToRemove) {
            let future = peergos.shared.util.Futures.incomplete();
            this.reduceRemovingInvitations(chatId, membersToRemove, 0, future);
            return future;
        },
        reduceRemovingAdmins: function(chatId, adminsToRemove, index, future) {
            let that = this;
            if (index == adminsToRemove.length) {
                future.complete(true);
            } else {
                let username = adminsToRemove[index];
                this.spinnerMessage = "removing " + username + " as chat admin";
                this.messenger.getChat(chatId).thenApply(function(controller) {
                    controller.removeAdmin(username).thenApply(updatedController => {
                        that.spinnerMessage = "";
                        that.reduceRemovingAdmins(chatId, adminsToRemove, ++index, future);
                    }).exceptionally(function(throwable) {
                        that.spinnerMessage = "";
                        console.log(throwable);
                        that.showToastError("Unable to remove " + username + " as chat admin");
                        that.reduceRemovingAdmins(chatId, adminsToRemove, ++index, future);
                    });
                });
            }
            return future;
        },
        removeAdmins: function(chatId, adminsToRemove) {
            let future = peergos.shared.util.Futures.incomplete();
            this.reduceRemovingAdmins(chatId, adminsToRemove, 0, future);
            return future;
        },
        convertToPath: function(dir) {
            let dirWithoutLeadingSlash = dir.startsWith("/") ? dir.substring(1) : dir;
            return peergos.client.PathUtils.directoryToPath(dirWithoutLeadingSlash.split('/'));
        },
        reduceMovingEmailsToInboxFolder: function(emailsToRead, index, future) {
            let that = this;
            if (index >= emailsToRead.length) {
                future.complete(true);
            } else {
                that.mailboxClient.moveToPrivateInbox(emailsToRead[index]).thenApply(res => {
                    that.reduceMovingEmailsToInboxFolder(emailsToRead, ++index, future);
                });
            }
        },
        requestLoadFolder: function(folderName, filterStarredEmails, callback) {
            let that = this;
            this.spinner(true);
            let fullFolderPath = this.mailboxFolderPrefix + '/' + folderName;
            let directoryPath = peergos.client.PathUtils.directoryToPath(fullFolderPath.split('/'));
            that.sandboxedApp.dirInternal(directoryPath, this.context.username).thenApply(filenames => {
                that.loadEmails(fullFolderPath, filenames.toArray()).thenApply(results => {
                    that.spinner(false);
                    callback({data: results, folderName: folderName, filterStarredEmails: filterStarredEmails});
                });
            });
        },
        loadEmails: function(directory, filenames) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            that.reduceLoadingEmails(directory, filenames, [], future);
            return future;
        },
        reduceLoadingEmails: function(directory, filenames, accumulator, future) {
            let that = this;
            let filename = filenames.pop();
            if (filename == null) {
                let sorted = accumulator.sort(function (a, b) {
                        let aDate = new Date(a.timestamp);
                        let bDate = new Date(b.timestamp);
                        return bDate - aDate;
                    });
                future.complete(sorted);
            } else {
                let filePath = peergos.client.PathUtils.toPath(directory.split('/'), filename);
                that.sandboxedApp.readInternal(filePath, this.context.username).thenApply(data => {
                    let emailJava = peergos.shared.util.Serialize.parse(data, c => peergos.shared.email.EmailMessage.fromCbor(c));
                    that.messageToTimestamp.set(emailJava.id, emailJava.created);
                    let emailJS =
                    {   id: emailJava.id, msgId: emailJava.msgId, from: emailJava.from, subject: emailJava.subject
                        , timestamp: emailJava.created.toString()
                        , to: that.toJsList(emailJava.to)
                        , cc: that.toJsList(emailJava.cc)
                        , bcc: that.toJsList(emailJava.bcc)
                        , content: emailJava.content
                        , unread: emailJava.unread, star: emailJava.star, selected: false
                        , attachments: that.toJsAttachmentList(emailJava.attachments)
                        , icalEvent: emailJava.icalEvent
                    };

                    accumulator.push(emailJS);
                    that.reduceLoadingEmails(directory, filenames, accumulator, future);
                });
            }
        },
        toJsAttachmentList: function(javaList) {
            let javaArray = javaList.toArray([]);
            let jsAttachmentList = [];
            for(var i = 0; i < javaArray.length; i++) {
                let item = javaArray[i];
                let attachment = {filename: item.filename, size: item.size, type: item.type, uuid: item.uuid};
                jsAttachmentList.push(attachment);
            }
            return jsAttachmentList;
        },
        toJsList: function(javaList) {
            let javaArray = javaList.toArray([]);
            let jsList = [];
            for(var i = 0; i < javaArray.length; i++) {
                jsList.push(javaArray[i]);
            }
            return jsList;
        },
        reduceMovingEmailsToSentFolder: function(emailsToRead, index, future) {
            let that = this;
            if (index >= emailsToRead.length) {
                future.complete(true);
            } else {
                that.mailboxClient.moveToPrivateSent(emailsToRead[index]).thenApply(res => {
                    that.reduceMovingEmailsToSentFolder(emailsToRead, ++index, future);
                });
            }
        },
        requestUpdateEmail: function(data, folder, callback) {
            const that = this;
            that.spinner(true);
            let bytes = that.buildEmailBytes(data);
            that.saveEmail(folder, bytes, data.id).thenApply(function(res) {
                that.spinner(false);
                callback();
            }).exceptionally(function(throwable) {
                that.showError("Unable to save email");
                console.log(throwable.getMessage());
            });
        },
        saveEmail: function(folder, bytes, id) {
            let fullFolderPath = this.mailboxFolderPrefix + "/" + folder;
            let folderDirs = fullFolderPath.split('/');
            let filePath = peergos.client.PathUtils.directoryToPath(folderDirs.concat(
                    [id + this.EMAIL_FILE_EXTENSION]));
            return this.sandboxedApp.writeInternal(filePath, bytes);
        },
        buildEmailBytes: function(data) {
            let email = this.buildEmail(data, true);
            return email.toBytes();
        },

        buildEmail: function(data, recurse) {
            let that = this;
            let allAttachments = [];
            data.attachments.forEach(item => {
                let attachment = new peergos.shared.email.Attachment(item.filename, item.size,
                    item.type, item.uuid);
                allAttachments.push(attachment);
            });
            let attachments = peergos.client.JsUtil.asList(allAttachments);
            let to = peergos.client.JsUtil.asList(data.to);
            let cc = peergos.client.JsUtil.asList(data.cc);
            let bcc = peergos.client.JsUtil.asList(data.bcc);

            let createdTimestamp = this.messageToTimestamp.get(data.id);

            let replyingToEmail = data.replyingToEmail == null || !recurse ? peergos.client.JsUtil.emptyOptional()
                : peergos.client.JsUtil.optionalOf(this.buildEmail(data.replyingToEmail, false));

            let forwardingToEmail = data.forwardingToEmail == null || !recurse ? peergos.client.JsUtil.emptyOptional()
                : peergos.client.JsUtil.optionalOf(this.buildEmail(data.forwardingToEmail, false));

            let sendError = peergos.client.JsUtil.emptyOptional();
            let emailJava = new peergos.shared.email.EmailMessage(data.id, data.msgId, data.from, data.subject,
                 createdTimestamp, to, cc, bcc,
                 data.content, data.unread, data.star, attachments, data.icalEvent,
                 replyingToEmail, forwardingToEmail, sendError);
            return emailJava;
        },
        createUUID: function() {
            let uuid = ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
                (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
            ).split("-").join("");
            return uuid;
        },
        requestImportCalendarEvent: function(bytes, callback) {
            //fixme. creating a temp file is not ideal
            let path = 'default/attachments';
            let filename =  this.createUUID() + '.ics';
            let fullPath = path + '/' + filename;
            let icalFilePath = peergos.client.PathUtils.directoryToPath(fullPath.split('/'));
            let that = this;
            this.spinner(true);
            this.sandboxedApp.writeInternal(icalFilePath, bytes).thenApply(done => {
                that.spinner(false);
                callback();
                setTimeout(() => {
                    that.navigateTo = { app: "Calendar", navigationPath: that.context.username + '/.apps/' + that.currentAppName + '/data/' + path
                        , navigationFilename: filename};
                    that.closeSandbox();
                });
            });
        },
        requestMoveEmail: function(data, fromFolder, toFolder, callback) {
            const that = this;
            this.spinner(true);
            that.moveEmail(data, fromFolder, toFolder).thenApply(function(done) {
                that.spinner(false);
                callback(done);
            });
        },
        moveEmail: function(data, fromFolder, toFolder) {
            const that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let bytes = that.buildEmailBytes(data);
            that.saveEmail(toFolder, bytes, data.id).thenApply(function(res2) {
                that.removeEmail(fromFolder, data, false).thenApply(function(res) {
                    future.complete(true);
                }).exceptionally(function(throwable) {
                    that.showError("Unable to delete moved email from source folder");
                    console.log(throwable.getMessage());
                    future.complete(false);
                });
            }).exceptionally(function(throwable) {
                that.showError("Unable to move email");
                console.log(throwable.getMessage());
                future.complete(false);
            });
            return future;
        },
        reduceDeletingAttachments: function(attachments, index, future) {
            let that = this;
            if (index >= attachments.length) {
                future.complete(true);
            } else {
                let attachment = attachments[index];
                let fullFolderPath = this.mailboxFolderPrefix + '/attachments';
                let filePath = peergos.client.PathUtils.toPath(fullFolderPath.split('/'), attachment.uuid);
                this.sandboxedApp.deleteInternal(filePath).thenApply( res => {
                    that.reduceDeletingAttachments(attachments, ++index, future);
                }).exceptionally(function(throwable) {
                    if (throwable.toString() == "java.util.NoSuchElementException") {
                        that.reduceDeletingAttachments(attachments, ++index, future);
                    } else {
                        that.showError("Unable to delete attachment:" + attachment.filename);
                        console.log(throwable.getMessage());
                        future.complete(false);
                    }
                });
            }
        },
        removeEmail: function(folder, data, deleteAttachment) {
            let that = this;
            let filename = data.id + this.EMAIL_FILE_EXTENSION;
            let fullFolderPath = this.mailboxFolderPrefix + '/' + folder;
            let filePath = peergos.client.PathUtils.toPath(fullFolderPath.split('/'), filename);
            let future = peergos.shared.util.Futures.incomplete();
            this.sandboxedApp.deleteInternal(filePath).thenApply( res => {
                if (deleteAttachment) {
                    let future2 = peergos.shared.util.Futures.incomplete();
                    that.reduceDeletingAttachments(data.attachments, 0, future2);
                    future2.thenApply(done => {
                        future.complete(true);
                    }).exceptionally(function(throwable) {
                        future.complete(false);
                    });
                } else {
                    future.complete(true);
                }
            }).exceptionally(function(throwable) {
                that.showError("Unable to delete email");
                console.log(throwable.getMessage());
                future.complete(false);
            });
            return future;
        },
        requestMoveEmails: function(data, fromFolder, toFolder, callback) {
            let that = this;
            this.spinner(true);
            let future = peergos.shared.util.Futures.incomplete();
            that.reduceMovingEmails(data, fromFolder, toFolder, 0, future);
            future.thenApply(done => {
                that.spinner(false);
                callback(done);
            });
        },
        reduceMovingEmails: function(data, fromFolder, toFolder, index, future) {
            let that = this;
            if (index >= data.length) {
                future.complete(true);
            } else {
                let item = data[index];
                this.moveEmail(item, fromFolder, toFolder).thenApply(res => {
                    that.reduceMovingEmails(data, fromFolder, toFolder, ++index, future);
                });
            }
        },
        reduceDeletingEmails: function(data, folder, index, future) {
            let that = this;
            if (index >= data.length) {
                future.complete(true);
            } else {
                let item = data[index];
                this.removeEmail(folder, item, true).thenApply(function(res) {
                    that.reduceDeletingEmails(data, folder, ++index, future);
                });
            }
        },
        requestDeleteEmails: function(data, folder, callback) {
            let that = this;
            this.spinner(true);
            let future = peergos.shared.util.Futures.incomplete();
            that.reduceDeletingEmails(data, folder, 0, future);
            future.thenApply(done => {
                that.spinner(false);
                callback(done);
            });
        },
        requestDeleteEmail: function(data, folder, callback) {
            const that = this;
            this.spinner(true);
            this.removeEmail(folder, data, true).thenApply(function(done) {
                that.spinner(false);
                callback(done);
            });
        },
        requestNewMailboxFolder: function(callback) {
            let that = this;
            this.prompt_placeholder = 'New Folder name';
            this.prompt_value = "";
            this.prompt_message = 'Enter a new folder name';
            this.prompt_max_input_size = 10;
            this.prompt_consumer_func = function(prompt_result) {
                if (prompt_result === null) {
                    callback(null);
                    return;
                }
                let newName = prompt_result.trim();
                if (newName === '') {
                    callback(null);
                    return;
                }
                if (newName === '.' || newName === '..') {
                    callback(null);
                    return;
                }
                if (!newName.match(/^[a-z\d\-_\s]+$/i)) {
                    that.showError("Invalid folder name. Use only alphanumeric characters plus space, dash and underscore");
                    callback(null);
                    return;
                }
                setTimeout(function(){
                    //make sure names are unique
                    if (that.isInbuiltFolderName(newName)) {
                        that.showError("Folder already exists!");
                        callback(null);
                        return;
                    }
                    for (var i=0;i < that.mailboxClientProperties.userFolders.length; i++) {
                        let folder = that.mailboxClientProperties.userFolders[i];
                        if (folder.name == newName) {
                            that.showError("Folder already exists!");
                            callback(null);
                            return;
                        }
                    }
                    that.spinner(true);
                    let dirName = that.generateDirectoryName();
                    let newFolder = {name: newName, path: dirName};
                    that.mailboxClientProperties.userFolders.push(newFolder);
                    that.updatePropertiesFile(that.mailboxClientProperties).thenApply(res => {
                        that.spinner(false);
                        callback(newFolder);
                    });
                });
            };
            this.showPrompt =  true;
        },
        isInbuiltFolderName: function(folderName) {
            let specialFolders = ['inbox','sent','trash','spam','archive','pending'];
            return specialFolders.findIndex(v => v === folderName.toLowerCase()) > -1;
        },
        generateDirectoryName: function() {
          return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
          ).substring(0, 12);
        },
        updatePropertiesFile: function(json) {
            let filePath = peergos.client.PathUtils.directoryToPath([this.mailboxFolderPrefix, this.MAILBOX_CONFIG_FILENAME]);
            let encoder = new TextEncoder();
            let uint8Array = encoder.encode(JSON.stringify(json));
            let bytes = convertToByteArray(uint8Array);
            return this.sandboxedApp.writeInternal(filePath, bytes);
        },
        findFolderDirectory: function(folderName) {
            for (var i=0; i < this.mailboxClientProperties.userFolders.length; i++) {
                let folder = this.mailboxClientProperties.userFolders[i];
                if (folder.name == folderName) {
                    return folder.path;
                }
            }
            throw new Error("Folder not found!");
        },
        requestDeleteFolder: function(folderName, callback) {
            let that = this;
            if (this.isInbuiltFolderName(folderName)) {
                callback(false);
            }
            this.confirmDeleteFolder(folderName,
                () => {
                    setTimeout(function(){
                        that.showConfirm = false;
                        that.spinner(true);
                        let dirPath = peergos.client.PathUtils.directoryToPath(
                            [that.mailboxFolderPrefix, that.findFolderDirectory(folderName)]);
                        that.sandboxedApp.deleteInternal(dirPath).thenApply(function(res) {
                            that.postDeleteFolder(folderName, callback);
                        }).exceptionally(function(throwable) {
                            if (throwable.toString() == "java.util.NoSuchElementException") { //Because folder is empty
                                that.postDeleteFolder(folderName, callback);
                            } else {
                                that.spinner(false);
                                that.showError("Unable to delete Folder");
                                console.log(throwable.getMessage());
                                callback(false);
                            }
                        });
                    });
                },
                () => {
                    that.showConfirm = false;
                    callback(false);
                }
            );
        },
        postDeleteFolder: function(folderName, callback) {
            let that = this;
            this.mailboxClientProperties.userFolders.splice(this.mailboxClientProperties.userFolders.findIndex(v => v.name === folderName), 1);
            this.updatePropertiesFile(this.mailboxClientProperties).thenApply(res => {
                that.spinner(false);
                callback(res);
            });
        },
        confirmDeleteFolder: function(folderName, deleteFunction, cancelFunction) {
            this.confirm_message='Are you sure you want to delete folder: ' + folderName + " ?";
            this.confirm_body='';
            this.confirm_consumer_cancel_func = cancelFunction;
            this.confirm_consumer_func = deleteFunction;
            this.showConfirm = true;
        },
        requestUploadAttachment: function(data, callback) {
            let that = this;
            this.spinner(true);
            that.uploadAttachment(data).thenApply(resp => {
                that.spinner(false);
                callback(resp);
            });
        },
        requestSendEmail: function(data, callback) {
            let that = this;
            this.spinner(true);
            //Note: msgId, timestamp and from email address are replaced serverside for security
            data.id = this.createUUID();
            data.msgId = this.createUUID();
            data.from = "";
            let timestamp = peergos.client.JsUtil.now();
            this.messageToTimestamp.set(data.id, timestamp);
            data.timestamp = timestamp.toString();
            this.uploadForwardedAttachments(data).thenApply(forwardedAttachments => {
                if (!forwardedAttachments) {
                    callback(false);
                } else {
                    let javaEmail = that.buildEmail(data, true);
                    that.mailboxClient.send(javaEmail).thenApply(copiedToOutbox => {
                        that.spinner(false);
                        callback(copiedToOutbox);
                    });
                }
            });
        },
        uploadForwardedAttachments: function(data) {
            let future = peergos.shared.util.Futures.incomplete();
            if (data.forwardingToEmail == null) {
                future.complete(true);
            } else {
                this.reduceMovingForwardedAttachments(data.forwardingToEmail.attachments, 0, future);
            }
            return future;
        },
        reduceMovingForwardedAttachments: function(attachments, index, future) {
            let that = this;
            if (index >= attachments.length) {
                future.complete(true);
            } else {
                let attachment = attachments[index];
                let srcDirStr = this.mailboxFolderPrefix + '/attachments/' + attachment.uuid;
                let srcFilePath = peergos.client.PathUtils.directoryToPath(srcDirStr.split('/'));
                this.sandboxedApp.readInternal(srcFilePath).thenApply(bytes => {
                    let destDirStr = this.mailboxFolderPrefix + '/pending/outbox/attachments/' + attachment.uuid;
                    let destFilePath = peergos.client.PathUtils.directoryToPath(destDirStr.split('/'));
                    that.sandboxedApp.writeInternal(destFilePath, bytes).thenApply(res => {
                        that.reduceMovingForwardedAttachments(attachments, ++index, future);
                    }).exceptionally(function(throwable) {
                        that.showError("Unable to move attachment to pending outbox:" + destFilePath);
                        console.log(throwable.getMessage());
                        future.complete(false);
                    });
                }).exceptionally(function(throwable) {
                    that.showError("Unable to read existing attachment:" + srcFilePath);
                    console.log(throwable.getMessage());
                    future.complete(false);
                });
            }
        },
        checkAvailableSpace: function(fileSize) {
            return Number(this.quotaBytes.toString()) - (Number(this.usageBytes.toString()) + fileSize);
        },
        uploadAttachment: function(data) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let totalSize = data.byteLength;
            let spaceAfterOperation = this.checkAvailableSpace(totalSize);
            if (spaceAfterOperation < 0) {
                that.showError("Attachment exceeds available Space",
                    "Please free up " + this.convertBytesToHumanReadable('' + -spaceAfterOperation) + " and try again");
                future.complete(null);
            } else {
                this.mailboxClient.uploadAttachment(data).thenApply(function(uuid) {
                    future.complete(uuid);
                }).exceptionally(err => {
                    that.showError("unable to upload attachment");
                    console.log(err);
                    future.complete(null);
                });
            }
            return future;
        },
        requestImportCalendarAttachment: function(attachment, callback) {
            let path = this.context.username + '/.apps/' + this.currentAppName + '/data/default/attachments';
            callback();
            let that = this;
            setTimeout(() => {
                that.navigateTo = { app: "Calendar", navigationPath: path, navigationFilename: attachment.uuid};
                that.closeSandbox();
            });
        },
        retrieveAttachment: function(uuid) {
            let path = this.context.username + '/.apps/' + this.currentAppName + '/data/default/attachments/' + uuid;
            return this.context.getByPath(path);
        },
        requestDownloadAttachment: function(attachment, callback) {
            let that = this;
            this.retrieveAttachment(attachment.uuid).thenApply(function(optFile) {
                callback(optFile.ref != null);
                that.downloadFile(optFile.ref, attachment.filename);
                //that.showError("Unable to find email attachment:" + attachment.filename);
            });
        },
        getStringRequestParam: function(params, name) {
            var val = params.get(name);
            if (val.startsWith('"') && val.endsWith('"')) {
                val = val.substring(1, val.length -1);
            }
            return val;
        },
        // need to add error handling, null params, invalid chars etc... look at chat api handling for checks
        handleMailboxRequest: function(headerFunc, path, apiMethod, data, hasFormData, params) {
            let that = this;
            let encoder = new TextEncoder();
            if(apiMethod == 'GET') {
                let filterStarredEmailsParam = params.get('filterStarredEmails');
                let filterStarredEmails = filterStarredEmailsParam != null && filterStarredEmailsParam.toLowerCase() == "true";
                if (path.length == 0) {
                    let userFolders = [];
                    for(var i=0;i < that.mailboxClientProperties.userFolders.length;i++) {
                        let folder = that.mailboxClientProperties.userFolders[i];
                        userFolders.push({name: folder.name, path: folder.path});
                    }
                    let data = encoder.encode(JSON.stringify({userFolders: userFolders, mailboxAddress: that.clientMailboxAddress}));
                    that.buildResponse(headerFunc, data, that.GET_SUCCESS);
                } else if (path === "inbox") {
                    that.spinner(true);
                    that.mailboxClient.getNewIncoming().thenApply(emails => {
                        let emailsToRead = emails.toArray([]);
                        let future = peergos.shared.util.Futures.incomplete();
                        that.reduceMovingEmailsToInboxFolder(emailsToRead, 0, future);
                        future.thenApply(done => {
                            that.requestLoadFolder('inbox', filterStarredEmails, (obj) => {
                                that.spinner(false);
                                let data = encoder.encode(JSON.stringify(obj));
                                that.buildResponse(headerFunc, data, that.GET_SUCCESS);
                            });
                        });
                    });
                } else if (path === "sent") {
                    that.spinner(true);
                    that.mailboxClient.getNewSent().thenApply(emails => {
                        let emailsToRead = emails.toArray([]);
                        let future = peergos.shared.util.Futures.incomplete();
                        that.reduceMovingEmailsToSentFolder(emailsToRead, 0, future);
                        future.thenApply(done => {
                            that.requestLoadFolder('sent', filterStarredEmails, (obj) => {
                                that.spinner(false);
                                let data = encoder.encode(JSON.stringify(obj));
                                that.buildResponse(headerFunc, data, that.GET_SUCCESS);
                            });
                        });
                    });
                } else {
                    that.spinner(true);
                    that.requestLoadFolder(path, filterStarredEmails, (obj) => {
                        that.spinner(false);
                        let data = encoder.encode(JSON.stringify(obj));
                        that.buildResponse(headerFunc, data, that.GET_SUCCESS);
                    });
                }
            } else if(apiMethod == 'DELETE') {
                let folderName = path;
                that.requestDeleteFolder(folderName, (result) => {
                    if (result) {
                        that.buildResponse(headerFunc, null, that.DELETE_SUCCESS);
                    } else {
                        that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                    }
                });
            } else if(apiMethod == 'POST') { //REST be damned! RPC rules...
                if (path === "move") {
                    let from = that.getStringRequestParam(params, 'from');
                    let to = that.getStringRequestParam(params, 'to');
                    let emailObj = JSON.parse(new TextDecoder().decode(data));
                    if (!(emailObj.constructor === Array)) {
                        that.requestMoveEmail(emailObj, from, to, (result) => {
                            if (result) {
                                that.buildResponse(headerFunc, null, that.UPDATE_SUCCESS);
                            } else {
                                that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                            }
                        });
                    } else {
                        that.requestMoveEmails(emailObj, from, to, (result) => {
                            if (result) {
                                that.buildResponse(headerFunc, null, that.UPDATE_SUCCESS);
                            } else {
                                that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                            }
                        });
                    }
                } else if(path === "delete") {
                    let folder = that.getStringRequestParam(params, 'folder');
                    let emailObj = JSON.parse(new TextDecoder().decode(data));
                    if (!(emailObj.constructor === Array)) {
                        that.requestDeleteEmail(emailObj, folder, (result) => {
                            if (result) {
                                that.buildResponse(headerFunc, null, that.UPDATE_SUCCESS);
                            } else {
                                that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                            }
                        });
                    } else {
                        that.requestDeleteEmails(emailObj, folder, (result) => {
                            if (result) {
                                that.buildResponse(headerFunc, null, that.UPDATE_SUCCESS);
                            } else {
                                that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                            }
                        });
                    }
                } else if (path === "download") {
                    let attachment = JSON.parse(new TextDecoder().decode(data));
                    that.requestDownloadAttachment(attachment, (result) => {
                        if(result) {
                            that.buildResponse(headerFunc, null, that.GET_SUCCESS);
                        } else {
                            that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                        }
                    });
                }
            } else if(apiMethod == 'PUT') {
                if (path === "attachment") {
                    let bytes = convertToByteArray(new Uint8Array(data));
                    that.requestUploadAttachment(bytes, (resp) => {
                        if (resp != null) {
                            let encoder = new TextEncoder();
                            let json = encoder.encode(JSON.stringify({uuid: resp}));
                            that.buildResponse(headerFunc, json, that.CREATE_SUCCESS);
                        } else {
                            that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                        }
                    });
                } else if (path === "post") {
                    let email = JSON.parse(new TextDecoder().decode(data));
                    that.requestSendEmail(email, (result) => {
                        if (result) {
                            that.buildResponse(headerFunc, null, that.CREATE_SUCCESS);
                        } else {
                            that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                        }
                    });
                } else if (path === "event-inline") {
                    let bytes = convertToByteArray(new Uint8Array(data));
                    that.requestImportCalendarEvent(bytes, () => {
                        that.buildResponse(headerFunc, null, that.CREATE_SUCCESS);
                    });
                } else if (path === "event") {
                    let attachment = JSON.parse(new TextDecoder().decode(data));
                    that.requestImportCalendarAttachment(attachment, () => {
                        that.buildResponse(headerFunc, null, that.CREATE_SUCCESS);
                    });
                } else if (path === "folder") {
                    that.requestNewMailboxFolder((result) => {
                        if (result != null) {
                            let data = encoder.encode(JSON.stringify(result));
                            that.buildResponse(headerFunc, data, that.CREATE_SUCCESS);
                        } else {
                            that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                        }
                    });
                } else if (path === "inbox") {
                    let email = JSON.parse(new TextDecoder().decode(data));
                    that.requestUpdateEmail(email, path, () => {
                        that.buildResponse(headerFunc, null, that.CREATE_SUCCESS);
                    });
                }
            } else if(apiMethod == 'PATCH') {
                // not implemented
            }
        },
        handleChatRequestV1: function(headerFunc, path, apiMethod, data, hasFormData, params) {
            let that = this;
            if(apiMethod == 'GET') {
                let startIndex = params.get("startIndex");
                let chatId = path;
                if (path.length == 0) {
                    this.messenger.listChats().thenApply(function(chats) {
                        let allChats = chats.toArray();
                        let filteredChats = that.filterChats(allChats);
                        let future = peergos.shared.util.Futures.incomplete();
                        let latestMessageMap = new Map();
                        that.buildLatestMessageMap(0, filteredChats.chats, filteredChats.recentMessages, latestMessageMap, future);
                        future.thenApply(res => {
                            let encoder = new TextEncoder();
                            //sort chats
                            let sortedChatRefs = [];
                            latestMessageMap.forEach(function(value, key) {
                                sortedChatRefs.push({chatId: key, lastModified: value.creationTime});
                            });
                            sortedChatRefs.sort(function(aVal, bVal){
                                return bVal.lastModified.localeCompare(aVal.lastModified)
                            });
                            let chatsKV = new Map();
                            filteredChats.chats.forEach(function(value) {
                                chatsKV.set(value.chatId, value);
                            });
                            let sortedChats = [];
                            let latestMessages = [];
                            for(var i = 0; i < sortedChatRefs.length; i++) {
                                let chat = sortedChatRefs[i];
                                sortedChats.push(chatsKV.get(chat.chatId));
                                latestMessages.push(latestMessageMap.get(chat.chatId));
                            }
                            let data = encoder.encode(JSON.stringify({chats: sortedChats, latestMessages: latestMessages}));
                            that.buildResponse(headerFunc, data, that.GET_SUCCESS);
                        });
                    }).exceptionally(function(throwable) {
                        console.log(throwable);
                        that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                    });
                } else if (startIndex != null){
                    let index = this.parsePositiveInt(startIndex);
                    this.messenger.getChat(chatId).thenApply(function(controller) {
                        that.messenger.mergeAllUpdates(controller, that.socialData).thenApply(updatedController => {
                            that.getAllMessages(updatedController, index).thenApply(messageResults => {
                                that.generateMessageHashes(updatedController, messageResults.messages).thenApply(messagePairs => {
                                    let mediaRefs = that.addPendingAttachments(messagePairs);
                                    that.loadAttachments(mediaRefs).thenApply(attachmentMap => {
                                        let messages = [];
                                        for(var j = 0; j < messagePairs.length; j++) {
                                            let messageEnvelope = messagePairs[j].message;
                                            let payload = messageEnvelope.payload;
                                            let type = payload.type().toString();
                                            let author = updatedController.getUsername(messageEnvelope.author);
                                            let removeUsername = type == 'RemoveMember' ?
                                                updatedController.getUsername(messageEnvelope.payload.memberToRemove) : null;
                                            let inviteUsername = type == 'Invite' ? messageEnvelope.payload.username : null;
                                            let joinUsername = type == 'Join' ? messageEnvelope.payload.username : null;
                                            var text = null;
                                            if(type == 'Application') {
                                                let body = payload.body.toArray();
                                                text = body[0].inlineText();
                                            }
                                            if (type == 'Edit' || type == 'ReplyTo') {
                                                let body = payload.content.body.toArray();
                                                text = body[0].inlineText();
                                            }
                                            let attachments = [];
                                            if(type == 'Application' || type == 'ReplyTo') {
                                                let body = type == 'Application' ? payload.body.toArray() : payload.content.body.toArray();
                                                for(var i = 1; i < body.length; i++) {
                                                    let refPath = body[i].reference().ref.path;
                                                    let path = refPath.startsWith("/") ? refPath : "/" + refPath;
                                                    let mediaFile = attachmentMap.get(path);
                                                    if (mediaFile != null) {
                                                        attachments.push(mediaFile);
                                                    }
                                                }
                                            }
                                            var editPriorVersion = null;
                                            if(type == 'Edit') {
                                                editPriorVersion = payload.priorVersion.toString();
                                            }
                                            var deleteTarget = null;
                                            if(type == 'Delete') {
                                                deleteTarget = payload.target.toString();
                                            }
                                            var replyToParent = null;
                                            if(type == 'ReplyTo') {
                                                replyToParent = payload.parent.toString();
                                            }
                                            let messageEnvelopeBytes = messageEnvelope.serialize();
                                            var str = "";
                                            for (var i = 0; i < messageEnvelopeBytes.byteLength; i++) {
                                                str = str + String.fromCharCode(messageEnvelopeBytes[i] & 0xff);
                                            }
                                            let serialisedEnvelope = window.btoa(str);
                                            let groupState = null;
                                            if (type == 'GroupState') {
                                                groupState = { key: payload.key, value: payload.value};
                                            }
                                            let timestamp = that.fromUTCtoLocal(messageEnvelope.creationTime);
                                            let message = { messageRef: messagePairs[j].messageRef.toString(), author: author, timestamp: timestamp, type: type,
                                                  removeUsername: removeUsername, inviteUsername: inviteUsername, joinUsername: joinUsername,
                                                  editPriorVersion: editPriorVersion, deleteTarget: deleteTarget, replyToParent: replyToParent,
                                                  text: text, envelope: serialisedEnvelope,
                                                  groupState: groupState, attachments : attachments
                                            };
                                            messages.push(message);
                                        }
                                        let chatMembers = updatedController.getMemberNames().toArray();
                                        let friendsInChat = that.friendnames.filter(friend => chatMembers.findIndex(v => v === friend) > -1);
                                        let response = {
                                            chatId: chatId,
                                            startIndex: messageResults.startIndex,
                                            messages: messages,
                                            hasFriendsInChat: friendsInChat.length > 0
                                        };
                                        let encoder = new TextEncoder();
                                        let data = encoder.encode(JSON.stringify(response));
                                        that.buildResponse(headerFunc, data, that.GET_SUCCESS);
                                    });
                                });
                            });
                        }).exceptionally(function(throwable) {
                            console.log(throwable);
                            that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                        });
                    });
                }
            } else if(apiMethod == 'DELETE') {
                let chatId = path;
                if(path.startsWith(that.currentAppName + "$") || path.startsWith("chat-" + that.currentAppName + "$")) {
                    this.messenger.getChat(chatId).thenApply(function(controller) {
                        that.messenger.deleteChat(controller).thenApply(res => {
                            that.buildResponse(headerFunc, null, that.DELETE_SUCCESS);
                        }).exceptionally(function(throwable) {
                            console.log(throwable);
                            that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                        });
                    });
                } else {
                    let filePath = decodeURIComponent(path);
                    if (!(filePath.startsWith(this.context.username + "/.messaging/" + this.currentAppName + "$")
                        || filePath.startsWith(this.context.username + "/.messaging/chat-" + this.currentAppName + "$")
                        )) {
                        that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                    } else {
                        let parentPath = filePath.substring(0, filePath.lastIndexOf('/'));
                        this.context.getByPath(parentPath).thenApply(function(optParent){
                            that.context.getByPath(filePath).thenApply(function(optMediaFile){
                                optMediaFile.get().remove(optParent.get(), that.convertToPath(filePath), that.context).thenApply(function(b){
                                    that.buildResponse(headerFunc, null, that.DELETE_SUCCESS);
                                }).exceptionally(function(throwable) {
                                    console.log(throwable);
                                    that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                                });
                            }).exceptionally(function(throwable) {
                                console.log(throwable);
                                that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                            });
                        }).exceptionally(function(throwable) {
                            console.log(throwable);
                            that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                        });
                    }
                }
            } else if(apiMethod == 'POST') {
                if (path.length == 0) {
                    this.messenger.listChats().thenApply(function(chats) {
                        let allChats = chats.toArray();
                        let filteredChats = that.filterChats(allChats).chats;
                        let existingGroupTitles = [];
                        filteredChats.forEach(chat => {
                            existingGroupTitles.push(chat.title);
                        });
                        that.groupId = "";
                        that.groupTitle = "New Chat";
                        that.existingGroups = existingGroupTitles;
                        that.existingGroupMembers = [that.context.username];
                        that.existingAdmins = [that.context.username];
                        that.showGroupMembership = true;
                        that.chatResponseHeader = headerFunc;
                    });
                } else {
                    if (params.get("view")!= null) {
                        let decoder = new TextDecoder();
                        let fileRefJson = decoder.decode(data);
                        let fileRef = peergos.shared.display.FileRef.fromJson(fileRefJson);
                        if ((path.startsWith(this.currentAppName) || path.startsWith("chat-" + this.currentAppName)) && fileRef.path.includes(path + '/shared/media/')) {
                            this.retrieveFileFromFileRef(fileRef).thenApply(filePair => {
                                if (filePair.file != null) {
                                    let props = filePair.file.getFileProperties();
                                    if (props.isHidden || props.isDirectory) {
                                        console.log("Unable to view file. path:" + fileRef.path);
                                        that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                                    } else {
                                        let app = that.getApp(filePair.file, filePair.path);
                                        //that.openFileOrDir(app, fileRef.path, {filename: filePair.file.getName()});
                                        if (app == "Gallery") {
                                            that.filesToViewInGallery = [filePair.file];
                                            that.showEmbeddedGallery = true;
                                            that.buildResponse(headerFunc, null, that.GET_SUCCESS);
                                        } else {
                                            that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                                        }
                                    }
                                } else {
                                    that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                                }
                            });
                        } else {
                            that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                        }
                    }else if (params.get('download') == 'true') {
                        let decoder = new TextDecoder();
                        let fileRefJson = decoder.decode(data);
                        let fileRef = peergos.shared.display.FileRef.fromJson(fileRefJson);
                        if ((path.startsWith(this.currentAppName) || path.startsWith("chat-" + this.currentAppName)) && fileRef.path.includes(path + '/shared/media/')) {
                            this.retrieveFileFromFileRef(fileRef).thenApply(filePair => {
                                if (filePair != null) {
                                    let props = filePair.file.getFileProperties();
                                    if (props.isHidden || props.isDirectory) {
                                        console.log("Unable to download file. path:" + fileRef.path);
                                        that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                                    } else {
                                        let extension = filePair.file.getName().substring(filePair.file.getName().lastIndexOf('.') + 1);
                                        that.downloadFile(filePair.file, "attachment." + extension);
                                        that.buildResponse(headerFunc, null, that.GET_SUCCESS);
                                    }
                                } else {
                                    that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                                }
                            });
                        } else {
                            that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                        }
                    } else if (path.endsWith("/attachment") || path.endsWith("/attachment/")) {
                        let filename = decodeURIComponent(params.get('filename')).trim();
                        if (filename == null || filename.length == 0) {
                            that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                        } else {
                            let bytes = convertToByteArray(new Uint8Array(data));
                            let chatId = path.substring(0, path.indexOf("/attachment"))
                            let availableSpace = Number(this.quotaBytes.toString()) - Number(this.usageBytes.toString());
                            let spaceAfterOperation = availableSpace - data.length;
                            if (spaceAfterOperation < 0) {
                                this.showToastError("Attachment size exceeds available Space: " + filename);
                                this.buildResponse(headerFunc, null, that.ACTION_FAILED);
                            } else {
                                this.uploadFileAction(headerFunc, filename, bytes, chatId);
                            }
                        }
                    }else {
                        let chatId = path;
                        this.messenger.listChats().thenApply(function(chats) {
                            let allChats = chats.toArray();
                            let filteredChats = that.filterChats(allChats).chats;
                            let existingGroupTitles = [];
                            let existingChat = null;
                            filteredChats.forEach(chat => {
                                existingGroupTitles.push(chat.title);
                                if (chat.chatId == chatId) {
                                    that.groupTitle = chat.title;
                                    existingChat = chat;
                                }
                            });
                            that.groupId = chatId;
                            that.existingGroups = existingGroupTitles;
                            that.existingGroupMembers = existingChat.members.slice();
                            that.existingAdmins = existingChat.admins.slice();
                            that.showGroupMembership = true;
                            that.chatResponseHeader = headerFunc;
                        });
                    }
                }
            } else if(apiMethod == 'PUT') {
                let chatId = path;
                let json = JSON.parse(new TextDecoder().decode(data));
                if (json.createMessage != null) {
                    if (json.createMessage.attachments.length == 0) {
                        let message = peergos.shared.messaging.messages.ApplicationMessage.text(json.createMessage.text);
                        that.sendMessageAction(headerFunc, chatId, message);
                    } else {
                        let fileRefs = json.createMessage.attachments.map(i => peergos.shared.display.FileRef.fromJson(JSON.stringify(i)));
                        let fileRefList = peergos.client.JsUtil.asList(fileRefs);
                        let message = peergos.shared.messaging.messages.ApplicationMessage.attachment(json.createMessage.text, fileRefList);
                        that.sendMessageAction(headerFunc, chatId, message);
                    }
                } else if (json.editMessage != null) {
                    let message = peergos.shared.messaging.messages.ApplicationMessage.text(json.editMessage.text);
                    let contentHash = new peergos.shared.io.ipfs.Multihash.fromBase58(json.editMessage.messageRef);
                    let messageRef = new peergos.shared.messaging.MessageRef(contentHash);
                    let edit = new peergos.shared.messaging.messages.EditMessage(messageRef, message);
                    that.sendMessageAction(headerFunc, chatId, edit);
                } else if (json.replyMessage != null) {
                    let arr = Uint8Array.from(window.atob(json.replyMessage.replyTo), c => c.charCodeAt(0));
                    let replyToCbor = peergos.client.JsUtil.fromByteArray(convertToByteArray(arr));
                    let replyToEnvelope = peergos.shared.messaging.MessageEnvelope.fromCbor(replyToCbor);
                    if (json.replyMessage.attachments.length == 0) {
                        let message = peergos.shared.messaging.messages.ApplicationMessage.text(json.replyMessage.text);
                        peergos.shared.messaging.messages.ReplyTo.build(replyToEnvelope, message, this.context.crypto.hasher).thenApply(function(replyTo) {
                            that.sendMessageAction(headerFunc, chatId, replyTo);
                        });
                    } else {
                        let fileRefs = json.replyMessage.attachments.map(i => peergos.shared.display.FileRef.fromJson(JSON.stringify(i)));
                        let fileRefList = peergos.client.JsUtil.asList(fileRefs);
                        let message = peergos.shared.messaging.messages.ApplicationMessage.attachment(json.replyMessage.text, fileRefList);
                        peergos.shared.messaging.messages.ReplyTo.build(replyToEnvelope, message, this.context.crypto.hasher).thenApply(function(replyTo) {
                            that.sendMessageAction(headerFunc, chatId, replyTo);
                        });
                    }
                } else if (json.deleteMessage != null) {
                    let contentHash = new peergos.shared.io.ipfs.Multihash.fromBase58(json.deleteMessage.messageRef);
                    let messageRef = new peergos.shared.messaging.MessageRef(contentHash);
                    let deleteMessage = new peergos.shared.messaging.messages.DeleteMessage(messageRef);
                    that.sendMessageAction(headerFunc, chatId, deleteMessage);
                } else {
                    that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                }
            } else if(apiMethod == 'PATCH') {
                // not implemented
            }
        },
        sendMessageAction: function(headerFunc, chatId, msg) {
            let that = this;
            this.messenger.getChat(chatId).thenApply(function(controller) {
                that.messenger.sendMessage(controller, msg).thenApply(function(updatedController) {
                    that.buildResponse(headerFunc, null, that.CREATE_SUCCESS);
                }).exceptionally(function(throwable) {
                    console.log(throwable);
                    that.showToastError("Unable to send message");
                    that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                });
            });
        },
        retrieveFileFromFileRef: function(ref) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let mirrorPath = this.replaceOwnerInPath(this.context.username, ref.path);
            this.context.getByPath(mirrorPath).thenApply(function(optFile) {
                let mediaFile = optFile.ref;
                if (mediaFile != null) {
                    future.complete({path: mirrorPath, file: mediaFile});
                } else {
                    //fallback to attachment sender
                    let owner = that.extractOwnerFromPath(ref.path);
                    that.context.network.getFile(ref.cap, owner).thenApply(optFile => {
                       let mediaFile = optFile.ref;
                       if (mediaFile != null) {
                           future.complete({path: ref.path, file: mediaFile});
                       } else {
                           future.complete(null);
                       }
                    }).exceptionally(err => {
                        future.complete(null);
                    });
                }
            }).exceptionally(err => {
                future.complete(null);
            });
            return future;
        },
        uploadFileAction: function(headerFunc, filename, fileData, chatId) {
            let that = this;
            let progress = {};
            let thumbnailAllocation = Math.min(100000, fileData.length / 10);
            let resultingSize = fileData.length + thumbnailAllocation;
            progress = {
                title:"Encrypting and uploading " + filename,
                done:0,
                max:resultingSize,
                name: filename
            };
            this.$toast({component: ProgressBar,props:  progress,}
                , { icon: false , timeout:false, id: filename})
            this.progressMonitors.push(progress);
            let updateProgressBar = function(len){
                progress.done += len.value_0;
                that.$toast.update(progress.name, {content:
                    {
                        component: ProgressBar,
                        props:  {
                        title: progress.title,
                        done: progress.done,
                        max: progress.max
                        },
                    }
                });
                if (progress.done >= progress.max) {
                    that.$toast.dismiss(progress.name);
                }
            };
            this.uploadMedia(filename, fileData, updateProgressBar, chatId).thenApply(function(mediaResponse) {
                if (mediaResponse == null) {
                    that.buildResponse(headerFunc, null, that.ACTION_FAILED);
                } else {
                    let fileRefJson = mediaResponse.mediaItem.toJson();
                    let fileRefObj = JSON.parse(fileRefJson);
                    let json = {
                        fileRef: fileRefObj,
                        hasMediaFile: mediaResponse.mediaFile != null,
                        hasThumbnail: mediaResponse.mediaFile != null && mediaResponse.mediaFile.getFileProperties().thumbnail.ref != null,
                        thumbnail: mediaResponse.mediaFile.getBase64Thumbnail(),
                        fileType: mediaResponse.mediaFile.getFileProperties().getType(),
                        mimeType: mediaResponse.mediaFile.getFileProperties().mimeType,
                        size: mediaResponse.mediaFile.getFileProperties().sizeLow()
                    };
                    let idx = that.progressMonitors.indexOf(progress);
                    if(idx >= 0) {
                        that.progressMonitors.splice(idx, 1);
                    }
                    let encoder = new TextEncoder();
                    let data = encoder.encode(JSON.stringify(json));
                    that.buildResponse(headerFunc, data, that.CREATE_SUCCESS);
                }
            });
        },
        uploadMedia: function(filename, fileData, updateProgressBar, chatId) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let reader = new peergos.shared.user.fs.AsyncReader.ArrayBacked(fileData);
            var fileExtension = "";
            let dotIndex = filename.lastIndexOf('.');
            if (dotIndex > -1 && dotIndex <= filename.length -1) {
                fileExtension = filename.substring(dotIndex + 1);
            }
            let postTime = peergos.client.JsUtil.now();
            that.messenger.getChat(chatId).thenApply(function(controller) {
                that.messenger.uploadMedia(controller, reader, fileExtension, fileData.length, postTime, updateProgressBar).thenApply(function(pair) {
                    var thumbnailAllocation = Math.min(100000, fileData.length / 10);
                    updateProgressBar({ value_0: thumbnailAllocation});
                    that.context.getByPath(pair.right.path).thenApply(function(fileOpt){
                        let file = fileOpt.ref;
                        future.complete({mediaItem: pair.right, mediaFile: file});
                    }).exceptionally(err => {
                        that.showToastError("unable to get uploaded media");
                        console.log(err);
                        future.complete(null);
                    });
                }).exceptionally(err => {
                    that.showToastError("unable to upload media");
                    console.log(err);
                    future.complete(null);
                });
            });
            return future;
        },
        handleChatRequestV0: function(header, path, apiMethod, data, hasFormData, params) {
            let that = this;
            if(apiMethod == 'GET') {
                let chatId = path;
                let messenger = new peergos.shared.messaging.Messenger(this.context);
                if (chatId.length == 0) {
                    messenger.listChats().thenApply(function(chats) {
                        let allChats = chats.toArray();
                        let filteredChats = [];
                        for(var i = 0; i < allChats.length; i++) {
                            let chat = allChats[i];
                            if(chat.chatUuid.startsWith("chat-" + that.currentAppName + "$")) {
                                filteredChats.push({chatId: chat.chatUuid, title: chat.getTitle()});
                            }
                        }
                        let encoder = new TextEncoder();
                        let data = encoder.encode(JSON.stringify(filteredChats));
                        that.buildResponse(header, data, that.GET_SUCCESS);
                    });
                } else {
                    let from = params.get("from");
                    let to = params.get("to");
                    if (!this.validateRange(from, to)) {
                        console.log('Get messages paging parameters are invalid');
                        that.buildResponse(header, null, that.ACTION_FAILED);
                        return;
                    }
                    let startIndex = parseInt(from, 10);
                    let endIndex = startIndex + parseInt(to, 10);
                    messenger.getChat(chatId).thenApply(function(controller) {
                        messenger.mergeAllUpdates(controller, that.socialData).thenApply(updatedController => {
                            updatedController.getMessages(startIndex, endIndex).thenApply(result => {
                                let newMessages = result.toArray();
                                let accumulator = {messages:[], count: newMessages.length};
                                let future = peergos.shared.util.Futures.incomplete();
                                that.buildOutputMessages(updatedController, 0, newMessages, accumulator, future);
                                future.thenApply(done => {
                                    let encoder = new TextEncoder();
                                    let data = encoder.encode(JSON.stringify(accumulator));
                                    that.buildResponse(header, data, that.GET_SUCCESS);
                                });
                            });
                        });
                    });
                }
            } else if(apiMethod == 'DELETE') {
                let chatId = path;
                let messenger = new peergos.shared.messaging.Messenger(this.context);
                messenger.getChat(chatId).thenApply(function(controller) {
                    messenger.deleteChat(controller).thenApply(res => {
                        that.buildResponse(header, null, that.DELETE_SUCCESS);
                    }).exceptionally(err => {
                        console.log('deleteChat call failed: ' + err);
                        that.buildResponse(header, null, that.ACTION_FAILED);
                    });
                }).exceptionally(err => {
                    console.log('getChat call failed: ' + err);
                    that.buildResponse(header, null, that.ACTION_FAILED);
                });
            } else if(apiMethod == 'POST') {
                let requestBody = JSON.parse(new TextDecoder().decode(data));
                let min = 1;
                let max = requestBody.maxInvites;
                if (!this.validateRange(min, max)) {
                    console.log('CreateChat params are invalid');
                    that.buildResponse(header, null, that.ACTION_FAILED);
                    return;
                }
                this.chatResponseHeader = header;
                this.appDisplayName = this.appProperties.displayName;
                this.maxFriendsToAdd = parseInt(max, 10);
                this.chatTitle = requestBody.title;
                this.showInviteFriends = true;
            } else if(apiMethod == 'PUT') {
                let requestBody = JSON.parse(new TextDecoder().decode(data));
                let msg = peergos.shared.messaging.messages.ApplicationMessage.text(requestBody.text);
                let chatId = path;
                let messenger = new peergos.shared.messaging.Messenger(this.context);
                messenger.getChat(chatId).thenApply(function(controller) {
                    messenger.sendMessage(controller, msg).thenApply(function(updatedController) {
                        that.buildResponse(header, null, that.CREATE_SUCCESS);
                    });
                });
            } else if(apiMethod == 'PATCH') {
                // not implemented
            }
        },
        updateChat: function(usersToAdd, chatTitle) {
            let that = this;
            let messenger = new peergos.shared.messaging.Messenger(this.context);
            messenger.createAppChat(this.currentAppName).thenApply(function(controller){
                that.inviteChatParticipants(messenger, controller, usersToAdd).thenApply(updatedController => {
                    messenger.setGroupProperty(updatedController, "title", chatTitle).thenApply(function(updatedController2) {
                        let encoder = new TextEncoder();
                        let chatIdBytes = encoder.encode(updatedController2.chatUuid);
                        that.buildResponse(that.chatResponseHeader, chatIdBytes, that.CREATE_SUCCESS);
                    }).exceptionally(err => {
                        console.log('setTitle call failed: ' + err);
                        that.buildResponse(that.chatResponseHeader, null, that.ACTION_FAILED);
                    });
                }).exceptionally(err => {
                    console.log('inviteChatParticipants call failed: ' + err);
                    that.buildResponse(that.chatResponseHeader, null, that.ACTION_FAILED);
                });
            }).exceptionally(err => {
                console.log('createAppChat call failed: ' + err);
                that.buildResponse(that.chatResponseHeader, null, that.ACTION_FAILED);
            });
        },
        getPublicKeyHashes: function(usernames) {
            let that = this;
            const usernameToPKH = new Map();
            let future = peergos.shared.util.Futures.incomplete();
            usernames.forEach(username => {
                that.context.getPublicKeys(username).thenApply(pkOpt => {
                    usernameToPKH.set(username, pkOpt.get().left);
                    if(usernameToPKH.size == usernames.length) {
                        let pkhs = [];
                        usernames.forEach(user => {
                            pkhs.push(usernameToPKH.get(user));
                        });
                        future.complete(peergos.client.JsUtil.asList(pkhs));
                    }
                });
            });
            return future;
        },
        inviteChatParticipants: function(messenger, controller, usernames) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            this.getPublicKeyHashes(usernames).thenApply(pkhList => {
                let usernameList = peergos.client.JsUtil.asList(usernames);
                messenger.invite(controller, usernameList, pkhList).thenApply(updatedController => {
                    future.complete(updatedController);
                }).exceptionally(err => {
                    that.showError("Unable to add users to chat");
                    console.log(err);
                    future.complete(null);
                });
            });
            return future;
        },
        buildOutputMessages: function(chatController, index, messages, accumulator, future) {
            let that = this;
            if (index == messages.length) {
                future.complete(true);
            } else {
                let envelope = messages[index];
                chatController.generateHash(envelope).thenApply(messageRef => {
                    let payload = envelope.payload;
                    let timestamp = that.fromUTCtoLocal(envelope.creationTime);
                    let type = payload.type().toString();
                    let author = chatController.getUsername(envelope.author);
                    if(type == 'Application') {
                        let body = payload.body.toArray();
                        let text = body[0].inlineText();
                        accumulator.messages.push({type: type, id: messageRef.toString(), text: text, author: author, timestamp: timestamp});
                    } else if(type== 'Join') {
                        let username = envelope.payload.username;
                        accumulator.messages.push({type: type, username: username, timestamp: timestamp});
                    }
                    that.buildOutputMessages(chatController, index + 1, messages, accumulator, future);
                });
            }
        },
        fromUTCtoLocal: function(dateTime) {
            let date = new Date(dateTime.toString() + "+00:00");//adding UTC TZ in ISO_OFFSET_DATE_TIME ie 2021-12-03T10:25:30+00:00
            let formatted = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate()
                + ' ' + (date.getHours() < 10 ? '0' : '') + date.getHours()
                + ':' + (date.getMinutes() < 10 ? '0' : '') + date.getMinutes()
                + ':' + (date.getSeconds() < 10 ? '0' : '') + date.getSeconds();
            return formatted;
        },
        handleBrowserRequest: function(headerFunc, path, params, isFromRedirect, isNavigate) {
            let that = this;
            if (path.includes('/.')) {
                that.showError('Path not accessible: ' + path);
                that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                return;
            }
            this.findFile(path, isFromRedirect).thenApply(file => {
                if (file == null) {
                    that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                } else {
                    let props = file.getFileProperties();
                    if (props.isHidden) {
                        that.showError('Path not accessible: ' + filePath);
                        that.buildResponse(header, null, that.ACTION_FAILED);
                    } else if(props.isDirectory) {
                        let indexPath = path + '/index.html';
                        that.findFile(indexPath, isFromRedirect).thenApply(indexFile => {
                            if (indexFile == null) {
                                that.closeAndLaunchApp(headerFunc, "Drive", path, "");
                            } else {
                                that.handleBrowserRequest(headerFunc, indexPath, params, isFromRedirect, isNavigate);
                            }
                        });
                    } else {
                        if (isNavigate) {
                            that.fullPathForDisplay = path;
                            if (!that.running) {
                                that.running = true;
                                that.setBookmarkIcon();
                                that.readFileOrFolder(headerFunc, path, params, false, false);
                            } else {
                                let fullPath = that.expandFilePath(path, isFromRedirect);
                                var app = that.getApp(file, fullPath);
                                let navigationPath = fullPath.substring(0, fullPath.lastIndexOf('/'));
                                var navigationFilename = fullPath.substring(fullPath.lastIndexOf('/') + 1);
                                if (app == 'hex') {
                                   app = 'Drive';
                                   navigationFilename = '';
                                }
                                // If we are navigating to an 'external' link, use a new context on a different subdomain
                                if (app == 'htmlviewer' && that.extractWorkspace(fullPath) == that.workspaceName) {
                                    that.setBookmarkIcon();
                                    that.readFileOrFolder(headerFunc, path, params, false, true);
                                } else {
                                    that.closeAndLaunchApp(headerFunc, app, navigationPath, navigationFilename);
                                }
                            }
                        } else {
                            that.readFileOrFolder(headerFunc, path, params, false, false);
                        }
                    }
                }
            });
        },
        setBookmarkIcon: function() {
            if (this.shortcuts.shortcutsMap.get(this.fullPathForDisplay) == null) {
                this.displayToBookmark = true;
            } else {
                this.displayToBookmark = false;
            }
        },
        closeAndLaunchApp: function(headerFunc, app, path, filename) {
            this.buildResponse(headerFunc(), null, this.NAVIGATE_TO);
            this.navigateTo = { app: app, navigationPath: path, navigationFilename: filename};
            this.closeSandbox();
        },
        readFileOrFolder: function(headerFunc, path, params, ignoreHiddenFolderCheck, updateTargetFile) {
            let that = this;
            let expandedFilePath = this.expandFilePath(path);
            if (this.browserMode && expandedFilePath.includes('/.')) {
                that.showError('Path not accessible: ' + expandedFilePath);
                that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
            } else {
                this.context.getByPath(expandedFilePath).thenApply(function(respOpt){
                    if (respOpt.ref == null) {
                        console.log('Path not found: ' + expandedFilePath);
                        that.buildResponse(headerFunc(), null, that.FILE_NOT_FOUND);
                    } else {
                        let resp = respOpt.get();
                        let props = resp.getFileProperties();
                        if (!props.isDirectory && props.isHidden) {
                            that.showError('File not accessible: ' + expandedFilePath);
                            that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                        } else if (props.isDirectory && props.isHidden && !ignoreHiddenFolderCheck) {
                            that.showError('Folder not accessible: ' + expandedFilePath);
                            that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                        } else {
                            if (props.isDirectory) {
                                let filterResults =  !that.appRegisteredWithWildcardFileAssociation
                                    && (that.appProperties.folderAction
                                        && expandedFilePath.startsWith(that.appPath)
                                        && that.appRegisteredWithFileAssociation
                                        );
                                that.readFolderListing(filterResults, headerFunc("text/plain"), resp);
                            } else {
                                let fileType = props.getType();
                                if (params.get('preview') == 'true') {
                                    if (fileType == 'image' || fileType == 'video') {
                                        that.readInThumbnail(headerFunc("text/plain"), resp);
                                    } else {
                                        that.buildResponse(headerFunc(), null, that.ACTION_FAILED);
                                    }
                                } else {
                                    if (updateTargetFile) {
                                        that.targetFile = resp;
                                    }
                                    that.readInFile(headerFunc, resp);
                                }
                            }
                        }
                    }
                });
            }
        },
        readInThumbnail: function(header, file) {
            let thumbnail = file.getBase64Thumbnail();
            let encoder = new TextEncoder();
            let data = encoder.encode(thumbnail);
            this.buildResponse(header, data, this.GET_SUCCESS);
        },
        readFolderListing: function(filterResults, header, folder) {
            let that = this;
            folder.getChildren(that.context.crypto.hasher, that.context.network).thenApply(function(children) {
                let arr = children.toArray();
                let folderListing = {files:[], subFolders:[]};
                arr.forEach(function(child){
                    let props = child.getFileProperties();
                    if (!props.isHidden) {
                        if(props.isDirectory) {
                            folderListing.subFolders.push(child.getName());
                        } else {
                            if (filterResults) {
                                if (that.isFileAssociatedWithApp(child)) {
                                    folderListing.files.push(child.getName());
                                }
                            } else {
                                folderListing.files.push(child.getName());
                            }
                        }
                    }
                });
                let encoder = new TextEncoder();
                let data = encoder.encode(JSON.stringify(folderListing));
                that.buildResponse(header, data, that.GET_SUCCESS);
            });
        },
        isFileAssociatedWithApp: function(file) {
            let that = this;
            let fileProperties = file.getFileProperties();
            let filename = fileProperties.name;
            let extension = filename.substring(filename.lastIndexOf(".") + 1);
            var matchOnFileExtension = this.sandboxedApps.appFileExtensionRegistrationMap.get(extension);
            matchOnFileExtension = matchOnFileExtension == null ? [] : matchOnFileExtension;
            if (matchOnFileExtension.filter(a => a.name == that.appProperties.name).length > 0) {
                return true;
            }
            let mimeType = fileProperties.mimeType;
            var matchOnMimeType = this.sandboxedApps.appMimeTypeRegistrationMap.get(mimeType)
            matchOnMimeType = matchOnMimeType == null ? [] : matchOnMimeType;
            if (matchOnMimeType.filter(a => a.name == that.appProperties.name).length > 0) {
                return true;
            }
            let fileType = fileProperties.getType();
            var matchOnFileType = this.sandboxedApps.appFileTypeRegistrationMap.get(fileType)
            matchOnFileType = matchOnFileType == null ? [] : matchOnFileType;
            if (matchOnFileType.filter(a => a.name == that.appProperties.name).length > 0) {
                return true;
            }
            return false;
        },
        overwriteFile: function(header, filePath, bytes, fileToOverwrite, refreshTargetFile) {
            let that = this;
            let props = fileToOverwrite.getFileProperties();
            if (props.isHidden) {
                that.showError('Path not accessible: ' + filePath);
                that.buildResponse(header, null, that.ACTION_FAILED);
            } else if(props.isDirectory) {
                that.showError('Unable to overwrite folder: ' + filePath);
                that.buildResponse(header, null, that.ACTION_FAILED);
            } else {
                this.invokeOverwriteFile((isOK) => {
                    let future = peergos.shared.util.Futures.incomplete();
                    if (!isOK) {
                        that.buildResponse(header, null, that.ACTION_FAILED);
                        future.complete(true);
                    } else {
                        let java_reader = peergos.shared.user.fs.AsyncReader.build(bytes);
                        let sizeHi = (bytes.length - (bytes.length % Math.pow(2, 32)))/Math.pow(2, 32);
                        let moreRecentFile = that.commandFileRefs.get(filePath);
                        let currentFile = moreRecentFile != null ? moreRecentFile : fileToOverwrite;
                        currentFile.overwriteFileJS(java_reader, sizeHi, bytes.length, that.context.network, that.context.crypto, len => {})
                        .thenApply(function(updatedFile) {
                            if (refreshTargetFile) {
                                that.targetFile = updatedFile;
                            }
                            that.commandFileRefs.set(filePath, updatedFile);
                            that.$emit("refresh");
                            that.buildResponse(header, null, that.UPDATE_SUCCESS);
                            future.complete(true);
                        }).exceptionally(function(throwable) {
                            let msg = that.uriDecode(throwable.detailMessage);
                            if (msg.includes("CAS exception updating cryptree node.")) {
                                that.showError("The file has been updated by another user. Your changes have not been saved.");
                            } else {
                                that.showError("Unexpected error: " + throwable.detailMessage);
                                console.log(throwable.getMessage());
                            }
                            that.buildResponse(header, null, that.ACTION_FAILED);
                            future.complete(false);
                        });
                    }
                    return future;
                });
            }
        },
        reduceCommands: function(future) {
            let that = this;
            let command = this.commandQueue.shift();
            if (command == null) {
                future.complete(true);
            } else {
                command(true).thenApply(function(res){
                    if (res) {
                        that.reduceCommands(future);
                    } else {
                        future.complete(false);
                    }
                });
            }
            return future;
        },
        emptyCommandQueue: function() {
            let that = this;
            let command = this.commandQueue.shift();
            if (command != null) {
                command(false).thenApply(function(res){
                    that.emptyCommandQueue();
                });
            }
        },
        invokeOverwriteFile: function(overwriteCommand) {
            this.commandQueue.push(overwriteCommand);
            let that = this;
            if (!that.executingCommands) {
                that.executingCommands = true;
                let future = peergos.shared.util.Futures.incomplete();
                that.reduceCommands(future);
                future.thenApply(res => {
                    if (!res) {
                        that.emptyCommandQueue();
                    }
                    that.commandFileRefs.clear();
                    that.executingCommands = false;
                });
            }
        },
        putAction: function(header, filePath, bytes) {
            let that = this;
            this.existsInternal(filePath).thenApply(function(existsResult) {
                if (existsResult == -1) { // not found
                    that.updateAction(header, filePath, bytes, true);
                } else if(existsResult == 0) { //file
                    that.updateAction(header, filePath, bytes, false);
                } else if(existsResult == 1) { //directory
                    that.createAction(header, filePath, bytes, false);
                }
            }).exceptionally(function(throwable) {
                console.log(throwable.getMessage());
                that.buildResponse(header, null, that.ACTION_FAILED);
            });
        },
        exists: function(path) {
            let future = peergos.shared.util.Futures.incomplete();
            let expandedFilePath = this.expandFilePath(path);
            this.context.getByPath(expandedFilePath).thenApply(opt => {
                if(opt.ref == null) {
                    future.complete(-1);
                } else {
                    future.complete(opt.get().getFileProperties().isDirectory ? 1 : 0);
                }
            });
            return future;
        },
        existsInternal: function(filePath) {
            if (this.currentProps != null) {
                return this.exists('data/' + filePath);
            }else {
                let dataPath = peergos.client.PathUtils.directoryToPath(filePath.split('/'));
                return this.sandboxedApp.existsInternal(dataPath);
            }
        },
        updateAction: function(header, filePath, bytes, newFile) {
            let that = this;
            this.writeInternal(filePath, bytes).thenApply(function(res) {
                if (res) {
                    if (newFile) {
                        let encoder = new TextEncoder();
                        let relativePathBytes = encoder.encode(filePath);
                        that.buildResponse(header, relativePathBytes, that.CREATE_SUCCESS);
                    } else {
                        that.buildResponse(header, null, that.UPDATE_SUCCESS);
                    }
                } else {
                    console.log("unable to update file: " + filePath);
                    that.buildResponse(header, null, that.ACTION_FAILED);
                }
            }).exceptionally(function(throwable) {
                console.log(throwable.getMessage());
                that.buildResponse(header, null, that.ACTION_FAILED);
            });
        },
        createAction: function(header, filePath, bytes, hasFormData) {
            let that = this;
            let relativePath = hasFormData ? filePath : filePath + "/" + this.generateUUID();
            this.writeInternal(relativePath, bytes).thenApply(function(res) {
                if (res) {
                    let encoder = new TextEncoder();
                    let relativePathBytes = encoder.encode(relativePath);
                    that.buildResponse(header, relativePathBytes, hasFormData ? that.UPDATE_SUCCESS : that.CREATE_SUCCESS);
                } else {
                    console.log("unable to create file: " + relativePath);
                    that.buildResponse(header, null, that.ACTION_FAILED);
                }
            }).exceptionally(function(throwable) {
                console.log(throwable.getMessage());
                that.buildResponse(header, null, that.ACTION_FAILED);
            });
        },
        writeInternal: function(filePath, bytes) {
            if (this.currentProps != null) {
                let expandedFilePath = this.expandFilePath('data/' + filePath);
                let dirPath = peergos.client.PathUtils.directoryToPath(expandedFilePath.split('/').filter(n => n.length > 0));
                return this.writeFile(dirPath, bytes);
            }else {
                let dataPath = peergos.client.PathUtils.directoryToPath(filePath.split('/'));
                return this.sandboxedApp.writeInternal(dataPath, bytes);
            }
        },
        writeFile: function(path, data) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let pathNameCount = peergos.client.PathUtils.getNameCount(path);
            let pathWithoutUsername = peergos.client.PathUtils.subpath(path, 1, pathNameCount);
            this.context.getByPath(this.context.username).thenApply(userRoot =>
                userRoot.get().getOrMkdirs(peergos.client.PathUtils.getParent(pathWithoutUsername), that.context.network, false,
                    that.getMirrorBatId(userRoot.get()), that.context.crypto)
                    .thenApply(dir => dir.uploadOrReplaceFile(peergos.client.PathUtils.getFileName(path).toString(),
                        new peergos.shared.user.fs.AsyncReader.build(data),
                        0, data.length, that.context.network, that.context.crypto, x => {})
                            .thenApply(fw => future.complete(true))
                    ));
            return future;
        },
        writeNewFile: function(path, data) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let pathNameCount = peergos.client.PathUtils.getNameCount(path);
            let pathWithoutFilename = peergos.client.PathUtils.subpath(path, 0, pathNameCount -1);
            this.context.getByPath(pathWithoutFilename.toString()).thenApply(dirOpt =>
                dirOpt.get().uploadOrReplaceFile(peergos.client.PathUtils.getFileName(path).toString(),
                        new peergos.shared.user.fs.AsyncReader.build(data),
                        0, data.length, that.context.network, that.context.crypto, x => {})
                            .thenApply(fw => future.complete(true))
            );
            return future;
        },
        patchAction: function(header, filePath, bytes) {
            let that = this;
            this.appendInternal(filePath, bytes).thenApply(function(res) {
                if (res) {
                    let encoder = new TextEncoder();
                    let relativePathBytes = encoder.encode(filePath);
                    that.buildResponse(header, relativePathBytes, that.PATCH_SUCCESS);
                } else {
                    console.log("unable to append to file: " + filePath);
                    that.buildResponse(header, null, that.ACTION_FAILED);
                }
            }).exceptionally(function(throwable) {
                console.log(throwable.getMessage());
                that.buildResponse(header, null, that.ACTION_FAILED);
            });
        },
        appendInternal: function(filePath, bytes) {
            if (this.currentProps != null) {
                let expandedFilePath = this.expandFilePath('data/' + filePath);
                let fullPath = peergos.client.PathUtils.directoryToPath(expandedFilePath.split('/').filter(n => n.length > 0));
                return this.appendFile(fullPath, bytes);
            }else {
                let dataPath = peergos.client.PathUtils.directoryToPath(filePath.split('/'));
                return this.sandboxedApp.appendInternal(dataPath, bytes);
            }
        },
        appendFile: function(path, data) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let pathNameCount = peergos.client.PathUtils.getNameCount(path);
            let pathWithoutUsername = peergos.client.PathUtils.subpath(path, 1, pathNameCount);
            this.context.getByPath(this.context.username).thenApply(userRoot =>
                userRoot.get().getOrMkdirs(peergos.client.PathUtils.getParent(pathWithoutUsername), that.context.network, false,
                    that.getMirrorBatId(userRoot.get()), that.context.crypto)
                    .thenApply(dir => dir.appendFileJS(peergos.client.PathUtils.getFileName(path).toString(),
                        new peergos.shared.user.fs.AsyncReader.build(data), 0,
                        data.length, that.context.network, that.context.crypto, x => {})
                            .thenApply(fw => future.complete(true))
                    ));
            return future;
        },
        //https://stackoverflow.com/questions/105034/how-to-create-guid-uuid
        generateUUID: function() {
          return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
          );
        },
        deleteAction: function(header, filePath) {
            let that = this;
            this.deleteInternal(filePath).thenApply(function(res) {
                if (res) {
                    that.buildResponse(header, null, that.DELETE_SUCCESS);
                } else {
                    console.log("unable to delete: " + filePath);
                    that.buildResponse(header, null, that.ACTION_FAILED);
                }
            }).exceptionally(function(throwable) {
                console.log(throwable.getMessage());
                that.buildResponse(header, null, that.ACTION_FAILED);
            });
        },

        deleteInternal: function(filePath) {
            if (this.currentProps != null) {
                return this.deleteFile('data/' + filePath);
            }else {
                let dirPath = peergos.client.PathUtils.directoryToPath(filePath.split('/'));
                return this.sandboxedApp.deleteInternal(dirPath);
            }
        },
        deleteFile(path) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let expandedFilePath = this.expandFilePath(path);
            let parentPath = expandedFilePath.substring(0, expandedFilePath.lastIndexOf('/'));
            this.context.getByPath(parentPath).thenApply(function(dirOpt){
                if(dirOpt.ref == null || path.endsWith('/')) {
                    future.complete(false);
                } else {
                    let dir = dirOpt.get();
                    let filename = expandedFilePath.substring(expandedFilePath.lastIndexOf('/') + 1);
                    let filePath = peergos.client.PathUtils.toPath(parentPath.split('/').filter(n => n.length > 0), filename);
                    dir.getChild(filename, that.context.crypto.hasher, that.context.network)
                        .thenApply(file => {
                            if(file.ref == null) {
                                future.complete(false);
                            }
                            file.get().remove(dir, filePath, that.context).thenApply(fw => future.complete(true))
                        });
                }
            });
            return future;
        },
        postData: function(bytes) {
            this.postMessage({type: 'respondToLoadedChunk', bytes: bytes});
        },
        stream: function(seekHi, seekLo, seekLength, file, filePath) {
            var props = file.getFileProperties();
            let that = this;
            function Context(file, filePath, mimeType, network, crypto, sizeHigh, sizeLow) {
                this.maxBlockSize = 1024 * 1024 * 5;
                this.writer = null;
                this.file = file;
                this.network = network;
                this.crypto = crypto;
                this.sizeHigh = sizeHigh,
                this.sizeLow = sizeLow;
                this.counter = 0;
                this.readerFuture = null;
                this.postData = function(data) {
                   that.postData(data);
                }
                this.stream = function(seekHi, seekLo, length) {
                    this.counter++;
                    var work = function(thatRef, currentCount) {
                        var currentSize = length;
                        var blockSize = currentSize > this.maxBlockSize ? this.maxBlockSize : currentSize;
                        var pump = function(reader, header) {
                            if(blockSize > 0 && thatRef.counter == currentCount) {
                                var bytes = new Uint8Array(blockSize + header.byteLength);
                                for(var i=0;i < header.byteLength;i++){
                                    bytes[i] = header[i];
                                }
                                var data = convertToByteArray(bytes);
                                return reader.readIntoArray(data, header.byteLength, blockSize).thenApply(function(read){
                                       currentSize = currentSize - read.value_0;
                                       blockSize = currentSize > thatRef.maxBlockSize ? thatRef.maxBlockSize : currentSize;
                                       thatRef.postData(data);
                                       return pump(reader, header);
                                });
                            } else {
                                var future = peergos.shared.util.Futures.incomplete();
                                future.complete(true);
                                return future;
                            }
                        }
                        var updated = thatRef.readerFuture != null && thatRef.counter == currentCount ?
                        thatRef.readerFuture :
                            file.getBufferedInputStream(network, crypto, sizeHigh, sizeLow, 10, function(read) {})
                            updated.thenCompose(function(reader) {
                                return reader.seekJS(seekHi, seekLo).thenApply(function(seekReader){
                                    var readerFuture = peergos.shared.util.Futures.incomplete();
                                    readerFuture.complete(seekReader);
                                    thatRef.readerFuture = readerFuture;

                                    let streamingInfo = {sizeHigh: sizeHigh, sizeLow: sizeLow, appFileStreaming: false};
                                    let header = that.buildHeader(filePath, mimeType, '', streamingInfo);
                                    return pump(seekReader, header);
                                })
                            });
                    }
                    return work(this, this.counter);
                }
            }

            const context = new Context(file, filePath, props.mimeType, this.context.network, this.context.crypto, props.sizeHigh(), props.sizeLow());
            if (seekLength < 0) { //first 1 Mib block of file
                var end = (1024 * 1024 * 1) - 1;
                if(end > props.sizeLow() - 1) {
                    end = props.sizeLow() - 1;
                }
                context.stream(0, 0, end + 1);
            } else {
                context.stream(seekHi, seekLo, seekLength);
            }
        },
        isSelectedFolder(folderPath) {
            if (this.permissionsMap.get(this.PERMISSION_READ_CHOSEN_FOLDER) != null) {
                if (this.selectedFolders.includes(folderPath)) {
                    return true;
                } else {
                    return this.selectedFolderStems.filter(e => e.startsWith(folderPath)).length > 0;
                }
            } else {
                return false;
            }
        },
        expandFilePath(filePath, isFromRedirect) {
             if (this.browserMode) {
                if (filePath.startsWith(this.currentPath) || isFromRedirect) {
                    return filePath;
                } else {
                    return this.currentPath.substring(0, this.currentPath.length -1) + filePath;
                }
            } else if (this.isFileViewerMode && filePath.startsWith("/assets/")) {
                return this.workspaceName + filePath;
            } else if ( (this.appPath.length > 0 && filePath.startsWith(this.getPath)) || this.isSelectedFolder(filePath)) {
                return filePath;
            } else if (this.appPath.length > 0 && filePath === this.pickerSelectedFile) {
                return filePath;
            } else if (this.currentProps != null) { //running in-place
                let filePathWithoutSlash = filePath.startsWith('/') ? filePath.substring(1) : filePath;
                return this.getPath + filePathWithoutSlash;
            } else {
                return this.context.username + "/.apps/" + this.currentAppName + filePath;
            }
        },
        findFile: function(filePath, isFromRedirect) {
            var future = peergos.shared.util.Futures.incomplete();
            let that = this;
            let expandedFilePath = this.expandFilePath(filePath, isFromRedirect);
            this.context.getByPath(expandedFilePath).thenApply(function(fileOpt){
                if (fileOpt.ref == null) {
                    console.log('file not found: ' + filePath);
                    future.complete(null);
                } else {
                    let file = fileOpt.get();
                    if (file.getFileProperties().isHidden) {
                        future.complete(null);
                    } else {
                        future.complete(file);
                    }
                }
            }).exceptionally(function(throwable) {
                console.log(throwable.getMessage());
                future.complete(null);
            });
            return future;
        },
        readInFile: function(headerFunc, file) {
            let that = this;
            let props = file.getFileProperties();
            let size = props.sizeLow();
            let maxChunkSize = 1024 * 1024 * 10;
            if (size < maxChunkSize) {
                let header = headerFunc(props.mimeType);
                file.getLatest(this.context.network).thenApply(updatedFile => {
                    updatedFile.getInputStream(that.context.network, that.context.crypto, props.sizeHigh(), props.sizeLow(), read => {}).thenApply(reader => {
                        var bytes = new Uint8Array(size + header.byteLength);
                        for(var i=0;i < header.byteLength;i++){
                            bytes[i] = header[i];
                        }
                        let data = convertToByteArray(bytes);
                        reader.readIntoArray(data, header.byteLength, size).thenApply(function(read){
                            that.postData(data);
                        });
                    });
                });
            } else if(props.sizeHigh() > 0) {
                let header = headerFunc(props.mimeType);
                that.buildResponse(header, null, that.ACTION_FAILED);
            } else {
                let streamingInfo = {sizeHigh: props.sizeHigh(), sizeLow: props.sizeLow(), appFileStreaming: true};
                let header = headerFunc(props.mimeType, streamingInfo);
                file.getLatest(this.context.network).thenApply(updatedFile => {
                    updatedFile.getBufferedInputStream(that.context.network, that.context.crypto, props.sizeHigh(), props.sizeLow(), 10, read => {}).thenApply(reader => {
                        var currentSize = props.sizeLow();
                        var blockSize = currentSize > maxChunkSize ? maxChunkSize : currentSize;
                        var pump = function() {
                            if(blockSize > 0) {
                                var bytes = new Uint8Array(blockSize + header.byteLength);
                                for(var i=0;i < header.byteLength;i++){
                                    bytes[i] = header[i];
                                }
                                var data = convertToByteArray(bytes);
                                reader.readIntoArray(data, header.byteLength, blockSize).thenApply(function(read){
                                    currentSize = currentSize - read.value_0;
                                    blockSize = currentSize > maxChunkSize ? maxChunkSize : currentSize;
                                    that.postData(data);
                                    Vue.nextTick(function() {
                                        pump();
                                    });
                                });
                            }
                        }
                        pump();
                    });
                });
            }
        },
        writeUnsignedLeb128: function(value) {
            let out = [];
            var remaining = value >>> 7;
            while (remaining != 0) {
                out.push((value & 0x7f) | 0x80);
                value = remaining;
                remaining >>>= 7;
            }
            out.push(value & 0x7f);
            let array = new Uint8Array(new ArrayBuffer(out.length));
            for(var i = 0; i < out.length; i++) {
                array[i] = out[i];
            }
            return array;
        },
        showError: function(msg) {
            console.log(msg);
            this.$toast.error(msg, {timeout:false});
        },
        closeAppFromToolbar: function () {
            let that = this;
            if (this.recreateFileThumbnailOnClose) {
                this.findFile(this.appPath, false).thenApply(file => {
                    if (file != null) {
                        file.calculateAndUpdateThumbnail(that.context.network, that.context.crypto).thenApply(res => {
                            that.closeSandbox();
                        }).exceptionally(err => {
                            that.showError("Unable to update file");
                            console.log(err);
                            that.closeSandbox();
                        });
                    }
                });
            } else {
                this.closeSandbox();
            }
        },
        requestFullscreenFromToolbar: function () {
            let that = this;
            let elem = document.documentElement;
            elem.requestFullscreen({ navigationUI: "auto" })
                .then(() => {
                    that.fullscreenMode = true;
                })
                .catch((err) => {
                    alert(
                        `An error occurred while trying to switch into fullscreen mode: ${err.message} (${err.name})`,
                    );
                });
        },
        closeSandbox: function () {
            let iframe = document.getElementById("sandboxId");
            if (iframe != null) {
                iframe.src="#";
                iframe.parentNode.removeChild(iframe);
            }
            window.removeEventListener('message', this.messageHandler);
            window.removeEventListener("resize", this.resizeHandler);
            this.running = false;

            if (!this.browserMode) {
                this.$emit("refresh");
            }
            if (this.navigateTo != null) {
                this.$emit("close-app-sandbox");
                this.openFileOrDir(this.navigateTo.app, this.navigateTo.navigationPath, {filename: this.navigateTo.navigationFilename});
            } else {
                this.$emit("hide-app-sandbox");
            }
        }
    }
}
},{ "../../mixins/downloader/index.js": 53, "../../mixins/launcher/index.js": 65, "../../mixins/mixins.js": 52, "../../mixins/router/index.js": 3, "../../mixins/sandbox/index.js": 49, "../../mixins/uridecoder/index.js": 27, "../Group.vue": 63, "../confirm/Confirm.vue": 15, "../drive/DriveGallery.vue": 60, "../drive/ProgressBar.vue": 48, "../picker/FilePicker.vue": 58, "../picker/FolderPicker.vue": 36, "../profile/ViewProfile.vue": 64, "../prompt/AppPrompt.vue": 56, "../spinner/Spinner.vue": 16, "AddToChat.vue": 55, "AppInstall.vue": 54}], 84:[function(require,module,exports){
const AppButton = require("../../AppButton.vue");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal","appear":""}},[_c('div',{staticClass:"app-prompt app-modal__overlay",on:{"click":function($event){return closePrompt()}}},[_c('div',{staticClass:"app-prompt__container",on:{"click":function($event){$event.stopPropagation();}}},[_c('header',{staticClass:"prompt__header"},[_c('AppButton',{staticClass:"close",attrs:{"icon":"close"},nativeOn:{"click":function($event){return closePrompt()}}}),_v(" "),_c('h3',[_v(_s(message))])],1),_v(" "),_c('div',{staticClass:"prompt__body"},[_c('span',[_v("\n                        See "),_c('a',{staticClass:"help-link",attrs:{"href":"https://book.peergos.org/features/apps.html","target":"_blank","rel":"noopener noreferrer"}},[_v("documentation")]),_v(" for instructions on building custom Apps\n                    ")])]),_v(" "),_c('div',{staticClass:"prompt__body"},[_c('span',[_v("\n                        Name:\n                    ")]),_v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(prompt_result),expression:"prompt_result"}],ref:"prompt",attrs:{"id":"prompt-input","type":"text","placeholder":placeholder,"maxlength":maxLength,"autofocus":""},domProps:{"value":(prompt_result)},on:{"input":function($event){if($event.target.composing)return;prompt_result=$event.target.value}}})]),_v(" "),_c('div',{staticClass:"prompt__body"},[_c('span',[_v("\n                        App Permissions:\n                    ")]),_v(" "),_c('label',{staticClass:"checkbox__group"},[_v("\n                       Can store and read files in a folder private to the app\n                        "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(STORE_APP_DATA),expression:"STORE_APP_DATA"}],attrs:{"type":"checkbox","name":"STORE_APP_DATA"},domProps:{"checked":Array.isArray(STORE_APP_DATA)?_i(STORE_APP_DATA,null)>-1:(STORE_APP_DATA)},on:{"change":function($event){var $$a=STORE_APP_DATA,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(STORE_APP_DATA=$$a.concat([$$v]))}else{$$i>-1&&(STORE_APP_DATA=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{STORE_APP_DATA=$$c}}}}),_v(" "),_c('span',{staticClass:"checkmark"})]),_v(" "),_c('label',{staticClass:"checkbox__group"},[_v("\n                       Can modify file chosen by user\n                        "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(EDIT_CHOSEN_FILE),expression:"EDIT_CHOSEN_FILE"}],attrs:{"type":"checkbox","name":"EDIT_CHOSEN_FILE"},domProps:{"checked":Array.isArray(EDIT_CHOSEN_FILE)?_i(EDIT_CHOSEN_FILE,null)>-1:(EDIT_CHOSEN_FILE)},on:{"change":function($event){var $$a=EDIT_CHOSEN_FILE,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(EDIT_CHOSEN_FILE=$$a.concat([$$v]))}else{$$i>-1&&(EDIT_CHOSEN_FILE=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{EDIT_CHOSEN_FILE=$$c}}}}),_v(" "),_c('span',{staticClass:"checkmark"})]),_v(" "),_c('label',{staticClass:"checkbox__group"},[_v("\n                       Can read selected files of the associated types from folder chosen by user\n                        "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(READ_CHOSEN_FOLDER),expression:"READ_CHOSEN_FOLDER"}],attrs:{"type":"checkbox","name":"READ_CHOSEN_FOLDER"},domProps:{"checked":Array.isArray(READ_CHOSEN_FOLDER)?_i(READ_CHOSEN_FOLDER,null)>-1:(READ_CHOSEN_FOLDER)},on:{"change":function($event){var $$a=READ_CHOSEN_FOLDER,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(READ_CHOSEN_FOLDER=$$a.concat([$$v]))}else{$$i>-1&&(READ_CHOSEN_FOLDER=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{READ_CHOSEN_FOLDER=$$c}}}}),_v(" "),_c('span',{staticClass:"checkmark"})])]),_v(" "),_c('footer',{staticClass:"prompt__footer"},[_c('AppButton',{attrs:{"outline":""},nativeOn:{"click":function($event){return closePrompt()}}},[_v("\n\t\t\t\t\t\tCancel\n\t\t\t\t\t")]),_v(" "),_c('AppButton',{attrs:{"id":"prompt-button-id","type":"primary","accent":""},nativeOn:{"click":function($event){return getPrompt()}}},[_v("\n\t\t\t\t\t"+_s(action)+"\n\t\t\t\t\t")])],1)])])])}},    components: {
        AppButton,
    },
	data() {
		return {
			prompt_result: '',
			STORE_APP_DATA: false,
			EDIT_CHOSEN_FILE: false,
			READ_CHOSEN_FOLDER: false
		}
	},
	props: {
		message: {
			type: String,
			default: 'Create new App'
		},
		placeholder: {
			type: String,
			default: 'App name'
		},
		value:{
			type: String,
			default: ''
		},
		max_input_size:{
			type: Number,
			default: 25
		},
		consumer_func: {
			type: Function
		},
		action:{
			type: String,
			default: 'Create'
		}


	},
	computed: {
		maxLength() {
			return (this.max_input_size == null || this.max_input_size == '') ? 255 : this.max_input_size;
		}
	},

	mounted() {
		this.prompt_result = this.value;

		if(this.placeholder !== null){
			this.$refs.prompt.focus()
		}
	},

	methods: {
		closePrompt() {
			this.$emit("hide-prompt");
		},
        validateAppName: function(displayName) {
            if (displayName === '')
                return false;
            if (displayName.includes('.') || displayName.includes('..'))
                return false;
            if (!displayName.match(/^[a-z\d\-_\s]+$/i)) {
                return false;
            }
            return true;
        },
		getPrompt() {
		    let appName = this.prompt_result.trim();
            if (appName === '') {
                this.$toast.error('Invalid App name',{timeout:false});
                return;
            }
            if (!this.validateAppName(appName)) {
                this.$toast.error('App name invalid. Use only alphanumeric characters plus dash and underscore');
                return;
            }
            if (this.EDIT_CHOSEN_FILE && this.READ_CHOSEN_FOLDER) {
                this.$toast.error('Invalid permission selection. Cannot select both modify file and read folder!',{timeout:false});
                return;
            }
            let permissions = [];
            if (this.STORE_APP_DATA) {
                permissions.push('STORE_APP_DATA');
            }
            if (this.EDIT_CHOSEN_FILE) {
                permissions.push('EDIT_CHOSEN_FILE');
            }
            if (this.READ_CHOSEN_FOLDER) {
                permissions.push('READ_CHOSEN_FOLDER');
            }
			this.consumer_func(appName, permissions);
			this.closePrompt();
		}
	}
}


},{ "../../AppButton.vue": 2}], 21:[function(require,module,exports){
const AppButton = require("../AppButton.vue");

module.exports = {
render: function() {with(this){return _c('div',{staticClass:"app-slider"},[_c('transition-group',{staticClass:"slider__container",attrs:{"tag":"div","name":transitionName}},[(show)?_c('div',{key:current,staticClass:"slide"},[(slides[current].image)?_c('img',{staticClass:"slide__image",attrs:{"src":slides[current].image,"alt":slides[current].title}}):_e(),_v(" "),_c('h2',{staticClass:"slide__title"},[_v("\n\t\t\t\t\t"+_s(slides[current].title)+"\n\t\t\t\t")]),_v(" "),_c('p',{staticClass:"slide__description"},[_v("\n\t\t\t\t\t"+_s(slides[current].description)+"\n\t\t\t\t")])]):_e()]),_v(" "),_c('span',{staticClass:"slider__pagination"},[_v("\n\t\t\t"+_s(current + 1)+" / "+_s(slidesLength)+"\n\t\t")]),_v(" "),_c('AppButton',{staticClass:"slider__button button--next",attrs:{"aria-label":"Next slide","icon":"arrow-right","accent":""},nativeOn:{"click":function($event){return slide(1)}}},[_v("\n\t\t\tnext\n\t\t")])],1)}},    components: {
        AppButton,
    },
	props: {
		slides: {
			type: Array,
			default: () => [],
		},
	},
	data() {
		return {
			current: 0,
			direction: 1,
			transitionName: "fade",
			show: false,
		};
	},
	computed: {
		slidesLength() {
			return this.slides.length;
		}
	},
	methods: {
		slide(dir) {
			this.direction = dir;
			// dir === 1
			// 	? (this.transitionName = "slide-next")
			// 	: (this.transitionName = "slide-prev");
			this.current = (this.current + (dir % this.slidesLength) + this.slidesLength) % this.slidesLength;
		},
	},
	mounted() {
		this.show = true;
	},
};

},{ "../AppButton.vue": 2}], 92:[function(require,module,exports){
const i18n = require("../../i18n/index.js");
const AppButton = require("../AppButton.vue");
const helpers = require("../../mixins/storage/index.js");
const ProgressBar = require("../drive/ProgressBar.vue");
const Spinner = require("../spinner/Spinner.vue");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal","appear":""}},[_c('div',{staticClass:"social-post post-modal__overlay",staticStyle:{"position":"absolute"},style:({top:modelTop}),on:{"click":function($event){return close()}}},[(showSpinner)?_c('Spinner'):_e(),_v(" "),_c('div',{staticClass:"social-post__container",on:{"click":function($event){$event.stopPropagation();}}},[_c('header',{staticClass:"social-post__header"},[_c('AppButton',{staticClass:"close",attrs:{"icon":"close"},nativeOn:{"click":function($event){return close()}}}),_v(" "),_c('h3',[_v(_s(title))])],1),_v(" "),_c('div',{staticClass:"social-post__body"},[_c('p',[_c('span',[(socialPostAction=='add' || socialPostAction=='reply')?_c('button',{staticClass:"btn btn-success",on:{"click":triggerUpload}},[_v("Upload Media")]):_e(),_v(" "),_l((mediaFilenames),function(filename){return _c('div',[_v(_s(filename))])})],2),_v(" "),_c('input',{staticStyle:{"display":"none"},attrs:{"type":"file","id":"uploadInput","multiple":"","accept":"audio/*,video/*,image/*"},on:{"change":uploadFiles}})]),_v(" "),_c('textarea',{directives:[{name:"model",rawName:"v-model",value:(post),expression:"post"}],staticStyle:{"resize":"none"},attrs:{"id":"social-post-text","rows":"7","placeholder":textAreaPlaceholder,"maxlength":"1000"},domProps:{"value":(post)},on:{"input":function($event){if($event.target.composing)return;post=$event.target.value}}}),_v(" "),_c('div',[_c('span',[_c('label',{staticStyle:{"font-weight":"normal"}},[_v(_s(translate("NEWSFEED.POST.SHARE.WITH")))])])]),_v(" "),(isReady)?_c('div',{staticClass:"flex-container"},[(shareWithSharerOnly)?_c('div',{staticClass:"hspace-15"},[_c('label',{staticClass:"checkbox__group"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(shareWith),expression:"shareWith"}],attrs:{"disabled":socialPostAction=='edit',"type":"radio","id":"sharer-option","value":"Sharer"},domProps:{"checked":_q(shareWith,"Sharer")},on:{"change":function($event){shareWith="Sharer"}}}),_v(" "),_c('span',{staticClass:"checkmark"}),_v("\n                                "+_s(currentSocialPostEntry.sharer)+"\n                            ")])]):_e(),_v(" "),(!shareWithSharerOnly)?_c('div',{staticClass:"hspace-15"},[_c('label',{staticClass:"checkbox__group"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(shareWith),expression:"shareWith"}],attrs:{"disabled":socialPostAction=='edit',"type":"radio","id":"friends-option","value":"Friends"},domProps:{"checked":_q(shareWith,"Friends")},on:{"change":function($event){shareWith="Friends"}}}),_v(" "),_c('span',{staticClass:"checkmark"}),_v("\n                                "+_s(translate("NEWSFEED.POST.SHARE.WITH.FRIENDS"))+"\n                            ")])]):_e(),_v(" "),(!shareWithSharerOnly)?_c('div',{staticClass:"hspace-15"},[_c('label',{staticClass:"checkbox__group"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(shareWith),expression:"shareWith"}],attrs:{"disabled":!allowFollowerSharingOption || socialPostAction=='edit',"type":"radio","id":"followers-option","value":"Followers"},domProps:{"checked":_q(shareWith,"Followers")},on:{"change":function($event){shareWith="Followers"}}}),_v(" "),_c('span',{staticClass:"checkmark"}),_v("\n                                "+_s(translate("NEWSFEED.POST.SHARE.WITH.FOLLOWERS"))+"\n                            ")])]):_e()]):_e()]),_v(" "),_c('footer',{staticClass:"social-post__footer"},[_c('AppButton',{attrs:{"outline":""},nativeOn:{"click":function($event){return close()}}},[_v("\n\t\t\t\t\t\t"+_s(translate("PROMPT.CANCEL"))+"\n\t\t\t\t\t")]),_v(" "),_c('AppButton',{attrs:{"disabled":!isPostingAvailable(),"id":"prompt-button-id","type":"primary","accent":""},nativeOn:{"click":function($event){return submitPost()}}},[_v("\n                    "+_s(translate("NEWSFEED.POST.BUTTON"))+"\n\t\t\t\t\t")])],1)])],1)])}},    components: {
        AppButton,
        ProgressBar,
        Spinner
    },
    mixins:[i18n],
	data() {
		return {
            title: "Post a Message",
            textAreaPlaceholder: "Type in here...",
			prompt_result: '',
            showSpinner: false,
            shareWith: "Friends",
            post: "",
            isPosting: false,
            allowFollowerSharingOption: true,
            shareWithSharerOnly: false,
            thumbnailImage: "",
            mediaFiles: [],
            mediaFilenames: "",
            progressMonitors: [],
            isReady: false,
            modelTop: "100px",
		}
	},
    props: ['closeSocialPostForm', 'socialFeed', 'socialPostAction', 'currentSocialPostEntry', 'top'],
    computed: {
        ...Vuex.mapState([
            'quotaBytes',
            'usageBytes',
            'context',
            'socialData',
        ]),
        groups: function() {
            return {groupsNameToUid: this.socialData.groupsNameToUid, groupsUidToName: this.socialData.groupsUidToName};
        },
    },
    created: function() {
        this.modelTop = this.top;
        let that = this;
        if (this.socialPostAction == 'reply') {
            if (this.currentSocialPostEntry != null) {
                this.title = this.translate("NEWSFEED.POST.REPLY");
                if (this.currentSocialPostEntry.socialPost != null) {
                    if (this.currentSocialPostEntry.socialPost.shareTo == peergos.shared.social.SocialPost.Resharing.Author) {
                        that.shareWith = "Sharer";
                        that.shareWithSharerOnly = true;
                    } else if (this.currentSocialPostEntry.socialPost.shareTo == peergos.shared.social.SocialPost.Resharing.Friends) {
                        this.allowFollowerSharingOption = false;
                    }
                } else {
                    that.shareWith = "Sharer";
                    that.shareWithSharerOnly = true;
                }
            }
            this.isReady = true;
        } else if (this.socialPostAction == 'edit') {
            this.title = this.translate("NEWSFEED.POST.EDIT");
            this.post = this.currentSocialPostEntry.socialPost.body.toArray([])[0].inlineText();
            let pathStr = this.currentSocialPostEntry.path;
            let dirWithoutLeadingSlash = pathStr.startsWith("/") ? pathStr.substring(1) : pathStr;
            let path = peergos.client.PathUtils.directoryToPath(dirWithoutLeadingSlash.split('/'));
            this.context.sharedWith(path).thenApply(function(sharedWith) {
                let readAccess = sharedWith.readAccess.toArray([]);
                if (readAccess[0] == that.getGroupUid(peergos.shared.user.SocialState.FRIENDS_GROUP_NAME)) {
                    that.shareWith = "Friends";
                } else if(readAccess[0] == that.getGroupUid(peergos.shared.user.SocialState.FOLLOWERS_GROUP_NAME)) {
                    that.shareWith = "Followers";
                } else {
                    that.shareWith = "Sharer";
                    that.shareWithSharerOnly = true;
                }
                that.isReady = true;
            });
        } else if (this.socialPostAction == 'add') {
            this.isReady = true;
        }
        Vue.nextTick(function() {
            document.getElementById("social-post-text").focus();
        });
    },
	methods: {
        checkAvailableSpace: function(fileSize) {
            return Number(this.quotaBytes.toString()) - (Number(this.usageBytes.toString()) + fileSize);
        },
	    showMessage: function(msg) {
	        this.$toast.error(msg, {timeout:false});
	    },
        uploadFiles: function(evt) {
            let files = evt.target.files || evt.dataTransfer.files;
            let totalSize = 0;
            for(var i=0; i < files.length; i++) {
                totalSize += files[i].size;
            }
            let spaceAfterOperation = this.checkAvailableSpace(totalSize);
            if (spaceAfterOperation < 0) {
                document.getElementById('uploadInput').value = "";
                let amountToFree = helpers.convertBytesToHumanReadable('' + -spaceAfterOperation);
                let errMsg = this.translate("NEWSFEED.POST.UPLOAD.SPACE.ERROR").replace("$SPACE", amountToFree);
                this.showMessage(errMsg);
            } else {
                this.mediaFiles = files;
                let mediaFilenames = [];
                for(var i = 0; i < files.length; i++) {
                    mediaFilenames.push(files[i].name);
                };
                this.mediaFilenames = mediaFilenames;
            }
        },
        triggerUpload: function() {
            document.getElementById('uploadInput').click()
        },
        close: function (result) {
            this.closeSocialPostForm("", null, null, null, null);
        },
        getGroupUid: function(groupName) {
            return this.groups.groupsNameToUid[groupName];
        },
        readerToAdd: function() {
            let readerToAdd = null;
            if (this.shareWith == 'Friends') {
                readerToAdd = this.getGroupUid(peergos.shared.user.SocialState.FRIENDS_GROUP_NAME);
            } else if(this.shareWith == 'Followers') {
                readerToAdd = this.getGroupUid(peergos.shared.user.SocialState.FOLLOWERS_GROUP_NAME);
            } else if(this.shareWith == 'Sharer') {
                readerToAdd = this.currentSocialPostEntry.sharer;
            }
            return readerToAdd;
        },
        fromShareWithToResharingType: function() {
            let resharingType = null;
            if (this.shareWith == 'Friends') {
                resharingType = peergos.shared.social.SocialPost.Resharing.Friends;
            } else if(this.shareWith == 'Followers') {
                resharingType = peergos.shared.social.SocialPost.Resharing.Followers;
            } else if(this.shareWith == 'Sharer') {
                resharingType = peergos.shared.social.SocialPost.Resharing.Author;
            }
            return resharingType;
        },
        isPostingAvailable: function() {
            return this.isReady && !this.isPosting;
        },
        submitPost: function() {
            if (this.isPosting || (this.mediaFiles.length == 0 && this.post == '')) {
                return;
            }
            this.isPosting = true;
            let that = this;
            that.showSpinner = true;
            let resharingType = this.fromShareWithToResharingType();
            if (this.socialPostAction == 'add') {
                this.addPost(resharingType);
            } else if(this.socialPostAction == 'edit') {
                this.editPost();
            } else if(this.socialPostAction == 'reply') {
                this.replyToPost(resharingType);
            }
        },
        uploadMedia: function(mediaFile, updateProgressBar) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let reader = new browserio.JSFileReader(mediaFile);
            let java_reader = new peergos.shared.user.fs.BrowserFileReader(reader);
            this.context.getSpaceUsage().thenApply(usageBytes => {
                that.context.getQuota().thenApply(quotaBytes => {
                    let spaceAfterOperation = Number(quotaBytes.toString()) - (Number(usageBytes.toString()) + mediaFile.size);
                    if (spaceAfterOperation <= 0) {
                        let errMsg = that.translate("NEWSFEED.POST.UPLOAD.SPACE.ERROR2").replace("$NAME", mediaFile.name);
                        that.showMessage(errMsg);
                        future.complete(null);
                    } else {
                        let postTime = peergos.client.JsUtil.now();
                        that.socialFeed.uploadMediaForPost(java_reader, mediaFile.size, postTime, updateProgressBar).thenApply(function(pair) {
                            var thumbnailAllocation = Math.min(100000, mediaFile.size / 10);
                            updateProgressBar({ value_0: thumbnailAllocation});
                            future.complete({mediaItem: pair.right});
                        });
                    }
                });
            });
            return future;
        },
        clearProgressStore: function(progressStore) {
            let that = this;
             progressStore.forEach(progress => {
                 let idx = that.progressMonitors.indexOf(progress);
                 if(idx >= 0) {
                     that.progressMonitors.splice(idx, 1);
                 }
             });
             document.getElementById('uploadInput').value = "";
             this.mediaFilenames = "";
        },
        reduceAllMediaUpload: function(index, accumulator, progressStore, future) {
            let that = this;
            if (index == this.mediaFiles.length) {
                this.clearProgressStore(progressStore);
                future.complete(accumulator);
            } else {
                let progress = progressStore[index];
                let updateProgressBar = function(len){
                    progress.done += len.value_0;

                    that.$toast.update(progress.name, {content:
                            {
                                component: ProgressBar,
                                props:  {
                                title: progress.title,
                                done: progress.done,
                                max: progress.max
                                },
                            }
                    });
                    if (progress.done >= progress.max) {
                        that.$toast.dismiss(progress.name);
                    }
                };
                this.uploadMedia(this.mediaFiles[index], updateProgressBar).thenApply(result => {
                    if (result != null) {
                        accumulator.push(result);
                        that.reduceAllMediaUpload(index+1, accumulator, progressStore, future);
                    } else {
                        that.clearProgressStore(progressStore);
                        future.complete(null);
                    }
                });
            }
        },
        uploadAllMedia: function() {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let progressStore = [];
            for(var i = 0; i < this.mediaFiles.length; i++) {
                let file = this.mediaFiles[i];
                var thumbnailAllocation = Math.min(100000, file.size / 10);
                var resultingSize = file.size + thumbnailAllocation;
                let title = this.translate("NEWSFEED.POST.UPLOAD") + " " + file.name;
                var progress = {
                    title:title,
                    done:0,
                    max:resultingSize,
                    name: file.name
                };
                that.$toast({ component: ProgressBar, props:  progress} , { icon: false , timeout:false, id: file.name});
                that.progressMonitors.push(progress);
                progressStore.push(progress);
            }
            that.reduceAllMediaUpload(0, [], progressStore, future);
            return future;
        },
        addPost: function(resharingType) {
            let that = this;
            this.uploadAllMedia().thenApply(function(mediaResponseList) {
                if (mediaResponseList == null) {
                    that.showSpinner = false;
                    that.isPosting = false;
                } else if (mediaResponseList.length == 0) {
		            let body = peergos.client.JsUtil.asList([new peergos.shared.display.Text(that.post)]);
                    let socialPost = peergos.shared.social.SocialPost.createInitialPost(that.context.username, body, resharingType);
                    that.savePost(socialPost);
                } else {
                    let bodyItems = [new peergos.shared.display.Text(that.post)];
                    mediaResponseList.forEach( mediaResponse => {
                        bodyItems.push(new peergos.shared.display.Reference(mediaResponse.mediaItem));
                    });
                    let body = peergos.client.JsUtil.asList(bodyItems);
                    let socialPost = peergos.shared.social.SocialPost.createInitialPost(that.context.username, body, resharingType);
                    that.savePost(socialPost);
                }
            });
        },
        editPost: function() {
            let that = this;
            let postTime = peergos.client.JsUtil.now();
            let parts = this.currentSocialPostEntry.socialPost.body.toArray([]);
            // Assume element 0 is text for now
            parts[0] = new peergos.shared.display.Text(this.post);
            let body = peergos.client.JsUtil.asList(parts);
            let socialPost = this.currentSocialPostEntry.socialPost.edit(body, postTime);
            let uuid = this.currentSocialPostEntry.path.substring(this.currentSocialPostEntry.path.lastIndexOf("/") + 1);
            this.updatePost(uuid, socialPost);
        },
        replyToPost: function(resharingType) {
            let that = this;
            let path = this.currentSocialPostEntry.path;
            let cap = this.currentSocialPostEntry.cap;
            this.generateContentHash().thenApply(function(hash) {
                let parent = new peergos.shared.display.FileRef(path, cap, hash);
                that.uploadAllMedia().thenApply(function(mediaResponseList) {
                    if (mediaResponseList == null) {
                       that.showSpinner = false;
                       that.isPosting = false;
                    } else if (mediaResponseList.length == 0) {
                        let body = peergos.client.JsUtil.asList([new peergos.shared.display.Text(that.post)]);
			            let replyPost = peergos.shared.social.SocialPost.createComment(parent, resharingType, that.context.username, body);
                        that.savePost(replyPost);
                    } else {
                        let postItems = [new peergos.shared.display.Text(that.post)];
                        mediaResponseList.forEach( mediaResponse => {
                            postItems.push(new peergos.shared.display.Reference(mediaResponse.mediaItem));
                        });
                        let post = peergos.client.JsUtil.asList(postItems);
                        let replyPost = peergos.shared.social.SocialPost.createComment(parent, resharingType, that.context.username, post);
                        that.savePost(replyPost);
                    }
                });
            });
        },
        generateContentHash: function() {
            let future = peergos.shared.util.Futures.incomplete();
            if (this.currentSocialPostEntry.socialPost != null) {
                this.currentSocialPostEntry.socialPost.contentHash(this.context.crypto.hasher).thenApply(function(hash) {
                    future.complete(hash);
                });
            } else {
                this.currentSocialPostEntry.file.getContentHash(this.context.network, this.context.crypto).thenApply(function(hash) {
                    future.complete(hash);
                });
            }
            return future;
        },
        updatePost: function(uuid, socialPost) {
           let that = this;
           this.socialFeed.updatePost(uuid, socialPost).thenApply(function(result) {
                   that.showSpinner = false;
                   that.closeSocialPostForm("edit", result.left.toString(), socialPost, result.right
                        , that.currentSocialPostEntry == null ? null : that.currentSocialPostEntry.path);
                   that.isPosting = false;
            }).exceptionally(function(throwable) {
                that.showMessage(throwable.getMessage());
                that.showSpinner = false;
                that.isPosting = false;
            });
        },
        savePost: function(socialPost) {
            let that = this;
            let readerToAdd = this.readerToAdd();
            this.socialFeed.createNewPost(socialPost).thenApply(function(result) {
                that.context.shareReadAccessWith(result.left, peergos.client.JsUtil.asSet([readerToAdd])).thenApply(function(b) {
                    that.showSpinner = false;
                    that.closeSocialPostForm("save", result.left.toString(), socialPost, result.right
                        , that.currentSocialPostEntry == null ? null : that.currentSocialPostEntry.path);
                    that.isPosting = false;
                }).exceptionally(function(err) {
                    that.showSpinner = false;
                    that.showMessage(err.getMessage());
                    that.isPosting = false;
                });
            }).exceptionally(function(throwable) {
                that.showMessage(throwable.getMessage());
                that.showSpinner = false;
                that.isPosting = false;
            });
        },
	}
}
},{ "../../i18n/index.js": 11, "../../mixins/storage/index.js": 85, "../AppButton.vue": 2, "../drive/ProgressBar.vue": 48, "../spinner/Spinner.vue": 16}], 16:[function(require,module,exports){
module.exports = {
render: function() {with(this){return _c('div',{staticStyle:{"width":"100%","height":"100%","position":"absolute","left":"0","top":"0","z-index":"100"}},[_c('div',{staticStyle:{"width":"100%","height":"100%"},attrs:{"id":"spinner"}},[(isMessageSet())?_c('div',{staticClass:"spinner-text"},[_v(_s(message))]):_e()])])}},    data: function() {
        return {
        };
    },
    props: ['message'],
    created: function() {
        var that = this;
        Vue.nextTick(function() {
            that.spinner.spin(document.getElementById("spinner"));
        });
    },
    methods: {
        isMessageSet: function () {
            return this.message != null && this.message.length > 0;
        }
    },
    computed: {
        spinner: function() {
            var opts = {
                lines: 13, // The number of lines to draw
                length: 28, // The length of each line
                width: 14, // The line thickness
                radius: 42, // The radius of the inner circle
                scale: 1.0, // Scales overall size of the spinner
                corners: 1, // Corner roundness (0..1)
                color: '#337ab7', // #rgb or #rrggbb or array of colors
                opacity: 0.25, // Opacity of the lines
                rotate: 0, // The rotation offset
                animation: 'spinner-line-fade-quick', // The CSS animation name for the lines
                fadeColor: 'transparent', // CSS color or array of colors
                direction: 1, // 1: clockwise, -1: counterclockwise
                speed: 1, // Rounds per second
                trail: 60, // Afterglow percentage
                fps: 20, // Frames per second when using setTimeout() as a fallback for CSS
                zIndex: 2e9, // The z-index (defaults to 2000000000)
                className: 'spinner', // The CSS class to assign to the spinner
                top: '50%', // Top position relative to parent
                left: '50%', // Left position relative to parent
                shadow: false, // Whether to render a shadow
                hwaccel: true, // Whether to use hardware acceleration
                position: 'absolute', // Element positioning
            };
            return new Spin.Spinner(opts);
        }
    }
};
},{}], 44:[function(require,module,exports){
module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"mode":"out-in"}},[(isActive)?_c('div',{staticClass:"tab"},[_t("default")],2):_e()])}},	props: {
		title: {
			type: String,
			default: "Tab",
		},
	},
	data() {
		return {
			isActive: false,
		};
	},
};

},{}], 45:[function(require,module,exports){
module.exports = {
render: function() {with(this){return _c('div',{staticClass:"app-tabs"},[_c('ul',{staticClass:"tabs__header"},_l((tabs),function(tab,index){return _c('li',{key:tab.title,class:{ active: index == selectedIndex },on:{"click":function($event){return selectTab(index)}}},[_v("\n\t\t\t\t"+_s(tab.title)+"\n\t\t\t")])}),0),_v(" "),_t("default")],2)}},	data() {
		return {
			selectedIndex: 0,
			tabs: [],
		};
	},
	created() {
		this.tabs = this.$children;
	},
	mounted() {
		this.selectTab(0);
	},
	methods: {
		selectTab(i) {
			this.selectedIndex = i;

			this.tabs.forEach((tab, index) => {
				tab.isActive = index === i;
			});
		},
	},
};

},{}], 80:[function(require,module,exports){    const Spinner = require("../spinner/Spinner.vue");
    const downloaderMixins = require("../../mixins/downloader/index.js");

    module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticClass:"modal-container hex-viewer",staticStyle:{"height":"95%","width":"95%","overflow-y":"auto"},on:{"click":function($event){$event.stopPropagation();}}},[(showSpinner)?_c('Spinner'):_e(),_v(" "),_c('center',[(file != null)?_c('h2',[_c('p',[_v(_s(file.getFileProperties().name)+" (hex view) \n                    "),_c('button',{staticClass:"btn btn-large btn-primary",on:{"click":function($event){return downloadCurrentFile()}}},[_v("Download File")])])]):_e()]),_v(" "),_c('center',{staticStyle:{"height":"75%","max-width":"100%","font-family":"monospace"}},[_c('table',[_l((lines),function(line){return _c('tr',[_c('td',{staticStyle:{"color":"#990012"}},[_v("\n                        "+_s(line.start)+":\n                    ")]),_v(" "),_c('td',{staticStyle:{"padding-left":"10px"}},_l((4),function(n,i){return _c('span',[_v(_s(line.hex[i] != null ? line.hex[i] : ""))])}),0),_v(" "),_c('td',{staticStyle:{"padding-left":"10px"}},_l((4),function(n,i){return _c('span',[_v(_s(line.hex[i+4] != null ? line.hex[i+4] : ""))])}),0),_v(" "),_c('td',{staticStyle:{"padding-left":"10px"}},_l((4),function(n,i){return _c('span',[_v(_s(line.hex[i+8] != null ? line.hex[i+8] : ""))])}),0),_v(" "),_c('td',{staticStyle:{"padding-left":"10px"}},_l((4),function(n,i){return _c('span',[_v(_s(line.hex[i+12] != null ? line.hex[i+12] : ""))])}),0),_v(" "),_c('td',{staticStyle:{"padding-left":"25px"}},_l((16),function(n,i){return _c('span',[_v(_s(line.ascii[i] != null ? line.ascii[i] : ""))])}),0)])}),_c('tr')],2)])],1)])])}},    	components: {
    	    Spinner
    	},
    data: function() {
        return {
	    lookup: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'],
            showSpinner: false,
            fileData: { // immutable
                data: null, // a 5 MiB chunk or less
                offsetHigh: 0,
                offsetLow: 0 // must be multiple of 16
            },
            offsetLow: 0, // must be multiple of 16
            offsetHigh:0,
            maxOffsetLow: 0,
            bytesPerPage: 16 * 32,
        };
    },
    props: ['file', 'context'],
    mixins:[downloaderMixins],
    created: function() {
        console.debug('Hex viewer created!');
        window.addEventListener('keyup', this.keyup);
        this.updateCurrentFileData();
    },

    methods: {
        getContext: function() {
            return this.context;
        },
        downloadCurrentFile: function() {
            this.downloadFile(this.file);
        },
        close: function() {
            this.$emit("hide-hex-viewer");
        },

        keyup: function(e) {
            if (e.keyCode == 38) // up arrow
                this.addToOffset(-16);
            else if (e.keyCode == 40)  // down arrow
                this.addToOffset(16);
	    else if (e.keyCode == 33)  // page-up
                this.addToOffset(-16 * 32);
	    else if (e.keyCode == 34) // page-down
                this.addToOffset(16 * 32);
	    else if (e.keyCode == 36) // home
                this.addToOffset(-this.offsetLow);
	    else if (e.keyCode == 35) // end
                this.addToOffset(this.maxOffsetLow-this.offsetLow);
        },

        updateCurrentFileData: function() {
            if (this.file == null)
                return;
            if (this.file.isDirectory())
                return;
            var props = this.file.getFileProperties();
            var that = this;
            this.showSpinner = true;
            var section = this.fileData;
            var seekOffset = this.offsetLow - (this.offsetLow % (5*1024*1024));
            var requestedOffset = this.offsetLow;
            this.maxOffsetLow = props.sizeLow() - (props.sizeLow() % this.bytesPerPage);
            this.file.getInputStream(this.context.network, this.context.crypto, 
                props.sizeHigh(), props.sizeLow(), 
                function(read) {})
                .thenCompose(function(startReader) {
                    return startReader
                        .seekJS(section.offsetHigh, seekOffset).thenCompose(function(reader) {

                            var sizeToRead = Math.min(5*1024*1024, props.sizeLow() - seekOffset);
                            var data = convertToByteArray(new Int8Array(sizeToRead));
                            data.length = sizeToRead;
                            return reader.readIntoArray(data, 0, data.length)
                                .thenApply(function(read){
                                    that.fileData = {data:data, offsetHigh: section.offsetHigh, offsetLow: requestedOffset};
                                    that.showSpinner = false;
                                    console.log("Finished retrieving file section of size " + data.length + " from offset " + requestedOffset);
                                });
                        });
                });
        },

        addToOffset: function(diff) {
            if (this.offsetLow + diff < 0) {
                this.offSetLow = 0;
                return;
            }
            var CHUNK = 5*1024*1024;
            var oldLow = this.offsetLow;
            var newLow = this.offsetLow + diff;
            var oldChunk = (oldLow / CHUNK)|0;
            var newChunk = (newLow / CHUNK)|0;
            if (oldChunk != newChunk) {
                // need to retrieve the next chunk
                this.offsetLow = newLow;
                this.updateCurrentFileData();
            } else {
                // can just update pointer
                var existing = this.fileData;
                this.fileData = {data: existing.data, offsetLow: newLow, offsetHigh: existing.offsetHigh};
                this.offsetLow = newLow;
            }
        },

        byteToHex: function(b) {
            return this.lookup[(b >> 4) & 0xf] + this.lookup[b & 0xf];
        },

        intToHex: function(i) {
            return this.byteToHex(i >> 24) + this.byteToHex(i >> 16) + this.byteToHex(i >> 8) + this.byteToHex(i);
        }
    },
    computed: {
        lines: function() {
            var section = this.fileData;
            var data = section.data;
            if (data == null)
                return [];

            var res = [];
            var size = data.length;
            var dataOffset = section.offsetLow % (5 * 1024 * 1024);
            var maxlines = ((size - dataOffset + 15)/16)|0;
            var nlines = Math.min(maxlines, this.bytesPerPage / 16);

            for (var i=0; i < nlines; i++) {
                var hex = [];
                var ascii = [];
                for (var x = 0; x < 16 && dataOffset + 16*i + x < size; x++) {
                    hex[x] = this.byteToHex(data[dataOffset + 16*i + x]);
                    ascii[x] = String.fromCharCode(data[dataOffset + 16*i + x]);
                }
                res[i] = {hex:hex, ascii:ascii, start:this.intToHex(i*16 + section.offsetLow)};
            }
            return res;
        }
    }
};

},{ "../../mixins/downloader/index.js": 53, "../spinner/Spinner.vue": 16}], 79:[function(require,module,exports){
    const Confirm = require("../confirm/Confirm.vue");
    const Gallery = require("../drive/DriveGallery.vue");
    const Spinner = require("../spinner/Spinner.vue");

    const launcherMixin = require("../../mixins/launcher/index.js");
    const mixins = require("../../mixins/downloader/index.js");
    const routerMixins = require("../../mixins/router/index.js");

module.exports = {
render: function() {with(this){return _c('transition',{attrs:{"name":"modal"}},[_c('div',{staticClass:"modal-mask",on:{"click":close}},[_c('div',{staticClass:"modal-container full-height",staticStyle:{"width":"100%","overflow-y":"auto","padding":"0","display":"flex","flex-flow":"column"},on:{"click":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:"modal-header",staticStyle:{"padding":"0"}},[_c('center',[_c('h2',[(!isSecretLink && fullPathForDisplay.length > 0)?_c('span',{staticStyle:{"z-index":"9999"}},[(displayToBookmark)?_c('img',{staticStyle:{"height":"24px","width":"24px","cursor":"pointer"},attrs:{"src":"/images/bookmark-o.svg"},on:{"click":function($event){return toggleBookmark(false)}}}):_e(),_v(" "),(!displayToBookmark)?_c('img',{staticStyle:{"height":"24px","width":"24px","cursor":"pointer"},attrs:{"src":"/images/bookmark.svg"},on:{"click":function($event){return toggleBookmark(true)}}}):_e()]):_e(),_v("\n                    "+_s(getFullPathForDisplay())+"\n                ")])]),_v(" "),_c('span',{staticStyle:{"position":"absolute","top":"0","right":"0.2em"}},[(isWritable() && isMarkdown())?_c('span',{staticClass:"fas fa-edit",staticStyle:{"color":"black","font-size":"2.5em","font-weight":"bold","cursor":"pointer","margin":".3em"},attrs:{"tabindex":"0","title":"Edit file"},on:{"click":launchEditor,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return launchEditor($event)}}}):_e(),_v(" "),_c('span',{staticStyle:{"color":"black","font-size":"3em","font-weight":"bold","cursor":"pointer","font-family":"'Cambria Math'"},attrs:{"tabindex":"0"},on:{"click":close,"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return close($event)}}},[_v("×")])])],1),_v(" "),_c('div',{staticClass:"modal-body",staticStyle:{"margin":"0","padding":"0","display":"flex","flex-grow":"1"}},[(showSpinner)?_c('Spinner'):_e(),_v(" "),(showConfirm)?_c('Confirm',{attrs:{"confirm_message":confirm_message,"confirm_body":confirm_body,"consumer_cancel_func":confirm_consumer_cancel_func,"consumer_func":confirm_consumer_func},on:{"hide-confirm":function($event){showConfirm = false}}}):_e(),_v(" "),(showEmbeddedGallery)?_c('Gallery',{attrs:{"files":filesToViewInGallery,"hideGalleryTitle":false,"context":context},on:{"hide-gallery":function($event){showEmbeddedGallery = false}}}):_e(),_v(" "),_c('div',{staticClass:"modal-body",staticStyle:{"margin":"0","padding":"0","display":"flex","flex-grow":"1"},attrs:{"id":"md-container"}})],1)])])])}},    components: {
        Confirm,
        Gallery,
        Spinner
    },
    data: function() {
        return {
            showSpinner: false,
	        currPath: null,
	        currFilename: null,
	        isIframeInitialised: false,
            APP_NAME: 'markup-viewer',
            PATH_PREFIX: '/apps/markup-viewer/',
            showEmbeddedGallery: false,
            filesToViewInGallery: [],
            validImageSuffixes: ['jpg','jpeg','png','gif','webp'],
            validMediaSuffixes: ['mpg','mp3','mp4','avi','webm'],
            validResourceSuffixes: ['md', 'note'],//,'pdf','zip'];
            validResourceMimeTypes: ['text/x-markdown', 'text/'],
            scopedPath: null,
            updatedPath: '',
            updatedFilename: '',
            fullPathForDisplay: '',
            isFileWritable: false,
            showConfirm: false,
            confirm_message: "",
            confirm_body: "",
            confirm_consumer_cancel_func: () => {},
            confirm_consumer_func: () => {},
            launcherApp: null,
            displayToBookmark: true,
            targetFile: null,
        }
    },
    props: ['propAppArgs'],
    mixins:[mixins, routerMixins, launcherMixin],
    computed: {
        ...Vuex.mapState([
            'context',
            "shortcuts",
        ]),
        ...Vuex.mapGetters([
            'isSecretLink'
        ])
    },
    watch: {
        propAppArgs(newQuestion, oldQuestion) {
            this.goToPage();
        }
    },
    created: function() {
        const props = this.getPropsFromUrl();
        
        let filename = props.args.filename;
        let subPath = props.args.subPath != null && props.args.subPath.length > 0 ? props.args.subPath + "/" : "";
        let path = '/' + props.path;
        var completePath = '';
        if (subPath.length == 0 || props.args.subPath == path) {
            completePath = props.path + '/' + filename
        } else {
            completePath = subPath + filename
        }
        this.currFilename = filename;

        this.currPath = path;
        this.scopedPath = path + '/';
        let that = this;
        this.findFile(completePath, false).thenApply(file => {
            if (file != null) {
                that.isFileWritable = file.isWritable();
                that.readInFile(file).thenApply(data => {
                    that.setFullPathForDisplay();
                    that.targetFile = file;
                    let theme = that.$store.getters.currentTheme;
                    let subPath = that.propAppArgs.subPath != null ? that.propAppArgs.subPath
                                    : that.scopedPath.substring(0, that.scopedPath.length -1);
                    let extension = that.currFilename.substring(that.currFilename.lastIndexOf('.') + 1);
                    let func = function(iframe) {
                        iframe.contentWindow.postMessage({action: "respondToNavigateTo", theme: theme
                            , text:new TextDecoder().decode(data), extension: extension, subPath: subPath}, '*');
                        that.showSpinner = false;
                    };

                    that.resetEditor(func);
                });
            }
        });
    },
    methods: {
        launchEditor: function() {
            this.openFileOrDir("editor", this.currPath, {filename:this.currFilename});
        },
        isMarkdown: function() {
            return this.currFilename != null && this.currFilename.endsWith(".md");
        },
        isWritable: function() {
            return this.isFileWritable;
        },
        goToPage: function() {
            let filename = this.propAppArgs.filename;
            let subPath = this.propAppArgs.subPath != null ? this.propAppArgs.subPath
                : this.scopedPath.substring(0, this.scopedPath.length -1);
            let completePath = subPath + '/' + filename;
            this.currPath = subPath;
            this.currFilename = filename;
            let extension = filename.substring(filename.lastIndexOf('.') + 1);
            let that = this;
            this.showSpinner = true;
            let theme = this.$store.getters.currentTheme;
            this.findFile(completePath, false).thenApply(file => {
                if (file != null) {
                    that.readInFile(file).thenApply(data => {
                        that.setFullPathForDisplay();
                        that.targetFile = file;
                        let func = function(iframe) {
                            iframe.contentWindow.postMessage({action: "respondToNavigateTo", theme: theme, text:new TextDecoder().decode(data)
                                , extension: extension, subPath: subPath}, '*');
                            that.showSpinner = false;
                        };
                        that.resetEditor(func);
                    });
                }
            });
        },
	    frameUrl: function() {
            return this.frameDomain() + this.PATH_PREFIX + "index.html";
        },
        frameDomain: function() {
            return window.location.protocol + "//" + this.APP_NAME + '.' + window.location.host;
        },
        messageHandler: function(e) {
            let that = this;
            let iframe = document.getElementById("md-editor");
            let win = iframe.contentWindow;
            if (win == null ) {
                that.close();
            } else {
                if ((e.origin === "null" || e.origin === that.frameDomain()) && e.source === iframe.contentWindow) {
                    if (e.data.action == 'pong') {
                        that.isIframeInitialised = true;
                    } else if(e.data.action == 'navigateTo') {
                        that.navigateToRequest(iframe, e.data.path);
                    } else if(e.data.action == 'externalLink') {
                        that.navigateToExternalLink(e.data.url);
                    } else if(e.data.action == 'loadImage') {
                        that.loadImageRequest(iframe, e.data.src, e.data.id);
                    } else if(e.data.action == 'showMedia') {
                        that.showMediaRequest(e.data.path);
                    }
                }
            }
        },
        resetEditor: function(func) {
            let iframe = document.getElementById("md-editor");
            if (iframe != null) {
                iframe.parentNode.removeChild(iframe);
                window.removeEventListener('message', this.messageHandler);
            }
            this.isIframeInitialised = false;
            let that = this;
            peergos.shared.user.App.init(this.context, "launcher").thenApply(launcher => {
                that.launcherApp = launcher;
                that.startListener(func);
            });
        },
        startListener: function(func) {
            let that = this;
            let iframeContainer = document.getElementById("md-container");
            let iframe = document.createElement('iframe');
            iframe.id = 'md-editor';
            iframe.style.width = '100%';
            iframe.style.height = '100%';
            iframe.frameBorder="0";
            iframeContainer.appendChild(iframe);

            Vue.nextTick(function() {
                iframe.src = that.frameUrl();
                window.addEventListener('message', that.messageHandler);
                that.showSpinner = true;
                that.setupIFrameMessaging(iframe, func);
                setTimeout(() => {
                    if (!that.isIframeInitialised)
                        that.$toast.error("Unable to register service worker. Viewer will not work offline. \nTo enable offline usage, allow 3rd party cookies for " + window.location.protocol + "//[*]." + window.location.host + "\n Note: this is not tracking", {timeout:false});
                }, 1000 * 10);
            });
        },
        toggleBookmark: function(remove) {
            if(this.showSpinner || this.isSecretLink) {
                return;
            }
            let that = this;
            let address = this.fullPathForDisplay;
            if (address.length <= 1) {
                return;
            }
            let bookmark = this.shortcuts.shortcutsMap.get(address);
            let fileCreatedDate = new Date(this.targetFile.getFileProperties().created.toString() + "+00:00")
            if (remove) {
                if (bookmark != null) {
                    this.refreshAndDeleteBookmark(address);
                }
            } else {
                if (bookmark == null) {
                    this.refreshAndAddBookmark(address, fileCreatedDate);
                }
            }
        },
        refreshAndAddBookmark(link, created) {
            let that = this;
            this.showSpinner = true;
            this.loadShortcutsFile(this.launcherApp).thenApply(shortcutsMap => {
                if (shortcutsMap.get(link) == null) {
                    let entry = {added: new Date(), created: created};
                    shortcutsMap.set(link, entry)
                    that.updateShortcutsFile(that.launcherApp, shortcutsMap).thenApply(res => {
                        that.showSpinner = false;
                        that.displayToBookmark = false;
                        that.$store.commit("SET_SHORTCUTS", shortcutsMap);
                    });
                } else {
                    that.showSpinner = false;
                }
            })
        },
        refreshAndDeleteBookmark(link) {
            let that = this;
            this.showSpinner = true;
            this.loadShortcutsFile(this.launcherApp).thenApply(shortcutsMap => {
                if (shortcutsMap.get(link) != null) {
                    shortcutsMap.delete(link)
                    that.updateShortcutsFile(that.launcherApp, shortcutsMap).thenApply(res => {
                        that.showSpinner = false;
                        that.displayToBookmark = true;
                        that.$store.commit("SET_SHORTCUTS", shortcutsMap);
                    });
                } else {
                    that.showSpinner = false;
                }
            })
        },
	setupIFrameMessaging: function(iframe, func) {
        if (this.isIframeInitialised) {
            func(iframe);
        } else {
            iframe.contentWindow.postMessage({action: 'ping'}, '*');
            let that = this;
            window.setTimeout(function() {that.setupIFrameMessaging(iframe, func);}, 20);
        }
	},
    getFullPathForDisplay: function() {
        return this.fullPathForDisplay;
    },
    setFullPathForDisplay: function() {
        this.fullPathForDisplay = this.currPath + '/' + this.currFilename;
        if (this.shortcuts.shortcutsMap.get(this.fullPathForDisplay) == null) {
            this.displayToBookmark = true;
        } else {
            this.displayToBookmark = false;
        }
    },
    showMessage: function(isError, title, body) {
        let bodyContents = body == null ? '' : ' ' + body;
        if (isError) {
            this.$toast.error(title + bodyContents, {timeout:false});
        } else {
            this.$toast(title + bodyContents)
        }
    },
    showErrorMessage(errMsg) {
        console.log(errMsg);
        this.showMessage(true, "", errMsg);
        this.showSpinner = false;
    },
    close: function () {
        window.removeEventListener('message', this.messageHandler);
        this.$emit("hide-markup-viewer");
    },
    hasValidFileExtension: function(path, validExtensions, showErrorMessage) {
        let extensionIndex = path.lastIndexOf('.');
        if (extensionIndex > 0 && extensionIndex < path.length) {
            let extension = path.substring(extensionIndex +1).toLowerCase();
            if (validExtensions.includes(extension)) {
               return true;
            } else {
                if (showErrorMessage) {
                    this.showErrorMessage('file extension not on allowed list: ' + path);
                }
                return false;
            }
        } else {
            if (showErrorMessage) {
                this.showErrorMessage('unable to determine file extension: ' + path);
            }
            return false;
        }
    },
    calculatePath: function(filePath, updateFullPath) {
        if (filePath.startsWith(this.PATH_PREFIX)) {
            return this.calculateFullPath(this.scopedPath + filePath.substring(this.PATH_PREFIX.length), updateFullPath);
        } else {
            return this.calculateFullPath(filePath, updateFullPath);
        }
    },
    calculateFullPath: function(peergosPath, updateFullPath) {
        let pathElements = peergosPath.split('/').filter(n => n.length > 0);
        var path = this.currPath;
        var filename = '';
        if (pathElements == 0) {
            return null;
        } else if (pathElements.length == 1) {
            filename =  pathElements[0];
            if (updateFullPath) {
                this.updatedPath = path;
                this.updatedFilename = filename;
            }
        } else {
            let directories = pathElements.slice();
            directories.pop();
            path = '/' + directories.join('/');
            filename = pathElements[pathElements.length -1];
            if (updateFullPath) {
                this.updatedPath = path;
                this.updatedFilename = filename;
            }
        }
        return path + '/' + filename;
    },
    findMimeType(mimeType, validMimeTypes) {
        let matches = validMimeTypes.filter(validMimeType => mimeType.startsWith(validMimeType));
        return matches.length > 0;
    },
    loadResource: function(filePath, updateFullPath, validMimeTypes, validFileTypes) {
        let that = this;
        if (updateFullPath) {
            this.showSpinner = true;
        }
        let fullPath = this.calculatePath(filePath, updateFullPath);
        var future = peergos.shared.util.Futures.incomplete();
        if (fullPath == null) {
            future.complete(null);
        } else {
            that.findFile(fullPath, false).thenApply(file => {
                if (file != null) {
                    let mimeType = file.props.mimeType;
                    let type = file.props.getType();
                    if(validFileTypes.includes(type) || validFileTypes.length == 0) {
                        if (validMimeTypes.length == 0 || that.findMimeType(mimeType, validMimeTypes)) {
                            if (updateFullPath) {
                                that.showSpinner = false;
                                this.currPath = this.updatedPath;
                                this.currFilename = this.updatedFilename;
                                future.complete(true);
                            } else {
                                that.readInFile(file).thenApply(bytes => {
                                    that.showSpinner = false;
                                    future.complete(bytes);
                                });
                            }
                        } else {
                            that.showErrorMessage("Resource not of correct mimetype: " + fullPath);
                            future.complete(null);
                        }
                    } else {
                        that.showErrorMessage("Resource not of correct type: " + fullPath);
                        future.complete(null);
                    }
                } else {
                    that.showSpinner = false;
                    future.complete(null);
                }
            });
        }
        return future;
    },
    findFile: function(filePath, allowFolder) {
        let that = this;
        var future = peergos.shared.util.Futures.incomplete();
        this.context.getByPath(filePath).thenApply(function(fileOpt){
            if (fileOpt.ref == null) {
                //that.showErrorMessage("path not found!: " + filePath);
                future.complete(null);
            } else {
                let file = fileOpt.get();
                const props = file.getFileProperties();
                if (props.isHidden) {
                    that.showErrorMessage("file not accessible: " + filePath);
                    future.complete(null);
                }
                if (allowFolder != true && props.isDirectory) {
                    that.showErrorMessage("folder not accessible: " + filePath);
                    future.complete(null);
                } else {
                    future.complete(file);
                }
            }
        }).exceptionally(function(throwable) {
            console.log(throwable.getMessage());
            future.complete(null);
        });
        return future;
    },
    readInFile: function(file) {
        let that = this;
        const props = file.getFileProperties();
        var future = peergos.shared.util.Futures.incomplete();
        file.getInputStream(this.context.network, this.context.crypto, props.sizeHigh(), props.sizeLow(), function(read){})
            .thenCompose(function(reader) {
                var size = that.getFileSize(props);
                var data = convertToByteArray(new Int8Array(size));
                return reader.readIntoArray(data, 0, data.length).thenApply(function(read){
                    future.complete(data);
                });
        }).exceptionally(function(throwable) {
            that.showMessage(true, "Unexpected error", throwable.detailMessage);
            console.log('Error loading file: ' + that.file.getName());
            console.log(throwable.getMessage());
            future.complete(null);
        });
        return future;
    },
    showMediaRequest: function(filePath) {
        let that = this;
        let fullPath = this.calculatePath(filePath, false);
        if (fullPath == null) {
            return;
        }
        let allMediaSuffixes = this.validMediaSuffixes.concat(this.validImageSuffixes);
        that.findFile(fullPath, false).thenApply(file => {
            if (file != null) {
                let type = file.props.getType();
                if(this.hasValidFileExtension(fullPath, allMediaSuffixes, false) && (type == "image" || type == "audio" || type == "video")) {
                    that.openInGallery(file);
                } else {
                    let slashIndex = fullPath.lastIndexOf('/');
                    let filename = slashIndex >=0 ? fullPath.substring(slashIndex +1) : fullPath;
                    that.openFileOrDir("Drive", fullPath, {filename:filename});
                }
            } else {
                that.showErrorMessage("unable to find resource: " + fullPath);
            }
        });
    },
    openInGallery: function (file) {
        this.filesToViewInGallery = [file];
        this.showEmbeddedGallery = true;
    },
    loadImageRequest: function(iframe, src, id) {
        let that = this;
        if (this.hasValidFileExtension(src, this.validImageSuffixes, true)) {
            this.loadResource(src, false, [], ["image"]).thenApply(data => {
                if (data != null) {
                    let func = function() {
                      iframe.contentWindow.postMessage({action: "respondToLoadImage", id:id, data: data}, '*');
                    };
                    that.setupIFrameMessaging(iframe, func);
                }
            });
        }
    },
    confirmNavigationToExternalLink(url, confirmFunction, cancelFunction) {
        this.confirm_message='External Link Confirmation';
        this.confirm_body='You are about to open another browser tab and visit: ' + url;
        this.confirm_consumer_cancel_func = cancelFunction;
        this.confirm_consumer_func = confirmFunction;
        this.showConfirm = true;
    },
    openLinkInNewTab: function(url) {
        let link = document.createElement('a');
        let click = new MouseEvent('click');
        link.rel = "noopener noreferrer";
        link.target = "_blank"
        link.href = url;
        link.dispatchEvent(click);
    },
    navigateToExternalLink: function(url) {
        let that = this;
        if (this.isSecretLink) {
            this.openLinkInNewTab(url);
        } else {
            this.confirmNavigationToExternalLink(url,
                () => {
                    that.showConfirm = false;
                    that.openLinkInNewTab(url);
                },
                () => {
                    that.showConfirm = false;
                }
            );
        }
    },
    navigateToRequest: function(iframe, filePath) {
        let that = this;
        if (this.hasValidFileExtension(filePath, this.validResourceSuffixes, false)) {
            let previousPath = this.currPath;
            this.loadResource(filePath, true, this.validResourceMimeTypes, ["text"]).thenApply(isLoaded => {
                if (isLoaded) {
                    that.currPath = previousPath;
                    that.updateHistory("markup", that.scopedPath, {subPath: that.updatedPath, filename:that.updatedFilename});
                }
            });
        } else {
            var fullPath = this.calculatePath(filePath, false);
            that.findFile(fullPath, true).thenApply(file => {
                if (file != null) {
                    if (file.getFileProperties().isDirectory) {
                        that.openFileOrDir("Drive", fullPath, {filename:""});
                    } else {
                        fullPath = this.calculatePath(filePath, true);
                        let app = that.getApp(file, that.updatedPath);
                        if (app == 'hex') {
                            that.openFileOrDir("Drive", that.updatedPath, {filename:""});
                        } else {
                            that.openFileOrDir(app, that.updatedPath, {filename:that.updatedFilename});
                        }
                    }
                }
            });
        }
    },
    }
}
},{ "../../mixins/downloader/index.js": 53, "../../mixins/launcher/index.js": 65, "../../mixins/router/index.js": 3, "../confirm/Confirm.vue": 15, "../drive/DriveGallery.vue": 60, "../spinner/Spinner.vue": 16}], 5:[function(require,module,exports){module.exports = {
    "APP.LOGIN":"Login",
    "APP.SIGNUP":"Signup",
    "LOGIN.BUTTON":"Sign in",
    "LOGIN.USERNAME":"username",
    "LOGIN.PASSWORD":"password",
    "LOGIN.STAY":"Stay logged in",
    "SIGNUP.USERNAME":"public username",
    "SIGNUP.GENERATE":"Generate password",
    "SIGNUP.CLICKGEN":"Click generate password",
    "SIGNUP.REENTER":"Re-enter password",
    "SIGNUP.AGREE":"I understand that passwords cannot be reset or recovered - if I forget my password, then I will lose access to my account and data. If I enter my password into a malicious website then I will lose control of my account.",
    "SIGNUP.SIGNUPFREE":"Sign up",
    "SIGNUP.SIGNUPPAID":"Add payment card and sign up",
    "SIGNUP.ACCEPT":"I accept the",
    "SIGNUP.TERMS":"Terms of Service",
    "SIGNUP.AND":"and",
    "SIGNUP.POLICY":"Privacy Policy",
    "SIGNUP.HYPER":"of hyper secure storage",
    "SIGNUP.BUNDLED":"All our bundled private applications",
    "SIGNUP.MONTH":"month",
    "SIGNUP.YEAR":"year",
    "SIGNUP.BILL.MONTHLY":"billed monthly",
    "SIGNUP.BILL.YEARLY":"billed yearly",
    "SIGNUP.TRYTITLE":"Want to try it first?",
    "SIGNUP.TRY":"Try it for free",
    "PASSWORD.COMMON":"your password is the $PLACE most common password!",
    "PASSWORD.SHORT":"passwords less than $SIZE characters are considered unsafe",
    "PASSWORD.GOOD":"That's a better password",
    "TOUR.TITLE":"Welcome to Peergos!",
    "TOUR.STORAGE":"Encrypted storage",
    "TOUR.STORAGE.DESC":"Store your files and arrange them in folders.",
    "TOUR.SHARE":"Secure sharing",
    "TOUR.SHARE.DESC":"Securely share with friends on Peergos, or with anyone via a secret link.",
    "TOUR.PHOTOS":"Photo gallery",
    "TOUR.PHOTOS.DESC":"View slideshows of your photos.",
    "TOUR.DOCS":"Document editing",
    "TOUR.DOCS.DESC":"View and edit your text documents.",
    "TOUR.MUSIC":"Music collection",
    "TOUR.MUSIC.DESC":"Play your music collection.",
    "TOUR.VIDEOS":"Videos and movies",
    "TOUR.VIDEOS.DESC":"Watch your videos and movies from any device.",
    "TOUR.PDF":"PDF viewer",
    "TOUR.PDF.DESC":"Safely view PDF documents.",
    "TOUR.CAL":"Calendar",
    "TOUR.CAL.DESC":"Manage your schedule - share events or entire calendars.",
    "TOUR.SOCIAL":"Social Feed",
    "TOUR.SOCIAL.DESC":"Share posts and comments with your friends and followers.",
    "DRIVE.DROP":"Drop files here",
    "DRIVE.UPLOAD.FILES":"Upload files",
    "DRIVE.UPLOAD.FOLDER":"Upload folder",
    "DRIVE.NEW.FOLDER":"New folder",
    "DRIVE.NEW.FILE":"New file",
    "DRIVE.NEW.APP":"New App",
    "DRIVE.PASTE":"Paste",
    "DRIVE.WITH":"With",
    "DRIVE.SELECTED":"selected",
    "DRIVE.NAME":"Name",
    "DRIVE.SIZE":"Size",
    "DRIVE.TYPE":"Type",
    "DRIVE.MODIFIED":"Modified",
    "DRIVE.CREATED":"Created",
    "DRIVE.COPY":"Copy",
    "DRIVE.CUT":"Cut",
    "DRIVE.DELETE":"Delete",
    "DRIVE.DOWNLOAD":"Download",
    "DRIVE.ZIP":"Zip",
    "DRIVE.DESELECT":"Deselect",
    "DRIVE.VIEW":"View",
    "DRIVE.EDIT":"Edit",
    "DRIVE.RENAME":"Rename",
    "DRIVE.SHARE":"Share",
    "DRIVE.DOWNLOAD.ZIP":"Download as Zip",
    "DRIVE.THUMB":"Create Thumbnail",
    "DRIVE.PROPS":"Properties",
    "DRIVE.ADD.LAUNCH":"Add to Launcher",
    "DRIVE.RUN":"Run App",
    "DRIVE.INSTALL":"Install App",
    "DRIVE.DELETE.FILE":"Are you sure you want to delete",
    "DRIVE.DELETE.FILE2":"and all its contents",
    "DRIVE.DOWNLOAD.WARN":"Are you sure you want to download $NAME of size $SIZE MB?",
    "DRIVE.ZIP.ERROR":"Download as Zip only available where Streaming supported (like Chrome)",
    "DRIVE.EMPTY.FOLDER":"Folder: $NAME contains no files. Nothing to download",
    "DRIVE.CONFIRM.DOWNLOAD.TITLE":"Are you sure you want to download selected items?",
    "DRIVE.CONFIRM.DOWNLOAD.BODY":"Folder(s): $FOLDERS, File(s): $FILES, Total size: $SIZE",
    "DRIVE.MOVE.ACCESS.TITLE":"Maintain access whilst moving file(s)",
    "DRIVE.MOVE.ACCESS.BODY":"Do you want to maintain existing access and links to the moved file(s)?",
    "DRIVE.DOWNLOAD.FOLDERS":"Downloading selected folders",
    "DRIVE.DOWNLOAD.FOLDER":"Downloading folder: $NAME",
    "DRIVE.CONFIRM.DOWNLOAD.FOLDER.TITLE":"Are you sure you want to download folder: $NAME?",
    "DRIVE.OFFLINE":"Client Offline!",
    "DRIVE.UPLOAD.SPACE.ERROR":"File upload operation exceeds available space\nPlease free up $SPACE and try again",
    "DRIVE.UPLOAD.TITLE":"Encrypting and uploading file(s)",
    "DRIVE.UPLOAD.COMPLETE":"Completing upload and refreshing folder...",
    "DRIVE.UPLOAD.ERROR":"Error Uploading files",
    "DRIVE.UPLOAD.RESUME.TITLE":"Do you wish to resume failed file upload?",
    "DRIVE.UPLOAD.RESUME.BODY":"File: $NAME, Folder: $PATH",
    "DRIVE.UPLOAD.EMPTY":"Nothing to upload",
    "DRIVE.UPLOAD.EXISTS":"File: $NAME already exists in this location",
    "DRIVE.UPLOAD.REPLACE":"Do you wish to replace it?",
    "DRIVE.MOVE.ERROR":"Error moving file: $NAME",
    "DRIVE.COPY.ERROR":"Error copying file: $NAME",
    "DRIVE.COPY.SPACE.ERROR":"File copy operation exceeds available space\nPlease free up $SPACE and try again",
    "DRIVE.COPY.TOTAL.SPACE.ERROR":"File copy operation exceeds total space\n" + "Please upgrade to get more space",
    "DRIVE.PASTE.LOCATION.SAME":"Destination folder is same as source folder",
    "DRIVE.DOWNLOAD.MULTIPLE.STREAM.ERROR":"Downloading multiple files only available where Streaming supported (like Chrome)",
    "DRIVE.APP.EXISTS":"App with name $NAME already exists!",
    "DRIVE.APP.ERROR":"Error creating App",
    "DRIVE.FILENAME":"Enter a file name",
    "DRIVE.FILENAME.PLACEHOLDER":"File name",
    "DRIVE.FILENAME.INVALID":"Invalid File name",
    "DRIVE.FOLDERNAME.INVALID":"Invalid Folder name",
    "DRIVE.CREATE.ERROR":"Error creating file",
    "DRIVE.RENAME.TITLE":"Enter a new name",
    "DRIVE.RENAME.PLACEHOLDER":"New name",
    "DRIVE.RENAME.ERROR":"Error renaming $TYPE: $NAME",
    "DRIVE.DELETE.ERROR":"Error deleting files",
    "DRIVE.DELETE.CONFIRM":"Are you sure you want to delete $COUNT items?",
    "DRIVE.DELETE.FILE.ERROR":"Error deleting file: $NAME: $MESSAGE",
    "DRIVE.INSTALL_DEDICATED_APP":"There is no app installed for this kind of file, please install an app to open",
    "DRIVE.MISSING.FOLDER":"Folder not found!",
    "APPNAV.LAUNCHER":"Launcher",
    "APPNAV.DRIVE":"Drive",
    "APPNAV.NEWSFEED":"Newsfeed",
    "APPNAV.SOCIAL":"Social",
    "APPNAV.CAL":"Calendar",
    "APPNAV.EMAIL":"Email",
    "APPNAV.UPGRADE":"Upgrade",
    "SEARCH.SEARCH":"Search",
    "SEARCH.NAME.CONTAINS":"Filename contains",
    "SEARCH.TEXT.CONTAINS":"Text file contains",
    "SEARCH.MODIFIED.AFTER":"File modified after",
    "SEARCH.MODIFIED.BEFORE":"File modified before",
    "SEARCH.CREATED.AFTER":"File created after",
    "SEARCH.CREATED.BEFORE":"File created before",
    "SEARCH.SIZE.GREATER":"File size greater than",
    "SEARCH.SIZE.LESS":"File size less than",
    "SEARCH.TYPE":"File type",
    "SEARCH.AUDIO":"Audio",
    "SEARCH.IMAGE":"Image",
    "SEARCH.TEXT":"Text",
    "SEARCH.VIDEO":"Video",
    "SEARCH.RESULTS":"Results",
    "SEARCH.DIR":"Directory",
    "SETTINGS.ADMIN":"Admin Panel",
    "SETTINGS.ACCOUNT":"Account",
    "SETTINGS.PROFILE":"Profile",
    "SETTINGS.FEEDBACK":"Feedback",
    "SETTINGS.TOUR":"Tour",
    "SETTINGS.HELP":"Help/FAQ",
    "SETTINGS.AUTH":"Authentication",
    "SETTINGS.PASS":"Change Password",
    "SETTINGS.CLEANUP":"Cleanup Failed Uploads",
    "SETTINGS.CACHE":"Set Cache Size",
    "SETTINGS.DELETE":"Delete Account",
    "SETTINGS.LOGOUT":"Log out",
    "SETTINGS.CACHE.INVALID":"Cache size value not valid",
    "SETTINGS.CACHE.LARGE":"Invalid Cache size. Maximum Cache Size: $SIZE MiB",
    "SETTINGS.CACHE.UPDATED":"Cache Size Updated",
    "PASSWORD.CHANGE":"Change password",
    "PASSWORD.EXISTING":"Existing password",
    "PASSWORD.GENERATE":"Generate password",
    "PASSWORD.NEW":"New password",
    "PASSWORD.REENTER":"Re-enter new password",
    "PASSWORD.MATCH":"Passwords do not match",
    "PASSWORD.MFA":"Invalid Multi Factor Authenticator code",
    "PASSWORD.CHANGED":"Password changed",
    "PASSWORD.FIELDS":"All fields must be populated!",
    "MFA.TITLE":"Two-factor Authentication",
    "MFA.APP":"Authenticator App",
    "MFA.KEY":"Security Key",
    "MFA.REMOVE":"Remove",
    "MFA.ADD.KEY":"Add Security Key",
    "MFA.ERROR.RETRIEVAL":"Unable to retrieve authentication methods",
    "MFA.ERROR.DELETE":"Unable to delete authentication method",
    "MFA.MAX.KEYS":"Reached maximum number of Security Keys",
    "MFA.CONFIRM.REMOVE.KEY":"Are you sure you want to remove this key?",
    "MFA.CONFIRM.REMOVE.APP":"Are you sure you want to remove Authenticator App?",
    "HELP.TITLE":"Help/FAQ",
    "HELP.HOW":"How do I...",
    "HELP.UPGRADE":"Upgrade my Account?",
    "HELP.UPGRADE.TEXT":"Select 'Account' menu item after clicking on the user settings menu (the person icon in the top right-hand corner). Alternatively click on the bottom left of the screen you should see a 'UPGRADE' button. Follow the contents of the modal that appears to request space/upgrade/downgrade your account.",
    "HELP.SPACE":"See how much space I have used/have available?",
    "HELP.SPACE.TEXT":"On the top left you will see the Peergos logo of a tower. Click it to expand the left panel. At the bottom of the expanded panel it will display 99.9 KiB / 999.9 MiB where the first number is your usage and the second number is your available space.",
    "HELP.FOLLOW":"Send a follow request?",
    "HELP.FOLLOW.TEXT":"The social view is displayed via selecting the 3 connected dots icon on the left side menu. On the social page you can send a follow request and view any pending requests you have received.",
    "HELP.FRIENDS":"View my friends and followers?",
    "HELP.FRIENDS.TEXT1":"The social modal is displayed via selecting the 3 connected dots icon on the left side menu. Your social connections will be listed under Friends, Followers and Following.",
    "HELP.FRIENDS.TEXT2":"If you sent a follow request and the recipient clicked 'allow and follow back' then you become friends.",
    "HELP.PROFILE":"Create and share a Profile?",
    "HELP.PROFILE.TEXT1":"Select 'Profile' menu item after clicking on the user settings menu (the person icon in the top right-hand corner). Add desired details and click save. Profile image will be previewed after upload. Click the share button next to each completed field to set the viewable audience.",
    "HELP.PROFILE.TEXT2":"You can view someone else's profile via the links generated on the social view or on the newsfeed view.",
    "HELP.SHARE":"Share a file/folder with another Peergos user?",
    "HELP.SHARE.TEXT1":"Each file/folder icon in the drive will have a vertical 3 dot menu in the top right. From the context menu that appears, select Share. You can grant access to other users individually or in groups. Access can be for read only or read & write access. The recipient can on-share a shared file for read only access.",
    "HELP.SHARE.TEXT2":"When sharing a folder, sub-folders are automatically shared.",
    "HELP.SHARE.TEXT3":"Who has access and the level of access granted is also displayed on this modal.",
    "HELP.SHARED.FILES":"View files/folders shared with me?",
    "HELP.SHARED.FILES.TEXT1":"Select the newsfeed icon on the left menu. It will take some time to assemble a custom page consisting of the posts sent to you. The posts may be messages or links to files/folders shared with you.",
    "HELP.SHARED.FILES.TEXT2":"Alternatively if you know the username of the person who shared the file/folder, select the globe icon on top toolbar and navigate to their drive space.",
    "HELP.LINK":"Share a secret link to a file/folder?",
    "HELP.LINK.TEXT1":"Each file/folder icon in the drive will have a vertical 3 dot menu in the top right. From the context menu that appears, select Share. At the bottom of the modal, select the 'Create secret link' button.",
    "HELP.LINK.TEXT2":"The link can be pasted directly into a browser tab. If the link is to a folder, the sub-solders will also be visible to the recipient of the secret link.",
    "HELP.CAL":"Configure a Calendar?",
    "HELP.CAL.TEXT1":"From the calendar view, click the gears icon in the toolbar. Select the 'Calendar Settings' button to display the currently configured Calendars.",
    "HELP.CAL.TEXT2":"Selecting the dot next to each calendar will allow you to change the color to associate to the calendar. Clicking the calendar name will display a dialog to set a new name for the calendar.",
    "HELP.SHARE.CAL":"Share a whole calendar?",
    "HELP.SHARE.CAL.TEXT1":"Your primary calendar cannot be shared. You can create multiple calendars. From the calendar view, click the gears icon in the toolbar. Select the 'Calendar Settings' button to display the currently configured Calendars.",
    "HELP.SHARE.CAL.TEXT2":"Click the share button to set the read-only audience for the calendar.",
    "HELP.SHARE.CAL.TEXT3":"Calendars shared with you will first need to be imported via the newsfeed view.",
    "HELP.SHARE.EVENT":"Share a calendar event?",
    "HELP.SHARE.EVENT.TEXT1":"After creating a calendar event. Select the share link on the event context menu to set the audience.",
    "HELP.SHARE.EVENT.TEXT2":"Calendar events shared with you will first need to be imported via the newsfeed view. The imported event is a copy of the event.",
    "HELP.IMPORT.EVENT":"Import a calendar event?",
    "HELP.IMPORT.EVENT.TEXT1":"To import an event shared with you via another Peergos user, first open the newsfeed and select the event",
    "HELP.IMPORT.EVENT.TEXT2":"To import an .ics file, open the calendar view and select the gears icon in the toolbar. Select the 'Calendar Settings' button to display the currently configured Calendars. From here click the 'import' button.",
    "HELP.IMPORT.EVENT.TEXT3":"An .ics file containing multiple entries is supported. Different calendar implementations (including ours!) have varying level of support/compliance.",
    "HELP.SHARE.TASK":"Share a Task/Todo list?",
    "HELP.SHARE.TASK.TEXT":"Task/Todo lists are saved by default to the root directory of your Drive space. Click the vertical 3 dot icon in the top right of the desired Task/Todo item and select Share",
    "HELP.WWW":"Host a directory as a static website?",
    "HELP.WWW.TEXT1":"Select 'Profile' menu item after clicking on the user settings menu (the person icon in the top right-hand corner). At the bottom of the modal you will see a field titled 'Website Directory'. After setting the field and selecting Save, a Publish button will appear alongside the same field.",
    "HELP.WWW.TEXT2":"Click the publish button to complete the action.",
    "HELP.WWW.TEXT3":"NOTE: Publishing will make the folder and any sub-folders and all its contents public!",
    "HELP.WWW.TEXT4":"Clear the text field and click Save to reset.",
    "HELP.WWW.TEXT5":"See this blog post for more details",
    "HELP.CLEANUP":"Clean up failed uploads?",
    "HELP.CLEANUP.TEXT":"A failed upload will continue to consume Drive space. To free the attached space, select the 'Cleanup failed uploads' menu item from the user settings menu.",
    "HELP.THUMB":"Recreate a media thumbnail image?",
    "HELP.THUMB.TEXT":"The upload process will attempt to create a thumbnail image for image or video files. Various conditions/factors may conspire to render this unsuccessful. If this is the case, an additional 'Create Thumbnail' context menu item will be available. This process is also subject to conditions/factors which may prevent the creation of a thumbnail image.",
    "HELP.FEEDBACK":"Provide feedback?",
    "HELP.FEEDBACK.TEXT":"A feedback form is available via the 'Feedback' menu item on the user settings menu.",
    "HELP.PASSWORD":"Change my password?",
    "HELP.PASSWORD.TEXT":"See 'Change Password' menu item on the user settings menu.",
    "HELP.DELETE":"Delete my account?",
    "HELP.DELETE.TEXT1":"See 'Delete Account' menu item on the user settings menu.",
    "HELP.DELETE.TEXT2":"NOTE: ALL your data will be deleted and your account with be irretrievable.",
    "HELP.GRIPES":"Gripes/Concerns",
    "HELP.SLOW":"Why is everything so slow?",
    "HELP.SLOW.TEXT1":"It isn't! The whole story is always more complicated. In an end-to-end encrypted and peer-to-peer system, the client is required to do a lot of work (and not just decrypting/encryption). If you are technically minded, open the browser console and watch the stream of 100's of requests to get a flavour.",
    "HELP.SLOW.TEXT2":"There are still a lot of speed improvements we are planning on implementing. Performance will also improve as browsers implement some of the primitives we need for signing and encryption.",
    "HELP.JAVA":"I heard Peergos is written in Java, are you crazy?",
    "HELP.JAVA.TEXT1":"In fact Java is an ideal language for Peergos. The JVM is rock solid and provides good performance and resource utilization. The client is written mostly in java and trans-compiled to Javascript via the battle-hardened GWT.",
    "HELP.JAVA.TEXT2":"Having a single language codebase for server and most of the client has multiple benefits. We are not language zealots, other choices would be appropriate in different circumstances.",
    "FEEDBACK.TITLE":"Feedback",
    "FEEDBACK.TEXT1":"You can tell us here how we can improve, or you can chat with us on",
    "FEEDBACK.TEXT2":"or send us an email",
    "FEEDBACK.SUBMIT":"Submit",
    "FEEDBACK.PLACEHOLDER":"Type your feedback here.",
    "FEEDBACK.SENT":"Feedback sent. Thank you!",
    "FEEDBACK.ERROR":"Error sending feedback",
    "PROFILE.TITLE":"Profile",
    "PROFILE.UPLOAD":"Upload Image",
    "PROFILE.REMOVE":"Remove Image",
    "PROFILE.FIRSTNAME":"First name",
    "PROFILE.LASTNAME":"Last name",
    "PROFILE.PHONE":"Phone",
    "PROFILE.EMAIL":"Email",
    "PROFILE.STAUS":"Status",
    "PROFILE.BIO":"Biography",
    "PROFILE.WWW":"Website Directory",
    "PROFILE.CHANGE.WWW":"Change",
    "PROFILE.PUBLISH":"Publish",
    "PROFILE.PUBLIC":"Publically visible at",
    "PROFILE.SAVE":"Save Profile",
    "PROFILE.ERROR.IMAGE":"Unable to read image",
    "PROFILE.ERROR.NOT.FOUND":"Web Directory not found. Changes not saved!",
    "PROFILE.ERROR.PATH":"Web Directory not valid. Changes not saved!",
    "PROFILE.PUBLISH.HELP":"This allows you to publish a directory as a website. This will make everything in that directory public, and it will be available from https://$NAME.peergos.me or if you run a local Peergos gateway from http://$NAME.peergos.localhost:9000 Viewing websites via a local Peergos gateway doesn't rely on DNS or TLS certificate authorities for security or authenticity. You can get started by adding a index.html file to your web directory.",
    "PROFILE.CONFIRM.PUBLISH":"Are you sure you want to publish folder: $PATH?",
    "PROFILE.CONFIRM.PUBLISH.TEXT":"This action will make the folder and all its contents public.",
    "PROFILE.ERROR.PUBLISH":"Unable to publish Web Directory",
    "PROFILE.PUBLISH.SUCCESS":"Web Directory published",
    "PROFILE.PUBLISH.AVAILABLE":"Available at: https://$NAME.peergos.me",
    "PROFILE.ERROR.UNEXPECTED":"Unexpected error",
    "PROFILE.UPDATED":"Profile updated",
    "PROFILE.ERROR.UPDATE":"Unable to update profile",
    "DELETE.ACCOUNT":"Delete Account",
    "DELETE.ACCOUNT.TEXT1":"If you choose to proceed you will lose access to your account and data!",
    "DELETE.ACCOUNT.TEXT2":"This action is not reversible.",
    "DELETE.ACCOUNT.TEXT3":"You must enter your password to confirm you want to delete your account and all your data.",
    "DELETE.ACCOUNT.CONFIRM":"Are you absolutely sure you want to delete your account?",
    "DELETE.ACCOUNT.YES":"Yes, delete everything",
    "DELETE.ACCOUNT.CANCEL":"Nevermind",
    "DELETE.ACCOUNT.DONE":"Account Deleted!",
    "DELETE.ACCOUNT.PASS":"Password must be populated!",
    "DELETE.ACCOUNT.ERROR":"Error Deleting Account",
    "DELETE.ACCOUNT.MFA":"Invalid Multi Factor Authenticator code",
    "SPACE.TITLE":"Request space",
    "SPACE.CURRENT":"Current space",
    "SPACE.PLACEHOLDER":"New total space amount",
    "SPACE.POSITIVE":"Space must be a positive integer",
    "SPACE.SMALL":"You can't request space smaller than your current usage, please delete some files and try again.",
    "SPACE.SENT":"Space request sent!",
    "PAID.AGREE":"By continuing you agree to our",
    "PAID.ACCOUNT":"Account",
    "PAID.STORAGE":"of hyper secure storage",
    "PAID.APPS":"All our bundled private applications",
    "PAID.MONTH":"month",
    "PAID.CARD":"Update payment details (opens in new tab)",
    "PAID.CANCEL":"Cancel Peergos subscription",
    "PAID.CANCEL.CONFIRM":"Cancel subscription",
    "PAID.CANCEL.OK":"Keep Peergos subscription",
    "PAID.PRORATA":"pro rata for current term",
    "PAID.SETTINGS":"Subscription settings",
    "PAID.UPGRADE":"Upgrade your account to get more space",
    "PAID.CURRENT":"Your Current Plan",
    "PAID.PRO":"Select Pro (opens new tab)",
    "PAID.VISIONARY":"Select Visionary (opens new tab)",
    "PAID.PIONEER":"Select Pioneer (opens new tab)",
    "PAID.SORRY":"Sorry to see you go. You have until the end of the billing month to download your data, after which it will be deleted.",
    "PAID.THANKYOU":"Thank you for signing up to a paid Peergos account!",
    "PAID.CARD.NEEDED":"Card details required. Add a payment card to complete your upgrade.",
    "PAID.ERROR.CANCEL":"Error cancelling account",
    "PAID.ERROR.STORAGE":"Error requesting more storage",
    "DRIVE.SHARE.USER":"please select user",
    "DRIVE.SHARE.R":"Read Only",
    "DRIVE.SHARE.RW":"Read & Write",
    "DRIVE.SHARE.GROUP":"Or Group(s)",
    "DRIVE.SHARE.FRIENDS":"Friends",
    "DRIVE.SHARE.FOLLOWERS":"Followers (Includes Friends)",
    "DRIVE.SHARE.RWACCESS":"Read and Write Access",
    "DRIVE.SHARE.REVOKE":"Revoke",
    "DRIVE.SHARE.NONE":"None",
    "DRIVE.SHARE.RACCESS":"Read only Access",
    "DRIVE.SHARE.LINK":"Create Secret Link",
    "DRIVE.SHARE.CONFIRM":"Confirm Action",
    "DRIVE.SHARE.CREATE.FILE":"Create secret link to file",
    "DRIVE.SHARE.CREATE.FOLDER":"Create secret link to current folder and open file",
    "DRIVE.SHARE.FOLDER.OPEN":"Secret link to current folder and open file",
    "DRIVE.SHARE.FOLDER":"Secret link to folder",
    "DRIVE.SHARE.FILE":"Secret link to file",
    "DRIVE.SHARE.ERROR":"Error sharing file",
    "DRIVE.SHARE.REVOKE.R":"Read access revoked",
    "DRIVE.SHARE.ERROR.UNSHARING":"Error unsharing file",
    "DRIVE.SHARE.REVOKE.RW":"Read & Write access revoked",
    "DRIVE.SHARE.ERROR.HOME":"You cannot share your home directory",
    "DRIVE.SHARE.ERROR.WRITE":"Only the owner of a file can grant write access",
    "DRIVE.SHARE.ERROR.REPEAT":"Already shared",
    "DRIVE.SHARE.COMPLETE":"Secure sharing complete",
    "DRIVE.LINK.OPEN":"Auto Open",
    "DRIVE.LINK.COPY":"Copy to clipboard",
    "DRIVE.LINK.EMAIL":"via email",
    "DRIVE.LINK.OK":"OK",
    "DRIVE.LINK.UPDATE":"Update",
    "DRIVE.LINK.VIEWEDIT":"View/Edit",
    "DRIVE.LINK.CREATE":"Create",
    "DRIVE.LINK.WRITABLE":"Make link writable (Beware: the link holder could fill your space)",
    "DRIVE.LINK.EXPIRE.ON":"Expire on",
    "DRIVE.LINK.AT.TIME":"at time",
    "DRIVE.LINK.LIMIT.RETRIEVALS":"Limit number of link usages",
    "DRIVE.LINK.PASSWORD":"Require a password to access",
    "DRIVE.LINK.ERROR.CREATE":"Error occurred creating secret link",
    "DRIVE.LINK.ERROR.UPDATE":"Error occurred updating secret link",
    "VERIFY.TITLE":"Verifying friend",
    "VERIFY.SCAN":"Scan your friend's QR code",
    "VERIFY.NUMBERS":"Or you can read these numbers out to each other (they should match)",
    "VERIFY.ERROR.CAMERA":"Couldn't connect to camera. Make sure it is connected and click allow access when prompted.",
    "VERIFY.SUCCESS":"Friend successfully verified!",
    "VERIFY.ERROR.MISMATCH":"QR code did not match this person's identity on Peergos. Are you sure this person is who they say they are?",
    "VERIFY.VERIFIED":"Verified",
    "VERIFY.UNVERIFIED":"Unverified",
    "LAUNCHER.CUSTOM":"Custom Apps",
    "LAUNCHER.UPDATE":"Check for Updates",
    "LAUNCHER.NONE":"No Custom Apps currently installed.  Create an App from the 'create app' menu item of the green plus.",
    "LAUNCHER.SHORTCUTS":"Shortcuts",
    "LAUNCHER.ADD.SHORTCUT":"Entries can be added via context menu item 'Add to Launcher'",
    "LAUNCHER.ADDED":"Added",
    "LAUNCHER.NAME":"Name",
    "LAUNCHER.FOLDER":"Folder",
    "LAUNCHER.REMOVE":"Remove",
    "LAUNCHER.FILE.EXISTS":"File: $NAME already exists in this location",
    "LAUNCHER.FILE.REPLACE":"Do you wish to replace it?",
    "LAUNCHER.CREATED.SUCCESS":"File created",
    "LAUNCHER.CREATED.ERROR":"File creation failed",
    "LAUNCHER.UPDATES.NONE":"All up-to-date",
    "LAUNCHER.UPDATES.ONE":"1 has an update",
    "LAUNCHER.UPDATES.MANY":"$COUNT have updates",
    "LAUNCHER.APP.REMOVE":"Remove App",
    "LAUNCHER.APP.REMOVE.CONFIRM":"Are you sure you want to remove this App (Including all associated data)?",
    "LAUNCHER.SHORTCUT.REMOVE":"Remove shortcut",
    "LAUNCHER.SHORTCUT.REMOVE.CONFIRM":"Are you sure you want to remove this shortcut?",
    "SOCIAL.TITLE":"Social view",
    "SOCIAL.SEND.TITLE":"Send follow request",
    "SOCIAL.SELECT":"please select user",
    "SOCIAL.SEND":"Send",
    "SOCIAL.INCOMING":"Incoming follow requests",
    "SOCIAL.ALLOWANDFOLLOW":"Allow and follow back",
    "SOCIAL.ALLOW":"Allow",
    "SOCIAL.DENY":"Deny",
    "SOCIAL.FRIENDS":"Friends",
    "SOCIAL.UNFOLLOW":"Unfollow",
    "SOCIAL.REMOVE":"Remove",
    "SOCIAL.VERIFICATION":"Verification",
    "SOCIAL.FOLLOWERS":"Followers",
    "SOCIAL.FOLLOWING":"Following",
    "SOCIAL.BLOCKED":"Blocked",
    "SOCIAL.UNBLOCK":"Unblock",
    "SOCIAL.ALREADY.SENT":"Follow request already sent",
    "SOCIAL.BLOCKED.USERS":"The following users are blocked",
    "SOCIAL.USER.BLOCKED":"User: $USER is blocked",
    "SOCIAL.SENT":"Follow request(s) sent",
    "SOCIAL.ERROR":"Follow request(s) failed",
    "SOCIAL.RECIPROCATED":"Follow request reciprocated",
    "SOCIAL.ACCEPTED":"Follow request accepted",
    "SOCIAL.REJECTED":"Follow request rejected",
    "SOCIAL.REMOVED":"Removed follower",
    "SOCIAL.STOPPED":"Stopped following",
    "SOCIAL.UNBLOCKED":"unblocked",
    "NEWSFEED.TITLE":"Newsfeed",
    "NEWSFEED.NEW":"New Post",
    "NEWSFEED.BUILDING":"Building your news feed.",
    "NEWSFEED.MINUTE":"This could take a minute..",
    "NEWSFEED.BUILT":"This is your news feed.",
    "NEWSFEED.DESC":"You can see here all the things that have been shared with you by friends or people you follow.",
    "NEWSFEED.FRIEND":"Send friend request",
    "NEWSFEED.END":"No more entries",
    "NEWSFEED.JOIN":"Join",
    "NEWSFEED.ADD.COMMENT":"Add comment",
    "NEWSFEED.COMMENT":"comment",
    "NEWSFEED.MORE":"Show more",
    "NEWSFEED.EDITED":"edited",
    "NEWSFEED.DELETE.CONFIRM":"Are you sure you want to delete the ",
    "NEWSFEED.POST":"post",
    "NEWSFEED.POST.BUTTON":"Post",
    "NEWSFEED.POST.REPLY":"Post a Reply",
    "NEWSFEED.POST.EDIT":"Edit a Post",
    "NEWSFEED.POST.UPLOAD.SPACE.ERROR":"Media File(s) exceed available Space - Please free up $SPACE and try again",
    "NEWSFEED.POST.UPLOAD.SPACE.ERROR2":"Unable to proceed. $NAME file size exceeds available space",
    "NEWSFEED.POST.UPLOAD":"Encrypting and uploading",
    "NEWSFEED.POST.SHARE.WITH":"Share post with:",
    "NEWSFEED.POST.SHARE.WITH.FRIENDS":"Friends",
    "NEWSFEED.POST.SHARE.WITH.FOLLOWERS":"Followers (Includes Friends)",
    "NEWSFEED.ERROR.MEDIA.DELETE":"error deleting media file!",
    "NEWSFEED.ERROR.POST.DELETE":"error deleting post",
    "NEWSFEED.ERROR.POST.LOAD":"error loading post",
    "NEWSFEED.ERROR.CHAT.JOIN":"Unable to join Chat.",
    "NEWSFEED.APP.ABSENT":"App with name: $NAME not installed!",
    "NEWSFEED.YOU":"you",
    "NEWSFEED.WRITEACCESS":"write access to",
    "NEWSFEED.ACAL":"a calendar",
    "NEWSFEED.INVITED.APP":"invited you to the App",
    "NEWSFEED.FOLDER":"the folder",
    "NEWSFEED.ANEVENT":"a calendar event",
    "NEWSFEED.FILE":"the file",
    "NEWSFEED.OWNED":"owned by",
    "CALENDAR.TITLE":"Calendar",
    "CALENDAR.ERROR.LOAD":"Couldn't load calendar",
    "CALENDAR.ERROR.LOAD.FILE":"Couldn't load calendar file",
    "CALENDAR.EVENT":"Event",
    "CALENDAR.THIS.EVENT":"This event",
    "CALENDAR.ALL.EVENTS":"All events",
    "CALENDAR.FUTURE.EVENTS":"This and future events",
    "CALENDAR.NEW.NAME":"New Calendar name",
    "CALENDAR.ENTER.NAME":"Enter a new name",
    "CALENDAR.INVALID.NAME":"Invalid calendar name. Use only alphanumeric characters plus space, dash and underscore",
    "CALENDAR.ALREADY.IMPORTED":"Calendar: $NAME already imported",
    "CALENDAR.ERROR.DELETE":"Unable to delete Calendar",
    "CALENDAR.DELETE.CONFIRM":"Are you sure you want to delete calendar: $NAME ?",
    "CALENDAR.ERROR.DELETE.EVENT":"Unable to delete event",
    "CALENDAR.ERROR.SAVE.EVENT":"Unable to save event",
    "CALENDAR.ERROR.LOAD.FILE":"Unable to load file",
    "CALENDAR.ERROR.SAVE.MOVED.EVENT":"Unable to save moved event",
    "CALENDAR.RECREATE.EVENT":"Please re-create event",
    "CALENDAR.ERROR.MOVE.EVENT":"Unable to move event",
    "CALENDAR.ERROR.UPLOAD":"Unable to upload event(s). Please close calendar",
    "CALENDAR.IMPORT.MSG":"Importing $ITEMS calendar event(s)",
    "CALENDAR.IMPORT.COMPLETE":"Completed importing event(s)",
    "CALENDAR.ERROR.IMPORT.EVENT":"Unable to import event(s)",
    "CALENDAR.IMPORT.EVENT":'Do you wish to import Event:',
    "CALENDAR.IMPORT.CALENDAR":'Do you wish to import Calendar:',
    "CALENDAR.LABEL":'Calendar',
    "CALENDAR.EVENT.LINK":'Link to event',
    "SANDBOX.APP.DATA":"Can store and read files in a folder private to the app",
    "SANDBOX.EDIT.FILE":"Can modify file chosen by user",
    "SANDBOX.READ.FOLDER":"Can read selected files of the associated types from folder chosen by user",
    "SANDBOX.MESSAGES":"Can exchange messages with friends",
    "SANDBOX.MAILBOX":"Can manage an email mailbox",
    "SANDBOX.PROFILE.PHOTO":"Can retrieve profile photos of your friends",
    "SANDBOX.UNSAFE":"Allow app to modify its own code",
    "SANDBOX.UNKNOWN":"Unknown permission",
    "FOLDER.PICKER.NO.FOLDERS":"No folders selected...",
    "FOLDER.PICKER.NO.FOLDER":"No folder selected...",
    "FOLDER.PICKER.MULTIPLE.SELECTION.NOT.SUPPORTED":"Multiple folder selection not supported!",
    "NEW.FOLDER.NAME.LABEL":"Folder name",
    "NEW.FOLDER.NAME.MESSAGE":"Create folder",
    "PROMPT.OK":"OK",
    "PROMPT.CANCEL":"Cancel",
    "PROMPT.SET":"Set",
    "DRIVE.MOVING.TITLE":"Moving file(s)",
    "DRIVE.MOVING.COMPLETE":"Completing move and refreshing folder...",
    "DRIVE.COPYING.TITLE":"Copying file(s)",
    "DRIVE.COPYING.COMPLETE":"Completing copy and refreshing folder..."
}
},{}], 6:[function(require,module,exports){module.exports = {
    "APP.LOGIN": "Iniciar sesión",
    "APP.SIGNUP": "Registrarse",
    "LOGIN.BUTTON": "Iniciar sesión",
    "LOGIN.USERNAME": "nombre de usuario",
    "LOGIN.PASSWORD": "contraseña",
    "LOGIN.STAY": "Permanecer conectado",
    "SIGNUP.USERNAME": "nombre de usuario público",
    "SIGNUP.GENERATE": "Generar contraseña",
    "SIGNUP.CLICKGEN": "Haga clic en generar contraseña",
    "SIGNUP.REENTER": "Vuelva a ingresar la contraseña",
    "SIGNUP.AGREE": "Entiendo que las contraseñas no se pueden restablecer ni recuperar. Si olvido mi contraseña, perderé el acceso a mi cuenta y mis datos. Si ingreso mi contraseña en un sitio web malicioso, perderé el control de mi cuenta",
    "SIGNUP.SIGNUPFREE": "Registrarse",
    "SIGNUP.SIGNUPPAID": "Agregar tarjeta de pago y registrarse",
    "SIGNUP.ACCEPT": "Acepto los",
    "SIGNUP.TERMS": "Condiciones del servicio",
    "SIGNUP.AND": "y",
    "SIGNUP.POLICY": "Política de privacidad",
"SIGNUP.HYPER": "de almacenamiento hiperseguro",
    "SIGNUP.BUNDLED": "Todas nuestras aplicaciones privadas incluidas",
    "SIGNUP.MONTH": "mes",
    "SIGNUP.YEAR": "año",
    "SIGNUP.BILL.MONTHLY": "facturación mensual",
    "SIGNUP.BILL.YEARLY": "facturación anual",
    "SIGNUP.TRYTITLE": "¿Quieres probarlo primero?",
    "SIGNUP.TRY": "Pruébalo gratis",
    "PASSWORD.COMMON": "Tu contraseña es la $PLACE contraseña más común",
    "PASSWORD.SHORT": "Las contraseñas de menos de $SIZE caracteres se consideran inseguras",
    "PASSWORD.GOOD": "Esa es una contraseña mejor",
    "TOUR.TITLE": "Bienvenido a Peergos",
    "TOUR.STORAGE": "Almacenamiento cifrado",
    "TOUR.STORAGE.DESC": "Almacena tus archivos y organízalos en carpetas.",
    "TOUR.SHARE": "Comparte de forma segura",
    "TOUR.SHARE.DESC": "Comparte de forma segura con amigos en Peergos o con cualquier persona a través de un enlace secreto.",
    "TOUR.PHOTOS": "Galería de fotos",
    "TOUR.PHOTOS.DESC": "Ve presentaciones de diapositivas de tus fotos.",
    "TOUR.DOCS": "Edición de documentos",
    "TOUR.DOCS.DESC": "Ve y edita tus documentos de texto.",
    "TOUR.MUSIC": "Colección de música",
    "TOUR.MUSIC.DESC": "Reproduce tu colección de música.",
    "TOUR.VIDEOS": "Vídeos y películas",
    "TOUR.VIDEOS.DESC": "Ve tus vídeos y películas desde cualquier dispositivo.",
    "TOUR.PDF": "Visualizador de PDF",
    "TOUR.PDF.DESC": "Vea documentos PDF de forma segura.",
    "TOUR.CAL": "Calendario",
    "TOUR.CAL.DESC": "Administra tu agenda: comparte eventos o calendarios completos",
    "TOUR.SOCIAL": "Feed social",
    "TOUR.SOCIAL.DESC": "Comparte publicaciones y comentarios con tus amigos y seguidores",
    "DRIVE.DROP": "Suelta archivos aquí",
    "DRIVE.UPLOAD.FILES": "Subir archivos",
    "DRIVE.UPLOAD.FOLDER": "Subir carpeta",
    "DRIVE.NEW.FOLDER": "Nueva carpeta",
    "DRIVE.NEW.FILE": "Nuevo archivo",
    "DRIVE.NEW.APP": "Nueva aplicación",
    "DRIVE.PASTE": "Pegar",
    "DRIVE.WITH": "Con",
    "DRIVE.SELECTED": "seleccionado",
    "DRIVE.NAME": "Nombre",
    "DRIVE.SIZE": "Tamaño",
    "DRIVE.TYPE": "Tipo",
    "DRIVE.MODIFIED": "Modificado",
    "DRIVE.CREATED": "Creado",
    "DRIVE.COPY": "Copiar",
    "DRIVE.CUT": "Cortar",
    "DRIVE.DELETE": "Eliminar",
    "DRIVE.DOWNLOAD": "Descargar",
    "DRIVE.ZIP": "Cómpralo",
    "DRIVE.DESELECT": "Deseleccionar",
    "DRIVE.VIEW": "Ver",
    "DRIVE.EDIT": "Editar",
    "DRIVE.RENAME": "Cambiar nombre",
    "DRIVE.SHARE": "Compartir",
    "DRIVE.DOWNLOAD.ZIP": "Descargar como archivo Zip",
    "DRIVE.THUMB": "Crear miniatura",
    "DRIVE.PROPS": "Propiedades",
    "DRIVE.ADD.LAUNCH": "Añadir al lanzador",
    "DRIVE.RUN": "Ejecutar aplicación",
    "DRIVE.INSTALL": "Instalar aplicación",
    "DRIVE.DELETE.FILE": "Seguro que quieres eliminar",
    "DRIVE.DELETE.FILE2": "y todo su contenido",
    "DRIVE.DOWNLOAD.WARN": "Seguro que quieres descargar $NAME de tamaño $SIZE MB?",
    "DRIVE.ZIP.ERROR": "La descarga como archivo Zip solo está disponible donde se admite la transmisión (como Chrome)",
    "DRIVE.EMPTY.FOLDER": "La carpeta $NAME no contiene archivos. No hay nada que descargar",
    "DRIVE.CONFIRM.DOWNLOAD.TITLE": "¿Está seguro de que desea descargar los elementos seleccionados?",
    "DRIVE.CONFIRM.DOWNLOAD.BODY": "Carpeta(s): $FOLDERS, Archivo(s): $FILES, Tamaño total: $SIZE",
    "DRIVE.MOVE.ACCESS.TITLE": "Mantener el acceso mientras se mueven los archivos",
    "DRIVE.MOVE.ACCESS.BODY": "¿Desea mantener el acceso y los vínculos existentes a los archivos movidos?",
    "DRIVE.DOWNLOAD.FOLDERS": "Descargando las carpetas seleccionadas",
    "DRIVE.DOWNLOAD.FOLDER": "Descargando la carpeta: $NAME",
    "DRIVE.CONFIRM.DOWNLOAD.FOLDER.TITLE": "¿Está seguro de que desea descargar la carpeta: $NAME?",
    "DRIVE.OFFLINE": "Cliente sin conexión",
    "DRIVE.UPLOAD.SPACE.ERROR": "La operación de carga de archivos excede el espacio disponible. Libere $SPACE e intente nuevamente",
    "DRIVE.UPLOAD.TITLE": "Encriptando y cargando archivo(s)",
    "DRIVE.UPLOAD.COMPLETE": "Completando la carga y actualizando la carpeta...",
    "DRIVE.UPLOAD.ERROR": "Error al cargar archivos",
    "DRIVE.UPLOAD.RESUME.TITLE": "¿Desea reanudar la carga de archivos fallida?",
    "DRIVE.UPLOAD.RESUME.BODY": "Archivo: $NAME, Carpeta: $PATH",
    "DRIVE.UPLOAD.EMPTY": "No hay nada que cargar",
    "DRIVE.UPLOAD.EXISTS": "El archivo: $NAME ya existe en esta ubicación",
    "DRIVE.UPLOAD.REPLACE": "¿Desea reemplazarlo?",
    "DRIVE.MOVE.ERROR": "Error al mover el archivo: $NAME",
    "DRIVE.COPY.ERROR": "Error al copiar el archivo: $NAME",
    "DRIVE.COPY.SPACE.ERROR": "La operación de copia de archivo excede el espacio disponible\nLibere $SPACE e intente nuevamente",
    "DRIVE.COPY.TOTAL.SPACE.ERROR": "La operación de copia de archivo excede el espacio total\n" + "Actualice para obtener más espacio",
    "DRIVE.PASTE.LOCATION.SAME": "La carpeta de destino es la misma que la carpeta de origen",
    "DRIVE.DOWNLOAD.MULTIPLE.STREAM.ERROR": "La descarga de varios archivos solo está disponible donde se admite la transmisión (como Chrome)",
    "DRIVE.APP.EXISTS": "La aplicación con el nombre $NAME ya existe",
    "DRIVE.APP.ERROR": "Error al crear la aplicación",
    "DRIVE.FILENAME": "Ingrese un nombre de archivo",
    "DRIVE.FILENAME.PLACEHOLDER": "Nombre de archivo",
    "DRIVE.FILENAME.INVALID": "Nombre de archivo no válido",
    "DRIVE.FOLDERNAME.INVALID": "Carpeta no válida nombre",
    "DRIVE.CREATE.ERROR": "Error al crear el archivo",
    "DRIVE.RENAME.TITLE": "Ingrese un nuevo nombre",
    "DRIVE.RENAME.PLACEHOLDER": "Nuevo nombre",
    "DRIVE.RENAME.ERROR": "Error al cambiar el nombre de $TYPE: $NAME",
    "DRIVE.DELETE.ERROR": "Error al eliminar archivos",
    "DRIVE.DELETE.CONFIRM": "¿Está seguro de que desea eliminar $COUNT elementos?",
    "DRIVE.DELETE.FILE.ERROR": "Error al eliminar el archivo: $NAME: $MESSAGE",
    "DRIVE.INSTALL_DEDICATED_APP": "No hay ninguna aplicación instalada para este tipo de archivo, instale una aplicación para abrir",
    "DRIVE.MISSING.FOLDER": "No se encontró la carpeta",
    "APPNAV.LAUNCHER": "Iniciador",
    "APPNAV.DRIVE": "Unidad",
    "APPNAV.NEWSFEED": "Noticias",
    "APPNAV.SOCIAL": "Social",
    "APPNAV.CAL": "Calendario",
    "APPNAV.EMAIL": "Correo electrónico",
    "APPNAV.UPGRADE": "Actualizar",
    "SEARCH.SEARCH": "Buscar",
    "SEARCH.NAME.CONTAINS": "El nombre del archivo contiene",
    "SEARCH.TEXT.CONTAINS": "El archivo de texto contiene",
    "SEARCH.MODIFIED.AFTER": "Archivo modificado después de",
    "SEARCH.MODIFIED.BEFORE": "Archivo modificado antes de",
    "SEARCH.CREATED.AFTER": "Archivo creado después de",
    "SEARCH.CREATED.BEFORE": "Archivo creado antes de",
    "SEARCH.SIZE.GREATER": "Tamaño del archivo mayor que",
    "SEARCH.SIZE.LESS": "Tamaño del archivo menor que",
    "SEARCH.TYPE": "Tipo de archivo",
    "SEARCH.AUDIO": "Audio",
    "SEARCH.IMAGE": "Imagen",
    "SEARCH.TEXT": "Texto",
    "SEARCH.VIDEO": "Vídeo",
    "SEARCH.RESULTS": "Resultados",
    "SEARCH.DIR": "Directorio",
    "SETTINGS.ADMIN": "Panel de administración",
    "SETTINGS.ACCOUNT": "Cuenta",
    "SETTINGS.PROFILE": "Perfil",
    "SETTINGS.FEEDBACK": "Comentarios",
    "SETTINGS.TOUR": "Recorrido",
    "SETTINGS.HELP": "Ayuda/Preguntas frecuentes",
    "SETTINGS.AUTH": "Autenticación",
    "SETTINGS.PASS": "Cambiar contraseña",
    "SETTINGS.CLEANUP": "Limpiar cargas fallidas",
    "SETTINGS.CACHE": "Establecer tamaño de caché",
    "SETTINGS.DELETE": "Eliminar cuenta",
    "SETTINGS.LOGOUT": "Cerrar sesión",
    "SETTINGS.CACHE.INVALID": "El valor del tamaño de caché no es válido",
    "SETTINGS.CACHE.LARGE": "Tamaño de caché no válido. Tamaño máximo de caché: $SIZE MiB",
    "SETTINGS.CACHE.UPDATED": "Tamaño de caché actualizado",
    "PASSWORD.CHANGE": "Cambiar contraseña",
    "PASSWORD.EXISTING": "Contraseña existente",
    "PASSWORD.GENERATE": "Generar contraseña",
    "PASSWORD.NEW": "Nueva contraseña",
    "PASSWORD.REENTER": "Vuelva a ingresar la nueva contraseña",
    "PASSWORD.MATCH": "Las contraseñas no coinciden",
    "PASSWORD.MFA": "Código de autenticador multifactor no válido",
    "PASSWORD.CHANGED": "Contraseña cambiada",
    "PASSWORD.FIELDS": "Todos los campos deben completarse",
    "MFA.TITLE": "Autenticación de dos factores",
    "MFA.APP": "Aplicación de autenticador",
    "MFA.KEY": "Clave de seguridad",
    "MFA.REMOVE": "Eliminar",
    "MFA.ADD.KEY": "Agregar clave de seguridad",
    "MFA.ERROR.RETRIEVAL": "No se pueden recuperar los métodos de autenticación",
    "MFA.ERROR.DELETE": "No se puede eliminar el método de autenticación",
    "MFA.MAX.KEYS": "Se alcanzó el número máximo de claves de seguridad",
    "MFA.CONFIRM.REMOVE.KEY": "¿Está seguro de que desea eliminar esta clave?",
    "MFA.CONFIRM.REMOVE.APP": "¿Está seguro de que desea eliminar la aplicación Authenticator?",
    "HELP.TITLE": "Ayuda/Preguntas frecuentes",
    "HELP.HOW": "Cómo hago...",
    "HELP.UPGRADE": "Actualizar mi cuenta?",
    "HELP.UPGRADE.TEXT": "Seleccione el elemento de menú 'Cuenta' después de hacer clic en el menú de configuración del usuario (el ícono de la persona en la esquina superior derecha). Alternativamente, haga clic en la parte inferior izquierda de la pantalla; debería ver un botón 'ACTUALIZAR'. Sigue el contenido del modal que aparece para solicitar espacio/actualizar/degradar tu cuenta.",
    "HELP.SPACE": "¿Quieres ver cuánto espacio he usado/tengo disponible?",
    "HELP.SPACE.TEXT": "En la parte superior izquierda verás el logotipo de Peergos de una torre. Haz clic en él para expandir el panel izquierdo. En la parte inferior del panel expandido, se mostrarán 99,9 KiB/999,9 MiB, donde el primer número es tu uso y el segundo es tu espacio disponible.",
    "HELP.FOLLOW": "¿Enviar una solicitud de seguimiento?",
    "HELP.FOLLOW.TEXT": "La vista social se muestra seleccionando el icono de 3 puntos conectados en el menú del lado izquierdo. En la página social puedes enviar una solicitud de seguimiento y ver las solicitudes pendientes que hayas recibido.",
    "HELP.FRIENDS": "¿Ver a mis amigos y seguidores?",
    "HELP.FRIENDS.TEXT1": "La vista social se muestra seleccionando el icono de 3 puntos conectados en el menú del lado izquierdo. Tus conexiones sociales aparecerán en Amigos, Seguidores y Siguiendo.",
    "HELP.FRIENDS.TEXT2": "Si enviaste una solicitud de seguimiento y el destinatario hizo clic en 'permitir y seguir de vuelta', se convertirán en amigos.",
    "HELP.PROFILE": "¿Crear y compartir un perfil?",
    "HELP.PROFILE.TEXT1": "Selecciona el elemento de menú 'Perfil' después de hacer clic en el menú de configuración de usuario (el ícono de la persona en la esquina superior derecha). Agrega los detalles que desees y haz clic en guardar. La imagen de perfil se previsualizará después de la carga. Haz clic en el botón compartir junto a cada campo completado para establecer la audiencia visible.",
    "HELP.PROFILE.TEXT2": "Puedes ver el perfil de otra persona a través de los enlaces generados en la vista social o en la vista de noticias.",
    "HELP.SHARE": "¿Compartir un archivo o carpeta con otro usuario de Peergos?",
    "HELP.SHARE.TEXT1": "Cada ícono de archivo o carpeta en la unidad tendrá un menú vertical de 3 puntos en la parte superior derecha. En el menú contextual que aparece, selecciona Compartir. Puedes otorgar acceso a otros usuarios de forma individual o en grupos. El acceso puede ser de solo lectura o de lectura y escritura. El destinatario puede compartir un archivo compartido para acceso de solo lectura.",
    "HELP.SHARE.TEXT2": "Al compartir una carpeta, las subcarpetas se comparten automáticamente.",
    "HELP.SHARE.TEXT3": "Quién tiene acceso y el nivel de acceso otorgado también se muestran en este modal.",
    "HELP.SHARED.FILES": "Ver archivos/carpetas compartidos conmigo?",
    "HELP.SHARED.FILES.TEXT1": "Seleccione el ícono de noticias en el menú de la izquierda. Tomará un tiempo armar una página personalizada que conste de las publicaciones que le enviamos. Las publicaciones pueden ser mensajes o enlaces a archivos o carpetas compartidos contigo.",
    "HELP.SHARED.FILES.TEXT2": "Alternativamente, si conoces el nombre de usuario de la persona que compartió el archivo o la carpeta, selecciona el ícono del globo en la barra de herramientas superior y navega hasta su espacio en el disco.",
    "HELP.LINK": "¿Compartir un enlace secreto a un archivo o carpeta?",
    "HELP.LINK.TEXT1": "Cada ícono de archivo o carpeta en el disco tendrá un menú vertical de 3 puntos en la parte superior derecha. En el menú contextual que aparece, selecciona Compartir. En la parte inferior del modal, selecciona el botón 'Crear enlace secreto'.",
    "HELP.LINK.TEXT2": "El enlace se puede pegar directamente en una pestaña del navegador. Si el enlace es a una carpeta, los subsoldados también serán visibles para el destinatario del enlace secreto.",
    "HELP.CAL": "¿Configurar un calendario?",
    "HELP.CAL.TEXT1": "Desde la vista del calendario, haz clic en el ícono de engranajes en la barra de herramientas. Seleccione el botón 'Configuración del calendario' para visualizar los calendarios configurados actualmente.",
    "HELP.CAL.TEXT2": "Si selecciona el punto junto a cada calendario, podrá cambiar el color que se asociará al calendario. Si hace clic en el nombre del calendario, aparecerá un cuadro de diálogo para configurar un nuevo nombre para el calendario.",
    "HELP.SHARE.CAL": "¿Desea compartir un calendario completo?",
    "HELP.SHARE.CAL.TEXT1": "Su calendario principal no se puede compartir. Puede crear varios calendarios. Desde la vista del calendario, haga clic en el icono de engranajes en la barra de herramientas. Seleccione el botón 'Configuración del calendario' para mostrar los calendarios configurados actualmente.",
    "HELP.SHARE.CAL.TEXT2": "Haga clic en el botón para compartir para establecer la audiencia de solo lectura para el calendario.",
    "HELP.SHARE.CAL.TEXT3": "Los calendarios compartidos con usted primero deberán importarse a través de la vista de noticias.",
    "HELP.SHARE.EVENT": "¿Compartir un evento del calendario?",
    "HELP.SHARE.EVENT.TEXT1": "Después de crear un evento del calendario, seleccione el enlace para compartir en el menú contextual del evento para establecer la audiencia.",
    "HELP.SHARE.EVENT.TEXT2": "Los eventos del calendario compartidos con usted primero deberán importarse a través de la vista de noticias. El evento importado es una copia del evento.",
    "HELP.IMPORT.EVENT": "¿Quieres importar un evento del calendario?",
    "HELP.IMPORT.EVENT.TEXT1": "Para importar un evento compartido contigo a través de otro usuario de Peergos, primero abre el canal de noticias y selecciona el evento",
    "HELP.IMPORT.EVENT.TEXT2": "Para importar un archivo .ics, abre la vista del calendario y selecciona el icono de engranajes en la barra de herramientas. Selecciona el botón 'Configuración del calendario' para mostrar los calendarios configurados actualmente. Desde aquí, haz clic en el botón 'Importar'.",
    "HELP.IMPORT.EVENT.TEXT3": "Se admite un archivo .ics que contenga varias entradas. Las diferentes implementaciones de calendario (¡incluida la nuestra!) tienen distintos niveles de compatibilidad/cumplimiento.",
    "HELP.SHARE.TASK": "¿Quieres compartir una lista de tareas/cosas por hacer?",
    "HELP.SHARE.TASK.TEXT": "Las listas de tareas/cosas por hacer se guardan de forma predeterminada en el directorio raíz de tu espacio de Drive. Haga clic en el icono de 3 puntos verticales en la parte superior derecha del elemento de tarea/cosa por hacer que desee y seleccione Compartir",
    "HELP.WWW": "¿Alojar un directorio como un sitio web estático?",
    "HELP.WWW.TEXT1":"Seleccione el elemento de menú 'Perfil' después de hacer clic en el menú de configuración de usuario (el icono de la persona en la esquina superior derecha). En la parte inferior del modal verá un campo titulado 'Directorio de sitios web'. Después de configurar el campo y seleccionar Guardar, aparecerá un botón Publicar junto al mismo campo.",
    "HELP.WWW.TEXT2":"Haga clic en el botón Publicar para completar la acción.",
    "HELP.WWW.TEXT3":"NOTA: ¡La publicación hará que la carpeta y todas las subcarpetas y todo su contenido sean públicos!",
    "HELP.WWW.TEXT4":"Limpie el campo de texto y haga clic en Guardar para restablecer.",
    "HELP.WWW.TEXT5":"Consulte esta publicación del blog para obtener más detalles",
    "HELP.CLEANUP": "¿Quieres limpiar las cargas fallidas?",
    "HELP.CLEANUP.TEXT": "Las cargas fallidas seguirán consumiendo espacio en Drive. Para liberar el espacio adjunto, selecciona el elemento de menú 'Limpiar las cargas fallidas' en el menú de configuración del usuario.",
    "HELP.THUMB": "¿Quieres volver a crear una imagen en miniatura de un archivo multimedia?",
    "HELP.THUMB.TEXT": "El proceso de carga intentará crear una imagen en miniatura para los archivos de imagen o vídeo. Varias condiciones o factores pueden conspirar para que esto no tenga éxito. Si este es el caso, habrá disponible un elemento de menú contextual adicional 'Crear miniatura'. Este proceso también está sujeto a condiciones o factores que pueden impedir la creación de una imagen en miniatura.",
    "HELP.FEEDBACK": "¿Quieres proporcionar comentarios?",
    "HELP.FEEDBACK.TEXT": "Hay un formulario de comentarios disponible a través del elemento de menú 'Comentarios' en el menú de configuración del usuario.",
    "HELP.PASSWORD": "¿Quieres cambiar mi contraseña?",
    "HELP.PASSWORD.TEXT": "Consulta el elemento de menú 'Cambiar contraseña' en el menú de configuración del usuario.",
    "HELP.DELETE": "¿Quieres eliminar mi cuenta?",
    "HELP.DELETE.TEXT1": "Consulta el elemento de menú 'Eliminar cuenta' en el menú de configuración del usuario.",
    "HELP.DELETE.TEXT2": "NOTA: TODOS tus datos se eliminarán y tu cuenta será irrecuperable.",
    "HELP.GRIPES": "Quejas/Inquietudes",
    "HELP.SLOW": "¿Por qué todo es tan lento?",
    "HELP.SLOW.TEXT1": "No lo es. La historia completa siempre es más complicada. En un sistema de punto a punto y cifrado de extremo a extremo, el cliente debe hacer mucho trabajo (y no solo descifrar/cifrar). Si tiene conocimientos técnicos, abra la consola del navegador y observe el flujo de cientos de solicitudes para hacerse una idea.",
    "HELP.SLOW.TEXT2":"Todavía hay muchas mejoras de velocidad que estamos planeando implementar. El rendimiento también mejorará a medida que los navegadores implementen algunas de las primitivas que necesitamos para firmar y cifrar.",
    "HELP.JAVA":"Escuché que Peergos está escrito en Java, ¿estás loco?",
    "HELP.JAVA.TEXT1":"De hecho, Java es un lenguaje ideal para Peergos. La JVM es sólida como una roca y proporciona un buen rendimiento y utilización de recursos. El cliente está escrito principalmente en Java y transcompilado a Javascript a través del GWT reforzado.",
    "HELP.JAVA.TEXT2":"Tener una base de código de un solo lenguaje para el servidor y la mayor parte del cliente tiene múltiples beneficios. No somos fanáticos del lenguaje, otras opciones serían apropiadas en diferentes circunstancias.",
    "FEEDBACK.TITLE": "Comentarios",
    "FEEDBACK.TEXT1": "Puede decirnos aquí cómo podemos mejorar, o puede chatear con nosotros en",
    "FEEDBACK.TEXT2": "o enviarnos un correo electrónico",
    "FEEDBACK.SUBMIT": "Enviar",
    "FEEDBACK.PLACEHOLDER": "Escriba aquí sus comentarios.",
    "FEEDBACK.SENT": "Comentarios enviados. ¡Gracias!",
    "FEEDBACK.ERROR": "Error al enviar el comentario",
    "PROFILE.TITLE": "Perfil",
    "PROFILE.UPLOAD": "Subir imagen",
    "PROFILE.REMOVE": "Eliminar imagen",
    "PROFILE.FIRSTNAME": "Nombre",
    "PROFILE.LASTNAME": "Apellido",
    "PROFILE.PHONE": "Teléfono",
    "PROFILE.EMAIL": "Correo electrónico",
    "PROFILE.STAUS": "Estado",
    "PROFILE.BIO": "Biografía",
    "PROFILE.WWW": "Directorio de sitios web",
    "PROFILE.CHANGE.WWW": "Cambiar",
    "PROFILE.PUBLISH": "Publicar",
    "PROFILE.PUBLIC": "Visible públicamente en",
    "PROFILE.SAVE": "Guardar perfil",
    "PROFILE.ERROR.IMAGE": "No se puede leer la imagen",
    "PROFILE.ERROR.NOT.FOUND": "No se encontró el directorio web. ¡No se guardaron los cambios!",
    "PROFILE.ERROR.PATH": "Directorio web no válido. ¡No se guardaron los cambios!",
    "PROFILE.PUBLISH.HELP": "Esto le permite publicar un directorio como un sitio web. Esto hará que todo en ese directorio sea público y estará disponible desde https://$NAME.peergos.me o, si ejecuta una puerta de enlace local de Peergos, desde http://$NAME.peergos.localhost:9000. La visualización de sitios web a través de una puerta de enlace local de Peergos no depende de las autoridades de certificación DNS o TLS para la seguridad o la autenticidad. Puede comenzar agregando un archivo index.html a su directorio web.",
    "PROFILE.CONFIRM.PUBLISH": "¿Está seguro de que desea publicar la carpeta: $PATH?",
    "PROFILE.CONFIRM.PUBLISH.TEXT": "Esta acción hará que la carpeta y todo su contenido sean públicos.",
    "PROFILE.ERROR.PUBLISH": "No se puede publicar el directorio web",
    "PROFILE.PUBLISH.SUCCESS": "Directorio web publicado",
    "PROFILE.PUBLISH.AVAILABLE": "Disponible en: https://$NAME.peergos.me",
    "PROFILE.ERROR.UNEXPECTED": "Error inesperado",
    "PROFILE.UPDATED": "Perfil actualizado",
    "PROFILE.ERROR.UPDATE": "No se puede actualizar el perfil",
    "DELETE.ACCOUNT": "Eliminar cuenta",
    "DELETE.ACCOUNT.TEXT1": "Si elige continuar, perderá el acceso a su cuenta y datos!",
    "DELETE.ACCOUNT.TEXT2": "Esta acción no es reversible.",
    "DELETE.ACCOUNT.TEXT3": "Debe ingresar su contraseña para confirmar que desea eliminar su cuenta y todos sus datos.",
    "DELETE.ACCOUNT.CONFIRM": "Está absolutamente seguro de que desea eliminar su cuenta?",
    "DELETE.ACCOUNT.YES": "Sí, eliminar todo",
    "DELETE.ACCOUNT.CANCEL": "No importa",
    "DELETE.ACCOUNT.DONE": "Cuenta eliminada",
    "DELETE.ACCOUNT.PASS": "Se debe completar la contraseña",
    "DELETE.ACCOUNT.ERROR": "Error al eliminar la cuenta",
    "DELETE.ACCOUNT.MFA": "Código de autenticador multifactor no válido",
    "SPACE.TITLE": "Solicitar espacio",
    "SPACE.CURRENT": "Espacio actual",
    "SPACE.PLACEHOLDER": "Nueva cantidad total de espacio",
    "SPACE.POSITIVE": "El espacio debe ser un entero positivo",
    "SPACE.SMALL": "No puedes solicitar un espacio menor al que usas actualmente. Elimina algunos archivos y vuelve a intentarlo",
    "SPACE.SENT": "Solicitud de espacio enviada",
    "PAID.AGREE": "Al continuar, aceptas nuestros términos",
    "PAID.ACCOUNT": "Cuenta",
    "PAID.STORAGE": "de almacenamiento hiperseguro",
    "PAID.APPS": "Todas nuestras aplicaciones privadas incluidas",
    "PAID.MONTH": "mes",
    "PAID.CARD": "Actualizar detalles de pago (se abre en una nueva pestaña)",
    "PAID.CANCEL": "Cancelar Peergos suscripción",
    "PAID.CANCEL.CONFIRM": "Cancelar suscripción",
    "PAID.CANCEL.OK": "Mantener suscripción a Peergos",
    "PAID.PRORATA": "Prorrateo para el período actual",
    "PAID.SETTINGS": "Configuración de suscripción",
    "PAID.UPGRADE": "Actualiza tu cuenta para obtener más espacio",
    "PAID.CURRENT": "Tu plan actual",
    "PAID.PRO": "Selecciona Pro (abre una nueva pestaña)",
    "PAID.VISIONARY": "Selecciona Visionary (abre una nueva pestaña)",
    "PAID.PIONEER": "Selecciona Pioneer (abre una nueva pestaña)",
    "PAID.SORRY": "Lamentamos que te vayas. Tienes hasta el final del mes de facturación para descargar tus datos, después de lo cual se eliminarán",
    "PAID.THANKYOU": "Gracias por registrarte en una cuenta paga de Peergos",
    "PAID.CARD.NEEDED": "Se requieren los datos de la tarjeta. Agregue una tarjeta de pago para completar su actualización.",
    "PAID.ERROR.CANCEL": "Error al cancelar la cuenta",
    "PAID.ERROR.STORAGE": "Error al solicitar más almacenamiento",
    "DRIVE.SHARE.USER": "Seleccione el usuario",
    "DRIVE.SHARE.R": "Solo lectura",
    "DRIVE.SHARE.RW": "Lectura y escritura",
    "DRIVE.SHARE.GROUP": "O grupo(s)",
    "DRIVE.SHARE.FRIENDS": "Amigos",
    "DRIVE.SHARE.FOLLOWERS": "Seguidores (incluye amigos)",
    "DRIVE.SHARE.RWACCESS": "Acceso de lectura y escritura",
    "DRIVE.SHARE.REVOKE": "Revocar",
    "DRIVE.SHARE.NONE": "Ninguno",
    "DRIVE.SHARE.RACCESS": "Acceso de solo lectura",
    "DRIVE.SHARE.LINK": "Crear enlace secreto",
    "DRIVE.SHARE.CONFIRM": "Confirmar Acción",
    "DRIVE.SHARE.CREATE.FILE": "Crear un enlace secreto a un archivo",
    "DRIVE.SHARE.CREATE.FOLDER": "Crear un enlace secreto a la carpeta actual y abrir un archivo",
    "DRIVE.SHARE.FOLDER.OPEN": "Enlace secreto a la carpeta actual y abrir un archivo",
    "DRIVE.SHARE.FOLDER": "Enlace secreto a la carpeta",
    "DRIVE.SHARE.FILE": "Enlace secreto a un archivo",
    "DRIVE.SHARE.ERROR": "Error al compartir el archivo",
    "DRIVE.SHARE.REVOKE.R": "Acceso de lectura revocado",
    "DRIVE.SHARE.ERROR.UNSHARING": "Error al dejar de compartir el archivo",
    "DRIVE.SHARE.REVOKE.RW": "Acceso de lectura y escritura revocado",
    "DRIVE.SHARE.ERROR.HOME": "No puede compartir su directorio personal",
    "DRIVE.SHARE.ERROR.WRITE": "Solo el propietario de un archivo puede otorgar permisos de escritura acceso",
    "DRIVE.SHARE.ERROR.REPEAT": "Ya compartido",
    "DRIVE.SHARE.COMPLETE": "Compartido seguro completado",
    "DRIVE.LINK.OPEN": "Apertura automática",
    "DRIVE.LINK.COPY": "Copiar al portapapeles",
    "DRIVE.LINK.EMAIL": "Por correo electrónico",
    "DRIVE.LINK.OK": "Aceptar",
    "DRIVE.LINK.UPDATE": "Actualizar",
    "DRIVE.LINK.VIEWEDIT": "Ver/Editar",
    "DRIVE.LINK.CREATE": "Crear",
    "DRIVE.LINK.WRITABLE": "Hacer que el enlace sea escribible (Cuidado: el titular del enlace podría llenar su espacio)",
    "DRIVE.LINK.EXPIRE.ON": "Caduca el",
    "DRIVE.LINK.AT.TIME": "A la hora",
    "DRIVE.LINK.LIMIT.RETRIEVALS": "Limitar la cantidad de usos del enlace",
    "DRIVE.LINK.PASSWORD": "Requerir una contraseña para acceder",
    "DRIVE.LINK.ERROR.CREATE": "Error al crear el enlace secreto",
    "DRIVE.LINK.ERROR.UPDATE": "Error al actualizar el enlace secreto",
    "VERIFY.TITLE": "Verificando amigo",
    "VERIFY.SCAN": "Escanea el código QR de tu amigo",
    "VERIFY.NUMBERS": "O pueden leerse estos números (deberían coincidir)",
    "VERIFY.ERROR.CAMERA": "No se pudo conectar a la cámara. Asegúrate de que esté conectada y haz clic en permitir acceso cuando se te solicite",
    "VERIFY.SUCCESS": "Amigo verificado correctamente",
    "VERIFY.ERROR.MISMATCH": "El código QR no coincide con la identidad de esta persona en Peergos. ¿Está seguro de que esta persona es quien dice ser?",
    "VERIFY.VERIFIED": "Verificado",
    "VERIFY.UNVERIFIED": "Sin verificar",
    "LAUNCHER.CUSTOM": "Aplicaciones personalizadas",
    "LAUNCHER.UPDATE": "Buscar actualizaciones",
    "LAUNCHER.NONE": "No hay aplicaciones personalizadas instaladas actualmente. Cree una aplicación desde el elemento de menú 'crear aplicación' del signo más verde.",
    "LAUNCHER.SHORTCUTS": "Accesos directos",
    "LAUNCHER.ADD.SHORTCUT": "Se pueden agregar entradas mediante el elemento de menú contextual 'Agregar al iniciador'",
    "LAUNCHER.ADDED": "Agregado",
    "LAUNCHER.NAME": "Nombre",
    "LAUNCHER.FOLDER": "Carpeta",
    "LAUNCHER.REMOVE": "Eliminar",
    "LAUNCHER.FILE.EXISTS": "El archivo $NAME ya existe en esta ubicación",
    "LAUNCHER.FILE.REPLACE": "¿Desea reemplazarlo?",
    "LAUNCHER.CREATED.SUCCESS": "Archivo creado",
    "LAUNCHER.CREATED.ERROR": "Error en la creación del archivo",
    "LAUNCHER.UPDATES.NONE": "Todo actualizado",
    "LAUNCHER.UPDATES.ONE": "1 tiene una actualización",
    "LAUNCHER.UPDATES.MANY": "$COUNT tiene actualizaciones",
    "LAUNCHER.APP.REMOVE": "Eliminar aplicación",
    "LAUNCHER.APP.REMOVE.CONFIRM": "¿Seguro que desea eliminar esta aplicación (incluidos todos los datos asociados)?",
    "LAUNCHER.SHORTCUT.REMOVE": "Eliminar acceso directo",
    "LAUNCHER.SHORTCUT.REMOVE.CONFIRM": "¿Seguro que desea eliminar este acceso directo?",
    "SOCIAL.TITLE": "Vista social",
    "SOCIAL.SEND.TITLE": "Enviar solicitud de seguimiento",
    "SOCIAL.SELECT": "Seleccione el usuario",
    "SOCIAL.SEND": "Enviar",
    "SOCIAL.INCOMING": "Solicitudes de seguimiento entrantes",
    "SOCIAL.ALLOWANDFOLLOW": "Permitir y seguir de vuelta",
    "SOCIAL.ALLOW": "Permitir",
    "SOCIAL.DENY": "Denegar",
    "SOCIAL.FRIENDS": "Amigos",
    "SOCIAL.UNFOLLOW": "Dejar de seguir",
    "SOCIAL.REMOVE": "Eliminar",
    "SOCIAL.VERIFICATION": "Verificación",
    "SOCIAL.FOLLOWERS": "Seguidores",
    "SOCIAL.FOLLOWING": "Siguiendo",
    "SOCIAL.BLOCKED": "Bloqueado",
    "SOCIAL.UNBLOCK": "Desbloquear",
    "SOCIAL.ALREADY.SENT": "Solicitud de seguimiento ya enviada",
    "SOCIAL.BLOCKED.USERS": "Los siguientes usuarios están bloqueados",
    "SOCIAL.USER.BLOCKED": "Usuario: $USER está bloqueado",
    "SOCIAL.SENT": "Solicitud(es) de seguimiento enviadas",
    "SOCIAL.ERROR": "Solicitud(es) de seguimiento fallidas",
    "SOCIAL.RECIPROCATED": "Solicitud de seguimiento correspondida",
    "SOCIAL.ACCEPTED": "Solicitud de seguimiento aceptada",
    "SOCIAL.REJECTED": "Solicitud de seguimiento rechazada",
    "SOCIAL.REMOVED": "Seguidor eliminado",
    "SOCIAL.STOPPED": "Dejó de seguir",
    "SOCIAL.UNBLOCKED": "Desbloqueado",
    "NEWSFEED.TITLE": "Noticias",
    "NEWSFEED.NEW": "Nueva publicación",
    "NEWSFEED.BUILDING": "Construyendo tu sección de noticias",
    "NEWSFEED.MINUTE": "Esto podría llevar un minuto...",
    "NEWSFEED.BUILT": "Esta es tu sección de noticias",
    "NEWSFEED.DESC": "Aquí puedes ver todo lo que han compartido contigo tus amigos o personas a las que sigues",
    "NEWSFEED.FRIEND": "Enviar solicitud de amistad",
    "NEWSFEED.END": "No hay más entradas",
    "NEWSFEED.JOIN": "Unirse",
    "NEWSFEED.ADD.COMMENT": "Agregar comentario",
    "NEWSFEED.COMMENT": "Comentar",
    "NEWSFEED.MORE": "Mostrar más",
    "NEWSFEED.EDITED": "editado",
    "NEWSFEED.DELETE.CONFIRM": "¿Está seguro de que desea eliminar el ",
    "NEWSFEED.POST": "publicación",
    "NEWSFEED.POST.BUTTON": "Publicar",
    "NEWSFEED.POST.REPLY": "Publicar una respuesta",
    "NEWSFEED.POST.EDIT": "Editar una publicación",
    "NEWSFEED.POST.UPLOAD.SPACE.ERROR": "Los archivos multimedia superan el espacio disponible. Libere $SPACE y vuelva a intentarlo",
    "NEWSFEED.POST.UPLOAD.SPACE.ERROR2": "No se puede continuar. El tamaño del archivo $NAME excede el espacio disponible",
    "NEWSFEED.POST.UPLOAD": "Encriptando y cargando",
    "NEWSFEED.POST.SHARE.WITH": "Compartir publicación con:",
    "NEWSFEED.POST.SHARE.WITH.FRIENDS": "Amigos",
    "NEWSFEED.POST.SHARE.WITH.FOLLOWERS": "Seguidores (incluye amigos)",
    "NEWSFEED.ERROR.MEDIA.DELETE": "Error al eliminar el archivo multimedia",
    "NEWSFEED.ERROR.POST.DELETE": "Error al eliminar la publicación",
    "NEWSFEED.ERROR.POST.LOAD": "Error al cargar la publicación",
    "NEWSFEED.ERROR.CHAT.JOIN": "No se puede unir al chat",
    "NEWSFEED.APP.ABSENT": "Aplicación con el nombre: $NAME no instalada",
    "NEWSFEED.YOU": "tú",
    "NEWSFEED.WRITEACCESS": "acceso de escritura a",
    "NEWSFEED.ACAL": "un calendario",
    "NEWSFEED.INVITED.APP": "te invitó a la aplicación",
    "NEWSFEED.FOLDER": "la carpeta",
    "NEWSFEED.ANEVENT": "un evento del calendario",
    "NEWSFEED.FILE": "el archivo",
    "NEWSFEED.OWNED": "propiedad de",
    "CALENDAR.TITLE": "Calendario",
    "CALENDAR.ERROR.LOAD": "No se pudo cargar el calendario",
    "CALENDAR.ERROR.LOAD.FILE": "No se pudo cargar el archivo del calendario",
    "CALENDAR.EVENT": "Evento",
    "CALENDAR.THIS.EVENT": "Este evento",
    "CALENDAR.ALL.EVENTS": "Todos los eventos",
    "CALENDAR.FUTURE.EVENTS": "Este y futuros eventos",
    "CALENDAR.NEW.NAME": "Nuevo nombre del calendario",
    "CALENDAR.ENTER.NAME": "Ingrese un nuevo nombre",
    "CALENDAR.INVALID.NAME": "Nombre de calendario no válido. Utilice únicamente caracteres alfanuméricos más espacio, guión y guión bajo",
    "CALENDAR.ALREADY.IMPORTED": "Calendario: $NAME ya importado",
    "CALENDAR.ERROR.DELETE": "No se puede eliminar el calendario",
    "CALENDAR.DELETE.CONFIRM": "¿Está seguro de que desea eliminar el calendario: $NAME?",
    "CALENDAR.ERROR.DELETE.EVENT": "No se puede eliminar el evento",
    "CALENDAR.ERROR.SAVE.EVENT": "No se puede guardar el evento",
    "CALENDAR.ERROR.LOAD.FILE": "No se puede cargar el archivo",
    "CALENDAR.ERROR.SAVE.MOVED.EVENT": "No se puede guardar el evento movido",
    "CALENDAR.RECREATE.EVENT": "Vuelva a crear el evento",
    "CALENDAR.ERROR.MOVE.EVENT": "No se puede mover el evento",
    "CALENDAR.ERROR.UPLOAD": "No se pueden cargar eventos. Cierre el calendario",
    "CALENDAR.IMPORT.MSG": "Importando $ITEMS eventos del calendario",
    "CALENDAR.IMPORT.COMPLETE": "Se completó la importación de eventos",
    "CALENDAR.ERROR.IMPORT.EVENT": "No se pueden importar eventos",
    "CALENDAR.IMPORT.EVENT": '¿Desea importar el evento?',
    "CALENDAR.IMPORT.CALENDAR": '¿Desea importar el calendario?',
    "CALENDAR.LABEL": 'Calendario',
    "CALENDAR.EVENT.LINK": 'Enlace al evento',
    "SANDBOX.APP.DATA": "Puede almacenar y leer archivos en una carpeta privada de la aplicación",
    "SANDBOX.EDIT.FILE": "Puede modificar el archivo elegido por el usuario",
    "SANDBOX.READ.FOLDER": "Puede leer archivos seleccionados de los tipos asociados de la carpeta elegida por el usuario",
    "SANDBOX.MESSAGES": "Puede intercambiar mensajes con amigos",
    "SANDBOX.MAILBOX": "Puede administrar un buzón de correo electrónico",
    "SANDBOX.PROFILE.PHOTO": "Puede recuperar fotos de perfil de sus amigos",
    "SANDBOX.UNSAFE": "Permitir que la aplicación modifique su propio código",
    "SANDBOX.UNKNOWN": "Permiso desconocido",
    "FOLDER.PICKER.NO.FOLDERS": "No hay carpetas seleccionadas...",
    "FOLDER.PICKER.NO.FOLDER": "No hay carpetas seleccionadas...",
    "FOLDER.PICKER.MULTIPLE.SELECTION.NOT.SUPPORTED": "No se admite la selección de varias carpetas",
    "NEW.FOLDER.NAME.LABEL": "Nombre de la carpeta",
    "NEW.FOLDER.NAME.MESSAGE": "Crear carpeta",
    "PROMPT.OK": "Aceptar",
    "PROMPT.CANCEL": "Cancelar",
    "PROMPT.SET": "Establecer",
    "DRIVE.MOVING.TITLE": "Moviendo archivo(s)",
    "DRIVE.MOVING.COMPLETE": "Completando movimiento y actualizando carpeta...",
    "DRIVE.COPYING.TITLE": "Copiando archivo(s)",
    "DRIVE.COPYING.COMPLETE": "Completando copia y actualizando carpeta..."
}
},{}], 7:[function(require,module,exports){module.exports = {
    "APP.LOGIN": "Connexion",
    "APP.SIGNUP": "Inscription",
    "LOGIN.BUTTON": "Connexion",
    "LOGIN.USERNAME": "nom d'utilisateur",
    "LOGIN.PASSWORD": "mot de passe",
    "LOGIN.STAY": "Rester connecté",
    "SIGNUP.USERNAME": "nom d'utilisateur public",
    "SIGNUP.GENERATE": "Générer un mot de passe",
    "SIGNUP.CLICKGEN": "Cliquer sur générer un mot de passe",
    "SIGNUP.REENTER": "Saisissez à nouveau le mot de passe",
    "SIGNUP.AGREE": "Je comprends que les mots de passe ne peuvent pas être réinitialisés ou récupérés. Si j'oublie mon mot de passe, je perdrai l'accès à mon compte et à mes données. Si je saisis mon mot de passe sur un site Web malveillant, je perdrai le contrôle de mon compte.",
    "SIGNUP.SIGNUPFREE": "S'inscrire",
    "SIGNUP.SIGNUPPAID": "Ajouter une carte de paiement et s'inscrire",
    "SIGNUP.ACCEPT": "J'accepte",
    "SIGNUP.TERMS": "Conditions d'utilisation",
    "SIGNUP.AND": "et",
    "SIGNUP.POLICY": "Politique de confidentialité",
    "SIGNUP.HYPER": "de stockage hyper sécurisé",
    "SIGNUP.BUNDLED": "Toutes nos applications privées groupées",
    "SIGNUP.MONTH": "mois",
    "SIGNUP.YEAR": "année",
    "SIGNUP.BILL.MONTHLY": "facturé mensuellement",
    "SIGNUP.BILL.YEARLY": "facturé annuellement",
    "SIGNUP.TRYTITLE": "Vous voulez l'essayer en premier?",
    "SIGNUP.TRY": "Essayez-le gratuitement",
    "PASSWORD.COMMON": "votre mot de passe est le $PLACE mot de passe le plus courant!",
    "PASSWORD.SHORT": "les mots de passe de moins de $SIZE caractères sont considérés comme dangereux",
    "PASSWORD.GOOD": "C'est un meilleur mot de passe",
    "TOUR.TITLE": "Bienvenue chez Peergos!",
    "TOUR.STORAGE": "Stockage crypté",
    "TOUR.STORAGE.DESC":"Stockez vos fichiers et organisez-les dans des dossiers.",
    "TOUR.SHARE":"Partage sécurisé",
    "TOUR.SHARE.DESC":"Partagez en toute sécurité avec vos amis sur Peergos, ou avec n'importe qui via un lien secret.",
    "TOUR.PHOTOS":"Galerie de photos",
    "TOUR.PHOTOS.DESC":"Affichez des diaporamas de vos photos.",
    "TOUR.DOCS":"Édition de documents",
    "TOUR.DOCS.DESC":"Affichez et modifiez vos documents texte.",
    "TOUR.MUSIC":"Collection de musique",
    "TOUR.MUSIC.DESC":"Écoutez votre collection de musique.",
    "TOUR.VIDEOS":"Vidéos et films",
    "TOUR.VIDEOS.DESC":"Regardez vos vidéos et films depuis n'importe quel appareil.",
    "TOUR.PDF":"Visionneuse PDF",
    "TOUR.PDF.DESC":"Affichez des documents PDF en toute sécurité.",
    "TOUR.CAL":"Calendrier",
    "TOUR.CAL.DESC": "Gérez votre emploi du temps - partagez des événements ou des calendriers entiers.",
    "TOUR.SOCIAL": "Flux social",
    "TOUR.SOCIAL.DESC": "Partagez des publications et des commentaires avec vos amis et vos abonnés.",
    "DRIVE.DROP": "Déposez des fichiers ici",
    "DRIVE.UPLOAD.FILES": "Télécharger des fichiers",
    "DRIVE.UPLOAD.FOLDER": "Télécharger un dossier",
    "DRIVE.NEW.FOLDER": "Nouveau dossier",
    "DRIVE.NEW.FILE": "Nouveau fichier",
    "DRIVE.NEW.APP": "Nouvelle application",
    "DRIVE.PASTE": "Coller",
    "DRIVE.WITH": "Avec",
    "DRIVE.SELECTED": "sélectionné",
    "DRIVE.NAME": "Nom",
    "DRIVE.SIZE": "Taille",
    "DRIVE.TYPE": "Type",
    "DRIVE.MODIFIED": "Modifié",
    "DRIVE.CREATED": "Créé",
    "DRIVE.COPY": "Copier",
    "DRIVE.CUT": "Couper",
    "DRIVE.DELETE": "Supprimer",
    "DRIVE.DOWNLOAD": "Télécharger",
    "DRIVE.ZIP": "Zip",
    "DRIVE.DESELECT": "Désélectionner",
    "DRIVE.VIEW": "Afficher",
    "DRIVE.EDIT": "Modifier",
    "DRIVE.RENAME": "Renommer",
    "DRIVE.SHARE": "Partager",
    "DRIVE.DOWNLOAD.ZIP": "Télécharger en tant que ZIP",
    "DRIVE.THUMB": "Créer une miniature",
    "DRIVE.PROPS": "Propriétés",
    "DRIVE.ADD.LAUNCH": "Ajouter au lanceur",
    "DRIVE.RUN": "Exécuter l'application",
    "DRIVE.INSTALL": "Installer l'application",
    "DRIVE.DELETE.FILE": "Êtes-vous sûr de vouloir supprimer",
    "DRIVE.DELETE.FILE2": "et tout son contenu",
    "DRIVE.DOWNLOAD.WARN": "Êtes-vous sûr de vouloir télécharger $NAME d'une taille de $SIZE MB?",
    "DRIVE.ZIP.ERROR": "Le téléchargement au format Zip n'est disponible que lorsque le streaming est pris en charge (comme Chrome)",
    "DRIVE.EMPTY.FOLDER": "Dossier: $NAME ne contient aucun fichier. Rien à télécharger",
    "DRIVE.CONFIRM.DOWNLOAD.TITLE": "Êtes-vous sûr de vouloir télécharger les éléments sélectionnés?",
    "DRIVE.CONFIRM.DOWNLOAD.BODY": "Dossier(s): $FOLDERS, Fichier(s): $FILES, Taille totale: $SIZE",
    "DRIVE.MOVE.ACCESS.TITLE": "Conserver l'accès lors du déplacement du ou des fichiers",
    "DRIVE.MOVE.ACCESS.BODY": "Voulez-vous conserver l'accès et les liens existants vers le ou les fichiers déplacés?",
    "DRIVE.DOWNLOAD.FOLDERS": "Téléchargement des dossiers sélectionnés",
    "DRIVE.DOWNLOAD.FOLDER": "Téléchargement du dossier: $NAME",
    "DRIVE.CONFIRM.DOWNLOAD.FOLDER.TITLE": "Êtes-vous sûr de vouloir télécharger le dossier: $NAME?",
    "DRIVE.OFFLINE": "Client hors ligne!",
    "DRIVE.UPLOAD.SPACE.ERROR": "L'opération de téléchargement de fichier dépasse la capacité disponible espace\nVeuillez libérer $SPACE et réessayer",
    "DRIVE.UPLOAD.TITLE": "Cryptage et téléchargement du/des fichier(s)",
    "DRIVE.UPLOAD.COMPLETE": "Fin du téléchargement et actualisation du dossier...",
    "DRIVE.UPLOAD.ERROR": "Erreur lors du téléchargement des fichiers",
    "DRIVE.UPLOAD.RESUME.TITLE": "Souhaitez-vous reprendre le téléchargement du fichier ayant échoué?",
    "DRIVE.UPLOAD.RESUME.BODY": "Fichier: $NAME, Dossier: $PATH",
    "DRIVE.UPLOAD.EMPTY": "Rien à télécharger",
    "DRIVE.UPLOAD.EXISTS": "Le fichier: $NAME existe déjà à cet emplacement",
    "DRIVE.UPLOAD.REPLACE": "Souhaitez-vous le remplacer?",
    "DRIVE.MOVE.ERROR": "Erreur lors du déplacement du fichier: $NAME",
    "DRIVE.COPY.ERROR": "Erreur lors de la copie du fichier: $NAME",
    "DRIVE.COPY.SPACE.ERROR": "L'opération de copie de fichier dépasse l'espace disponible\nVeuillez libérer $SPACE et réessayer",
    "DRIVE.COPY.TOTAL.SPACE.ERROR": "L'opération de copie de fichier dépasse l'espace total\n" + "Veuillez effectuer une mise à niveau pour obtenir plus d'espace",
    "DRIVE.PASTE.LOCATION.SAME": "Le dossier de destination est le même que le dossier source",
    "DRIVE.DOWNLOAD.MULTIPLE.STREAM.ERROR": "Le téléchargement de plusieurs fichiers n'est disponible que lorsque le streaming est pris en charge (comme Chrome)",
    "DRIVE.APP.EXISTS": "L'application avec le nom $NAME existe déjà!",
    "DRIVE.APP.ERROR": "Erreur lors de la création de l'application",
    "DRIVE.FILENAME": "Entrez un nom de fichier",
    "DRIVE.FILENAME.PLACEHOLDER": "Nom de fichier",
    "DRIVE.FILENAME.INVALID": "Nom de fichier non valide",
    "DRIVE.FOLDERNAME.INVALID": "Nom de dossier non valide",
    "DRIVE.CREATE.ERROR": "Erreur lors de la création du fichier",
    "DRIVE.RENAME.TITLE": "Entrez un nouveau nom",
    "DRIVE.RENAME.PLACEHOLDER": "Nouveau nom",
    "DRIVE.RENAME.ERROR": "Erreur lors du changement de nom de $TYPE: $NAME",
    "DRIVE.DELETE.ERROR": "Erreur lors de la suppression des fichiers",
    "DRIVE.DELETE.CONFIRM": "Êtes-vous sûr de vouloir supprimer $COUNT éléments?",
    "DRIVE.DELETE.FILE.ERROR": "Erreur lors de la suppression du fichier: $NAME: $MESSAGE",
    "DRIVE.INSTALL_DEDICATED_APP": "Aucune application n'est installée pour ce type de fichier, veuillez installer une application pour l'ouvrir",
    "DRIVE.MISSING.FOLDER": "Dossier introuvable!",
    "APPNAV.LAUNCHER": "Lanceur",
    "APPNAV.DRIVE": "Drive",
    "APPNAV.NEWSFEED": "Fil d'actualité",
    "APPNAV.SOCIAL": "Social",
    "APPNAV.CAL": "Calendrier",
    "APPNAV.EMAIL": "E-mail",
    "APPNAV.UPGRADE": "Mettre à niveau",
    "SEARCH.SEARCH": "Rechercher",
    "SEARCH.NAME.CONTAINS": "Le nom de fichier contient",
    "SEARCH.TEXT.CONTAINS": "Le fichier texte contient",
    "SEARCH.MODIFIED.AFTER": "Fichier modifié après",
    "SEARCH.MODIFIED.BEFORE": "Fichier modifié avant",
    "SEARCH.CREATED.AFTER": "Fichier créé après",
    "SEARCH.CREATED.BEFORE": "Fichier créé avant",
    "SEARCH.SIZE.GREATER": "Taille du fichier supérieure à",
    "SEARCH.SIZE.LESS": "Taille du fichier inférieure à",
    "SEARCH.TYPE": "Type de fichier",
    "SEARCH.AUDIO": "Audio",
    "SEARCH.IMAGE": "Image",
    "SEARCH.TEXT": "Texte",
    "SEARCH.VIDEO": "Vidéo",
    "SEARCH.RESULTS": "Résultats",
    "SEARCH.DIR": "Répertoire",
    "SETTINGS.ADMIN": "Panneau d'administration",
    "SETTINGS.ACCOUNT": "Compte",
    "SETTINGS.PROFILE": "Profil",
    "SETTINGS.FEEDBACK": "Commentaires",
    "SETTINGS.TOUR": "Visite",
    "SETTINGS.HELP": "Aide/FAQ",
    "SETTINGS.AUTH": "Authentification",
    "SETTINGS.PASS": "Modifier le mot de passe",
    "SETTINGS.CLEANUP": "Nettoyer les téléchargements ayant échoué",
    "SETTINGS.CACHE": "Définir la taille du cache",
    "SETTINGS.DELETE": "Supprimer le compte",
    "SETTINGS.LOGOUT": "Déconnexion",
    "SETTINGS.CACHE.INVALID": "Valeur de taille du cache non valide",
    "SETTINGS.CACHE.LARGE": "Taille de cache non valide. Taille maximale du cache: $SIZE MB",
    "SETTINGS.CACHE.UPDATED": "Taille du cache mise à jour",
    "PASSWORD.CHANGE": "Modifier le mot de passe",
    "PASSWORD.EXISTING": "Mot de passe existant",
    "PASSWORD.GENERATE": "Générer un mot de passe",
    "PASSWORD.NEW": "Nouveau mot de passe",
    "PASSWORD.REENTER": "Saisissez à nouveau le nouveau mot de passe",
    "PASSWORD.MATCH": "Les mots de passe ne correspondent pas",
    "PASSWORD.MFA": "Code d'authentification multifacteur non valide",
    "PASSWORD.CHANGED": "Mot de passe modifié",
    "PASSWORD.FIELDS": "Tous les champs doivent être renseignés!",
    "MFA.TITLE": "Authentification à deux facteurs",
    "MFA.APP": "Application d'authentification",
    "MFA.KEY": "Clé de sécurité",
    "MFA.REMOVE": "Supprimer",
    "MFA.ADD.KEY": "Ajouter une clé de sécurité",
    "MFA.ERROR.RETRIEVAL": "Impossible de récupérer les méthodes d'authentification",
    "MFA.ERROR.DELETE": "Impossible de supprimer la méthode d'authentification",
    "MFA.MAX.KEYS": "Nombre maximal de clés de sécurité atteint",
    "MFA.CONFIRM.REMOVE.KEY": "Êtes-vous sûr de vouloir supprimer cette clé?",
    "MFA.CONFIRM.REMOVE.APP": "Êtes-vous sûr de vouloir supprimer l'application Authenticator?",
    "HELP.TITLE": "Aide/FAQ",
    "HELP.HOW": "Comment puis-je...",
    "HELP.UPGRADE": "Mettre à niveau mon compte?",
    "HELP.UPGRADE.TEXT": "Sélectionnez l'élément de menu «Compte» après avoir cliqué sur le menu des paramètres utilisateur (l'icône de personne dans le coin supérieur droit). Vous pouvez également cliquer en bas à gauche de l'écran pour voir un bouton «MISE À NIVEAU». Suivez le contenu de la fenêtre modale qui s'affiche pour demander de l'espace/mettre à niveau/rétrograder votre compte.",
    "HELP.SPACE": "Voir combien d'espace j'ai utilisé/ai de disponible ?",
    "HELP.SPACE.TEXT": "En haut à gauche, vous verrez le logo Peergos d'une tour. Cliquez dessus pour développer le panneau de gauche. Au bas du panneau développé, il affichera 99,9 KiB/999,9 MiB où le premier chiffre correspond à votre utilisation et le deuxième chiffre à votre espace disponible.",
    "HELP.FOLLOW": "Envoyer une demande de suivi?",
    "HELP.FOLLOW.TEXT": "La vue sociale s'affiche en sélectionnant l'icône à 3 points connectés dans le menu de gauche. Sur la page sociale, vous pouvez envoyer une demande de suivi et afficher toutes les demandes en attente que vous avez reçues.",
    "HELP.FRIENDS": "Voir mes amis et mes abonnés?",
    "HELP.FRIENDS.TEXT1": "La fenêtre modale sociale s'affiche en sélectionnant l'icône à 3 points connectés dans le menu de gauche. Vos relations sociales seront répertoriées sous Amis, Abonnés et Suivis. ",
    "HELP.FRIENDS.TEXT2": "Si vous avez envoyé une demande de suivi et que le destinataire a cliqué sur «Autoriser et suivre en retour», vous devenez amis.",
    "HELP.PROFILE": "Créer et partager un profil?",
    "HELP.PROFILE.TEXT1": "Sélectionnez l'élément de menu «Profil» après avoir cliqué sur le menu des paramètres utilisateur (l'icône de personne dans le coin supérieur droit). Ajoutez les détails souhaités et cliquez sur Enregistrer. L'image du profil sera prévisualisée après le téléchargement. Cliquez sur le bouton Partager à côté de chaque champ complété pour définir l'audience visible.",
    "HELP.PROFILE.TEXT2": "Vous pouvez afficher le profil de quelqu'un d'autre via les liens générés sur la vue sociale ou sur la vue du fil d'actualité.",
    "HELP.SHARE": "Partager un fichier/dossier avec un autre utilisateur Peergos?",
    "HELP.SHARE.TEXT1": "Chaque icône de fichier/dossier dans le lecteur aura un menu vertical à 3 points en haut à droite. Dans le menu contextuel qui apparaît, sélectionnez Partager. Vous pouvez accorder l'accès à d'autres utilisateurs individuellement ou en groupes. L'accès peut être en lecture seule ou en lecture et écriture. Le destinataire peut partager un fichier partagé en lecture seule.",
    "HELP.SHARE.TEXT2": "Lors du partage d'un dossier, les sous-dossiers sont automatiquement partagés.",
    "HELP.SHARE.TEXT3": "Qui a accès et le niveau d'accès accordé sont également affichés sur cette fenêtre modale.",
    "HELP.SHARED.FILES": "Afficher les fichiers/dossiers partagés avec moi?",
    "HELP.SHARED.FILES.TEXT1": "Sélectionnez l'icône du fil d'actualité dans le menu de gauche. Il faudra un certain temps pour assembler une page personnalisée composée des messages qui vous ont été envoyés. Les messages peuvent être des messages ou des liens vers des fichiers/dossiers partagés avec vous.",
    "HELP.SHARED.FILES.TEXT2": "Sinon, si vous connaissez le nom d'utilisateur de la personne qui a partagé le fichier/dossier, sélectionnez l'icône en forme de globe dans la barre d'outils supérieure et accédez à son espace disque.",
    "HELP.LINK": "Partager un lien secret vers un fichier/dossier?",
    "HELP.LINK.TEXT1": "Chaque icône de fichier/dossier dans le lecteur aura un menu vertical à 3 points en haut à droite. Dans le menu contextuel qui apparaît, sélectionnez Partager. En bas de la fenêtre modale, sélectionnez le bouton «Créer un lien secret».",
    "HELP.LINK.TEXT2": "Le lien peut être collé directement dans un onglet du navigateur. Si le lien renvoie vers un dossier, les sous-soldats seront également visibles pour le destinataire du lien secret.",
    "HELP.CAL": "Configurer un calendrier?",
    "HELP.CAL.TEXT1": "Dans la vue du calendrier, cliquez sur l'icône en forme d'engrenage dans la barre d'outils. Sélectionnez le bouton «Paramètres du calendrier» pour afficher les calendriers actuellement configurés.",
    "HELP.CAL.TEXT2": "Sélectionner le point à côté de chaque calendrier vous permettra de modifier la couleur à associer au calendrier. Cliquer sur le nom du calendrier affichera une boîte de dialogue permettant de définir un nouveau nom pour le calendrier.",
    "HELP.SHARE.CAL": "Partager un calendrier entier?",
    "HELP.SHARE.CAL.TEXT1": "Votre calendrier principal ne peut pas être partagé. Vous pouvez créer plusieurs calendriers. Dans la vue du calendrier, cliquez sur l'icône d'engrenage dans la barre d'outils. Sélectionnez le bouton «Paramètres du calendrier» pour afficher les calendriers actuellement configurés.",
    "HELP.SHARE.CAL.TEXT2": "Cliquez sur le bouton de partage pour définir l'audience en lecture seule du calendrier.",
    "HELP.SHARE.CAL.TEXT3": "Les calendriers partagés avec vous devront d'abord être importés via la vue du fil d'actualité.",
    "HELP.SHARE.EVENT": "Partager un événement de calendrier?",
    "HELP.SHARE.EVENT.TEXT1": "Après avoir créé un événement de calendrier. Sélectionnez le lien de partage dans le menu contextuel de l'événement pour définir l'audience.",
    "HELP.SHARE.EVENT.TEXT2": "Les événements de calendrier partagés avec vous devront d'abord être importés via la vue du fil d'actualité. L'événement importé est une copie de l'événement.",
    "HELP.IMPORT.EVENT": "Importer un événement de calendrier?",
    "HELP.IMPORT.EVENT.TEXT1": "Pour importer un événement partagé avec vous via un autre utilisateur Peergos, ouvrez d'abord le fil d'actualité et sélectionnez l'événement",
    "HELP.IMPORT.EVENT.TEXT2": "Pour importer un fichier .ics, ouvrez la vue du calendrier et sélectionnez l'icône d'engrenage dans la barre d'outils. Sélectionnez le bouton «Paramètres du calendrier» pour afficher les calendriers actuellement configurés. À partir de là, cliquez sur le bouton «Importer».",
    "HELP.IMPORT.EVENT.TEXT3": "Un fichier .ics contenant plusieurs entrées est pris en charge. Différentes implémentations de calendrier (y compris la nôtre!) ont différents niveaux de prise en charge/conformité.",
    "HELP.SHARE.TASK": "Partager une liste de tâches/à faire?",
    "HELP.SHARE.TASK.TEXT": "Les listes de tâches/à faire sont enregistrées par défaut dans le répertoire racine de votre espace Drive. Cliquez sur l'icône verticale à 3 points en haut à droite de l'élément Tâche/À faire souhaité et sélectionnez Partager",
    "HELP.WWW": "Héberger un répertoire en tant que site Web statique?",
    "HELP.WWW.TEXT1": "Sélectionnez l'élément de menu «Profil» après avoir cliqué sur le menu des paramètres utilisateur (l'icône de personne dans le coin supérieur droit). En bas de la fenêtre modale, vous verrez un champ intitulé «Répertoire de sites Web». Après avoir défini le champ et sélectionné Enregistrer, un bouton Publier apparaîtra à côté du même champ.",
    "HELP.WWW.TEXT2": "Cliquez sur le bouton Publier pour terminer l'action.",
    "HELP.WWW.TEXT3": "REMARQUE: la publication rendra le dossier et tous les sous-dossiers et tout son contenu publics!",
    "HELP.WWW.TEXT4": "Effacez le champ de texte et cliquez sur Enregistrer pour réinitialiser.",
    "HELP.WWW.TEXT5": "Voir ce billet de blog pour plus de détails",
    "HELP.CLEANUP": "Nettoyer les téléchargements ayant échoué?",
    "HELP.CLEANUP.TEXT": "Un téléchargement ayant échoué continuera à consommer de l'espace disque. Pour libérer l'espace attaché, sélectionnez l'élément de menu «Nettoyer les téléchargements ayant échoué» dans le menu des paramètres utilisateur.",
    "HELP.THUMB": "Recréer une image miniature de média?",
    "HELP.THUMB.TEXT": "Le processus de téléchargement tentera de créer une image miniature pour les fichiers image ou vidéo. Diverses conditions/facteurs peuvent conspirer pour rendre cette opération infructueuse. Si tel est le cas, un élément de menu contextuel supplémentaire «Créer une miniature» ​​sera disponible. Ce processus est également soumis à des conditions/facteurs qui peuvent empêcher la création d'une image miniature.",
    "HELP.FEEDBACK": "Fournir des commentaires?",
    "HELP.FEEDBACK.TEXT": "Un formulaire de commentaires est disponible via l'élément de menu «Commentaires» dans le menu des paramètres utilisateur.",
    "HELP.PASSWORD": "Changer mon mot de passe?",
    "HELP.PASSWORD.TEXT": "Voir l'élément de menu «Modifier le mot de passe» dans le menu des paramètres utilisateur.",
    "HELP.DELETE": "Supprimer mon compte?",
    "HELP.DELETE.TEXT1": "Voir l'élément de menu «Supprimer le compte» dans le menu des paramètres utilisateur.",
    "HELP.DELETE.TEXT2": "REMARQUE: TOUTES vos données seront supprimées et votre compte sera irrécupérable.",
    "HELP.GRIPES": "Gripes/Inquiétudes",
    "HELP.SLOW": "Pourquoi tout est-il si lent?",
    "HELP.SLOW.TEXT1": "Ce n'est pas le cas! L'histoire est toujours plus compliquée. Dans un système peer-to-peer chiffré de bout en bout, le client doit effectuer beaucoup de travail (et pas seulement le déchiffrement/chiffrement). Si vous avez l'esprit technique, ouvrez la console du navigateur et regardez le flux de centaines de requêtes pour vous faire une idée.",
    "HELP.SLOW.TEXT2": "Nous prévoyons encore de mettre en œuvre de nombreuses améliorations de vitesse. Les performances s'amélioreront également à mesure que les navigateurs implémenteront certaines des primitives dont nous avons besoin pour la signature et le chiffrement.",
    "HELP.JAVA": "J'ai entendu dire que Peergos est écrit en Java, êtes-vous fou ?",
    "HELP.JAVA.TEXT1": "En fait, Java est un langage idéal pour Peergos. La JVM est solide comme un roc et offre de bonnes performances et une bonne utilisation des ressources. Le client est écrit principalement en Java et transcompilé en Javascript via le GWT aguerri.",
    "HELP.JAVA.TEXT2": "Avoir une base de code en langage unique pour le serveur et la plupart du client présente de nombreux avantages. Nous ne sommes pas des fanatiques de la langue, d'autres choix seraient appropriés dans d'autres circonstances.",
    "FEEDBACK.TITLE": "Commentaires",
    "FEEDBACK.TEXT1": "Vous pouvez nous dire ici comment nous pouvons nous améliorer, ou vous pouvez discuter avec nous sur",
    "FEEDBACK.TEXT2": "ou envoyez-nous un e-mail",
    "FEEDBACK.SUBMIT": "Envoyer",
    "FEEDBACK.PLACEHOLDER": "Tapez votre commentaire ici.",
    "FEEDBACK.SENT": "Commentaires envoyés. Merci!",
    "FEEDBACK.ERROR": "Erreur lors de l'envoi des commentaires",
    "PROFILE.TITLE": "Profil",
    "PROFILE.UPLOAD": "Télécharger une image",
    "PROFILE.REMOVE": "Supprimer l'image",
    "PROFILE.FIRSTNAME": "Prénom",
    "PROFILE.LASTNAME": "Nom",
    "PROFILE.PHONE": "Téléphone",
    "PROFILE.EMAIL": "E-mail",
    "PROFILE.STAUS": "Statut",
    "PROFILE.BIO": "Biographie",
    "PROFILE.WWW": "Répertoire de sites Web",
    "PROFILE.CHANGE.WWW": "Modifier",
    "PROFILE.PUBLISH": "Publier",
    "PROFILE.PUBLIC": "Visible publiquement sur",
    "PROFILE.SAVE": "Enregistrer le profil",
    "PROFILE.ERROR.IMAGE": "Impossible de lire l'image",
    "PROFILE.ERROR.NOT.FOUND": "Répertoire Web introuvable. Modifications non enregistrées!",
    "PROFILE.ERROR.PATH": "Répertoire Web non valide. Modifications non enregistrées!",
    "PROFILE.PUBLISH.HELP": "Cela vous permet de publier un répertoire en tant que site Web. Cela rendra tout ce qui se trouve dans ce répertoire public et il sera disponible à partir de https://$NAME.peergos.me ou si vous exécutez une passerelle Peergos locale à partir de http://$NAME.peergos.localhost:9000. L'affichage de sites Web via une passerelle Peergos locale ne repose pas sur les autorités de certification DNS ou TLS pour la sécurité ou l'authenticité. Vous pouvez commencer par ajouter un fichier index.html à votre répertoire Web.",
    "PROFILE.CONFIRM.PUBLISH": "Êtes-vous sûr de vouloir publier le dossier: $PATH?",
    "PROFILE.CONFIRM.PUBLISH.TEXT": "Cette action rendra le dossier et tout son contenu publics.",
    "PROFILE.ERROR.PUBLISH": "Impossible de publier le répertoire Web",
    "PROFILE.PUBLISH.SUCCESS": "Répertoire Web publié",
    "PROFILE.PUBLISH.AVAILABLE": "Disponible sur: https://$NAME.peergos.me",
    "PROFILE.ERROR.UNEXPECTED": "Erreur inattendue",
    "PROFILE.UPDATED": "Profil mis à jour",
    "PROFILE.ERROR.UPDATE": "Impossible de mettre à jour le profil",
    "DELETE.ACCOUNT": "Supprimer le compte",
    "DELETE.ACCOUNT.TEXT1": "Si vous choisissez de continuer, vous perdrez l'accès à votre compte et données !",
    "DELETE.ACCOUNT.TEXT2": "Cette action n'est pas réversible.",
    "DELETE.ACCOUNT.TEXT3": "Vous devez saisir votre mot de passe pour confirmer que vous souhaitez supprimer votre compte et toutes vos données.",
    "DELETE.ACCOUNT.CONFIRM": "Êtes-vous absolument sûr de vouloir supprimer votre compte ?",
    "DELETE.ACCOUNT.YES": "Oui, supprimer tout",
    "DELETE.ACCOUNT.CANCEL": "Peu importe",
    "DELETE.ACCOUNT.DONE": "Compte supprimé !",
    "DELETE.ACCOUNT.PASS": "Le mot de passe doit être renseigné !",
    "DELETE.ACCOUNT.ERROR": "Erreur lors de la suppression du compte",
    "DELETE.ACCOUNT.MFA": "Code d'authentification multifacteur non valide",
    "SPACE.TITLE": "Demande d'espace",
    "SPACE.CURRENT": "Espace actuel",
    "SPACE.PLACEHOLDER": "Nouveau montant total d'espace",
    "SPACE.POSITIVE": "L'espace doit être un entier positif",
    "SPACE.SMALL": "Vous ne pouvez pas demander un espace inférieur à votre utilisation actuelle, veuillez supprimer certains fichiers et réessayer.",
    "SPACE.SENT": "Demande d'espace envoyée !",
    "PAID.AGREE": "En continuant, vous acceptez nos",
    "PAID.ACCOUNT": "Compte",
    "PAID.STORAGE": "de stockage hyper sécurisé",
    "PAID.APPS": "Toutes nos applications privées groupées",
    "PAID.MONTH": "mois",
    "PAID.CARD": "Mettre à jour les détails de paiement (s'ouvre dans un nouvel onglet)",
    "PAID.CANCEL": "Annuler l'abonnement Peergos",
    "PAID.CANCEL.CONFIRM": "Annuler l'abonnement",
    "PAID.CANCEL.OK": "Conserver l'abonnement Peergos",
    "PAID.PRORATA": "au prorata de la durée actuelle",
    "PAID.SETTINGS": "Paramètres d'abonnement",
    "PAID.UPGRADE": "Mettez à niveau votre compte pour obtenir plus d'espace",
    "PAID.CURRENT": "Votre forfait actuel",
    "PAID.PRO": "Sélectionnez Pro (ouvre un nouvel onglet)",
    "PAID.VISIONARY": "Sélectionnez Visionary (ouvre un nouvel onglet)",
    "PAID.PIONEER": "Sélectionnez Pioneer (ouvre un nouvel onglet)",
    "PAID.SORRY": "Désolé de vous voir partir. Vous avez jusqu'à la fin du mois de facturation pour télécharger vos données, après quoi elles seront supprimées.",
    "PAID.THANKYOU": "Merci de vous être inscrit à un compte Peergos payant !",
    "PAID.CARD.NEEDED": "Détails de la carte requis. Ajoutez une carte de paiement pour terminer votre mise à niveau.",
    "PAID.ERROR.CANCEL": "Erreur lors de l'annulation du compte",
    "PAID.ERROR.STORAGE": "Erreur lors de la demande de stockage supplémentaire",
    "DRIVE.SHARE.USER": "Veuillez sélectionner un utilisateur",
    "DRIVE.SHARE.R": "Lecture seule",
    "DRIVE.SHARE.RW": "Lecture et écriture",
    "DRIVE.SHARE.GROUP": "Ou groupe(s)",
    "DRIVE.SHARE.FRIENDS": "Amis",
    "DRIVE.SHARE.FOLLOWERS": "Abonnés (y compris les amis)",
    "DRIVE.SHARE.RWACCESS": "Accès en lecture et écriture",
    "DRIVE.SHARE.REVOKE": "Révoquer",
    "DRIVE.SHARE.NONE": "Aucun",
    "DRIVE.SHARE.RACCESS": "Accès en lecture seule",
    "DRIVE.SHARE.LINK": "Créer un lien secret",
    "DRIVE.SHARE.CONFIRM": "Confirmer l'action",
    "DRIVE.SHARE.CREATE.FILE": "Créer un lien secret vers le fichier",
    "DRIVE.SHARE.CREATE.FOLDER": "Créer un lien secret vers le dossier actuel et ouvrir le fichier",
    "DRIVE.SHARE.FOLDER.OPEN": "Lien secret vers le dossier actuel et ouvrir le fichier",
    "DRIVE.SHARE.FOLDER": "Lien secret vers le dossier",
    "DRIVE.SHARE.FILE": "Lien secret vers le fichier",
    "DRIVE.SHARE.ERROR": "Erreur lors du partage du fichier",
    "DRIVE.SHARE.REVOKE.R": "Accès en lecture révoqué",
    "DRIVE.SHARE.ERROR.UNSHARING": "Erreur lors de l'annulation du partage du fichier",
    "DRIVE.SHARE.REVOKE.RW": "Accès en lecture et écriture révoqué",
    "DRIVE.SHARE.ERROR.HOME": "Vous ne pouvez pas partager votre répertoire personnel",
    "DRIVE.SHARE.ERROR.WRITE": "Seul le propriétaire d'un fichier peut accorder l'accès en écriture",
    "DRIVE.SHARE.ERROR.REPEAT": "Déjà partagé",
    "DRIVE.SHARE.COMPLETE": "Partage sécurisé terminé",
    "DRIVE.LINK.OPEN": "Ouverture automatique",
    "DRIVE.LINK.COPY": "Copier dans le presse-papiers",
    "DRIVE.LINK.EMAIL": "par e-mail",
    "DRIVE.LINK.OK": "OK",
    "DRIVE.LINK.UPDATE": "Mettre à jour",
    "DRIVE.LINK.VIEWEDIT": "Afficher/Modifier",
    "DRIVE.LINK.CREATE": "Créer",
    "DRIVE.LINK.WRITABLE": "Rendre le lien accessible en écriture (Attention : le détenteur du lien pourrait remplir votre espace)",
    "DRIVE.LINK.EXPIRE.ON": "Expire le",
    "DRIVE.LINK.AT.TIME": "à l'heure",
    "DRIVE.LINK.LIMIT.RETRIEVALS": "Limiter le nombre d'utilisations du lien",
    "DRIVE.LINK.PASSWORD": "Mot de passe requis pour accéder",
    "DRIVE.LINK.ERROR.CREATE": "Une erreur s'est produite lors de la création du lien secret",
    "DRIVE.LINK.ERROR.UPDATE": "Une erreur s'est produite lors de la mise à jour du lien secret",
    "VERIFY.TITLE": "Vérification de l'ami",
    "VERIFY.SCAN": "Scannez le code QR de votre ami",
    "VERIFY.NUMBERS": "Ou vous pouvez vous lire ces numéros (ils doivent correspondre)",
    "VERIFY.ERROR.CAMERA": "Impossible de se connecter à la caméra. Assurez-vous qu'elle est connectée et cliquez sur autoriser l'accès lorsque vous y êtes invité.",
    "VERIFY.SUCCESS": "Ami vérifié avec succès !",
    "VERIFY.ERROR.MISMATCH": "Le code QR ne correspond pas à l'identité de cette personne sur Peergos. Êtes-vous sûr que cette personne est bien celle qu'elle prétend être?",
    "VERIFY.VERIFIED": "Vérifié",
    "VERIFY.UNVERIFIED": "Non vérifié",
    "LAUNCHER.CUSTOM": "Applications personnalisées",
    "LAUNCHER.UPDATE": "Rechercher les mises à jour",
    "LAUNCHER.NONE": "Aucune application personnalisée n'est actuellement installée. Créez une application à partir de l'élément de menu «Créer une application» du signe plus vert.",
    "LAUNCHER.SHORTCUTS":"Raccourcis",
    "LAUNCHER.ADD.SHORTCUT":"Les entrées peuvent être ajoutées via l'élément de menu contextuel «Ajouter au lanceur»",
    "LAUNCHER.ADDED":"Ajouté",
    "LAUNCHER.NAME":"Nom",
    "LAUNCHER.FOLDER":"Dossier",
    "LAUNCHER.REMOVE":"Supprimer",
    "LAUNCHER.FILE.EXISTS":"Fichier: $NAME existe déjà à cet emplacement",
    "LAUNCHER.FILE.REPLACE":"Voulez-vous le remplacer??",
    "LAUNCHER.CREATED.SUCCESS":"Fichier créé",
    "LAUNCHER.CREATED.ERROR":"La création du fichier a échoué",
    "LAUNCHER.UPDATES.NONE":"Tout est à jour",
    "LAUNCHER.UPDATES.ONE":"1 a une mise à jour",
    "LAUNCHER.UPDATES.MANY": "$COUNT a des mises à jour",
    "LAUNCHER.APP.REMOVE": "Supprimer l'application",
    "LAUNCHER.APP.REMOVE.CONFIRM": "Êtes-vous sûr de vouloir supprimer cette application (y compris toutes les données associées)?",
    "LAUNCHER.SHORTCUT.REMOVE": "Supprimer le raccourci",
    "LAUNCHER.SHORTCUT.REMOVE.CONFIRM": "Êtes-vous sûr de vouloir supprimer ce raccourci?",
    "SOCIAL.TITLE": "Vue sociale",
    "SOCIAL.SEND.TITLE": "Envoyer une demande de suivi",
    "SOCIAL.SELECT": "Veuillez sélectionner un utilisateur",
    "SOCIAL.SEND": "Envoyer",
    "SOCIAL.INCOMING": "Demandes de suivi entrantes",
    "SOCIAL.ALLOWANDFOLLOW": "Autoriser et suivre en retour",
    "SOCIAL.ALLOW": "Autoriser",
    "SOCIAL.DENY": "Refuser",
    "SOCIAL.FRIENDS": "Amis",
    "SOCIAL.UNFOLLOW": "Ne plus suivre",
    "SOCIAL.REMOVE": "Supprimer",
    "SOCIAL.VERIFICATION": "Vérification",
    "SOCIAL.FOLLOWERS": "Abonnés",
    "SOCIAL.FOLLOWING": "S'abonner",
    "SOCIAL.BLOCKED": "Bloqué",
    "SOCIAL.UNBLOCK": "Débloquer",
    "SOCIAL.ALREADY.SENT": "Demande de suivi déjà envoyée",
    "SOCIAL.BLOCKED.USERS": "Les utilisateurs suivants sont bloqués",
    "SOCIAL.USER.BLOCKED": "Utilisateur : $USER est bloqué",
    "SOCIAL.SENT": "Demande(s) de suivi envoyée(s)",
    "SOCIAL.ERROR": "Demande(s) de suivi échouée(s)",
    "SOCIAL.RECIPROCATED": "Demande de suivi réciproque",
    "SOCIAL.ACCEPTED": "Demande de suivi accepté",
    "SOCIAL.REJECTED": "Demande de suivi rejetée",
    "SOCIAL.REMOVED": "Suiveur supprimé",
    "SOCIAL.STOPPED": "Suivi arrêté",
    "SOCIAL.UNBLOCKED": "débloqué",
    "NEWSFEED.TITLE": "Fil d'actualité",
    "NEWSFEED.NEW": "Nouveau message",
    "NEWSFEED.BUILDING": "Création de votre fil d'actualité",
    "NEWSFEED.MINUTE": "Cela peut prendre une minute..",
    "NEWSFEED.BUILT": "Ceci est votre fil d'actualité",
    "NEWSFEED.DESC": "Vous pouvez voir ici tout ce qui a été partagé avec vous par des amis ou des personnes que vous suivez",
    "NEWSFEED.FRIEND": "Envoyer une demande d'ami",
    "NEWSFEED.END": "Plus d'entrées",
    "NEWSFEED.JOIN": "Rejoindre",
    "NEWSFEED.ADD.COMMENT": "Ajouter un commentaire",
    "NEWSFEED.COMMENT": "commentaire",
    "NEWSFEED.MORE": "Afficher plus",
    "NEWSFEED.EDITED": "modifié",
    "NEWSFEED.DELETE.CONFIRM": "Êtes-vous sûr de vouloir supprimer le",
    "NEWSFEED.POST": "publication",
    "NEWSFEED.POST.BUTTON": "publication",
    "NEWSFEED.POST.REPLY": "publier une réponse",
    "NEWSFEED.POST.EDIT": "modifier une publication",
    "NEWSFEED.POST.UPLOAD.SPACE.ERROR": "Les fichiers multimédias dépassent l'espace disponible - Veuillez libérer $SPACE et réessayer",
    "NEWSFEED.POST.UPLOAD.SPACE.ERROR2": "Impossible de continuer. La taille du fichier $NAME dépasse l'espace disponible",
    "NEWSFEED.POST.UPLOAD": "Cryptage et téléchargement",
    "NEWSFEED.POST.SHARE.WITH": "Partager la publication avec:",
    "NEWSFEED.POST.SHARE.WITH.FRIENDS": "Amis",
    "NEWSFEED.POST.SHARE.WITH.FOLLOWERS": "Abonnés (y compris les amis)",
    "NEWSFEED.ERROR.MEDIA.DELETE": "Erreur lors de la suppression du fichier multimédia!",
    "NEWSFEED.ERROR.POST.DELETE": "Erreur lors de la suppression de la publication",
    "NEWSFEED.ERROR.POST.LOAD": "Erreur lors du chargement de la publication",
    "NEWSFEED.ERROR.CHAT.JOIN": "Impossible de rejoindre le chat.",
    "NEWSFEED.APP.ABSENT": "Application avec le nom: $NAME non installée!",
    "NEWSFEED.YOU": "vous",
    "NEWSFEED.WRITEACCESS": "accès en écriture à",
    "NEWSFEED.ACAL": "un calendrier",
    "NEWSFEED.INVITED.APP": "vous a invité à rejoindre l'application",
    "NEWSFEED.FOLDER": "le dossier",
    "NEWSFEED.ANEVENT": "un événement de calendrier",
    "NEWSFEED.FILE": "le fichier",
    "NEWSFEED.OWNED": "appartenant à",
    "CALENDAR.TITLE": "Calendrier",
    "CALENDAR.ERROR.LOAD": "Impossible de charger le calendrier",
    "CALENDAR.ERROR.LOAD.FILE": "Impossible de charger le fichier de calendrier",
    "CALENDAR.EVENT": "Événement",
    "CALENDAR.THIS.EVENT": "Cet événement",
    "CALENDAR.ALL.EVENTS": "Tous les événements",
    "CALENDAR.FUTURE.EVENTS": "Cet événement et les événements à venir",
    "CALENDAR.NEW.NAME": "Nouveau nom de calendrier",
    "CALENDAR.ENTER.NAME": "Entrez un nouveau nom",
    "CALENDAR.INVALID.NAME": "Nom de calendrier non valide. Utilisez uniquement des caractères alphanumériques plus un espace, un tiret et un trait de soulignement",
    "CALENDAR.ALREADY.IMPORTED": "Calendrier: $NAME déjà importé",
    "CALENDAR.ERROR.DELETE": "Impossible de supprimer le calendrier",
    "CALENDAR.DELETE.CONFIRM": "Êtes-vous sûr de vouloir supprimer le calendrier: $NAME?",
    "CALENDAR.ERROR.DELETE.EVENT": "Impossible de supprimer l'événement",
    "CALENDAR.ERROR.SAVE.EVENT": "Impossible d'enregistrer l'événement",
    "CALENDAR.ERROR.LOAD.FILE": "Impossible de charger le fichier",
    "CALENDAR.ERROR.SAVE.MOVED.EVENT": "Impossible d'enregistrer l'événement déplacé",
    "CALENDAR.RECREATE.EVENT": "Veuillez recréer l'événement",
    "CALENDAR.ERROR.MOVE.EVENT": "Impossible de déplacer l'événement",
    "CALENDAR.ERROR.UPLOAD": "Impossible de télécharger les événements. Veuillez fermer le calendrier",
    "CALENDAR.IMPORT.MSG": "Importation des événements de calendrier $ITEMS",
    "CALENDAR.IMPORT.COMPLETE": "Importation des événements terminée",
    "CALENDAR.ERROR.IMPORT.EVENT": "Impossible d'importer les événements",
    "CALENDAR.IMPORT.EVENT": "Souhaitez-vous importer l'événement:",
    "CALENDAR.IMPORT.CALENDAR": "Souhaitez-vous importer le calendrier:",
    "CALENDAR.LABEL": "Calendrier",
    "CALENDAR.EVENT.LINK": "Lien vers l'événement",
    "SANDBOX.APP.DATA": "Peut stocker et lire des fichiers dans un dossier privé pour l'application",
    "SANDBOX.EDIT.FILE": "Peut modifier le fichier choisi par l'utilisateur",
    "SANDBOX.READ.FOLDER": "Peut lire les fichiers sélectionnés des types associés à partir du dossier choisi par l'utilisateur",
    "SANDBOX.MESSAGES": "Peut échanger des messages avec des amis",
    "SANDBOX.MAILBOX": "Peut gérer une boîte aux lettres électronique",
    "SANDBOX.PROFILE.PHOTO": "Peut récupérer les photos de profil de vos amis",
    "SANDBOX.UNSAFE": "Autoriser l'application à modifier son propre code",
    "SANDBOX.UNKNOWN": "Autorisation inconnue",
    "FOLDER.PICKER.NO.FOLDERS": "Aucun dossier sélectionné...",
    "FOLDER.PICKER.NO.FOLDER": "Aucun dossier sélectionné...",
    "FOLDER.PICKER.MULTIPLE.SELECTION.NOT.SUPPORTED": "La sélection de plusieurs dossiers n'est pas prise en charge!",
    "NEW.FOLDER.NAME.LABEL": "Nom du dossier",
    "NEW.FOLDER.NAME.MESSAGE": "Créer un dossier",
    "PROMPT.OK": "OK",
    "PROMPT.CANCEL": "Annuler",
    "PROMPT.SET": "Définir",
    "DRIVE.MOVING.TITLE": "Déplacement de fichiers",
    "DRIVE.MOVING.COMPLETE": "Fin du déplacement et actualisation du dossier...",
    "DRIVE.COPYING.TITLE": "Copie de fichiers",
    "DRIVE.COPYING.COMPLETE": "Fin de la copie et actualisation du dossier..."
}
},{}], 11:[function(require,module,exports){const enGB = require("en-GB.js")
const es = require("es.js")
const fr = require("fr.js")
const it = require("it.js")
const pl = require("pl.js")
const zhCN = require("zh-CN.js")

const supported = ["en-GB", "zh-CN"]
const supported_prefixes = ["es", "fr", "it", "pl"]
module.exports = {

    methods: {
        translate(label, locale) {
            if (locale == null)
                locale = navigator.language;
            if (! supported.includes(locale)) {
                isSupportedPrefix = false;
                for (var i=0; i < supported_prefixes.length; i++)
                    if (locale == supported_prefixes[i] || locale.startsWith(supported_prefixes[i]+"-")) {
                        isSupportedPrefix = true;
                        locale = supported_prefixes[i];
                    }
                if (! isSupportedPrefix)
                    locale = "en-GB";
            }
            if (locale == "en-GB") {
                const res = enGB[label];
                if (res != null)
                    return res;
            }
            if (locale== "es") {
                const res = es[label];
                if (res != null)
                    return res;
            }
            if (locale== "fr") {
                const res = fr[label];
                if (res != null)
                    return res;
            }
            if (locale== "it") {
                const res = it[label];
                if (res != null)
                    return res;
            }
            if (locale== "pl") {
                const res = pl[label];
                if (res != null)
                    return res;
            }
            
            if (locale == "zh-CN") {
                const res = zhCN[label];
                if (res != null)
                    return res;
            }
            // default to enGB if language doesn't have an entry for this
            return enGB[label];
        }
    }
}
},{ "en-GB.js": 5, "es.js": 6, "fr.js": 7, "it.js": 8, "pl.js": 9, "zh-CN.js": 10}], 8:[function(require,module,exports){module.exports = {
    "APP.LOGIN":"Login",
    "APP.SIGNUP":"Registrati",
    "LOGIN.BUTTON":"Accedi",
    "LOGIN.USERNAME":"nome utente",
    "LOGIN.PASSWORD":"password",
    "LOGIN.STAY":"Resta connesso",
    "SIGNUP.USERNAME":"nome utente pubblico",
    "SIGNUP.GENERATE":"Genera password",
    "SIGNUP.CLICKGEN":"Clicca su genera password",
    "SIGNUP.REENTER":"Reinserisci password",
    "SIGNUP.AGREE":"Capisco che le password non possono essere reimpostate o recuperate: se dimentico la mia password, perderò l'accesso al mio account e ai miei dati. Se inserisco la mia password in un sito Web dannoso, perderò il controllo del mio account.",
    "SIGNUP.SIGNUPFREE":"Registrati",
    "SIGNUP.SIGNUPPAID":"Aggiungi carta di pagamento e registrati",
    "SIGNUP.ACCEPT":"Accetto i",
    "SIGNUP.TERMS":"Termini di servizio",
    "SIGNUP.AND":"e",
    "SIGNUP.POLICY":"Informativa sulla privacy",
    "SIGNUP.HYPER":"di archiviazione iper sicura",
    "SIGNUP.BUNDLED":"Tutte le nostre applicazioni private in bundle",
    "SIGNUP.MONTH":"mese",
    "SIGNUP.YEAR":"anno",
    "SIGNUP.BILL.MONTHLY":"fatturato mensilmente",
    "SIGNUP.BILL.YEARLY":"fatturato annualmente",
    "SIGNUP.TRYTITLE":"Vuoi provarlo prima?",
    "SIGNUP.TRY":"Provalo gratis",
    "PASSWORD.COMMON":"la tua password è la $PLACE password più comune!",
    "PASSWORD.SHORT":"le password con meno di $SIZE caratteri sono considerate non sicure",
    "PASSWORD.GOOD":"Questa è una password migliore",
    "TOUR.TITLE":"Benvenuto su Peergos!",
    "TOUR.STORAGE":"Archiviazione crittografata",
    "TOUR.STORAGE.DESC":"Archivia i tuoi file e disponili in cartelle.",
    "TOUR.SHARE":"Condivisione sicura",
    "TOUR.SHARE.DESC":"Condividi in modo sicuro con gli amici su Peergos o con chiunque tramite un collegamento segreto.",
    "TOUR.PHOTOS":"Galleria fotografica",
    "TOUR.PHOTOS.DESC":"Visualizza presentazioni delle tue foto.",
    "TOUR.DOCS":"Modifica documenti",
    "TOUR.DOCS.DESC":"Visualizza e modifica i tuoi documenti di testo.",
    "TOUR.MUSIC":"Raccolta musicale",
    "TOUR.MUSIC.DESC":"Riproduci la tua raccolta musicale.",
    "TOUR.VIDEOS":"Video e filmati",
    "TOUR.VIDEOS.DESC":"Guarda i tuoi video e filmati da qualsiasi dispositivo.",
    "TOUR.PDF":"Visualizzatore PDF",
    "TOUR.PDF.DESC":"Visualizza in modo sicuro i documenti PDF.",
    "TOUR.CAL":"Calendario",
    "TOUR.CAL.DESC":"Gestisci il tuo programma: condividi eventi o interi calendari.",
    "TOUR.SOCIAL":"Feed social",
    "TOUR.SOCIAL.DESC":"Condividi post e commenti con i tuoi amici e follower.",
    "DRIVE.DROP":"Trascina i file qui",
    "DRIVE.UPLOAD.FILES":"Carica file",
    "DRIVE.UPLOAD.FOLDER":"Carica cartella",
    "DRIVE.NEW.FOLDER":"Nuova cartella",
    "DRIVE.NEW.FILE":"Nuovo file",
    "DRIVE.NEW.APP":"Nuova app",
    "DRIVE.PASTE":"Incolla",
    "DRIVE.WITH":"Con",
    "DRIVE.SELECTED":"selezionato",
    "DRIVE.NAME":"Nome",
    "DRIVE.SIZE":"Dimensione",
    "DRIVE.TYPE":"Tipo",
    "DRIVE.MODIFIED":"Modificato",
    "DRIVE.CREATED":"Creato",
    "DRIVE.COPY":"Copia",
    "DRIVE.CUT":"Taglia",
    "DRIVE.DELETE":"Elimina",
    "DRIVE.DOWNLOAD":"Scarica",
    "DRIVE.ZIP":"Zip",
    "DRIVE.DESELECT":"Deseleziona",
    "DRIVE.VIEW":"Visualizza",
    "DRIVE.EDIT":"Modifica",
    "DRIVE.RENAME":"Rinomina",
    "DRIVE.SHARE":"Condividi",
    "DRIVE.DOWNLOAD.ZIP":"Scarica come Zip",
    "DRIVE.THUMB":"Crea miniatura",
    "DRIVE.PROPS":"Proprietà",
    "DRIVE.ADD.LAUNCH":"Aggiungi al launcher",
    "DRIVE.RUN":"Esegui app",
    "DRIVE.INSTALL":"Installa app",
    "DRIVE.DELETE.FILE":"Sei sicuro di voler eliminare",
    "DRIVE.DELETE.FILE2":"e tutti i suoi contenuti",
    "DRIVE.DOWNLOAD.WARN":"Sei sicuro di voler scaricare $NAME di dimensioni $SIZE MB?",
    "DRIVE.ZIP.ERROR":"Scarica come Zip disponibile solo dove è supportato lo streaming (come Chrome)",
    "DRIVE.EMPTY.FOLDER":"Cartella: $NAME non contiene file. Niente da scaricare",
    "DRIVE.CONFIRM.DOWNLOAD.TITLE":"Sei sicuro di voler scaricare gli elementi selezionati?",
    "DRIVE.CONFIRM.DOWNLOAD.BODY":"Cartella/e: $FOLDERS, File: $FILES, Dimensione totale: $SIZE",
    "DRIVE.MOVE.ACCESS.TITLE":"Mantieni l'accesso durante lo spostamento dei file",
    "DRIVE.MOVE.ACCESS.BODY":"Vuoi mantenere l'accesso e i link esistenti ai file spostati?",
    "DRIVE.DOWNLOAD.FOLDERS":"Scaricamento delle cartelle selezionate",
    "DRIVE.DOWNLOAD.FOLDER":"Scaricamento della cartella: $NAME",
    "DRIVE.CONFIRM.DOWNLOAD.FOLDER.TITLE":"Sei sicuro di voler scaricare la cartella: $NAME?",
    "DRIVE.OFFLINE":"Client offline!",
    "DRIVE.UPLOAD.SPACE.ERROR":"L'operazione di caricamento file supera lo spazio disponibile\nLibera $SPACE e prova di nuovo",
    "DRIVE.UPLOAD.TITLE":"Crittografia e caricamento dei file",
    "DRIVE.UPLOAD.COMPLETE":"Completamento del caricamento e aggiornamento della cartella...",
    "DRIVE.UPLOAD.ERROR":"Errore durante il caricamento dei file",
    "DRIVE.UPLOAD.RESUME.TITLE":"Vuoi riprendere il caricamento del file non riuscito?",
    "DRIVE.UPLOAD.RESUME.BODY":"File: $NAME, Cartella: $PATH",
    "DRIVE.UPLOAD.EMPTY":"Niente da caricare",
    "DRIVE.UPLOAD.EXISTS":"Il file: $NAME esiste già in questa posizione",
    "DRIVE.UPLOAD.REPLACE":"Vuoi sostituirlo?",
    "DRIVE.MOVE.ERROR":"Errore durante lo spostamento del file: $NAME",
    "DRIVE.COPY.ERROR":"Errore durante la copia del file: $NAME",
    "DRIVE.COPY.SPACE.ERROR":"L'operazione di copia file supera lo spazio disponibile\nLibera $SPACE e riprova",
    "DRIVE.COPY.TOTAL.SPACE.ERROR":"L'operazione di copia file supera lo spazio totale\n" + "Esegui l'aggiornamento per ottenere più spazio",
    "DRIVE.PASTE.LOCATION.SAME":"La cartella di destinazione è la stessa della cartella di origine",
    "DRIVE.DOWNLOAD.MULTIPLE.STREAM.ERROR":"Il download di più file è disponibile solo dove è supportato lo streaming (come Chrome)",
    "DRIVE.APP.EXISTS":"L'app con nome $NAME esiste già!",
    "DRIVE.APP.ERROR":"Errore durante la creazione dell'app",
    "DRIVE.FILENAME":"Inserisci un nome file",
    "DRIVE.FILENAME.PLACEHOLDER":"Nome file",
    "DRIVE.FILENAME.INVALID":"Nome file non valido",
    "DRIVE.FOLDERNAME.INVALID":"Nome cartella non valido",
    "DRIVE.CREATE.ERROR":"Errore durante la creazione del file",
    "DRIVE.RENAME.TITLE":"Inserisci un nuovo nome",
    "DRIVE.RENAME.PLACEHOLDER":"Nuovo nome",
    "DRIVE.RENAME.ERROR":"Errore durante la ridenominazione di $TYPE: $NAME",
    "DRIVE.DELETE.ERROR":"Errore durante l'eliminazione dei file",
    "DRIVE.DELETE.CONFIRM":"Sei sicuro di voler eliminare $COUNT elementi?",
    "DRIVE.DELETE.FILE.ERROR":"Errore durante l'eliminazione del file: $NAME: $MESSAGE",
    "DRIVE.INSTALL_DEDICATED_APP":"Non è installata alcuna app per questo tipo di file, installa un'app per aprirla",
    "DRIVE.MISSING.FOLDER":"Cartella non trovata!",
    "APPNAV.LAUNCHER":"Launcher",
    "APPNAV.DRIVE":"Drive",
    "APPNAV.NEWSFEED":"Newsfeed",
    "APPNAV.SOCIAL":"Social",
    "APPNAV.CAL":"Calendario",
    "APPNAV.EMAIL":"Email",
    "APPNAV.UPGRADE":"Aggiorna",
    "SEARCH.SEARCH":"Cerca",
    "SEARCH.NAME.CONTAINS":"Il nome file contiene",
    "SEARCH.TEXT.CONTAINS":"Il file di testo contiene",
    "SEARCH.MODIFIED.AFTER":"File modificato dopo",
    "SEARCH.MODIFIED.BEFORE":"File modificato prima",
    "SEARCH.CREATED.AFTER":"File creato dopo",
    "SEARCH.CREATED.BEFORE":"File creato prima",
    "SEARCH.SIZE.GREATER":"Dimensione file maggiore di",
    "SEARCH.SIZE.LESS":"Dimensione file minore di",
    "SEARCH.TYPE":"Tipo file",
    "SEARCH.AUDIO":"Audio",
    "SEARCH.IMAGE":"Immagine",
    "SEARCH.TEXT":"Testo",
    "SEARCH.VIDEO":"Video",
    "SEARCH.RESULTS":"Risultati",
    "SEARCH.DIR":"Directory",
    "SETTINGS.ADMIN":"Pannello di amministrazione",
    "SETTINGS.ACCOUNT":"Account",
    "SETTINGS.PROFILE":"Profilo",
    "SETTINGS.FEEDBACK":"Feedback",
    "SETTINGS.TOUR":"Tour",
    "SETTINGS.HELP":"Aiuto/FAQ",
    "SETTINGS.AUTH":"Autenticazione",
    "SETTINGS.PASS":"Cambia password",
    "SETTINGS.CLEANUP":"Pulisci caricamenti non riusciti",
    "SETTINGS.CACHE":"Imposta dimensione cache",
    "SETTINGS.DELETE":"Elimina account",
    "SETTINGS.LOGOUT":"Disconnetti",
    "SETTINGS.CACHE.INVALID":"Valore dimensione cache non valido",
    "SETTINGS.CACHE.LARGE":"Dimensione cache non valida. Dimensione massima della cache: $SIZE MiB",
    "SETTINGS.CACHE.UPDATED":"Dimensione cache aggiornata",
    "PASSWORD.CHANGE":"Cambia password",
    "PASSWORD.EXISTING":"Password esistente",
    "PASSWORD.GENERATE":"Genera password",
    "PASSWORD.NEW":"Nuova password",
    "PASSWORD.REENTER":"Reinserisci nuova password",
    "PASSWORD.MATCH":"Le password non corrispondono",
    "PASSWORD.MFA":"Codice Multi Factor Authenticator non valido",
    "PASSWORD.CHANGED":"Password modificata",
    "PASSWORD.FIELDS":"Tutti i campi devono essere compilati!",
    "MFA.TITLE":"Autenticazione a due fattori",
    "MFA.APP":"App Authenticator",
    "MFA.KEY":"Chiave di sicurezza",
    "MFA.REMOVE":"Rimuovi",
    "MFA.ADD.KEY":"Aggiungi chiave di sicurezza",
    "MFA.ERROR.RETRIEVAL":"Impossibile per recuperare i metodi di autenticazione",
    "MFA.ERROR.DELETE":"Impossibile eliminare il metodo di autenticazione",
    "MFA.MAX.KEYS":"Numero massimo di chiavi di sicurezza raggiunto",
    "MFA.CONFIRM.REMOVE.KEY":"Sei sicuro di voler rimuovere questa chiave?",
    "MFA.CONFIRM.REMOVE.APP":"Sei sicuro di voler rimuovere l'app Authenticator?",
    "HELP.TITLE":"Aiuto/FAQ",
    "HELP.HOW":"Come faccio a...",
    "HELP.UPGRADE":"Aggiornare il mio account?",
    "HELP.UPGRADE.TEXT":"Seleziona la voce di menu 'Account' dopo aver cliccato sul menu delle impostazioni utente (l'icona della persona nell'angolo in alto a destra). In alternativa, clicca in basso a sinistra dello schermo e dovresti vedere un pulsante 'AGGIORNA'. Segui il contenuto della finestra modale che appare per richiedere spazio/upgrade/downgrade del tuo account.",
    "HELP.SPACE":"Vedi quanto spazio ho utilizzato/ho a disposizione?",
    "HELP.SPACE.TEXT":"In alto a sinistra vedrai il logo Peergos di una torre. Cliccaci sopra per espandere il pannello di sinistra. Nella parte inferiore del pannello espanso verrà visualizzato 99,9 KiB / 999,9 MiB dove il primo numero è il tuo utilizzo e il secondo numero è lo spazio disponibile.",
    "HELP.FOLLOW":"Invia una richiesta di follow?",
    "HELP.FOLLOW.TEXT":"La vista social viene visualizzata selezionando l'icona dei 3 puntini collegati nel menu a sinistra. Nella pagina social puoi inviare una richiesta di follow e visualizzare tutte le richieste in sospeso che hai ricevuto.",
    "HELP.FRIENDS":"Visualizza i miei amici e follower?",
    "HELP.FRIENDS.TEXT1":"La finestra modale social viene visualizzata selezionando l'icona dei 3 puntini collegati nel menu a sinistra. Le tue connessioni social saranno elencate in Amici, Follower e Seguiti.",
    "HELP.FRIENDS.TEXT2":"Se hai inviato una richiesta di follow e il destinatario ha cliccato su 'consenti e segui a tua volta', allora diventerete amici.",
    "HELP.PROFILE":"Creare e condividere un profilo?",
    "HELP.PROFILE.TEXT1":"Seleziona la voce di menu 'Profilo' dopo aver cliccato sul menu delle impostazioni utente (l'icona della persona nell'angolo in alto a destra). Aggiungi i dettagli desiderati e clicca su Salva. L'immagine del profilo verrà visualizzata in anteprima dopo il caricamento. Clicca sul pulsante di condivisione accanto a ogni campo compilato per impostare il pubblico visibile.",
    "HELP.PROFILE.TEXT2":"Puoi visualizzare il profilo di qualcun altro tramite i link generati nella visualizzazione social o nella visualizzazione newsfeed.",
    "HELP.SHARE":"Condividere un file/cartella con un altro utente Peergos?",
    "HELP.SHARE.TEXT1":"Ogni icona di file/cartella nell'unità avrà un menu verticale a 3 punti in alto a destra. Dal menu contestuale che appare, seleziona Condividi. Puoi concedere l'accesso ad altri utenti individualmente o in gruppi. L'accesso può essere di sola lettura o di lettura e scrittura. Il destinatario può condividere un file condiviso per l'accesso di sola lettura.",
    "HELP.SHARE.TEXT2":"Quando si condivide una cartella, le sottocartelle vengono condivise automaticamente.",
    "HELP.SHARE.TEXT3":"Chi ha accesso e il livello di accesso concesso vengono visualizzati anche in questa finestra modale.",
    "HELP.SHARED.FILES":"Visualizza file/cartelle condivise con me?",
    "HELP.SHARED.FILES.TEXT1":"Seleziona l'icona del newsfeed nel menu a sinistra. Ci vorrà del tempo per assemblare una pagina personalizzata composta dai post che ti sono stati inviati. I post possono essere messaggi o link a file/cartelle condivisi con te.",
    "HELP.SHARED.FILES.TEXT2":"In alternativa, se conosci il nome utente della persona che ha condiviso il file/cartella, seleziona l'icona del globo nella barra degli strumenti in alto e vai al suo spazio di archiviazione.",
    "HELP.LINK":"Condividere un link segreto a un file/cartella?",
    "HELP.LINK.TEXT1":"Ogni icona di file/cartella nell'unità avrà un menu verticale a 3 punti in alto a destra. Dal menu contestuale che appare, seleziona Condividi. Nella parte inferiore della finestra modale, seleziona il pulsante 'Crea link segreto'.",
    "HELP.LINK.TEXT2":"Il link può essere incollato direttamente in una scheda del browser. Se il link è a una cartella, i sotto-saldatori saranno visibili anche al destinatario del link segreto.",
    "HELP.CAL":"Configurare un calendario?",
    "HELP.CAL.TEXT1":"Dalla vista calendario, fai clic sull'icona degli ingranaggi nella barra degli strumenti. Seleziona il pulsante 'Impostazioni calendario' per visualizzare i calendari attualmente configurati.",
    "HELP.CAL.TEXT2":"Selezionando il punto accanto a ogni calendario potrai cambiare il colore da associare al calendario. Cliccando sul nome del calendario verrà visualizzata una finestra di dialogo per impostare un nuovo nome per il calendario.",
    "HELP.SHARE.CAL":"Condividere un intero calendario?",
    "HELP.SHARE.CAL.TEXT1":"Il tuo calendario principale non può essere condiviso. Puoi creare più calendari. Dalla vista calendario, clicca sull'icona degli ingranaggi nella barra degli strumenti. Seleziona il pulsante 'Impostazioni calendario' per visualizzare i calendari attualmente configurati.",
    "HELP.SHARE.CAL.TEXT2":"Fai clic sul pulsante di condivisione per impostare il pubblico di sola lettura per il calendario.",
    "HELP.SHARE.CAL.TEXT3":"I calendari condivisi con te dovranno prima essere importati tramite la vista newsfeed.",
    "HELP.SHARE.EVENT":"Condividere un evento del calendario?",
    "HELP.SHARE.EVENT.TEXT1":"Dopo aver creato un evento del calendario, seleziona il collegamento di condivisione nel menu contestuale dell'evento per impostare il pubblico.",
    "HELP.SHARE.EVENT.TEXT2":"Gli eventi del calendario condivisi con te dovranno prima essere importati tramite la vista newsfeed. L'evento importato è una copia dell'evento.",
    "HELP.IMPORT.EVENT":"Importare un evento del calendario?",
    "HELP.IMPORT.EVENT.TEXT1":"Per importare un evento condiviso con te tramite un altro utente Peergos, apri prima il newsfeed e seleziona l'evento",
    "HELP.IMPORT.EVENT.TEXT2":"Per importare un file .ics, apri la vista del calendario e seleziona l'icona degli ingranaggi nella barra degli strumenti. Seleziona il pulsante 'Impostazioni calendario' per visualizzare i calendari attualmente configurati. Da qui fai clic sul pulsante 'Importa'.",
    "HELP.IMPORT.EVENT.TEXT3":"È supportato un file .ics contenente più voci. Diverse implementazioni del calendario (inclusa la nostra!) hanno diversi livelli di supporto/conformità.",
    "HELP.SHARE.TASK":"Condividere un elenco di attività/cose da fare?",
    "HELP.SHARE.TASK.TEXT":"Gli elenchi di attività/cose da fare vengono salvati per impostazione predefinita nella directory principale del tuo spazio Drive. Fai clic sull'icona verticale a 3 punti in alto a destra dell'elemento Attività/Todo desiderato e seleziona Condividi",
    "HELP.WWW":"Ospitare una directory come sito Web statico?",
    "HELP.WWW.TEXT1":"Seleziona la voce di menu 'Profilo' dopo aver fatto clic sul menu delle impostazioni utente (l'icona della persona nell'angolo in alto a destra). Nella parte inferiore della finestra modale vedrai un campo intitolato 'Directory del sito Web'. Dopo aver impostato il campo e selezionato Salva, apparirà un pulsante Pubblica accanto allo stesso campo.",
    "HELP.WWW.TEXT2":"Fai clic sul pulsante Pubblica per completare l'azione.",
    "HELP.WWW.TEXT3":"NOTA: la pubblicazione renderà pubblica la cartella e tutte le sottocartelle e tutti i suoi contenuti!",
    "HELP.WWW.TEXT4":"Cancella il campo di testo e fai clic su Salva per reimpostare.",
    "HELP.WWW.TEXT5":"Consulta questo post del blog per maggiori dettagli",
    "HELP.CLEANUP":"Pulire i caricamenti non riusciti?",
    "HELP.CLEANUP.TEXT":"Un caricamento non riuscito continuerà a consumare spazio su Drive. Per liberare lo spazio allegato, seleziona la voce di menu 'Pulire i caricamenti non riusciti' dal menu delle impostazioni utente.",
    "HELP.THUMB":"Ricreare un'immagine miniatura multimediale?",
    "HELP.THUMB.TEXT":"Il processo di caricamento tenterà di creare un'immagine miniatura per file immagine o video. Varie condizioni/fattori potrebbero cospirare per rendere questa operazione non riuscita. In questo caso, sarà disponibile un'ulteriore voce di menu contestuale 'Crea miniatura'. Questo processo è inoltre soggetto a condizioni/fattori che potrebbero impedire la creazione di un'immagine miniatura.",
    "HELP.FEEDBACK":"Fornire feedback?",
    "HELP.FEEDBACK.TEXT":"Un modulo di feedback è disponibile tramite la voce di menu 'Feedback' nel menu delle impostazioni utente.",
    "HELP.PASSWORD":"Modificare la mia password?",
    "HELP.PASSWORD.TEXT":"Vedi la voce di menu 'Cambia password' nel menu delle impostazioni utente.",
    "HELP.DELETE":"Eliminare il mio account?",
    "HELP.DELETE.TEXT1":"Vedi la voce di menu 'Elimina account' nel menu delle impostazioni utente.",
    "HELP.DELETE.TEXT2":"NOTA: TUTTI i tuoi dati verranno eliminati e il tuo account non sarà più recuperabile.",
    "HELP.GRIPES":"Lamentele/preoccupazioni",
    "HELP.SLOW":"Perché è tutto così lento?",
    "HELP.SLOW.TEXT1":"Non lo è! L'intera storia è sempre più complicata. In un sistema crittografato end-to-end e peer-to-peer, il client è tenuto a fare molto lavoro (e non solo decrittografia/cifratura). Se sei portato per la tecnica, apri la console del browser e guarda il flusso di centinaia di richieste per farti un'idea.",
    "HELP.SLOW.TEXT2":"Ci sono ancora molti miglioramenti della velocità che stiamo pianificando di implementare. Anche le prestazioni miglioreranno man mano che i browser implementeranno alcune delle primitive di cui abbiamo bisogno per la firma e la crittografia.",
    "HELP.JAVA":"Ho sentito che Peergos è scritto in Java, sei pazzo?",
    "HELP.JAVA.TEXT1":"In effetti Java è un linguaggio ideale per Peergos. La JVM è solida come una roccia e fornisce buone prestazioni e utilizzo delle risorse. Il client è scritto principalmente in Java e transcompilato in Javascript tramite il GWT temprato dalla battaglia.",
    "HELP.JAVA.TEXT2":"Avere una base di codice in un unico linguaggio per il server e la maggior parte del client ha molteplici vantaggi. Non siamo fanatici delle lingue, altre scelte sarebbero appropriate in circostanze diverse.",
    "FEEDBACK.TITLE":"Feedback",
    "FEEDBACK.TEXT1":"Puoi dirci qui come possiamo migliorare, oppure puoi chattare con noi su",
    "FEEDBACK.TEXT2":"o inviarci un'e-mail",
    "FEEDBACK.SUBMIT":"Invia",
    "FEEDBACK.PLACEHOLDER":"Digita qui il tuo feedback.",
    "FEEDBACK.SENT":"Feedback inviato. Grazie!",
    "FEEDBACK.ERROR":"Errore durante l'invio del feedback",
    "PROFILE.TITLE":"Profilo",
    "PROFILE.UPLOAD":"Carica immagine",
    "PROFILE.REMOVE":"Rimuovi immagine",
    "PROFILE.FIRSTNAME":"Nome",
    "PROFILE.LASTNAME":"Cognome",
    "PROFILE.PHONE":"Telefono",
    "PROFILE.EMAIL":"Email",
    "PROFILE.STAUS":"Stato",
    "PROFILE.BIO":"Biografia",
    "PROFILE.WWW":"Directory del sito Web",
    "PROFILE.CHANGE.WWW":"Modifica",
    "PROFILE.PUBLISH":"Pubblica",
    "PROFILE.PUBLIC":"Visibile pubblicamente su",
    "PROFILE.SAVE":"Salva profilo",
    "PROFILE.ERROR.IMAGE":"Impossibile leggere l'immagine",
    "PROFILE.ERROR.NOT.FOUND":"Directory Web non trovata. Modifiche non salvate!",
    "PROFILE.ERROR.PATH":"Directory Web non valida. Modifiche non salvate!",
    "PROFILE.PUBLISH.HELP":"Questo ti consente di pubblicare una directory come sito Web. Ciò renderà pubblico tutto ciò che si trova in quella directory e sarà disponibile da https://$NAME.peergos.me o se esegui un gateway Peergos locale da http://$NAME.peergos.localhost:9000 La visualizzazione di siti Web tramite un gateway Peergos locale non si basa su autorità di certificazione DNS o TLS per la sicurezza o l'autenticità. Puoi iniziare aggiungendo un file index.html alla tua directory web.",
    "PROFILE.CONFIRM.PUBLISH":"Sei sicuro di voler pubblicare la cartella: $PATH?",
    "PROFILE.CONFIRM.PUBLISH.TEXT":"Questa azione renderà pubblica la cartella e tutti i suoi contenuti.",
    "PROFILE.ERROR.PUBLISH":"Impossibile pubblicare la directory web",
    "PROFILE.PUBLISH.SUCCESS":"Directory web pubblicata",
    "PROFILE.PUBLISH.AVAILABLE":"Disponibile su: https://$NAME.peergos.me",
    "PROFILE.ERROR.UNEXPECTED":"Errore imprevisto",
    "PROFILE.UPDATED":"Profilo aggiornato",
    "PROFILE.ERROR.UPDATE":"Impossibile aggiornare il profilo",
    "DELETE.ACCOUNT":"Elimina account",
    "DELETE.ACCOUNT.TEXT1":"Se scegli di procedere perderai l'accesso al tuo account e ai tuoi dati!",
    "DELETE.ACCOUNT.TEXT2":"Questa azione non è reversibile.",
    "DELETE.ACCOUNT.TEXT3":"Devi inserire la tua password per confermare che vuoi eliminare il tuo account e tutti i tuoi dati.",
    "DELETE.ACCOUNT.CONFIRM":"Sei assolutamente sicuro di voler eliminare il tuo account?",
    "DELETE.ACCOUNT.YES":"Sì, elimina tutto",
    "DELETE.ACCOUNT.CANCEL":"Non preoccuparti",
    "DELETE.ACCOUNT.DONE":"Account eliminato!",
    "DELETE.ACCOUNT.PASS":"La password deve essere compilata!",
    "DELETE.ACCOUNT.ERROR":"Errore durante l'eliminazione dell'account",
    "DELETE.ACCOUNT.MFA":"Codice Multi Factor Authenticator non valido",
    "SPACE.TITLE":"Richiedi spazio",
    "SPACE.CURRENT":"Spazio corrente",
    "SPACE.PLACEHOLDER":"Nuovo importo totale di spazio",
    "SPACE.POSITIVE":"Lo spazio deve essere un numero intero positivo",
    "SPACE.SMALL":"Non puoi richiedere uno spazio inferiore all'utilizzo corrente, elimina alcuni file e riprova.",
    "SPACE.SENT":"Richiesta di spazio inviata!",
    "PAID.AGREE":"Continuando accetti i nostri",
    "PAID.ACCOUNT":"Account",
    "PAID.STORAGE":"di archiviazione iper sicura",
    "PAID.APPS":"Tutte le nostre applicazioni private in bundle",
    "PAID.MONTH":"mese",
    "PAID.CARD":"Aggiorna i dettagli di pagamento (si apre in una nuova scheda)",
    "PAID.CANCEL":"Annulla abbonamento Peergos",
    "PAID.CANCEL.CONFIRM":"Annulla abbonamento",
    "PAID.CANCEL.OK":"Mantieni l'abbonamento Peergos",
    "PAID.PRORATA":"pro rata per il termine corrente",
    "PAID.SETTINGS":"Impostazioni abbonamento",
    "PAID.UPGRADE":"Aggiorna il tuo account per ottenere più spazio",
    "PAID.CURRENT":"Il tuo piano attuale",
    "PAID.PRO":"Seleziona Pro (si apre una nuova scheda)",
    "PAID.VISIONARY":"Seleziona Visionary (si apre una nuova scheda)",
    "PAID.PIONEER":"Seleziona Pioneer (si apre una nuova scheda)",
    "PAID.SORRY":"Siamo spiacenti di vederti andare. Hai tempo fino alla fine del mese di fatturazione per scaricare i tuoi dati, dopodiché verranno eliminati.",
    "PAID.THANKYOU":"Grazie per esserti registrato a un account Peergos a pagamento!",
    "PAID.CARD.NEEDED":"Dettagli della carta richiesti. Aggiungi una carta di pagamento per completare l'aggiornamento.",
    "PAID.ERROR.CANCEL":"Errore durante l'annullamento dell'account",
    "PAID.ERROR.STORAGE":"Errore durante la richiesta di più spazio di archiviazione",
    "DRIVE.SHARE.USER":"seleziona utente",
    "DRIVE.SHARE.R":"Sola lettura",
    "DRIVE.SHARE.RW":"Lettura e scrittura",
    "DRIVE.SHARE.GROUP":"O gruppo/i",
    "DRIVE.SHARE.FRIENDS":"Amici",
    "DRIVE.SHARE.FOLLOWERS":"Follower (inclusi amici)",
    "DRIVE.SHARE.RWACCESS":"Accesso in lettura e scrittura",
    "DRIVE.SHARE.REVOKE":"Revoca",
    "DRIVE.SHARE.NONE":"Nessuno",
    "DRIVE.SHARE.RACCESS":"Accesso in sola lettura",
    "DRIVE.SHARE.LINK":"Crea collegamento segreto",
    "DRIVE.SHARE.CONFIRM":"Conferma azione",
    "DRIVE.SHARE.CREATE.FILE":"Crea segreto link al file",
    "DRIVE.SHARE.CREATE.FOLDER":"Crea un link segreto alla cartella corrente e apri il file",
    "DRIVE.SHARE.FOLDER.OPEN":"Link segreto alla cartella corrente e apri il file",
    "DRIVE.SHARE.FOLDER":"Link segreto alla cartella",
    "DRIVE.SHARE.FILE":"Link segreto al file",
    "DRIVE.SHARE.ERROR":"Errore di condivisione del file",
    "DRIVE.SHARE.REVOKE.R":"Accesso in lettura revocato",
    "DRIVE.SHARE.ERROR.UNSHARING":"Errore di annullamento della condivisione del file",
    "DRIVE.SHARE.REVOKE.RW":"Accesso in lettura e scrittura revocato",
    "DRIVE.SHARE.ERROR.HOME":"Non puoi condividere la tua directory home",
    "DRIVE.SHARE.ERROR.WRITE":"Solo il proprietario di un file può concedere l'accesso in scrittura",
    "DRIVE.SHARE.ERROR.REPEAT":"Già condiviso",
    "DRIVE.SHARE.COMPLETE":"Condivisione sicura completa",
    "DRIVE.LINK.OPEN":"Apertura automatica",
    "DRIVE.LINK.COPY":"Copia negli appunti",
    "DRIVE.LINK.EMAIL":"via e-mail",
    "DRIVE.LINK.OK":"OK",
    "DRIVE.LINK.UPDATE":"Aggiorna",
    "DRIVE.LINK.VIEWEDIT":"Visualizza/Modifica",
    "DRIVE.LINK.CREATE":"Crea",
    "DRIVE.LINK.WRITABLE":"Rendi scrivibile il collegamento (attenzione: il titolare del collegamento potrebbe riempire il tuo spazio)",
    "DRIVE.LINK.EXPIRE.ON":"Scadenza il",
    "DRIVE.LINK.AT.TIME":"alle",
    "DRIVE.LINK.LIMIT.RETRIEVALS":"Limita il numero di utilizzi del collegamento",
    "DRIVE.LINK.PASSWORD":"Richiedi una password per l'accesso",
    "DRIVE.LINK.ERROR.CREATE":"Si è verificato un errore durante la creazione del collegamento segreto",
    "DRIVE.LINK.ERROR.UPDATE":"Si è verificato un errore durante l'aggiornamento del collegamento segreto",
    "VERIFY.TITLE":"Verifica amico",
    "VERIFY.SCAN":"Scansiona il codice QR del tuo amico",
    "VERIFY.NUMBERS":"Oppure potete leggervi questi numeri a vicenda (dovrebbero corrispondere)",
    "VERIFY.ERROR.CAMERA":"Impossibile connettersi alla telecamera. Assicurati che sia connessa e fai clic su Consenti accesso quando richiesto.",
    "VERIFY.SUCCESS":"Amico verificato correttamente!",
    "VERIFY.ERROR.MISMATCH":"Il codice QR non corrisponde all'identità di questa persona su Peergos. Sei sicuro che questa persona sia chi dice di essere?",
    "VERIFY.VERIFIED":"Verificato",
    "VERIFY.UNVERIFIED":"Non verificato",
    "LAUNCHER.CUSTOM":"App personalizzate",
    "LAUNCHER.UPDATE":"Controlla aggiornamenti",
    "LAUNCHER.NONE":"Nessuna app personalizzata attualmente installata. Crea un'app dalla voce di menu 'crea app' del più verde.",
    "LAUNCHER.SHORTCUTS":"Scorciatoie",
    "LAUNCHER.ADD.SHORTCUT":"Le voci possono essere aggiunte tramite la voce di menu contestuale 'Aggiungi a Launcher'",
    "LAUNCHER.ADDED":"Aggiunto",
    "LAUNCHER.NAME":"Nome",
    "LAUNCHER.FOLDER":"Cartella",
    "LAUNCHER.REMOVE":"Rimuovi",
    "LAUNCHER.FILE.EXISTS":"File: $NAME esiste già in questa posizione",
    "LAUNCHER.FILE.REPLACE":"Vuoi sostituirlo?",
    "LAUNCHER.CREATED.SUCCESS":"File creato",
    "LAUNCHER.CREATED.ERROR":"Creazione file non riuscita",
    "LAUNCHER.UPDATES.NONE":"Tutti aggiornati",
    "LAUNCHER.UPDATES.ONE":"1 ha un aggiornamento",
    "LAUNCHER.UPDATES.MANY":"$COUNT hanno aggiornamenti",
    "LAUNCHER.APP.REMOVE":"Rimuovi app",
    "LAUNCHER.APP.REMOVE.CONFIRM":"Sei sicuro di voler rimuovere questa app (inclusi tutti i dati associati)?",
    "LAUNCHER.SHORTCUT.REMOVE":"Rimuovi collegamento",
    "LAUNCHER.SHORTCUT.REMOVE.CONFIRM":"Sei sicuro di voler rimuovere questo collegamento?",
    "SOCIAL.TITLE":"Visualizzazione social",
    "SOCIAL.SEND.TITLE":"Invia richiesta di follow",
    "SOCIAL.SELECT":"seleziona utente",
    "SOCIAL.SEND":"Invia",
    "SOCIAL.INCOMING":"Richieste di follow in arrivo",
    "SOCIAL.ALLOWANDFOLLOW":"Consenti e segui a tua volta",
    "SOCIAL.ALLOW":"Consenti",
    "SOCIAL.DENY":"Nega",
    "SOCIAL.FRIENDS":"Amici",
    "SOCIAL.UNFOLLOW":"Non seguire più",
    "SOCIAL.REMOVE":"Rimuovi",
    "SOCIAL.VERIFICATION":"Verifica",
    "SOCIAL.FOLLOWERS":"Follower",
    "SOCIAL.FOLLOWING":"Segui",
    "SOCIAL.BLOCKED":"Bloccato",
    "SOCIAL.UNBLOCK":"Sblocca",
    "SOCIAL.ALREADY.SENT":"Richiesta di follow già inviata",
    "SOCIAL.BLOCKED.USERS":"I seguenti utenti sono bloccati",
    "SOCIAL.USER.BLOCKED":"Utente: $USER è bloccato",
    "SOCIAL.SENT":"Richiesta/e di follow inviata/e",
    "SOCIAL.ERROR":"Richiesta/e di follow non riuscita/e",
    "SOCIAL.RECIPROCATED":"Richiesta di follow ricambiata",
    "SOCIAL.ACCEPTED":"Richiesta di follow accettata",
    "SOCIAL.REJECTED":"Richiesta di follow rifiutata",
    "SOCIAL.REMOVED":"Seguace rimosso",
    "SOCIAL.STOPPED":"Seguito interrotto",
    "SOCIAL.UNBLOCKED":"sbloccato",
    "NEWSFEED.TITLE":"Newsfeed",
    "NEWSFEED.NEW":"Nuovo post",
    "NEWSFEED.BUILDING":"Creazione del tuo news feed.",
    "NEWSFEED.MINUTE":"Potrebbe volerci un minuto..",
    "NEWSFEED.BUILT":"Questo è il tuo news feed.",
    "NEWSFEED.DESC":"Puoi vedere qui tutte le cose che sono state condivise con te da amici o persone che segui.",
    "NEWSFEED.FRIEND":"Invia richiesta di amicizia",
    "NEWSFEED.END":"Nessuna voce in più",
    "NEWSFEED.JOIN":"Unisciti",
    "NEWSFEED.ADD.COMMENT":"Aggiungi commento",
    "NEWSFEED.COMMENT":"commenta",
    "NEWSFEED.MORE":"Mostra altro",
    "NEWSFEED.EDITED":"modificato",
    "NEWSFEED.DELETE.CONFIRM":"Sei sicuro di voler eliminare il ",
    "NEWSFEED.POST":"post",
    "NEWSFEED.POST.BUTTON":"Post",
    "NEWSFEED.POST.REPLY":"Posta una risposta",
    "NEWSFEED.POST.EDIT":"Modifica un post",
    "NEWSFEED.POST.UPLOAD.SPACE.ERROR":"I file multimediali superano lo spazio disponibile. Libera $SPACE e riprova",
    "NEWSFEED.POST.UPLOAD.SPACE.ERROR2":"Impossibile procedere. La dimensione del file $NAME supera lo spazio disponibile",
    "NEWSFEED.POST.UPLOAD":"Crittografia e caricamento",
    "NEWSFEED.POST.SHARE.WITH":"Condividi post con:",
    "NEWSFEED.POST.SHARE.WITH.FRIENDS":"Amici",
    "NEWSFEED.POST.SHARE.WITH.FOLLOWERS":"Follower (inclusi amici)",
    "NEWSFEED.ERROR.MEDIA.DELETE":"errore durante l'eliminazione del file multimediale!",
    "NEWSFEED.ERROR.POST.DELETE":"errore durante l'eliminazione del post",
    "NEWSFEED.ERROR.POST.LOAD":"errore durante il caricamento del post",
    "NEWSFEED.ERROR.CHAT.JOIN":"Impossibile partecipare alla chat.",
    "NEWSFEED.APP.ABSENT":"App con nome: $NAME non installata!",
    "NEWSFEED.YOU":"tu",
    "NEWSFEED.WRITEACCESS":"accesso in scrittura a",
    "NEWSFEED.ACAL":"un calendario",
    "NEWSFEED.INVITED.APP":"ti ha invitato all'App",
    "NEWSFEED.FOLDER":"la cartella",
    "NEWSFEED.ANEVENT":"un evento del calendario",
    "NEWSFEED.FILE":"il file",
    "NEWSFEED.OWNED":"di proprietà di",
    "CALENDAR.TITLE":"Calendario",
    "CALENDAR.ERROR.LOAD":"Impossibile caricare il calendario",
    "CALENDAR.ERROR.LOAD.FILE":"Impossibile caricare il file del calendario",
    "CALENDAR.EVENT":"Evento",
    "CALENDAR.THIS.EVENT":"Questo evento",
    "CALENDAR.ALL.EVENTS":"Tutti gli eventi",
    "CALENDAR.FUTURE.EVENTS":"Questo e gli eventi futuri",
    "CALENDAR.NEW.NAME":"Nuovo nome del calendario",
    "CALENDAR.ENTER.NAME":"Inserisci un nuovo name",
    "CALENDAR.INVALID.NAME":"Nome calendario non valido. Utilizza solo caratteri alfanumerici più spazio, trattino e trattino basso",
    "CALENDAR.ALREADY.IMPORTED":"Calendario: $NAME già importato",
    "CALENDAR.ERROR.DELETE":"Impossibile eliminare il calendario",
    "CALENDAR.DELETE.CONFIRM":"Sei sicuro di voler eliminare il calendario: $NAME ?",
    "CALENDAR.ERROR.DELETE.EVENT":"Impossibile eliminare l'evento",
    "CALENDAR.ERROR.SAVE.EVENT":"Impossibile salvare l'evento",
    "CALENDAR.ERROR.LOAD.FILE":"Impossibile caricare il file",
    "CALENDAR.ERROR.SAVE.MOVED.EVENT":"Impossibile salvare l'evento spostato",
    "CALENDAR.RECREATE.EVENT":"Ricrea l'evento",
    "CALENDAR.ERROR.MOVE.EVENT":"Impossibile spostare l'evento",
    "CALENDAR.ERROR.UPLOAD":"Impossibile caricare l'evento/gli eventi. Chiudi calendario",
    "CALENDAR.IMPORT.MSG":"Importazione evento(i) del calendario $ITEMS",
    "CALENDAR.IMPORT.COMPLETE":"Importazione evento(i) completata",
    "CALENDAR.ERROR.IMPORT.EVENT":"Impossibile importare evento(i)",
    "CALENDAR.IMPORT.EVENT":'Vuoi importare evento:',
    "CALENDAR.IMPORT.CALENDAR":'Vuoi importare calendario:',
    "CALENDAR.LABEL":'Calendario',
    "CALENDAR.EVENT.LINK":"Link all 'evento'",
    "SANDBOX.APP.DATA":"Può archiviare e leggere file in una cartella privata dell'app",
    "SANDBOX.EDIT.FILE":"Può modificare il file scelto dall'utente",
    "SANDBOX.READ.FOLDER":"Può leggere i file selezionati dei tipi associati dalla cartella scelta dall'utente",
    "SANDBOX.MESSAGES":"Può scambiare messaggi con gli amici",
    "SANDBOX.MAILBOX":"Può gestire una casella di posta elettronica",
    "SANDBOX.PROFILE.PHOTO":"Può recuperare le foto del profilo dei tuoi amici",
    "SANDBOX.UNSAFE":"Consenti all'app di modificare il proprio codice",
    "SANDBOX.UNKNOWN":"Autorizzazione sconosciuta",
    "FOLDER.PICKER.NO.FOLDERS":"Nessuna cartella selezionata...",
    "FOLDER.PICKER.NO.FOLDER":"Nessuna cartella selezionata...",
    "FOLDER.PICKER.MULTIPLE.SELECTION.NOT.SUPPORTED":"Selezione di più cartelle non supportato!",
    "NEW.FOLDER.NAME.LABEL":"Nome cartella",
    "NEW.FOLDER.NAME.MESSAGE":"Crea cartella",
    "PROMPT.OK":"OK",
    "PROMPT.CANCEL":"Annulla",
    "PROMPT.SET":"Imposta",
    "DRIVE.MOVING.TITLE":"Spostamento file",
    "DRIVE.MOVING.COMPLETE":"Completamento spostamento e aggiornamento cartella...",
    "DRIVE.COPYING.TITLE":"Copia file",
    "DRIVE.COPYING.COMPLETE":"Completamento copia e aggiornamento cartella..."
}
},{}], 9:[function(require,module,exports){module.exports = {
    "APP.LOGIN":"Logowanie",
    "APP.SIGNUP":"Zarejestruj się",
    "LOGIN.BUTTON":"Zaloguj się",
    "LOGIN.USERNAME":"nazwa użytkownika",
    "LOGIN.PASSWORD":"hasło",
    "LOGIN.STAY":"Pozostań zalogowany/a",
    "SIGNUP.USERNAME":"publiczna nazwa użytkownika",
    "SIGNUP.GENERATE":"Generuj hasło",
    "SIGNUP.CLICKGEN":"Kliknij Wygeneruj hasło",
    "SIGNUP.REENTER":"Ponownie wprowadź hasło",
    "SIGNUP.AGREE":"Rozumiem, że haseł nie można zresetować ani odzyskać — jeśli zapomnę hasła, utracę dostęp do konta i danych. Jeśli wprowadzę hasło na złośliwej stronie internetowej, utracę kontrolę nad kontem.",
    "SIGNUP.SIGNUPFREE":"Zarejestruj się",
    "SIGNUP.SIGNUPPAID": "Dodaj kartę płatniczą i zarejestruj się",
    "SIGNUP.ACCEPT": "Akceptuję",
    "SIGNUP.TERMS": "Warunki usługi",
    "SIGNUP.AND": "i",
    "SIGNUP.POLICY": "Polityka prywatności",
    "SIGNUP.HYPER": "hiperbezpiecznego przechowywania",
    "SIGNUP.BUNDLED": "Wszystkie nasze zintegrowane prywatne aplikacje",
    "SIGNUP.MONTH": "miesiąc",
    "SIGNUP.YEAR": "rok",
    "SIGNUP.BILL.MONTHLY": "rozliczane miesięcznie",
    "SIGNUP.BILL.YEARLY": "rozliczane rocznie",
    "SIGNUP.TRYTITLE": "Chcesz najpierw wypróbować?",
    "SIGNUP.TRY": "Wypróbuj za darmo",
    "PASSWORD.COMMON": "Twoje hasło jest $PLACE najczęściej używanym hasłem!",
    "PASSWORD.SHORT":"hasła krótsze niż $SIZE znaków są uważane za niebezpieczne",
    "PASSWORD.GOOD":"To hasło jest lepsze",
    "TOUR.TITLE":"Witamy w Peergos!",
    "TOUR.STORAGE":"Szyfrowane przechowywanie danych",
    "TOUR.STORAGE.DESC":"Przechowuj pliki i grupuj je w folderach.",
    "TOUR.SHARE":"Bezpieczne udostępnianie",
    "TOUR.SHARE.DESC":"Bezpieczne udostępnianie znajomym w Peergos, lub poza nim - za pośrednictwem tajnego łącza.",
    "TOUR.PHOTOS":"Galeria zdjęć",
    "TOUR.PHOTOS.DESC":"Przeglądaj swoje zdjęcia.",
    "TOUR.DOCS":"Edycja dokumentów",
    "TOUR.DOCS.DESC":"Przeglądaj i edytuj swoje dokumenty tekstowe.",
    "TOUR.MUSIC":"Kolekcja muzyki",
    "TOUR.MUSIC.DESC":"Odtwarzaj swoją kolekcję muzyki.",
    "TOUR.VIDEOS":"Filmy",
    "TOUR.VIDEOS.DESC":"Oglądaj swoje filmy na dowolnym urządzeniu.",
    "TOUR.PDF":"Przeglądarka PDF",
    "TOUR.PDF.DESC":" Przeglądaj dokumenty PDF w zabezpieczony sposób.", 
    "TOUR.CAL":"Kalendarz",
    "TOUR.CAL.DESC":"Zarządzaj swoim harmonogramem — udostępniaj wydarzenia lub całe kalendarze.",
    "TOUR.SOCIAL":"Kanał społecznościowy",
    "TOUR.SOCIAL.DESC":"Udostępniaj posty i komentarze znajomym i obserwującym.",
    "DRIVE.DROP":"Upuść pliki tutaj",
    "DRIVE.UPLOAD.FILES":"Prześlij pliki",
    "DRIVE.UPLOAD.FOLDER":"Prześlij folder",
    "DRIVE.NEW.FOLDER":"Nowy folder",
    "DRIVE.NEW.FILE":"Nowy plik",
    "DRIVE.NEW.APP":"Nowa aplikacja",
    "DRIVE.PASTE":"Wklej",
    "DRIVE.WITH":"Z",
    "DRIVE.SELECTED":"wybrane",
    "DRIVE.NAME":"Nazwa",
    "DRIVE.SIZE":"Rozmiar",
    "DRIVE.TYPE":"Typ",
    "DRIVE.MODIFIED":"Zmodyfikowany",
    "DRIVE.CREATED":"Utworzony",
    "DRIVE.COPY":"Kopiuj",
    "DRIVE.CUT":"Wytnij",
    "DRIVE.DELETE":"Usuń",
    "DRIVE.DOWNLOAD":"Pobierz",
    "DRIVE.ZIP":"Zip",
    "DRIVE.DESELECT":"Odznacz",
    "DRIVE.VIEW":"Widok",
    "DRIVE.EDIT":"Edytuj",
    "DRIVE.RENAME":"Zmień nazwę",
    "DRIVE.SHARE":"Udostępnij",
    "DRIVE.DOWNLOAD.ZIP":"Pobierz jako Zip",
    "DRIVE.THUMB":"Utwórz ikonkę",
    "DRIVE.PROPS":"Właściwości",
    "DRIVE.ADD.LAUNCH":"Dodaj do aplikacji",
    "DRIVE.RUN":"Uruchom aplikację",
    "DRIVE.INSTALL":"Zainstaluj aplikację",
    "DRIVE.DELETE.FILE":"Czy na pewno chcesz usunąć",
    "DRIVE.DELETE.FILE2":"i całą jego zawartość",
    "DRIVE.DOWNLOAD.WARN":"Czy na pewno chcesz pobrać $NAME o rozmiarze $SIZE MB?",
    "DRIVE.ZIP.ERROR":"Pobieranie jako Zip jest dostępne tylko tam, gdzie obsługiwane jest przesyłanie strumieniowe (np. Chrome)",
    "DRIVE.EMPTY.FOLDER":"Folder: $NAME nie zawiera żadnych plików. Nie ma nic do pobrania",
    "DRIVE.CONFIRM.DOWNLOAD.TITLE":"Czy na pewno chcesz pobrać wybrane elementy?",
    "DRIVE.CONFIRM.DOWNLOAD.BODY":"Folder(y): $FOLDERS, Plik(i): $FILES, Całkowity rozmiar: $SIZE",
    "DRIVE.MOVE.ACCESS.TITLE":"Zachowaj dostęp podczas przenoszenia pliku(ów)",
    "DRIVE.MOVE.ACCESS.BODY":"Czy chcesz zachować istniejący dostęp i linki do przeniesionych plików?",
    "DRIVE.DOWNLOAD.FOLDERS":"Pobieranie wybranych folderów",
    "DRIVE.DOWNLOAD.FOLDER":"Pobieranie folderu: $NAME",
    "DRIVE.CONFIRM.DOWNLOAD.FOLDER.TITLE":"Czy na pewno chcesz pobrać folder: $NAME?",
    "DRIVE.OFFLINE": "Klient offline!",
    "DRIVE.UPLOAD.SPACE.ERROR": "Operacja przesyłania pliku przekracza dostępne miejsce \nZwolnij $SPACE i spróbuj ponownie",
    "DRIVE.UPLOAD.TITLE": "Szyfrowanie i przesyłanie pliku(ów)",
    "DRIVE.UPLOAD.COMPLETE": "Kończenie przesyłania i odświeżanie folderu...",
    "DRIVE.UPLOAD.ERROR": "Błąd przesyłania plików",
    "DRIVE.UPLOAD.RESUME.TITLE": "Czy chcesz wznowić nieudane przesyłanie pliku?",
    "DRIVE.UPLOAD.RESUME.BODY": "Plik: $NAME, Folder: $PATH",
    "DRIVE.UPLOAD.EMPTY": "Nie ma nic do przesłania",
    "DRIVE.UPLOAD.EXISTS": "Plik: $NAME już istnieje w tej lokalizacji",
    "DRIVE.UPLOAD.REPLACE":"Czy chcesz go zastąpić?",
    "DRIVE.MOVE.ERROR":"Błąd przenoszenia pliku: $NAME",
    "DRIVE.COPY.ERROR":"Błąd kopiowania pliku: $NAME",
    "DRIVE.COPY.SPACE.ERROR": "Operacja kopiowania pliku przekracza dostępne miejsce\nZwolnij $SPACE i spróbuj ponownie",
    "DRIVE.COPY.TOTAL.SPACE.ERROR": "Operacja kopiowania pliku przekracza całkowite dostępne miejsce\n" + "Zmień subskrypcję, aby uzyskać więcej miejsca",
    "DRIVE.PASTE.LOCATION.SAME": "Folder docelowy jest taki sam jak folder źródłowy",
    "DRIVE.DOWNLOAD.MULTIPLE.STREAM.ERROR": "Pobieranie wielu plików jest możliwe tylko w przypadku obsługi przesyłania strumieniowego (np. Chrome)",
    "DRIVE.APP.EXISTS": "Aplikacja o nazwie $NAME już istnieje!",
    "DRIVE.APP.ERROR": "Błąd podczas tworzenia aplikacji",
    "DRIVE.FILENAME": "Wprowadź nazwę pliku",
    "DRIVE.FILENAME.PLACEHOLDER": "Nazwa pliku",
    "DRIVE.FILENAME.INVALID": "Nieprawidłowa nazwa pliku",
    "DRIVE.FOLDERNAME.INVALID": "Nieprawidłowa nazwa folderu",
    "DRIVE.CREATE.ERROR": "Błąd tworzenia pliku",
    "DRIVE.RENAME.TITLE": "Wprowadź nową nazwę",
    "DRIVE.RENAME.PLACEHOLDER": "Nowa nazwa",
    "DRIVE.RENAME.ERROR": "Błąd zmiany nazwy $TYPE: $NAME",
    "DRIVE.DELETE.ERROR": "Błąd usuwania plików",
    "DRIVE.DELETE.CONFIRM": "Czy na pewno chcesz usunąć $COUNT elementów?",
    "DRIVE.DELETE.FILE.ERROR": "Błąd usuwania pliku: $NAME: $MESSAGE",
    "DRIVE.INSTALL_DEDICATED_APP": "Brak zainstalowanej aplikacji dla tego typu plików, zainstaluj aplikację aby móc je otworzyć",
    "DRIVE.MISSING.FOLDER":"Folder nie został znaleziony!",
    "APPNAV.LAUNCHER":"Aplikacje",
    "APPNAV.DRIVE":"Dysk",
    "APPNAV.NEWSFEED":"Kanał informacyjny",
    "APPNAV.SOCIAL":"Społecznościowe",
    "APPNAV.CAL":"Kalendarz",
    "APPNAV.EMAIL":"E-mail",
    "APPNAV.UPGRADE":"Zmień subskrypcję",
    "SEARCH.SEARCH":"Wyszukiwanie",
    "SEARCH.NAME.CONTAINS":"Nazwa pliku zawiera",
    "SEARCH.TEXT.CONTAINS":"Plik tekstowy zawiera",
    "SEARCH.MODIFIED.AFTER":"Plik zmodyfikowano po",
    "SEARCH.MODIFIED.BEFORE":"Plik zmodyfikowano przed",
    "SEARCH.CREATED.AFTER":"Plik utworzono po",
    "SEARCH.CREATED.BEFORE":"Plik utworzony przed",
    "SEARCH.SIZE.GREATER":"Rozmiar pliku większy niż",
    "SEARCH.SIZE.LESS":"Rozmiar pliku mniejszy niż",
    "SEARCH.TYPE":"Typ pliku",
    "SEARCH.AUDIO":"Audio",
    "SEARCH.IMAGE":"Obraz",
    "SEARCH.TEXT":"Tekst",
    "SEARCH.VIDEO":"Wideo",
    "SEARCH.RESULTS":"Wyniki",
    "SEARCH.DIR":"Folder",
    "SETTINGS.ADMIN":"Panel administracyjny",
    "SETTINGS.ACCOUNT":"Konto",
    "SETTINGS.PROFILE":"Profil",
    "SETTINGS.FEEDBACK":"Opinie",
    "SETTINGS.TOUR":"Zwiedzanie",
    "SETTINGS.HELP": "Pomoc/FAQ",
    "SETTINGS.AUTH": "Autentykacja",
    "SETTINGS.PASS": "Zmień hasło",
    "SETTINGS.CLEANUP": "Wyczyść nieudane przesyłanie",
    "SETTINGS.CACHE": "Ustaw rozmiar pamięci podręcznej",
    "SETTINGS.DELETE": "Usuń konto",
    "SETTINGS.LOGOUT": "Wyloguj się",
    "SETTINGS.CACHE.INVALID": "Nieprawidłowa wartość rozmiaru pamięci podręcznej",
    "SETTINGS.CACHE.LARGE": "Nieprawidłowy rozmiar pamięci podręcznej. Maksymalny rozmiar pamięci podręcznej: $SIZE MiB",
    "SETTINGS.CACHE.UPDATED":"Zaktualizowano rozmiar pamięci podręcznej",
    "PASSWORD.CHANGE":"Zmień hasło",
    "PASSWORD.EXISTING":"Istniejące hasło",
    "PASSWORD.GENERATE":"Generuj hasło",
    "PASSWORD.NEW":"Nowe hasło",
    "PASSWORD.REENTER":"Ponownie wprowadź nowe hasło",
    "PASSWORD.MATCH":"Hasła nie są zgodne",
    "PASSWORD.MFA":"Nieprawidłowy kod uwierzytelniania wieloskładnikowego",
    "PASSWORD.CHANGED":"Zmieniono hasło",
    "PASSWORD.FIELDS":"Wszystkie pola muszą być wypełnione!",
    "MFA.TITLE":"Uwierzytelnianie dwuskładnikowe",
    "MFA.APP":" Aplikacja uwierzytelniająca",
    "MFA.KEY":"Klucz bezpieczeństwa",
    "MFA.REMOVE":"Usuń",
    "MFA.ADD.KEY":"Dodaj klucz bezpieczeństwa",
    "MFA.ERROR.RETRIEVAL":"Nie można pobrać metod uwierzytelniania",
    "MFA.ERROR.DELETE":"Nie można usunąć metody uwierzytelniania",
    "MFA.MAX.KEYS":"Osiągnięto maksymalną liczbę kluczy bezpieczeństwa",
    "MFA.CONFIRM.REMOVE.KEY":"Czy na pewno chcesz usunąć ten klucz?",
    "MFA.CONFIRM.REMOVE.APP":"Czy na pewno chcesz usunąć aplikację uwierzytelniającą?",
    "HELP.TITLE":"Pomoc/FAQ",
    "HELP.HOW":"Jak...",
    "HELP.UPGRADE":"Zmienić subskrypcję mojego konta?",
    "HELP.UPGRADE.TEXT":"Kliknij menu ustawień użytkownika (ikona osoby w prawym górnym rogu) i wybierz pozycję 'Konto'. Alternatywnie, kliknij na lewy dolny róg ekranu, a powinien pojawić się przycisk ‘ZMIEŃ SUBSKRYPCJĘ’. Postępuj zgodnie z treścią wyświetlonego okna modalnego, aby poprosić o więcej miejsca lub podwyższenie/obniżenie poziomu konta.",
    "HELP.SPACE":"Zobaczyć, ile miejsca wykorzystałem/mam dostępne?",
    "HELP.SPACE.TEXT":"W lewym górnym rogu zobaczysz logo Peergos przedstawiające wieżę. Kliknij, aby rozwinąć lewy panel. Na dole rozwiniętego panelu wyświetli się 99,9 KiB / 999,9 MiB, gdzie pierwsza liczba to Twoje zużycie, a druga to dostępne miejsce.",
    "HELP.FOLLOW":"Wysłać prośbę o obserwowanie?",
    "HELP.FOLLOW.TEXT":"Widok społecznościowy jest wyświetlany po wybraniu ikony 3 połączonych kropek w menu po lewej stronie. Na stronie społecznościowej możesz wysłać prośbę o obserwowanie i zobaczyć wszystkie otrzymane prośby oczekujące na zatwierdzenie.",
    "HELP.FRIENDS":"Wyświetlić moich znajomych i obserwujących?",
    "HELP.FRIENDS.TEXT1":"Modal społecznościowy jest wyświetlany po wybraniu ikony 3 połączonych kropek w menu po lewej stronie. Twoje połączenia społecznościowe będą wymienione pod Znajomi, Obserwujący i Obserwowani.",
    "HELP.FRIENDS.TEXT2": "Jeśli wysłałeś prośbę o obserwowanie, a odbiorca kliknął 'zezwól i obserwuj', zostaniecie znajomymi",
    "HELP.PROFILE": "Utworzyć i udostępnić profil?",
    "HELP.PROFILE.TEXT1": "Kliknij menu ustawień użytkownika (ikona osoby w prawym górnym rogu) i wybierz pozycję 'Profil'. Dodaj pożądane szczegóły i kliknij Zapisz. Podgląd zdjęcia profilowego zostanie wyświetlony po przesłaniu. Kliknij przycisk Udostępnij obok każdego wypełnionego pola, aby ustawić widoczność",
    "HELP.PROFILE.TEXT2": "Możesz wyświetlić profil innej osoby za pośrednictwem linków wygenerowanych w widoku społecznościowym lub w widoku aktualności",
    "HELP.SHARE": "Udostępnić plik/folder innemu użytkownikowi Peergos?",
    "HELP.SHARE.TEXT1": "Każda ikona pliku/folderu na dysku będzie miała pionowe menu z 3 kropkami w prawym górnym rogu. Z menu kontekstowego, które się pojawi, wybierz Udostępnij. Możesz przyznać dostęp innym użytkownikom indywidualnie lub grupowo. Dostęp może być tylko do odczytu, lub do odczytu i zapisu. Odbiorca może ponownie udostępnić udostępniony plik tylko do odczytu.",
    "HELP.SHARE.TEXT2":"Podczas udostępniania folderu podfoldery są udostępniane automatycznie.",
    "HELP.SHARE.TEXT3":"W tym okno również wyświetla się informacja o tym, kto ma dostęp, oraz poziom przyznanego dostępu.",
    "HELP.SHARED.FILES":"Wyświetlić udostępnione mi pliki/foldery?",
    "HELP.SHARED.FILES.TEXT1":"Wybierz ikonę aktualności w menu po lewej stronie. Utworzenie niestandardowej strony składającej się z postów wysłanych do Ciebie zajmie trochę czasu. Posty mogą być wiadomościami lub linkami do udostępnionych Ci plików/folderów.",
    "HELP.SHARED.FILES.TEXT2":"Alternatywnie, jeśli znasz nazwę użytkownika osoby, która udostępniła plik/folder, wybierz ikonę kuli ziemskiej na górnym pasku narzędzi i przejdź do jej przestrzeni dyskowej.",
    "HELP.LINK":"Udostępnić tajny link do pliku/folderu?",
    "HELP.LINK.TEXT1":"Każda ikona pliku/folderu na dysku będzie miała pionowe menu z 3 kropkami w prawym górnym rogu. Z wyświetlonego menu kontekstowego wybierz Udostępnij. Na dole okna modalnego wybierz przycisk 'Utwórz tajny link'.",
    "HELP.LINK.TEXT2":"Link można wkleić bezpośrednio do karty przeglądarki. Jeśli link prowadzi do folderu, podfoldery będą również widoczne dla odbiorcy tajnego linku.",
    "HELP.CAL":"Skonfigurować kalendarz?",
    "HELP.CAL.TEXT1":"W widoku kalendarza kliknij ikonę zębatek na pasku narzędzi. Wybierz przycisk 'Ustawienia kalendarza', aby wyświetlić aktualnie skonfigurowane kalendarze.",
    "HELP.CAL.TEXT2":"Wybranie kropki obok każdego kalendarza umożliwi zmianę koloru przypisanego do kalendarza. Kliknięcie nazwy kalendarza wyświetli okno dialogowe umożliwiające ustawienie nowej nazwy.",
    "HELP.SHARE.CAL":"Udostępnić cały kalendarz?",
    "HELP.SHARE.CAL.TEXT1":"Twój główny kalendarz nie może być udostępniony. Można natomiast utworzyć wiele kalendarzy. W widoku kalendarza kliknij ikonę zębatek na pasku narzędzi. Wybierz przycisk 'Ustawienia kalendarza', aby wyświetlić aktualnie skonfigurowane kalendarze.",
    "HELP.SHARE.CAL.TEXT2":"Kliknij przycisk udostępniania, aby ustawić odbiorców tylko do odczytu dla kalendarza.",
    "HELP.SHARE.CAL.TEXT3":"Kalendarze udostępnione Tobie będą najpierw musiały zostać zaimportowane przez widok aktualności.",
    "HELP.SHARE.EVENT":"Udostępnić wydarzenie kalendarzowe?",
    "HELP.SHARE.EVENT.TEXT1":"Po utworzeniu wydarzenia kalendarzowego wybierz link udostępniania w menu kontekstowym wydarzenia, aby ustawić odbiorców.",
    "HELP.SHARE.EVENT.TEXT2":"Wydarzenia kalendarzowe udostępnione Tobie będą najpierw musiały zostać zaimportowane przez widoku aktualności. Zaimportowane wydarzenie jest kopią.",
    "HELP.IMPORT.EVENT":"Zaimportować wydarzenie kalendarzowe?",
    "HELP.IMPORT.EVENT.TEXT1":"Aby zaimportować wydarzenie udostępnione Ci przez innego użytkownika Peergos, najpierw otwórz aktualności i wybierz wydarzenie",
    "HELP.IMPORT.EVENT.TEXT2":"Aby zaimportować plik .ics, otwórz widok kalendarza i wybierz ikonę zębatek na pasku narzędzi. Wybierz przycisk 'Ustawienia kalendarza', aby wyświetlić aktualnie skonfigurowane kalendarze. Następnie kliknij przycisk 'importuj'.",
    "HELP.IMPORT.EVENT.TEXT3":"Obsługiwany jest plik .ics zawierający wiele wpisów. Różne implementacje kalendarza (w tym nasza!) mają różny poziom wsparcia/zgodności.",
    "HELP.SHARE.TASK":"Udostępnić listę zadań?",
    "HELP.SHARE.TASK.TEXT":"Listy zadań są domyślnie zapisywane w folderze głównym Twojej przestrzeni dyskowej. Kliknij pionową ikonę z trzema kropkami w prawym górnym rogu wybranego zadania i wybierz opcję Udostępnij",
    "HELP.WWW":"Hostować folder jako statyczną stronę internetową?",
    "HELP.WWW.TEXT1":" Kliknij menu ustawień użytkownika (ikona osoby w prawym górnym rogu) i wybierz pozycję 'Profil'. Na dole okna modalnego zobaczysz pole zatytułowane ‘Folder strony internetowej’. Po ustawieniu pola i wybraniu opcji Zapisz, obok tego samego pola pojawi się przycisk Publikuj.",
    "HELP.WWW.TEXT2":"Kliknij przycisk Publikuj, aby zakończyć działanie.",
    "HELP.WWW.TEXT3":"UWAGA: Publikowanie spowoduje, że folder i wszystkie podfoldery oraz cała jego zawartość staną się publiczne!",
    "HELP.WWW.TEXT4":"Wyczyść pole tekstowe i kliknij Zapisz, aby zresetować.",
    "HELP.WWW.TEXT5":"Więcej szczegółów znajdziesz na blogu",
    "HELP.CLEANUP": "Wyczyścić nieudane przesyłania?",
    "HELP.CLEANUP.TEXT": "Nieudane przesyłanie będzie nadal zużywać miejsce na dysku. Aby zwolnić przydzielone miejsce, wybierz pozycję menu 'Wyczyść nieudane przesyłania' z menu ustawień użytkownika.",
    "HELP.THUMB": "Ponownie utworzyć ikonkę multimediów?",
    "HELP.THUMB.TEXT": "Proces przesyłania spróbuje utworzyć ikonkę dla plików graficznych lub wideo. Różne warunki/czynniki mogą sprawić, że operacja się nie powiedzie. Jeśli tak się stanie, dostępna będzie dodatkowa pozycja menu kontekstowego 'Utwórz ikonkę’. Ten proces  również podlega warunkom/czynnikom, które mogą uniemożliwić utworzenie ikonki.",
    "HELP.FEEDBACK": "Przekazać opinię?",
    "HELP.FEEDBACK.TEXT": "Formularz opinii jest dostępny za pośrednictwem pozycji menu 'Opinie' w ustawieniach użytkownika.",
    "HELP.PASSWORD": "Zmienić moje hasło?",
    "HELP.PASSWORD.TEXT": "Zobacz pozycję 'Zmień hasło' w menu ustawień użytkownika.",
    "HELP.DELETE": "Usunąć moje konto?",
    "HELP.DELETE.TEXT1": "Zobacz pozycję 'Usuń konto' w menu ustawień użytkownika.",
    "HELP.DELETE.TEXT2": "UWAGA: WSZYSTKIE Twoje dane zostaną usunięte, a Twoje konto będzie bezpowrotnie utracone.",
    "HELP.GRIPES": "Skargi/obawy",
    "HELP.SLOW": "Dlaczego wszystko jest takie wolne?",
    "HELP.SLOW.TEXT1": "Nie jest! To trochę bardziej skomplikowane, niż może się wydawać. W systemie szyfrowanym od końca do końca (E2EE) i peer-to-peer, klient musi wykonać wiele pracy (i nie jest to tylko odszyfrowanie/zaszyfrowanie). Jeśli masz techniczne zacięcie, otwórz konsolę przeglądarki i poobserwuj strumień setek żądań.",
    "HELP.SLOW.TEXT2":"Wciąż wprowadzamy kolejne usprawnienia prędkości. Wydajność również poprawi się, gdy przeglądarki wdrożą niektóre z prymitywów potrzebnych do podpisywania i szyfrowania.",
    "HELP.JAVA":"Podobno Peergos jest napisany w Javie, oszaleliście?",
    "HELP.JAVA.TEXT1":"W gruncie rzeczy Java jest idealnym językiem dla Peergos. JVM jest bardzo stabilny, zapewnia dobrą wydajność i wykorzystanie zasobów. Klient jest napisany głównie w Javie i transkompilowany do Javascript za pomocą zaprawionego w bojach GWT.",
    "HELP.JAVA.TEXT2":"Posiadanie jednolitej bazy kodu dla serwera i większej części klienta ma wiele zalet. Nie jesteśmy fanatykami, w innych okolicznościach wybór innego języka również mógłby być odpowiedni.",
    "FEEDBACK.TITLE":"Opinie",
    "FEEDBACK.TEXT1":"Tutaj możesz nam powiedzieć, co powinniśmy ulepszyć - lub możesz z nami porozmawiać na",
    "FEEDBACK.TEXT2":"lub wysłać nam e-mail",
    "FEEDBACK.SUBMIT":"Prześlij",
    "FEEDBACK.PLACEHOLDER":"Wpisz swoją opinię tutaj.",
    "FEEDBACK.SENT":"Opinia została wysłana. Dziękujemy!",
    "FEEDBACK.ERROR":"Błąd podczas wysyłania opinii",
    "PROFILE.TITLE":"Profil",
    "PROFILE.UPLOAD":"Prześlij obraz",
    "PROFILE.REMOVE":"Usuń obraz",
    "PROFILE.FIRSTNAME":"Imię",
    "PROFILE.LASTNAME":"Nazwisko",
    "PROFILE.PHONE":"Telefon",
    "PROFILE.EMAIL":"E-mail",
    "PROFILE.STAUS":"Status",
    "PROFILE.BIO":"Biografia",
    "PROFILE.WWW":"Folder strony internetowej",
    "PROFILE.CHANGE.WWW":"Zmień",
    "PROFILE.PUBLISH":"Publikuj",
    "PROFILE.PUBLIC":"Publicznie widoczny na",
    "PROFILE.SAVE": "Zapisz profil",
    "PROFILE.ERROR.IMAGE": "Nie można odczytać obrazu",
    "PROFILE.ERROR.NOT.FOUND": "Nie znaleziono folderu strony internetowej. Zmiany nie zostały zapisane!",
    "PROFILE.ERROR.PATH": "Nieprawidłowy folder strony internetowej. Zmiany nie zostały zapisane!",
    "PROFILE.PUBLISH.HELP": "To pozwala opublikować folder jako witrynę internetową. Spowoduje to, że wszystkie dane w tym folderze staną się publiczne i będą dostępne pod adresem https://$NAME.peergos.me lub jeśli uruchomisz lokalną bramę Peergos pod adresem http://$NAME.peergos.localhost:9000 Przeglądanie witryn internetowych za pośrednictwem lokalnej bramy Peergos nie wynika z urzędów certyfikacji DNS lub TLS w zakresie bezpieczeństwa lub autentyczności. Możesz zacząć od dodania pliku index.html do swojego folderu strony internetowej.",
    "PROFILE.CONFIRM.PUBLISH":"Czy na pewno chcesz opublikować folder: $PATH?",
    "PROFILE.CONFIRM.PUBLISH.TEXT":"Ta czynność spowoduje, że folder i cała jego zawartość zostaną upublicznione.",
    "PROFILE.ERROR.PUBLISH":"Nie można opublikować folderu strony internetowej",
    "PROFILE.PUBLISH.SUCCESS":"Folder strony internetowej został opublikowany",
    "PROFILE.PUBLISH.AVAILABLE":"Dostępny pod adresem: https://$NAME.peergos.me",
    "PROFILE.ERROR.UNEXPECTED":"Nieoczekiwany błąd",
    "PROFILE.UPDATED":"Profil zaktualizowany",
    "PROFILE.ERROR.UPDATE":"Nie można zaktualizować profilu",
    "DELETE.ACCOUNT":"Usuń Konto",
    "DELETE.ACCOUNT.TEXT1":"Jeśli zdecydujesz się kontynuować, utracisz dostęp do swojego konta i danych!",
    "DELETE.ACCOUNT.TEXT2":"Ta czynność jest nieodwracalna.",
    "DELETE.ACCOUNT.TEXT3":"Musisz wprowadzić hasło, aby potwierdzić, że chcesz usunąć swoje konto i wszystkie swoje dane.",
    "DELETE.ACCOUNT.CONFIRM":"Czy na pewno chcesz usunąć swoje konto?",
    "DELETE.ACCOUNT.YES":"Tak, usuń wszystko",
    "DELETE.ACCOUNT.CANCEL":"Chyba jednak nie",
    "DELETE.ACCOUNT.DONE":"Konto zostało usunięte!",
    "DELETE.ACCOUNT.PASS":"Hasło musi być wypełnione!",
    "DELETE.ACCOUNT.ERROR": "Błąd podczas usuwania konta",
    "DELETE.ACCOUNT.MFA": "Nieprawidłowy kod uwierzytelniania wieloskładnikowego",
    "SPACE.TITLE": "Zamów więcej miejsca",
    "SPACE.CURRENT": "Obecna ilość miejsca",
    "SPACE.PLACEHOLDER": "Nowa całkowita ilość miejsca",
    "SPACE.POSITIVE": "Miejsce musi być dodatnią liczbą całkowitą",
    "SPACE.SMALL": "Nie możesz zamówić miejsca mniejszego niż Twoje obecne zużycie, usuń kilka plików i spróbuj ponownie",
    "SPACE.SENT": "Żądanie miejsca zostało wysłane!",
    "PAID.AGREE": "Kontynuując, zgadzasz się na nasze",
    "PAID.ACCOUNT": "Konto",
    "PAID.STORAGE": "hiperbezpiecznej przestrzeni dyskowej ",
    "PAID.APPS": "Wszystkie nasze zintegrowane prywatne aplikacje",
    "PAID.MONTH":"miesiąc",
    "PAID.CARD":"Aktualizuj dane płatności (otwiera się w nowej karcie)",
    "PAID.CANCEL":"Anuluj subskrypcję Peergos",
    "PAID.CANCEL.CONFIRM":"Anuluj subskrypcję",
    "PAID.CANCEL.OK":"Zachowaj subskrypcję Peergos",
    "PAID.PRORATA":"proporcjonalnie do bieżącego okresu",
    "PAID.SETTINGS":"Ustawienia subskrypcji",
    "PAID.UPGRADE":"Zmień subskrypcję swojego konta, aby uzyskać więcej miejsca",
    "PAID.CURRENT":"Twój obecny plan",
    "PAID.PRO":"Wybierz Pro (otwiera się w nowej karcie)",
    "PAID.VISIONARY":"Wybierz Visionary (otwiera się w nowej karcie)",
    "PAID.PIONEER":"Wybierz Pioneer (otwiera się w nowej karcie)",
    "PAID.SORRY":"Przykro nam, że odchodzisz. Do końca miesiąca rozliczeniowego masz czas na pobranie swoich danych, potem zostaną one usunięte.",
    "PAID.THANKYOU":"Dziękujemy za założenie płatnego konta Peergos!",
    "PAID.CARD.NEEDED":"Wymagane są dane karty. Dodaj kartę płatniczą, aby dokończyć subskrypcję.",
    "PAID.ERROR.CANCEL":"Błąd anulowania konta",
    "PAID.ERROR.STORAGE":"Błąd żądania większej ilości miejsca",
    "DRIVE.SHARE.USER":"wybierz użytkownika",
    "DRIVE.SHARE.R":"Tylko do odczytu",
    "DRIVE.SHARE.RW":"Odczyt i zapis",
    "DRIVE.SHARE.GROUP":"Lub grupa(y)",
    "DRIVE.SHARE.FRIENDS":"Znajomi",
    "DRIVE.SHARE.FOLLOWERS":"Obserwujący (w tym znajomi)",
    "DRIVE.SHARE.RWACCESS":"Dostęp do odczytu i zapisu",
    "DRIVE.SHARE.REVOKE":"Cofnij",
    "DRIVE.SHARE.NONE":"Brak",
    "DRIVE.SHARE.RACCESS":"Dostęp tylko do odczytu",
    "DRIVE.SHARE.LINK":"Utwórz tajny link",
    "DRIVE.SHARE.CONFIRM":"Potwierdź działanie",
    "DRIVE.SHARE.CREATE.FILE":"Utwórz tajny link do pliku",
    "DRIVE.SHARE.CREATE.FOLDER":"Utwórz tajny link do bieżącego folderu i otwórz plik",
    "DRIVE.SHARE.FOLDER.OPEN":"Tajny link do bieżącego folderu i otwórz plik",
    "DRIVE.SHARE.FOLDER":"Tajny link do folderu",
    "DRIVE.SHARE.FILE":"Tajny link do pliku",
    "DRIVE.SHARE.ERROR":"Błąd udostępniania pliku",
    "DRIVE.SHARE.REVOKE.R":"Dostęp do odczytu cofnięty",
    "DRIVE.SHARE.ERROR.UNSHARING":"Błąd podczas cofnięcia udostępniania pliku",
    "DRIVE.SHARE.REVOKE.RW": "Dostęp do odczytu i zapisu został cofnięty",
    "DRIVE.SHARE.ERROR.HOME": "Nie możesz udostępnić swojego folderu domowego",
    "DRIVE.SHARE.ERROR.WRITE": "Tylko właściciel pliku może przyznać dostęp do zapisu",
    "DRIVE.SHARE.ERROR.REPEAT": "Już udostępniono",
    "DRIVE.SHARE.COMPLETE": "Bezpieczne udostępnianie ukończone",
    "DRIVE.LINK.OPEN": "Automatyczne otwieranie",
    "DRIVE.LINK.COPY": "Kopiuj do schowka",
    "DRIVE.LINK.EMAIL": "przez e-mail",
    "DRIVE.LINK.OK": "OK",
    "DRIVE.LINK.UPDATE": "Aktualizuj",
    "DRIVE.LINK.VIEWEDIT": "Wyświetl/edytuj",
    "DRIVE.LINK.CREATE": "Utwórz",
    "DRIVE.LINK.WRITABLE": "Ustaw link jako zapisywalny (Uwaga: posiadacz linku może zapełnić miejsce na Twoim koncie)",
    "DRIVE.LINK.EXPIRE.ON": "Wygasa w dniu",
    "DRIVE.LINK.AT.TIME": "o godzinie",
    "DRIVE.LINK.LIMIT.RETRIEVALS": "Ogranicz liczbę użyć linku",
    "DRIVE.LINK.PASSWORD": "Wymagaj hasła do dostępu",
    "DRIVE.LINK.ERROR.CREATE": "Wystąpił błąd podczas tworzenia tajnego linku",
    "DRIVE.LINK.ERROR.UPDATE": "Wystąpił błąd podczas aktualizacji tajnego linku",
    "VERIFY.TITLE": "Weryfikacja znajomego",
    "VERIFY.SCAN": "Skanuj kod QR znajomego",
    "VERIFY.NUMBERS": "Możecie też odczytać te cyfry sobie nawzajem (powinny się zgadzać)",
    "VERIFY.ERROR.CAMERA": "Nie można połączyć się z kamerą. Upewnij się, że jest podłączona i kliknij opcję Zezwól na dostęp, gdy pojawi się monit.",
    "VERIFY.SUCCESS": "Znajomi pomyślnie zweryfikowani!",
    "VERIFY.ERROR.MISMATCH": "Kod QR nie pasuje do tożsamości tej osoby w Peergos. Czy masz pewność, że ta osoba jest tą, za którą się podaje?",
    "VERIFY.VERIFIED": "Zweryfikowano",
    "VERIFY.UNVERIFIED": "Niezweryfikowano",
    "LAUNCHER.CUSTOM": "Aplikacje niestandardowe",
    "LAUNCHER.UPDATE": "Sprawdź aktualizacje",
    "LAUNCHER.NONE": "Brak zainstalowanych aplikacji niestandardowych. Utwórz aplikację z pozycji menu 'Utwórz aplikację' pod zielonym plusem.",
    "LAUNCHER.SHORTCUTS":"Skróty",
    "LAUNCHER.ADD.SHORTCUT":"Wpisy można dodawać za pomocą pozycji menu kontekstowego 'Dodaj do aplikacji",
    "LAUNCHER.ADDED":"Dodano",
    "LAUNCHER.NAME":"Nazwa",
    "LAUNCHER.FOLDER":"Folder",
    "LAUNCHER.REMOVE":"Usuń",
    "LAUNCHER.FILE.EXISTS":"Plik: $NAME już istnieje w tej lokalizacji",
    "LAUNCHER.FILE.REPLACE":"Czy chcesz go zastąpić?",
    "LAUNCHER.CREATED.SUCCESS":"Plik został utworzony",
    "LAUNCHER.CREATED.ERROR":"Utworzenie pliku nie powiodło się",
    "LAUNCHER.UPDATES.NONE":"Wszystkie aktualne",
    "LAUNCHER.UPDATES.ONE":"1 ma aktualizację",
    "LAUNCHER.UPDATES.MANY": "$COUNT ma aktualizacje",
    "LAUNCHER.APP.REMOVE": "Usuń aplikację",
    "LAUNCHER.APP.REMOVE.CONFIRM": "Czy na pewno chcesz usunąć tę aplikację (wraz ze wszystkimi powiązanymi danymi)?",
    "LAUNCHER.SHORTCUT.REMOVE": "Usuń skrót",
    "LAUNCHER.SHORTCUT.REMOVE.CONFIRM": "Czy na pewno chcesz usunąć ten skrót?",
    "SOCIAL.TITLE": "Widok społecznościowy",
    "SOCIAL.SEND.TITLE": "Wyślij prośbę o obserwowanie",
    "SOCIAL.SELECT": "wybierz użytkownika",
    "SOCIAL.SEND": "Wyślij",
    "SOCIAL.INCOMING": "Przychodzące prośby o obserwowanie",
    "SOCIAL.ALLOWANDFOLLOW": "Zezwól i obserwuj wstecz",
    "SOCIAL.ALLOW":"Zezwól",
    "SOCIAL.DENY":"Odrzuć",
    "SOCIAL.FRIENDS":"Znajomi",
    "SOCIAL.UNFOLLOW":"Przestań obserwować",
    "SOCIAL.REMOVE":"Usuń",
    "SOCIAL.VERIFICATION":"Weryfikacja",
    "SOCIAL.FOLLOWERS":"Obserwujący",
    "SOCIAL.FOLLOWING":"Obserwujący",
    "SOCIAL.BLOCKED":"Zablokowany",
    "SOCIAL.UNBLOCK":"Odblokuj",
    "SOCIAL.ALREADY.SENT":"Prośba o obserwowania już wysłana",
    "SOCIAL.BLOCKED.USERS":"Następujący użytkownicy są zablokowani",
    "SOCIAL.USER.BLOCKED":"Użytkownik: $USER jest zablokowany",
    "SOCIAL.SENT": "Wysłano prośba(y) o obserwowanie",
    "SOCIAL.ERROR": "Prośba(y) o obserwowanie nie powiodła (y) się ",
    "SOCIAL.RECIPROCATED": "Prośba o obserwowanie odwzajemniona",
    "SOCIAL.ACCEPTED": "Prośba o obserwowanie zaakceptowana",
    "SOCIAL.REJECTED": " Prośba o obserwowanie odrzucona",
    "SOCIAL.REMOVED": "Usunięto obserwującego",
    "SOCIAL.STOPPED": "Zaprzestano obserwowania",
    "SOCIAL.UNBLOCKED": "odblokowano",
    "NEWSFEED.TITLE": "Aktualności",
    "NEWSFEED.NEW": "Nowy post",
    "NEWSFEED.BUILDING": " Budowanie twojego kanału aktualności.",
    "NEWSFEED.MINUTE": "To może chwilę potrwać...",
    "NEWSFEED.BUILT": "To jest Twój kanał aktualności.",
    "NEWSFEED.DESC":"Możesz tutaj zobaczyć wszystkie rzeczy, którymi podzielili się z Tobą znajomi lub osoby, które obserwujesz.",
    "NEWSFEED.FRIEND":"Wyślij prośbę o dodanie do znajomych",
    "NEWSFEED.END":"Brak wpisów",
    "NEWSFEED.JOIN":"Dołącz",
    "NEWSFEED.ADD.COMMENT":"Dodaj komentarz",
    "NEWSFEED.COMMENT":"komentarz",
    "NEWSFEED.MORE":"Pokaż więcej",
    "NEWSFEED.EDITED":"edytowano",
    "NEWSFEED.DELETE.CONFIRM":"Czy na pewno chcesz usunąć ",
    "NEWSFEED.POST":"wpis",
    "NEWSFEED.POST.BUTTON":"Wpis",
    "NEWSFEED.POST.REPLY":"Opublikuj odpowiedź",
    "NEWSFEED.POST.EDIT":"Edytuj post",
    "NEWSFEED.POST.UPLOAD.SPACE.ERROR":"Pliki multimedialne przekraczają dostępne miejsce - Zwolnij $SPACE i spróbuj ponownie",
    "NEWSFEED.POST.UPLOAD.SPACE.ERROR2":"Nie można kontynuować. Rozmiar pliku $NAME przekracza dostępne miejsce",
    "NEWSFEED.POST.UPLOAD":"Szyfrowanie i przesyłanie",
    "NEWSFEED.POST.SHARE.WITH":"Udostępnij post:",
    "NEWSFEED.POST.SHARE.WITH.FRIENDS":"Znajomi",
    "NEWSFEED.POST.SHARE.WITH.FOLLOWERS":"Obserwujący (w tym znajomi)",
    "NEWSFEED.ERROR.MEDIA.DELETE":"błąd usuwania pliku multimedialnego!",
    "NEWSFEED.ERROR.POST.DELETE":"błąd usuwania posta",
    "NEWSFEED.ERROR.POST.LOAD":"błąd ładowania posta",
    "NEWSFEED.ERROR.CHAT.JOIN":"Nie można dołączyć do czatu.",
    "NEWSFEED.APP.ABSENT":"Aplikacja o nazwie: $NAME nie jest zainstalowana!",
    "NEWSFEED.YOU":"ty",
    "NEWSFEED.WRITEACCESS":"dostęp do zapisu",
    "NEWSFEED.ACAL":"kalendarz",
    "NEWSFEED.INVITED.APP":"zaprosił(a) Cię do aplikacji",
    "NEWSFEED.FOLDER":"folder",
    "NEWSFEED.ANEVENT":"wydarzenie w kalendarzu",
    "NEWSFEED.FILE":"plik",
    "NEWSFEED.OWNED":"własność",
    "CALENDAR.TITLE":"Kalendarz",
    "CALENDAR.ERROR.LOAD":"Nie można załadować kalendarza",
    "CALENDAR.ERROR.LOAD.FILE":"Nie można załadować pliku kalendarza",
    "CALENDAR.EVENT":"Wydarzenie",
    "CALENDAR.THIS.EVENT":"To wydarzenie",
    "CALENDAR.ALL.EVENTS":"Wszystkie wydarzenia",
    "CALENDAR.FUTURE.EVENTS":"To i przyszłe wydarzenia",
    "CALENDAR.NEW.NAME":"Nowa nazwa kalendarza",
    "CALENDAR.ENTER.NAME":"Wprowadź nową nazwę",
    "CALENDAR.INVALID.NAME":"Nieprawidłowa nazwa kalendarza. Używaj tylko znaków alfanumerycznych oraz spacji, myślnika i podkreślenia",
    "CALENDAR.ALREADY.IMPORTED":"Kalendarz: $NAME został już zaimportowany",
    "CALENDAR.ERROR.DELETE":"Nie można usunąć kalendarza",
    "CALENDAR.DELETE.CONFIRM":"Czy na pewno chcesz usunąć kalendarz: $NAME?",
    "CALENDAR.ERROR.DELETE.EVENT":"Nie można usunąć wydarzenia",
    "CALENDAR.ERROR.SAVE.EVENT":"Nie można zapisać wydarzenia",
    "CALENDAR.ERROR.LOAD.FILE":"Nie można załadować pliku",
    "CALENDAR.ERROR.SAVE.MOVED.EVENT":"Nie można zapisać przeniesionego wydarzenia",
    "CALENDAR.RECREATE.EVENT":"Utwórz wydarzenie ponownie",
    "CALENDAR.ERROR.MOVE.EVENT":"Nie można przenieść wydarzenia",
    "CALENDAR.ERROR.UPLOAD":"Nie można przesłać wydarzenia(eń). Zamknij kalendarz",
    "CALENDAR.IMPORT.MSG":"Importowanie $ITEMS wydarzeń kalendarzowych",
    "CALENDAR.IMPORT.COMPLETE":"Zakończono importowanie wydarzeń",
    "CALENDAR.ERROR.IMPORT.EVENT":"Nie można zaimportować wydarzeń",
    "CALENDAR.IMPORT.EVENT":'Czy chcesz zaimportować wydarzenie:',
    "CALENDAR.IMPORT.CALENDAR":'Czy chcesz zaimportować kalendarz:',
    "CALENDAR.LABEL":'Kalendarz',
    "CALENDAR.EVENT.LINK":'Link do wydarzenia',
    "SANDBOX.APP.DATA":"Można przechowywać i odczytywać pliki w folderze prywatnym dla aplikacji",
    "SANDBOX.EDIT.FILE":"Można modyfikować plik wybrany przez użytkownika",
    "SANDBOX.READ.FOLDER": "Można odczytywać wybrane pliki skojarzonych typów z folderu wybranego przez użytkownika",
    "SANDBOX.MESSAGES": "Można wymieniać wiadomości ze znajomymi",
    "SANDBOX.MAILBOX": "Można zarządzać skrzynką pocztową e-mail",
    "SANDBOX.PROFILE.PHOTO": "Można pobierać zdjęcia profilowe znajomych",
    "SANDBOX.UNSAFE": "Zezwalaj aplikacji na modyfikowanie własnego kodu",
    "SANDBOX.UNKNOWN": "Nieznane uprawnienie",
    "FOLDER.PICKER.NO.FOLDERS": "Nie wybrano folderów...",
    "FOLDER.PICKER.NO.FOLDER": "Nie wybrano folderu...",
    "FOLDER.PICKER.MULTIPLE.SELECTION.NOT.SUPPORTED": "Wybór wielu folderów nie jest obsługiwany!",
    "NEW.FOLDER.NAME.LABEL": "Nazwa folderu",
    "NEW.FOLDER.NAME.MESSAGE":"Utwórz folder",
    "PROMPT.OK":"OK",
    "PROMPT.CANCEL":"Anuluj",
    "PROMPT.SET":"Ustaw",
    "DRIVE.MOVING.TITLE":"Przenoszenie pliku(ów)",
    "DRIVE.MOVING.COMPLETE":"Kończenie przenoszenia i odświeżanie folderu...",
    "DRIVE.COPYING.TITLE":"Kopiowanie pliku(ów)",
    "DRIVE.COPYING.COMPLETE":"Kończenie kopiowania i odświeżanie folderu..."
}
},{}], 10:[function(require,module,exports){module.exports = {
    "APP.LOGIN":"登录",
    "APP.SIGNUP":"注册",
    "LOGIN.BUTTON":"登录",
    "LOGIN.USERNAME":"用户名",
    "LOGIN.PASSWORD":"密码",
    "LOGIN.STAY":"保持登录状态",
    "SIGNUP.USERNAME":"公开的用户名",
    "SIGNUP.GENERATE":"生成密码",
    "SIGNUP.CLICKGEN":"单击 生成密码",
    "SIGNUP.REENTER":"再次输入密码",
    "SIGNUP.AGREE":"我了解密码无法被重置或恢复 - 如果我忘记了密码，我将无法访问我的账户和数据。如果我在恶意网站中输入该密码，那么我将失去对账户的控制。",
    "SIGNUP.SIGNUPFREE":"注册",
    "SIGNUP.SIGNUPPAID":"添加支付卡并注册",
    "SIGNUP.ACCEPT":"我同意",
    "SIGNUP.TERMS":"服务条款",
    "SIGNUP.AND":"和",
    "SIGNUP.POLICY":"隐私政策",
    "SIGNUP.HYPER":"的超安全存储",
    "SIGNUP.BUNDLED":"我们所有捆绑的私人应用程序",
    "SIGNUP.MONTH":"每月",
    "SIGNUP.TRYTITLE":"想先尝试一下吗？",
    "SIGNUP.TRY":"免费试用",
    "PASSWORD.COMMON":"您的密码是 $PLACE 最常用的密码",
    "PASSWORD.SHORT":"少于 $SIZE 个字符的密码被视为不安全",
    "PASSWORD.GOOD":"这是一个更好的密码",
    "TOUR.TITLE":"欢迎来到 Peergos!",
    "TOUR.STORAGE":"加密存储",
    "TOUR.STORAGE.DESC":"存储您的文件并将它们排列在文件夹中。",
    "TOUR.SHARE":"安全共享",
    "TOUR.SHARE.DESC":"与 Peergos 上的朋友安全地分享，或通过秘密链接与任何人分享。",
    "TOUR.PHOTOS":"照片库",
    "TOUR.PHOTOS.DESC":"查看由您照片生成的幻灯片",
    "TOUR.DOCS":"文档编辑",
    "TOUR.DOCS.DESC":"查看和编辑您的文本文档。",
    "TOUR.MUSIC":"音乐收藏",
    "TOUR.MUSIC.DESC":"播放您的音乐收藏。",
    "TOUR.VIDEOS":"视频和电影",
    "TOUR.VIDEOS.DESC":"从任何设备观看您的视频和电影。",
    "TOUR.PDF":"PDF 查看器",
    "TOUR.PDF.DESC":"安全地查看 PDF 文档。",
    "TOUR.CAL":"日历",
    "TOUR.CAL.DESC":"管理您的日程表 - 共享事件或整个日历。",
    "TOUR.SOCIAL":"社交动态",
    "TOUR.SOCIAL.DESC":"与您的朋友和关注者分享帖子和评论。",
    "DRIVE.DROP":"将文件拖放到此处",
    "DRIVE.UPLOAD.FILES":"上传文件",
    "DRIVE.UPLOAD.FOLDER":"上传文件夹",
    "DRIVE.NEW.FOLDER":"新文件夹",
    "DRIVE.NEW.FILE":"新文件",
    "DRIVE.NEW.APP":"新应用",
    "DRIVE.PASTE":"粘贴",
    "DRIVE.WITH":"与",
    "DRIVE.SELECTED":"已选择",
    "DRIVE.NAME":"名称",
    "DRIVE.SIZE":"大小",
    "DRIVE.TYPE":"类型",
    "DRIVE.MODIFIED":"已修改",
    "DRIVE.CREATED":"已创建",
    "DRIVE.COPY":"复制",
    "DRIVE.CUT":"剪切",
    "DRIVE.DELETE":"删除",
    "DRIVE.DOWNLOAD":"安装",
    "DRIVE.ZIP":"Zip",
    "DRIVE.DESELECT":"取消选择",
    "DRIVE.VIEW":"查看",
    "DRIVE.EDIT":"编辑",
    "DRIVE.RENAME":"重命名",
    "DRIVE.SHARE":"分享",
    "DRIVE.DOWNLOAD.ZIP":"打包成Zip格式下载",
    "DRIVE.THUMB":"创建缩略图",
    "DRIVE.PROPS":"特性",
    "DRIVE.ADD.LAUNCH":"添加到启动器",
    "DRIVE.RUN":"运行 App",
    "DRIVE.INSTALL":"安装 App",
    "DRIVE.DELETE.FILE":"您确定您要删除",
    "DRIVE.DELETE.FILE2":"及其所有内容",
    "DRIVE.DOWNLOAD.WARN":"您确定要下载大小为 $SIZE MB 的 $NAME 吗?",
    "DRIVE.ZIP.ERROR":"打包成Zip格式下载仅在浏览器支持流媒体的情况下可用（例如 Chrome）",
    "DRIVE.EMPTY.FOLDER":"文件夹：$NAME 内暂无文件。没有什么可下载的",
    "DRIVE.CONFIRM.DOWNLOAD.TITLE":"您确定要下载所选项目吗？",
    "DRIVE.CONFIRM.DOWNLOAD.BODY":"文件夹: $FOLDERS, 文件: $FILES, 总大小: $SIZE",
    "DRIVE.DOWNLOAD.FOLDERS":"正在下载选定的文件夹",
    "DRIVE.DOWNLOAD.FOLDER":"正在下载文件夹: $NAME",
    "DRIVE.CONFIRM.DOWNLOAD.FOLDER.TITLE":"您确定要下载名称为 $NAME 的文件夹吗?",
    "DRIVE.OFFLINE":"客户端已离线！",
    "DRIVE.UPLOAD.SPACE.ERROR":"文件上传操作超出可用空间\n请释放 $SPACE 并重试",
    "DRIVE.UPLOAD.TITLE":"正在加密并上传文件",
    "DRIVE.UPLOAD.COMPLETE":"正在完成上传并刷新文件夹...",
    "DRIVE.UPLOAD.ERROR":"上传文件时出错",
    "DRIVE.UPLOAD.RESUME.TITLE":"您是否希望继续上传没传成功的文件?",
    "DRIVE.UPLOAD.RESUME.BODY":"文件: $NAME, 文件夹: $PATH",
    "DRIVE.UPLOAD.EMPTY":"没有什么可上传的",
    "DRIVE.UPLOAD.EXISTS":"文件: $NAME 已存在于此位置",
    "DRIVE.UPLOAD.REPLACE":"您想要替换它吗?",
    "DRIVE.MOVE.ERROR":"移动文件时出错: $NAME",
    "DRIVE.COPY.ERROR":"复制文件时出错: $NAME",
    "DRIVE.COPY.SPACE.ERROR":"文件复制操作超出可用空间\n请释放 $SPACE 并重试",
    "DRIVE.COPY.TOTAL.SPACE.ERROR":"文件复制操作超出总空间\n" + "请升级以获得更多空间",
    "DRIVE.PASTE.LOCATION.SAME":"目标文件夹与源文件夹相同",
    "DRIVE.DOWNLOAD.MULTIPLE.STREAM.ERROR":"下载多个文件仅在浏览器支持流媒体的情况下可用（例如 Chrome）",
    "DRIVE.APP.EXISTS":"名为 $NAME 的应用程序也存在",
    "DRIVE.APP.ERROR":"创建应用程序时出错",
    "DRIVE.FILENAME":"输入文件名称",
    "DRIVE.FILENAME.PLACEHOLDER":"文件名称",
    "DRIVE.CREATE.ERROR":"创建文件时出错",
    "DRIVE.RENAME.TITLE":"输入新名称",
    "DRIVE.RENAME.PLACEHOLDER":"新名称",
    "DRIVE.RENAME.ERROR":"重命名时出错 $TYPE: $NAME",
    "DRIVE.DELETE.ERROR":"删除文件时出错",
    "DRIVE.DELETE.CONFIRM":"您确定要删除 $COUNT 个项目吗?",
    "DRIVE.DELETE.FILE.ERROR":"删除文件时出错: $NAME: $MESSAGE",
    "APPNAV.LAUNCHER":"启动器",
    "APPNAV.DRIVE":"云盘",
    "APPNAV.NEWSFEED":"新闻源",
    "APPNAV.SOCIAL":"社交",
    "APPNAV.CAL":"日历",
    "APPNAV.EMAIL":"邮箱",
    "APPNAV.UPGRADE":"升级",
    "SEARCH.SEARCH":"搜索",
    "SEARCH.NAME.CONTAINS":"包含的文件名",
    "SEARCH.TEXT.CONTAINS":"包含的文本文件",
    "SEARCH.MODIFIED.AFTER":"在这之后修改的文件",
    "SEARCH.MODIFIED.BEFORE":"在这之前修改的文件",
    "SEARCH.CREATED.AFTER":"在这之后创建的文件",
    "SEARCH.CREATED.BEFORE":"在这之前创建的文件",
    "SEARCH.SIZE.GREATER":"文件大小大于",
    "SEARCH.SIZE.LESS":"文件大小小于",
    "SEARCH.TYPE":"文件类型",
    "SEARCH.AUDIO":"音频",
    "SEARCH.IMAGE":"图像",
    "SEARCH.TEXT":"文本",
    "SEARCH.VIDEO":"视频",
    "SEARCH.RESULTS":"结果",
    "SEARCH.DIR":"目录",
    "SETTINGS.ADMIN":"管理面板",
    "SETTINGS.ACCOUNT":"账户",
    "SETTINGS.PROFILE":"资料",
    "SETTINGS.FEEDBACK":"反馈",
    "SETTINGS.TOUR":"入门",
    "SETTINGS.HELP":"帮助/常见问题解答",
    "SETTINGS.AUTH":"验证",
    "SETTINGS.PASS":"修改密码",
    "SETTINGS.CLEANUP":"清理上传失败的文件",
    "SETTINGS.CACHE":"设置缓存大小",
    "SETTINGS.DELETE":"删除账户",
    "SETTINGS.LOGOUT":"退出登录",
    "SETTINGS.CACHE.INVALID":"缓存大小值无效",
    "SETTINGS.CACHE.LARGE":"缓存大小无效。最大缓存大小: $SIZE MiB",
    "SETTINGS.CACHE.UPDATED":"缓存大小已更新",
    "PASSWORD.CHANGE":"修改密码",
    "PASSWORD.EXISTING":"现有密码",
    "PASSWORD.GENERATE":"生成密码",
    "PASSWORD.NEW":"新密码",
    "PASSWORD.REENTER":"重输新密码",
    "PASSWORD.MATCH":"密码不匹配",
    "PASSWORD.MFA":"多重身份验证器代码无效",
    "PASSWORD.CHANGED":"密码已修改",
    "PASSWORD.FIELDS":"所有字段都必须填写！",
    "MFA.TITLE":"双重验证",
    "MFA.APP":"身份验证器应用程序",
    "MFA.KEY":"安全密钥",
    "MFA.REMOVE":"移除",
    "MFA.ADD.KEY":"添加安全密钥",
    "MFA.ERROR.RETRIEVAL":"无法检索身份验证方法",
    "MFA.ERROR.DELETE":"无法删除身份验证方法",
    "MFA.MAX.KEYS":"已达到安全密钥的最大数量",
    "MFA.CONFIRM.REMOVE.KEY":"您确定要删除此密钥吗？",
    "MFA.CONFIRM.REMOVE.APP":"您确定要删除身份验证器应用程序吗？",
    "HELP.TITLE":"帮助/常见问题解答",
    "HELP.HOW":"我该如何...",
    "HELP.UPGRADE":"升级我的账户？",
    "HELP.UPGRADE.TEXT":"单击用户设置菜单（右上角的人物图标）后选择“账户”菜单项。或者单击屏幕左下角，您应该会看到“升级”按钮。按照出现的模式内容请求空间/升级/降级您的账户。",
    "HELP.SPACE":"查看我已使用/有多少可用空间？",
    "HELP.SPACE.TEXT":"在左上角，您会看到一座塔的 Peergos 标志。单击它可展开左侧面板。在展开的面板的底部，它将显示 99.9 KiB / 999.9 MiB，其中第一个数字是您的使用情况，第二个数字是您的可用空间。",
    "HELP.FOLLOW":"发送关注请求？",
    "HELP.FOLLOW.TEXT":"通过选择左侧菜单上的 3 个连接点图标来显示社交视图。在社交页面上，您可以发送关注请求并查看您收到的任何待处理请求。",
    "HELP.FRIENDS":"查看我的朋友和关注者？",
    "HELP.FRIENDS.TEXT1":"通过选择左侧菜单上的 3 个连接点图标来显示社交模式。您的社交关系将列在“朋友”、“关注者”和“正在关注”下。",
    "HELP.FRIENDS.TEXT2":"如果您发送了关注请求并且收件人点击了“允许并回复”，那么你们就成为了朋友。",
    "HELP.PROFILE":"创建并共享个人资料？",
    "HELP.PROFILE.TEXT1":"单击用户设置菜单（右上角的人物图标）后选择“资料”菜单项。添加所需的详细信息并单击“保存”。上传后即可预览个人资料图片。单击每个已填写字段旁边的共享按钮以设置可见受众。",
    "HELP.PROFILE.TEXT2":"您可以通过社交视图或新闻源视图上生成的链接查看其他人的个人资料。",
    "HELP.SHARE":"与其他 Peergos 用户共享文件/文件夹？",
    "HELP.SHARE.TEXT1":"云盘中的每个文件/文件夹图标右上方都有一个垂直的三点菜单。从出现的上下文菜单中选择“共享”。你可以单独或分组授予其他用户访问权限。访问权限可以是只读权限，也可以是读写权限。接收者可以在共享文件上进行只读访问。",
    "HELP.SHARE.TEXT2":"共享文件夹时，子文件夹会自动共享。",
    "HELP.SHARE.TEXT3":"谁具有访问权限以及授予的访问级别也显示在此模式上。",
    "HELP.SHARED.FILES":"查看与我共享的文件/文件夹？",
    "HELP.SHARED.FILES.TEXT1":"选择左侧菜单上的新闻源图标。组装包含发送给您的帖子的自定义页面需要一些时间。这些帖子可能是消息或与您共享的文件/文件夹的链接。",
    "HELP.SHARED.FILES.TEXT2":"或者，如果您知道共享文件/文件夹的人的用户名，请选择顶部工具栏上的地球图标并导航到他们的云盘空间。",
    "HELP.LINK":"共享文件/文件夹的秘密链接？",
    "HELP.LINK.TEXT1":"云盘中的每个文件/文件夹图标的右上角都会有一个垂直的三点菜单。从出现的上下菜单中，选择共享。在模式底部，选择“创建秘密链接”按钮。",
    "HELP.LINK.TEXT2":"该链接可以直接粘贴到浏览器标签页中。如果链接指向文件夹，秘密链接的接收者也可以看到子文件夹。",
    "HELP.CAL":"配置日历？",
    "HELP.CAL.TEXT1":"在日历视图中，单击工具栏中的齿轮图标。选择“日历设置”按钮以显示当前配置的日历。",
    "HELP.CAL.TEXT2":"选择每个日历旁边的圆点，可以更改与日历相关联的颜色。单击日历名称将显示一个对话框，为日历设置新名称。",
    "HELP.SHARE.CAL":"共享整个日历？",
    "HELP.SHARE.CAL.TEXT1":"您的主日历无法共享。 您可以创建多个日历。在日历视图中，单击工具栏中的齿轮图标。选择“日历设置”按钮以显示当前配置的日历。",
    "HELP.SHARE.CAL.TEXT2":"单击共享按钮可设置日历的只读受众。",
    "HELP.SHARE.CAL.TEXT3":"与您共享的日历首先需要通过新闻源视图导入。",
    "HELP.SHARE.EVENT":"共享日历事件？",
    "HELP.SHARE.EVENT.TEXT1":"创建日历事件后。选择事件上下菜单上的共享链接以设置受众。",
    "HELP.SHARE.EVENT.TEXT2":"与您共享的日历事件首先需要通过新闻源视图导入。导入的事件是该事件的副本。",
    "HELP.IMPORT.EVENT":"导入日历事件？",
    "HELP.IMPORT.EVENT.TEXT1":"要导入通过其他 Peergos 用户与您共享的事件，请首先打开新闻源并选择该事件",
    "HELP.IMPORT.EVENT.TEXT2":"要导入 .ics 文件，请打开日历视图并选择工具栏中的齿轮图标。选择“日历设置”按钮以显示当前配置的日历。从这里单击“导入”按钮。",
    "HELP.IMPORT.EVENT.TEXT3":"支持包含多个条目的 .ics 文件。不同的日历实现（包括我们的！）具有不同级别的支持/合规性。",
    "HELP.SHARE.TASK":"共享任务/待办事项列表？",
    "HELP.SHARE.TASK.TEXT":"任务/待办事项列表默认保存到您的云端硬盘空间的根目录中。单击所需任务/待办事项右上角的垂直 3 点图标，然后选择共享",
    "HELP.WWW":"将目录托管为静态网站？",
    "HELP.WWW.TEXT1":"单击用户设置菜单（右上角的人物图标）后选择“资料”菜单项。在模式的底部，您将看到一个标题为“网站目录”的字段。设置字段并选择“保存”后，同一字段旁边将出现“发布”按钮。",
    "HELP.WWW.TEXT2":"单击发布按钮以完成操作。",
    "HELP.WWW.TEXT3":"注意：发布将公开文件夹和任何子文件夹及其所有内容！",
    "HELP.WWW.TEXT4":"清除文本字段并单击“保存”以重置。",
    "HELP.WWW.TEXT5":"请参阅此博客文章了解更多详细信息",
    "HELP.CLEANUP":"清理上传失败的文件？",
    "HELP.CLEANUP.TEXT":"上传失败将继续消耗云端硬盘空间。要释放附加空间，请从用户设置菜单中选择“清理上传失败的文件”菜单项。",
    "HELP.THUMB":"重新创建媒体缩略图？",
    "HELP.THUMB.TEXT":"上传过程将尝试为图像或视频文件创建缩略图。各种条件/因素可能会导致创建失败。在这种情况下，将提供一个额外的“创建缩略图”上下文菜单项。此过程也会受到一些条件/因素的影响，可能无法创建缩略图。",
    "HELP.FEEDBACK":"提供反馈信息？",
    "HELP.FEEDBACK.TEXT":"可通过用户设置菜单上的“反馈”菜单项获取英文反馈表。",
    "HELP.PASSWORD":"修改我的密码？",
    "HELP.PASSWORD.TEXT":"请参阅用户设置菜单上的“修改密码”菜单项。",
    "HELP.DELETE":"删除账户？",
    "HELP.DELETE.TEXT1":"请参阅用户设置菜单上的“删除账户”菜单项。",
    "HELP.DELETE.TEXT2":"注意：您的所有数据都将被删除，并且您的账户将无法被恢复。",
    "HELP.GRIPES":"抱怨/担忧",
    "HELP.SLOW":"为什么下载上传都这么慢？",
    "HELP.SLOW.TEXT1":"事实并非如此！整个过程总是更加复杂。在端到端加密和点对点系统中，客户端需要做大量工作（不仅仅是解密/加密）。如果你有技术头脑，可以打开浏览器控制台，观看 100 多个请求的数据流，了解其中的奥妙。",
    "HELP.SLOW.TEXT2":"我们还计划在速度方面进行大量改进。随着浏览器实现我们所需的一些签名和加密原语，性能也将得到改善。",
    "HELP.JAVA":"我听说 Peergos 是用 Java 编写的，你疯了吗？",
    "HELP.JAVA.TEXT1":"事实上，Java 是 Peergos 的理想语言。 JVM 坚如磐石，提供良好的性能和资源利用率。客户端主要用 java 编写，并通过久经考验的 GWT 转编译为 Javascript。",
    "HELP.JAVA.TEXT2":"为服务器和大多数客户端提供单一语言代码库有多种好处。我们不是语言狂热者，其他选择在不同情况下是合适的。",
    "FEEDBACK.TITLE":"反馈",
    "FEEDBACK.TEXT1":"您可以在这里告诉我们如何改进，或者您可以通过以下方式与我们聊天：",
    "FEEDBACK.TEXT2":"或给我们发送电子邮件",
    "FEEDBACK.SUBMIT":"提交",
    "FEEDBACK.PLACEHOLDER":"在此输入您的反馈。",
    "FEEDBACK.SENT":"反馈已发送。谢谢您！",
    "FEEDBACK.ERROR":"发送反馈时出错",
    "PROFILE.TITLE":"资料",
    "PROFILE.UPLOAD":"上传图片",
    "PROFILE.REMOVE":"移除图片",
    "PROFILE.FIRSTNAME":"名字",
    "PROFILE.LASTNAME":"姓氏",
    "PROFILE.PHONE":"电话",
    "PROFILE.EMAIL":"邮箱",
    "PROFILE.STAUS":"状态",
    "PROFILE.BIO":"简历",
    "PROFILE.WWW":"网站目录",
    "PROFILE.CHANGE.WWW":"更改",
    "PROFILE.PUBLISH":"发布",
    "PROFILE.PUBLIC":"公开可见于",
    "PROFILE.SAVE":"保存资料",
    "PROFILE.ERROR.IMAGE":"无法读取图片",
    "PROFILE.ERROR.NOT.FOUND":"未找到 Web 目录。更改未保存！",
    "PROFILE.ERROR.PATH":"Web 目录无效。更改未保存！",
    "PROFILE.PUBLISH.HELP":"这允许您将目录发布为网站。这将使该目录中的所有内容公开，并且可以从 https://$NAME.peergos.me 获取该目录，或者如果您从 http://$NAME.peergos.localhost:9000 运行本地 Peergos 网关，则可以通过本地 Peergos 网关不依赖 DNS 或 TLS 证书颁发机构来确保安全性或真实性。您可以通过将index.html 文件添加到您的Web 目录来开始。",
    "PROFILE.CONFIRM.PUBLISH":"您确定要发布文件夹: $PATH 吗?",
    "PROFILE.CONFIRM.PUBLISH.TEXT":"此操作将使该文件夹及其所有内容公开。",
    "PROFILE.ERROR.PUBLISH":"无法发布 Web 目录",
    "PROFILE.PUBLISH.SUCCESS":"已发布网络目录",
    "PROFILE.PUBLISH.AVAILABLE":"可用于: https://$NAME.peergos.me",
    "PROFILE.ERROR.UNEXPECTED":"意外的错误",
    "PROFILE.UPDATED":"资料已更新",
    "PROFILE.ERROR.UPDATE":"无法更新资料",
    "DELETE.ACCOUNT":"删除账户",
    "DELETE.ACCOUNT.TEXT1":"如果您选择继续，您将无法访问您的账户和数据！",
    "DELETE.ACCOUNT.TEXT2":"此操作不可逆。",
    "DELETE.ACCOUNT.TEXT3":"您必须输入密码以确认您想要删除您的账户和所有数据。",
    "DELETE.ACCOUNT.CONFIRM":"您确定要删除您的账户吗？",
    "DELETE.ACCOUNT.YES":"是的，删除所有内容",
    "DELETE.ACCOUNT.CANCEL":"千万别",
    "DELETE.ACCOUNT.DONE":"账户已删除!",
    "DELETE.ACCOUNT.PASS":"必须填写密码！",
    "DELETE.ACCOUNT.ERROR":"删除账户时出错",
    "DELETE.ACCOUNT.MFA":"多重身份验证器代码无效",
    "SPACE.TITLE":"请求空间",
    "SPACE.CURRENT":"当前空间",
    "SPACE.PLACEHOLDER":"新的总空间量",
    "SPACE.POSITIVE":"空间必须是正整数",
    "SPACE.SMALL":"您无法请求小于当前使用量的空间，请删除一些文件并重试。",
    "SPACE.SENT":"空间请求已发送！",
    "PAID.AGREE":"继续即表示您同意我们的",
    "PAID.ACCOUNT":"账户",
    "PAID.STORAGE":"的超安全存储",
    "PAID.APPS":"我们所有捆绑的私人应用程序",
    "PAID.MONTH":"每月",
    "PAID.CARD":"更新付款详细信息（将在新选项卡中打开）",
    "PAID.CANCEL":"取消 Peergos 订阅",
    "PAID.PRORATA":"本月按比例",
    "PAID.SETTINGS":"订阅设置",
    "PAID.UPGRADE":"升级您的账户以获得更多空间",
    "PAID.CURRENT":"您目前的计划",
    "PAID.PRO":"选择 Pro 计划（将打开新选项卡）",
    "PAID.VISIONARY":"选择 Visionary 计划（将打开新选项卡）",
    "PAID.PIONEER":"选择 Pioneer 计划（将打开新选项卡）",
    "PAID.SORRY":"很遗憾看到你离开。我们很想知道有什么可以做得更好。请确保删除足够的数据，使其不超出基本配额。您将在计费月结束时恢复基本配额。",
    "PAID.THANKYOU":"感谢您注册付费 Peergos 账户！",
    "PAID.CARD.NEEDED":"需要卡的详细信息。添加支付卡以完成升级。",
    "PAID.ERROR.STORAGE":"请求更多存储空间时出错",
    "DRIVE.SHARE.USER":"请选择用户",
    "DRIVE.SHARE.R":"只读",
    "DRIVE.SHARE.RW":"读写",
    "DRIVE.SHARE.GROUP":"或群组",
    "DRIVE.SHARE.FRIENDS":"好友",
    "DRIVE.SHARE.FOLLOWERS":"关注者（包括好友）",
    "DRIVE.SHARE.RWACCESS":"读写访问",
    "DRIVE.SHARE.REVOKE":"撤销",
    "DRIVE.SHARE.NONE":"无",
    "DRIVE.SHARE.RACCESS":"只读访问",
    "DRIVE.SHARE.LINK":"创建秘密链接",
    "DRIVE.SHARE.CONFIRM":"确认操作",
    "DRIVE.SHARE.CREATE.FILE":"创建文件的秘密链接",
    "DRIVE.SHARE.CREATE.FOLDER":"创建当前文件夹的秘密链接并打开文件",
    "DRIVE.SHARE.FOLDER.OPEN":"当前文件夹的秘密链接并打开文件",
    "DRIVE.SHARE.FOLDER":"文件夹的秘密链接",
    "DRIVE.SHARE.FILE":"文件的秘密链接",
    "DRIVE.SHARE.ERROR":"共享文件时出错",
    "DRIVE.SHARE.REVOKE.R":"读取权限被撤销",
    "DRIVE.SHARE.ERROR.UNSHARING":"取消共享文件时出错",
    "DRIVE.SHARE.REVOKE.RW":"读写访问权限被撤销",
    "DRIVE.SHARE.ERROR.HOME":"您无法共享您的主目录",
    "DRIVE.SHARE.ERROR.WRITE":"只有文件的所有者才能授予写入访问权限",
    "DRIVE.SHARE.ERROR.REPEAT":"已共享",
    "DRIVE.SHARE.COMPLETE":"安全共享完成",
    "DRIVE.LINK.OPEN":"自动打开",
    "DRIVE.LINK.COPY":"复制到剪贴板",
    "DRIVE.LINK.EMAIL":"通过电子邮件分享",
    "DRIVE.LINK.OK":"好的",
    "VERIFY.TITLE":"正在验证好友",
    "VERIFY.SCAN":"扫描您好友的二维码",
    "VERIFY.NUMBERS":"或者你们可以互相读出这些数字（它们应该匹配）",
    "VERIFY.ERROR.CAMERA":"无法连接到相机。请确保已连接，并在出现提示时单击“允许访问”。",
    "VERIFY.SUCCESS":"好友验证成功！",
    "VERIFY.ERROR.MISMATCH":"二维码与 Peergos 上此人的身份不匹配。你确定这个人就是他们所说的那个人吗？",
    "VERIFY.VERIFIED":"已验证",
    "VERIFY.UNVERIFIED":"未验证",
    "LAUNCHER.CUSTOM":"定制应用程序",
    "LAUNCHER.UPDATE":"检查更新",
    "LAUNCHER.NONE":"当前没有安装自定义应用程序。从绿色加号的“创建应用程序”菜单项创建应用程序。",
    "LAUNCHER.SHORTCUTS":"快捷方式",
    "LAUNCHER.ADD.SHORTCUT":"可以通过上下文菜单项“添加到启动器”添加条目",
    "LAUNCHER.ADDED":"已添加",
    "LAUNCHER.NAME":"名称",
    "LAUNCHER.FOLDER":"文件夹",
    "LAUNCHER.REMOVE":"移除",
    "LAUNCHER.FILE.EXISTS":"文件: $NAME 已存在于此位置",
    "LAUNCHER.FILE.REPLACE":"您想替换它吗？",
    "LAUNCHER.CREATED.SUCCESS":"文件已创建",
    "LAUNCHER.CREATED.ERROR":"文件创建失败",
    "LAUNCHER.UPDATES.NONE":"全部是最新的",
    "LAUNCHER.UPDATES.ONE":"1 个有更新",
    "LAUNCHER.UPDATES.MANY":"$COUNT 个有更新",
    "LAUNCHER.APP.REMOVE":"移除应用程序",
    "LAUNCHER.APP.REMOVE.CONFIRM":"您确定要删除此应用程序（包括所有关联数据）吗？",
    "LAUNCHER.SHORTCUT.REMOVE":"移除快捷方式",
    "LAUNCHER.SHORTCUT.REMOVE.CONFIRM":"您确定要移除该快捷方式吗？",
    "SOCIAL.TITLE":"社交显示",
    "SOCIAL.SEND.TITLE":"发送关注请求",
    "SOCIAL.SELECT":"请选择用户",
    "SOCIAL.SEND":"发送",
    "SOCIAL.INCOMING":"传入的关注请求",
    "SOCIAL.ALLOWANDFOLLOW":"允许并互关",
    "SOCIAL.ALLOW":"允许",
    "SOCIAL.DENY":"不允许",
    "SOCIAL.FRIENDS":"好友",
    "SOCIAL.UNFOLLOW":"取消关注",
    "SOCIAL.REMOVE":"移除",
    "SOCIAL.VERIFICATION":"验证",
    "SOCIAL.FOLLOWERS":"关注者",
    "SOCIAL.FOLLOWING":"正在关注",
    "SOCIAL.BLOCKED":"已拉黑的",
    "SOCIAL.UNBLOCK":"取消拉黑",
    "SOCIAL.ALREADY.SENT":"已发送关注请求",
    "SOCIAL.BLOCKED.USERS":"以下用户被拉黑",
    "SOCIAL.USER.BLOCKED":"用户: $USER 已被拉黑",
    "SOCIAL.SENT":"关注请求已发送",
    "SOCIAL.ERROR":"关注请求失败",
    "SOCIAL.RECIPROCATED":"关注请求已得到回应",
    "SOCIAL.ACCEPTED":"关注请求已被接受",
    "SOCIAL.REJECTED":"关注请求已被拒绝",
    "SOCIAL.REMOVED":"已移除关注者",
    "SOCIAL.STOPPED":"已停止正在关注",
    "SOCIAL.UNBLOCKED":"未拉黑",
    "NEWSFEED.TITLE":"新闻源",
    "NEWSFEED.NEW":"最新帖子",
    "NEWSFEED.BUILDING":"构建您的新闻源。",
    "NEWSFEED.MINUTE":"这可能需要一分钟..",
    "NEWSFEED.BUILT":"这是您的新闻源。",
    "NEWSFEED.DESC":"您可以在此处查看朋友或您关注的人与您分享的所有内容。",
    "NEWSFEED.FRIEND":"发送好友请求",
    "NEWSFEED.END":"没有更多条目",
    "NEWSFEED.JOIN":"加入",
    "NEWSFEED.ADD.COMMENT":"添加评论",
    "NEWSFEED.COMMENT":"评论",
    "NEWSFEED.MORE":"展示更多",
    "NEWSFEED.EDITED":"已修改",
    "NEWSFEED.DELETE.CONFIRM":"您确定要删除 ",
    "NEWSFEED.POST":"帖子",
    "NEWSFEED.POST.BUTTON":"发帖",
    "NEWSFEED.POST.REPLY":"发帖回复",
    "NEWSFEED.POST.EDIT":"编辑帖子",
    "NEWSFEED.POST.UPLOAD.SPACE.ERROR":"媒体文件超出可用空间 - 请释放 $SPACE 并重试",
    "NEWSFEED.POST.UPLOAD.SPACE.ERROR2":"无法继续。 $NAME 文件大小超出可用空间",
    "NEWSFEED.POST.UPLOAD":"正在加密并上传",
    "NEWSFEED.POST.SHARE.WITH":"与以下人员分享帖子：",
    "NEWSFEED.POST.SHARE.WITH.FRIENDS":"好友",
    "NEWSFEED.POST.SHARE.WITH.FOLLOWERS":"关注者 (包括好友)",
    "NEWSFEED.ERROR.MEDIA.DELETE":"删除媒体文件时出错！",
    "NEWSFEED.ERROR.POST.DELETE":"删除帖子时出错",
    "NEWSFEED.ERROR.POST.LOAD":"加载帖子时出错",
    "NEWSFEED.ERROR.CHAT.JOIN":"无法加入聊天。",
    "NEWSFEED.APP.ABSENT":"名称为：$NAME 的应用程序未安装！",
    "NEWSFEED.YOU":"您",
    "NEWSFEED.WRITEACCESS":"写入访问权限到",
    "NEWSFEED.ACAL":"一份日历",
    "NEWSFEED.INVITED.APP":"邀请您使用该应用程序",
    "NEWSFEED.INVITED.CHAT":"邀请您聊天",
    "NEWSFEED.FOLDER":"该文件夹",
    "NEWSFEED.ANEVENT":"一个日历事件",
    "NEWSFEED.FILE":"该文件",
    "NEWSFEED.OWNED":"拥有者",
    "CALENDAR.TITLE":"日历",
    "CALENDAR.ERROR.LOAD":"无法加载日历",
    "CALENDAR.ERROR.LOAD.FILE":"无法加载日历文件",
    "CALENDAR.EVENT":"事件",
    "CALENDAR.THIS.EVENT":"此事件",
    "CALENDAR.ALL.EVENTS":"所有事件",
    "CALENDAR.FUTURE.EVENTS":"此事件和将来事件",
    "CALENDAR.NEW.NAME":"新日历名称",
    "CALENDAR.ENTER.NAME":"输入新名称",
    "CALENDAR.INVALID.NAME":"日历名称无效。仅可使用字母数字字符加空格、破折号和下划线",
    "CALENDAR.ALREADY.IMPORTED":"日历：$NAME 已导入",
    "CALENDAR.ERROR.DELETE":"无法删除日历",
    "CALENDAR.DELETE.CONFIRM":"您确定要删除日历：$NAME 吗？",
    "CALENDAR.ERROR.DELETE.EVENT":"无法删除事件",
    "CALENDAR.ERROR.SAVE.EVENT":"无法保存事件",
    "CALENDAR.ERROR.LOAD.FILE":"无法加载文件",
    "CALENDAR.ERROR.SAVE.MOVED.EVENT":"无法保存已移动的事件",
    "CALENDAR.RECREATE.EVENT":"请重新创建事件",
    "CALENDAR.ERROR.MOVE.EVENT":"无法移动事件",
    "CALENDAR.ERROR.UPLOAD":"无法上传事件。请关闭日历",
    "CALENDAR.IMPORT.MSG":"正在导入 $ITEMS 日历事件",
    "CALENDAR.IMPORT.COMPLETE":"已完成事件导入",
    "CALENDAR.ERROR.IMPORT.EVENT":"无法导入事件",
    "CALENDAR.IMPORT.EVENT":'您要导入该事件吗：',
    "CALENDAR.IMPORT.CALENDAR":'您要导入该日历吗：',
    "CALENDAR.LABEL":'日历',
    "CALENDAR.EVENT.LINK":'事件链接',
    "SANDBOX.APP.DATA":"可以在应用程序私有的文件夹中存储和读取文件",
    "SANDBOX.EDIT.FILE":"可以修改用户选择的文件",
    "SANDBOX.READ.FOLDER":"可以从用户选择的文件夹中读取关联类型的选定文件",
    "SANDBOX.MESSAGES":"可以和好友交换消息",
    "SANDBOX.UNSAFE":"允许应用程序修改自己的代码",

    "SANDBOX.UNKNOWN":"未知权限",
    "FOLDER.PICKER.NO.FOLDERS":"未选择文件夹...",
    "FOLDER.PICKER.NO.FOLDER":"未选择文件夹...",
    "FOLDER.PICKER.MULTIPLE.SELECTION.NOT.SUPPORTED":"不支持选择多个文件夹！",
    "NEW.FOLDER.NAME.LABEL":"文件夹名称",
    "NEW.FOLDER.NAME.MESSAGE":"创建文件夹",
    "PROMPT.OK":"好的",
    "PROMPT.CANCEL":"取消",
    "PROMPT.SET":"设定"
}
},{}], 53:[function(require,module,exports){const ProgressBar = require("../../components/drive/ProgressBar.vue");
module.exports = {

  methods: {
    calculateDirectoryStatistics(file, path, accumulator, future) {
        let that = this;
        file.getChildren(this.context.crypto.hasher, this.context.network).thenApply(function (children) {
            let arr = children.toArray();
            for (var i = 0; i < arr.length; i++) {
                let child = arr[i];
                let childProps = child.getFileProperties();
                if (childProps.isDirectory) {
                    accumulator.folderCount += 1;
                    accumulator.apparentSize += 4096;
                    let newPath = path + "/" + childProps.name;
                    accumulator.directoryMap.set(newPath, '');
                    that.calculateDirectoryStatistics(child, newPath, accumulator, future);
                } else {
                    accumulator.fileCount += 1;
                    let size = that.getFileSize(childProps);
                    accumulator.actualSize += size;
                    accumulator.apparentSize += (size + (4096 - (size % 4096)));
                }
            }
              accumulator.directoryMap.delete(path);
            if (accumulator.directoryMap.size == 0) {
                future.complete(accumulator);
            }
        });
    },
    calculateTotalSize(file, path) {
        let future = peergos.shared.util.Futures.incomplete();
        let accumulator = { folderName: file.getFileProperties().name, actualSize: 0, apparentSize: 4096, directoryMap: new Map(), fileCount: 0, folderCount: 0 };
        if (file.isDirectory()) {
            accumulator.folderName = file.getFileProperties().name;
              this.calculateDirectoryStatistics(file, path + file.getFileProperties().name, accumulator, future);
          } else {
              accumulator.fileCount += 1;
              let size = this.getFileSize(file.getFileProperties());
              accumulator.actualSize += size;
              accumulator.apparentSize += (size + (4096 - (size % 4096)));
              future.complete(accumulator);
          }
        return future;
    },
    // This will only work up to a file size of 2^52 bytes (the biggest integer you can fit in a double)
    // But who ever needed a filesize > 4 PB ? ;-)
    getFileSize: function (props) {
      var low = props.sizeLow()
      if (low < 0) low = low + Math.pow(2, 32)
      return low + props.sizeHigh() * Math.pow(2, 32)
    },

    supportsVideoStreaming: function() {
        try {
            return 'serviceWorker' in navigator && !!new ReadableStream() && !!new WritableStream()
        } catch(err) {
            return false;
        }
    },

    supportsStreaming: function () {
      try {
        return (
          'serviceWorker' in navigator &&
          !!new ReadableStream() &&
          !!new WritableStream()
        )
      } catch (err) {
        return false
      }
    },

    detectFirefoxWritableSteams: function () {
      let userAgent = navigator.userAgent
      let firefoxToken = 'Firefox/'
      if (userAgent.includes('Gecko/') && userAgent.includes(firefoxToken)) {
        let version = Number(
          userAgent.substring(
            userAgent.indexOf(firefoxToken) + firefoxToken.length
          )
        )
        return version >= 72 //indicates javascript.options.writable_streams is available in about:config
      } else {
        return false
      }
    },

    openItem: function (name, data, mimeType) {
      console.log('saving data of length ' + data.length + ' to ' + name)

      var blob = new Blob([data], { type: 'octet/stream' })
      var url = window.URL.createObjectURL(blob)
      var link = document.getElementById('downloadAnchor')
      link.href = url
      link.type = mimeType
      link.download = name
      link.click()
    },

    downloadFile: function (file, fileLabel) {
      console.log('downloading ' + file.getFileProperties().name)
      var props = file.getFileProperties()
      var that = this
      var resultingSize = this.getFileSize(props)
      let filename = fileLabel != null ? fileLabel : props.name;
      let result = peergos.shared.util.Futures.incomplete();

      var progress = {
        show: true,
        title: 'Downloading and decrypting ' + filename,
        done: 0,
        max: resultingSize
      }
        var that = this
        that.$toast({
	    component: ProgressBar,
	    props:  progress,
	} , { icon: false , timeout:false, id: filename})
    //   var context = this.getContext()
      file
        .getBufferedInputStream(
          this.context.network,
          this.context.crypto,
          props.sizeHigh(),
            props.sizeLow(),
            20,
          function (read) {
            progress.done += read.value_0
              if (progress.done >= progress.max) {
                setTimeout(function () {
                    that.$toast.dismiss(filename);
                }, 100)
              }
          }
        )
        .thenApply(function (reader) {
          if (that.supportsStreaming()) {
            var size = that.getFileSize(props)
            var maxBlockSize = 1024 * 1024 * 5
            var blockSize = size > maxBlockSize ? maxBlockSize : size

            console.log('saving data of length ' + size + ' to ' + filename)
            let fileStream = streamSaver.createWriteStream(
              filename,
              props.mimeType,
              function (url) {
                let link = document.createElement('a')
                let click = new MouseEvent('click')
                link.type = props.mimeType
                link.href = url
                link.dispatchEvent(click)
              },
              function (seekHi, seekLo, seekLength, uuid) {},
              undefined,
              size
            )
            let writer = fileStream.getWriter()
            let pump = () => {
              if (blockSize == 0) {
                writer.close()
              } else {
                var data = convertToByteArray(new Uint8Array(blockSize))
                reader
                  .readIntoArray(data, 0, blockSize)
                  .thenApply(function (read) {
                    size = size - read.value_0
                    blockSize = size > maxBlockSize ? maxBlockSize : size
                    writer.write(data).then(() => {
                      setTimeout(pump)
                    }).catch((err) => {
                        console.error(err);
                    });
                    if (size == 0) {
                        result.complete(true);
                    }
                  }).exceptionally(t => {
                      console.log(t);
                  })
              }
            }
            pump()
          } else {
            var size = that.getFileSize(props)
            var data = convertToByteArray(new Int8Array(size))
            reader
              .readIntoArray(data, 0, data.length)
              .thenApply(function (read) {
                that.openItem(filename, data, props.mimeType);
                result.complete(true);
              })
          }
        })
        .exceptionally(function (throwable) {
          progress.show = false
          that.errorTitle = 'Error downloading file: ' + filename
          that.errorBody = throwable.getMessage()
          that.showError = true
          result.complete(false);
        })
      return result;
    }
  }
}
},{ "../../components/drive/ProgressBar.vue": 48}], 65:[function(require,module,exports){module.exports = {
    methods: {
        loadShortcutsFile: function(launcherApp) {
            return this.loadJsonMapFile(launcherApp, 'shortcuts.json');
        },
        updateShortcutsFile: function(launcherApp, shortcutsMap) {
            return this.updateJsonMapFile(launcherApp, 'shortcuts.json', shortcutsMap);
        },
        loadJsonMapFile: function(launcherApp, filename) {
            let that = this;
            let filePath = peergos.client.PathUtils.directoryToPath([filename]);
            let future = peergos.shared.util.Futures.incomplete();

            launcherApp.existsInternal(filePath).thenApply(status => {
                if (status.value_0 != 0) {
                    future.complete(new Map());
                } else {
                    launcherApp.readInternal(filePath).thenApply(data => {
                        let obj = JSON.parse(new TextDecoder().decode(data));
                        let map = new Map(Object.entries(obj));
                        future.complete(map);
                    }).exceptionally(function(throwable) {//File not found
                        that.showSpinner = false;
                        if (throwable.detailMessage.startsWith("File not found")) {
                            future.complete(new Map());
                        } else {
                            console.log('Unable to load file: ' + filename);
                            future.complete(new Map());
                        }
                    });
                }
            });
            return future;
        },
        updateJsonMapFile: function(launcherApp, filename, map) {
            let obj = Object.fromEntries(map);
            let filePath = peergos.client.PathUtils.directoryToPath([filename]);
            let encoder = new TextEncoder();
            let uint8Array = encoder.encode(JSON.stringify(obj));
            let bytes = convertToByteArray(uint8Array);
            return launcherApp.writeInternal(filePath, bytes);
        },
	}
}
},{}], 52:[function(require,module,exports){module.exports = {
	// created() {
	// 	console.log('hello from mixing')
	// },

	methods: {
		roundToDisplay(x) {
			return Math.round(x * 100) / 100;
		},

		convertBytesToHumanReadable(bytesAsString) {
			let bytes = Number(bytesAsString);
			if (bytes < 1000)
				return bytes + " Bytes";
			if (bytes < 1000 * 1000)
				return this.roundToDisplay(bytes / 1000) + " KB";
			if (bytes < 1000 * 1000 * 1000)
				return this.roundToDisplay(bytes / 1000 / 1000) + " MB";
			return this.roundToDisplay(bytes / 1000 / 1000 / 1000) + " GB";
		},
	 }

}
},{}], 47:[function(require,module,exports){module.exports=["ipfs", "ipns", "root", "http", "https", "dns", "admin", "administrator", "support", "email", "mail", "www",
	"web", "onion", "tls", "i2p", "ftp", "sftp", "file", "mailto", "wss", "xmpp", "ssh", "smtp", "imap",
	"irc", "twitter", "facebook", "instagram", "linkedin", "wechat", "tiktok", "reddit", "snapchat", "qq",
	"whatsapp", "signal", "telegram", "matrix", "briar", "ssb", "mastodon", "apple", "google", "pinterest",
	"mls", "eth", "mnr", "zec"]
},{}], 28:[function(require,module,exports){module.exports=["abandon","ability","able","about","above","absent","absorb","abstract","absurd","abuse","access","accident","account","accuse","achieve","acid","acoustic","acquire","across","act","action","actor","actress","actual","adapt","add","addict","address","adjust","admit","adult","advance","advice","aerobic","affair","afford","afraid","again","age","agent","agree","ahead","aim","air","airport","aisle","alarm","album","alcohol","alert","alien","all","alley","allow","almost","alone","alpha","already","also","alter","always","amateur","amazing","among","amount","amused","analyst","anchor","ancient","anger","angle","angry","animal","ankle","announce","annual","another","answer","antenna","antique","anxiety","any","apart","apology","appear","apple","approve","april","arch","arctic","area","arena","argue","arm","armed","armor","army","around","arrange","arrest","arrive","arrow","art","artefact","artist","artwork","ask","aspect","assault","asset","assist","assume","asthma","athlete","atom","attack","attend","attitude","attract","auction","audit","august","aunt","author","auto","autumn","average","avocado","avoid","awake","aware","away","awesome","awful","awkward","axis","baby","bachelor","bacon","badge","bag","balance","balcony","ball","bamboo","banana","banner","bar","barely","bargain","barrel","base","basic","basket","battle","beach","bean","beauty","because","become","beef","before","begin","behave","behind","believe","below","belt","bench","benefit","best","betray","better","between","beyond","bicycle","bid","bike","bind","biology","bird","birth","bitter","black","blade","blame","blanket","blast","bleak","bless","blind","blood","blossom","blouse","blue","blur","blush","board","boat","body","boil","bomb","bone","bonus","book","boost","border","boring","borrow","boss","bottom","bounce","box","boy","bracket","brain","brand","brass","brave","bread","breeze","brick","bridge","brief","bright","bring","brisk","broccoli","broken","bronze","broom","brother","brown","brush","bubble","buddy","budget","buffalo","build","bulb","bulk","bullet","bundle","bunker","burden","burger","burst","bus","business","busy","butter","buyer","buzz","cabbage","cabin","cable","cactus","cage","cake","call","calm","camera","camp","can","canal","cancel","candy","cannon","canoe","canvas","canyon","capable","capital","captain","car","carbon","card","cargo","carpet","carry","cart","case","cash","casino","castle","casual","cat","catalog","catch","category","cattle","caught","cause","caution","cave","ceiling","celery","cement","census","century","cereal","certain","chair","chalk","champion","change","chaos","chapter","charge","chase","chat","cheap","check","cheese","chef","cherry","chest","chicken","chief","child","chimney","choice","choose","chronic","chuckle","chunk","churn","cigar","cinnamon","circle","citizen","city","civil","claim","clap","clarify","claw","clay","clean","clerk","clever","click","client","cliff","climb","clinic","clip","clock","clog","close","cloth","cloud","clown","club","clump","cluster","clutch","coach","coast","coconut","code","coffee","coil","coin","collect","color","column","combine","come","comfort","comic","common","company","concert","conduct","confirm","congress","connect","consider","control","convince","cook","cool","copper","copy","coral","core","corn","correct","cost","cotton","couch","country","couple","course","cousin","cover","coyote","crack","cradle","craft","cram","crane","crash","crater","crawl","crazy","cream","credit","creek","crew","cricket","crime","crisp","critic","crop","cross","crouch","crowd","crucial","cruel","cruise","crumble","crunch","crush","cry","crystal","cube","culture","cup","cupboard","curious","current","curtain","curve","cushion","custom","cute","cycle","dad","damage","damp","dance","danger","daring","dash","daughter","dawn","day","deal","debate","debris","decade","december","decide","decline","decorate","decrease","deer","defense","define","defy","degree","delay","deliver","demand","demise","denial","dentist","deny","depart","depend","deposit","depth","deputy","derive","describe","desert","design","desk","despair","destroy","detail","detect","develop","device","devote","diagram","dial","diamond","diary","dice","diesel","diet","differ","digital","dignity","dilemma","dinner","dinosaur","direct","dirt","disagree","discover","disease","dish","dismiss","disorder","display","distance","divert","divide","divorce","dizzy","doctor","document","dog","doll","dolphin","domain","donate","donkey","donor","door","dose","double","dove","draft","dragon","drama","drastic","draw","dream","dress","drift","drill","drink","drip","drive","drop","drum","dry","duck","dumb","dune","during","dust","dutch","duty","dwarf","dynamic","eager","eagle","early","earn","earth","easily","east","easy","echo","ecology","economy","edge","edit","educate","effort","egg","eight","either","elbow","elder","electric","elegant","element","elephant","elevator","elite","else","embark","embody","embrace","emerge","emotion","employ","empower","empty","enable","enact","end","endless","endorse","enemy","energy","enforce","engage","engine","enhance","enjoy","enlist","enough","enrich","enroll","ensure","enter","entire","entry","envelope","episode","equal","equip","era","erase","erode","erosion","error","erupt","escape","essay","essence","estate","eternal","ethics","evidence","evil","evoke","evolve","exact","example","excess","exchange","excite","exclude","excuse","execute","exercise","exhaust","exhibit","exile","exist","exit","exotic","expand","expect","expire","explain","expose","express","extend","extra","eye","eyebrow","fabric","face","faculty","fade","faint","faith","fall","false","fame","family","famous","fan","fancy","fantasy","farm","fashion","fat","fatal","father","fatigue","fault","favorite","feature","february","federal","fee","feed","feel","female","fence","festival","fetch","fever","few","fiber","fiction","field","figure","file","film","filter","final","find","fine","finger","finish","fire","firm","first","fiscal","fish","fit","fitness","fix","flag","flame","flash","flat","flavor","flee","flight","flip","float","flock","floor","flower","fluid","flush","fly","foam","focus","fog","foil","fold","follow","food","foot","force","forest","forget","fork","fortune","forum","forward","fossil","foster","found","fox","fragile","frame","frequent","fresh","friend","fringe","frog","front","frost","frown","frozen","fruit","fuel","fun","funny","furnace","fury","future","gadget","gain","galaxy","gallery","game","gap","garage","garbage","garden","garlic","garment","gas","gasp","gate","gather","gauge","gaze","general","genius","genre","gentle","genuine","gesture","ghost","giant","gift","giggle","ginger","giraffe","girl","give","glad","glance","glare","glass","glide","glimpse","globe","gloom","glory","glove","glow","glue","goat","goddess","gold","good","goose","gorilla","gospel","gossip","govern","gown","grab","grace","grain","grant","grape","grass","gravity","great","green","grid","grief","grit","grocery","group","grow","grunt","guard","guess","guide","guilt","guitar","gun","gym","habit","hair","half","hammer","hamster","hand","happy","harbor","hard","harsh","harvest","hat","have","hawk","hazard","head","health","heart","heavy","hedgehog","height","hello","helmet","help","hen","hero","hidden","high","hill","hint","hip","hire","history","hobby","hockey","hold","hole","holiday","hollow","home","honey","hood","hope","horn","horror","horse","hospital","host","hotel","hour","hover","hub","huge","human","humble","humor","hundred","hungry","hunt","hurdle","hurry","hurt","husband","hybrid","ice","icon","idea","identify","idle","ignore","ill","illegal","illness","image","imitate","immense","immune","impact","impose","improve","impulse","inch","include","income","increase","index","indicate","indoor","industry","infant","inflict","inform","inhale","inherit","initial","inject","injury","inmate","inner","innocent","input","inquiry","insane","insect","inside","inspire","install","intact","interest","into","invest","invite","involve","iron","island","isolate","issue","item","ivory","jacket","jaguar","jar","jazz","jealous","jeans","jelly","jewel","job","join","joke","journey","joy","judge","juice","jump","jungle","junior","junk","just","kangaroo","keen","keep","ketchup","key","kick","kid","kidney","kind","kingdom","kiss","kit","kitchen","kite","kitten","kiwi","knee","knife","knock","know","lab","label","labor","ladder","lady","lake","lamp","language","laptop","large","later","latin","laugh","laundry","lava","law","lawn","lawsuit","layer","lazy","leader","leaf","learn","leave","lecture","left","leg","legal","legend","leisure","lemon","lend","length","lens","leopard","lesson","letter","level","liar","liberty","library","license","life","lift","light","like","limb","limit","link","lion","liquid","list","little","live","lizard","load","loan","lobster","local","lock","logic","lonely","long","loop","lottery","loud","lounge","love","loyal","lucky","luggage","lumber","lunar","lunch","luxury","lyrics","machine","mad","magic","magnet","maid","mail","main","major","make","mammal","man","manage","mandate","mango","mansion","manual","maple","marble","march","margin","marine","market","marriage","mask","mass","master","match","material","math","matrix","matter","maximum","maze","meadow","mean","measure","meat","mechanic","medal","media","melody","melt","member","memory","mention","menu","mercy","merge","merit","merry","mesh","message","metal","method","middle","midnight","milk","million","mimic","mind","minimum","minor","minute","miracle","mirror","misery","miss","mistake","mix","mixed","mixture","mobile","model","modify","mom","moment","monitor","monkey","monster","month","moon","moral","more","morning","mosquito","mother","motion","motor","mountain","mouse","move","movie","much","muffin","mule","multiply","muscle","museum","mushroom","music","must","mutual","myself","mystery","myth","naive","name","napkin","narrow","nasty","nation","nature","near","neck","need","negative","neglect","neither","nephew","nerve","nest","net","network","neutral","never","news","next","nice","night","noble","noise","nominee","noodle","normal","north","nose","notable","note","nothing","notice","novel","now","nuclear","number","nurse","nut","oak","obey","object","oblige","obscure","observe","obtain","obvious","occur","ocean","october","odor","off","offer","office","often","oil","okay","old","olive","olympic","omit","once","one","onion","online","only","open","opera","opinion","oppose","option","orange","orbit","orchard","order","ordinary","organ","orient","original","orphan","ostrich","other","outdoor","outer","output","outside","oval","oven","over","own","owner","oxygen","oyster","ozone","pact","paddle","page","pair","palace","palm","panda","panel","panic","panther","paper","parade","parent","park","parrot","party","pass","patch","path","patient","patrol","pattern","pause","pave","payment","peace","peanut","pear","peasant","pelican","pen","penalty","pencil","people","pepper","perfect","permit","person","pet","phone","photo","phrase","physical","piano","picnic","picture","piece","pig","pigeon","pill","pilot","pink","pioneer","pipe","pistol","pitch","pizza","place","planet","plastic","plate","play","please","pledge","pluck","plug","plunge","poem","poet","point","polar","pole","police","pond","pony","pool","popular","portion","position","possible","post","potato","pottery","poverty","powder","power","practice","praise","predict","prefer","prepare","present","pretty","prevent","price","pride","primary","print","priority","prison","private","prize","problem","process","produce","profit","program","project","promote","proof","property","prosper","protect","proud","provide","public","pudding","pull","pulp","pulse","pumpkin","punch","pupil","puppy","purchase","purity","purpose","purse","push","put","puzzle","pyramid","quality","quantum","quarter","question","quick","quit","quiz","quote","rabbit","raccoon","race","rack","radar","radio","rail","rain","raise","rally","ramp","ranch","random","range","rapid","rare","rate","rather","raven","raw","razor","ready","real","reason","rebel","rebuild","recall","receive","recipe","record","recycle","reduce","reflect","reform","refuse","region","regret","regular","reject","relax","release","relief","rely","remain","remember","remind","remove","render","renew","rent","reopen","repair","repeat","replace","report","require","rescue","resemble","resist","resource","response","result","retire","retreat","return","reunion","reveal","review","reward","rhythm","rib","ribbon","rice","rich","ride","ridge","rifle","right","rigid","ring","riot","ripple","risk","ritual","rival","river","road","roast","robot","robust","rocket","romance","roof","rookie","room","rose","rotate","rough","round","route","royal","rubber","rude","rug","rule","run","runway","rural","sad","saddle","sadness","safe","sail","salad","salmon","salon","salt","salute","same","sample","sand","satisfy","satoshi","sauce","sausage","save","say","scale","scan","scare","scatter","scene","scheme","school","science","scissors","scorpion","scout","scrap","screen","script","scrub","sea","search","season","seat","second","secret","section","security","seed","seek","segment","select","sell","seminar","senior","sense","sentence","series","service","session","settle","setup","seven","shadow","shaft","shallow","share","shed","shell","sheriff","shield","shift","shine","ship","shiver","shock","shoe","shoot","shop","short","shoulder","shove","shrimp","shrug","shuffle","shy","sibling","sick","side","siege","sight","sign","silent","silk","silly","silver","similar","simple","since","sing","siren","sister","situate","six","size","skate","sketch","ski","skill","skin","skirt","skull","slab","slam","sleep","slender","slice","slide","slight","slim","slogan","slot","slow","slush","small","smart","smile","smoke","smooth","snack","snake","snap","sniff","snow","soap","soccer","social","sock","soda","soft","solar","soldier","solid","solution","solve","someone","song","soon","sorry","sort","soul","sound","soup","source","south","space","spare","spatial","spawn","speak","special","speed","spell","spend","sphere","spice","spider","spike","spin","spirit","split","spoil","sponsor","spoon","sport","spot","spray","spread","spring","spy","square","squeeze","squirrel","stable","stadium","staff","stage","stairs","stamp","stand","start","state","stay","steak","steel","stem","step","stereo","stick","still","sting","stock","stomach","stone","stool","story","stove","strategy","street","strike","strong","struggle","student","stuff","stumble","style","subject","submit","subway","success","such","sudden","suffer","sugar","suggest","suit","summer","sun","sunny","sunset","super","supply","supreme","sure","surface","surge","surprise","surround","survey","suspect","sustain","swallow","swamp","swap","swarm","swear","sweet","swift","swim","swing","switch","sword","symbol","symptom","syrup","system","table","tackle","tag","tail","talent","talk","tank","tape","target","task","taste","tattoo","taxi","teach","team","tell","ten","tenant","tennis","tent","term","test","text","thank","that","theme","then","theory","there","they","thing","this","thought","three","thrive","throw","thumb","thunder","ticket","tide","tiger","tilt","timber","time","tiny","tip","tired","tissue","title","toast","tobacco","today","toddler","toe","together","toilet","token","tomato","tomorrow","tone","tongue","tonight","tool","tooth","top","topic","topple","torch","tornado","tortoise","toss","total","tourist","toward","tower","town","toy","track","trade","traffic","tragic","train","transfer","trap","trash","travel","tray","treat","tree","trend","trial","tribe","trick","trigger","trim","trip","trophy","trouble","truck","true","truly","trumpet","trust","truth","try","tube","tuition","tumble","tuna","tunnel","turkey","turn","turtle","twelve","twenty","twice","twin","twist","two","type","typical","ugly","umbrella","unable","unaware","uncle","uncover","under","undo","unfair","unfold","unhappy","uniform","unique","unit","universe","unknown","unlock","until","unusual","unveil","update","upgrade","uphold","upon","upper","upset","urban","urge","usage","use","used","useful","useless","usual","utility","vacant","vacuum","vague","valid","valley","valve","van","vanish","vapor","various","vast","vault","vehicle","velvet","vendor","venture","venue","verb","verify","version","very","vessel","veteran","viable","vibrant","vicious","victory","video","view","village","vintage","violin","virtual","virus","visa","visit","visual","vital","vivid","vocal","voice","void","volcano","volume","vote","voyage","wage","wagon","wait","walk","wall","walnut","want","warfare","warm","warrior","wash","wasp","waste","water","wave","way","wealth","weapon","wear","weasel","weather","web","wedding","weekend","weird","welcome","west","wet","whale","what","wheat","wheel","when","where","whip","whisper","wide","width","wife","wild","will","win","window","wine","wing","wink","winner","winter","wire","wisdom","wise","wish","witness","wolf","woman","wonder","wood","wool","word","work","world","worry","worth","wrap","wreck","wrestle","wrist","write","wrong","yard","year","yellow","you","young","youth","zebra","zero","zone","zoo"]
},{}], 29:[function(require,module,exports){module.exports=["password","123456","12345678","1234","qwerty","12345","dragon","pussy","baseball","football","letmein","monkey","696969","abc123","mustang","michael","shadow","master","jennifer","111111","2000","jordan","superman","harley","1234567","fuckme","hunter","fuckyou","trustno1","ranger","buster","thomas","tigger","robert","soccer","fuck","batman","test","pass","killer","hockey","george","charlie","andrew","michelle","love","sunshine","jessica","asshole","6969","pepper","daniel","access","123456789","654321","joshua","maggie","starwars","silver","william","dallas","yankees","123123","ashley","666666","hello","amanda","orange","biteme","freedom","computer","sexy","thunder","nicole","ginger","heather","hammer","summer","corvette","taylor","fucker","austin","1111","merlin","matthew","121212","golfer","cheese","princess","martin","chelsea","patrick","richard","diamond","yellow","bigdog","secret","asdfgh","sparky","cowboy","camaro","anthony","matrix","falcon","iloveyou","bailey","guitar","jackson","purple","scooter","phoenix","aaaaaa","morgan","tigers","porsche","mickey","maverick","cookie","nascar","peanut","justin","131313","money","horny","samantha","panties","steelers","joseph","snoopy","boomer","whatever","iceman","smokey","gateway","dakota","cowboys","eagles","chicken","dick","black","zxcvbn","please","andrea","ferrari","knight","hardcore","melissa","compaq","coffee","booboo","bitch","johnny","bulldog","xxxxxx","welcome","james","player","ncc1701","wizard","scooby","charles","junior","internet","bigdick","mike","brandy","tennis","blowjob","banana","monster","spider","lakers","miller","rabbit","enter","mercedes","brandon","steven","fender","john","yamaha","diablo","chris","boston","tiger","marine","chicago","rangers","gandalf","winter","bigtits","barney","edward","raiders","porn","badboy","blowme","spanky","bigdaddy","johnson","chester","london","midnight","blue","fishing","000000","hannah","slayer","11111111","rachel","sexsex","redsox","thx1138","asdf","marlboro","panther","zxcvbnm","arsenal","oliver","qazwsx","mother","victoria","7777777","jasper","angel","david","winner","crystal","golden","butthead","viking","jack","iwantu","shannon","murphy","angels","prince","cameron","girls","madison","wilson","carlos","hooters","willie","startrek","captain","maddog","jasmine","butter","booger","angela","golf","lauren","rocket","tiffany","theman","dennis","liverpoo","flower","forever","green","jackie","muffin","turtle","sophie","danielle","redskins","toyota","jason","sierra","winston","debbie","giants","packers","newyork","jeremy","casper","bubba","112233","sandra","lovers","mountain","united","cooper","driver","tucker","helpme","fucking","pookie","lucky","maxwell","8675309","bear","suckit","gators","5150","222222","shithead","fuckoff","jaguar","monica","fred","happy","hotdog","tits","gemini","lover","xxxxxxxx","777777","canada","nathan","victor","florida","88888888","nicholas","rosebud","metallic","doctor","trouble","success","stupid","tomcat","warrior","peaches","apples","fish","qwertyui","magic","buddy","dolphins","rainbow","gunner","987654","freddy","alexis","braves","cock","2112","1212","cocacola","xavier","dolphin","testing","bond007","member","calvin","voodoo","7777","samson","alex","apollo","fire","tester","walter","beavis","voyager","peter","porno","bonnie","rush2112","beer","apple","scorpio","jonathan","skippy","sydney","scott","red123","power","gordon","travis","beaver","star","jackass","flyers","boobs","232323","zzzzzz","steve","rebecca","scorpion","doggie","legend","ou812","yankee","blazer","bill","runner","birdie","bitches","555555","parker","topgun","asdfasdf","heaven","viper","animal","2222","bigboy","4444","arthur","baby","private","godzilla","donald","williams","lifehack","phantom","dave","rock","august","sammy","cool","brian","platinum","jake","bronco","paul","mark","frank","heka6w2","copper","billy","cumshot","garfield","willow","cunt","little","carter","slut","albert","69696969","kitten","super","jordan23","eagle1","shelby","america","11111","jessie","house","free","123321","chevy","bullshit","white","broncos","horney","surfer","nissan","999999","saturn","airborne","elephant","marvin","shit","action","adidas","qwert","kevin","1313","explorer","walker","police","christin","december","benjamin","wolf","sweet","therock","king","online","dickhead","brooklyn","teresa","cricket","sharon","dexter","racing","penis","gregory","0000","teens","redwings","dreams","michigan","hentai","magnum","87654321","nothing","donkey","trinity","digital","333333","stella","cartman","guinness","123abc","speedy","buffalo","kitty","pimpin","eagle","einstein","kelly","nelson","nirvana","vampire","xxxx","playboy","louise","pumpkin","snowball","test123","girl","sucker","mexico","beatles","fantasy","ford","gibson","celtic","marcus","cherry","cassie","888888","natasha","sniper","chance","genesis","hotrod","reddog","alexande","college","jester","passw0rd","bigcock","smith","lasvegas","carmen","slipknot","3333","death","kimberly","1q2w3e","eclipse","1q2w3e4r","stanley","samuel","drummer","homer","montana","music","aaaa","spencer","jimmy","carolina","colorado","creative","hello1","rocky","goober","friday","bollocks","scotty","abcdef","bubbles","hawaii","fluffy","mine","stephen","horses","thumper","5555","pussies","darkness","asdfghjk","pamela","boobies","buddha","vanessa","sandman","naughty","douglas","honda","matt","azerty","6666","shorty","money1","beach","loveme","4321","simple","poohbear","444444","badass","destiny","sarah","denise","vikings","lizard","melanie","assman","sabrina","nintendo","water","good","howard","time","123qwe","november","xxxxx","october","leather","bastard","young","101010","extreme","hard","password1","vincent","pussy1","lacrosse","hotmail","spooky","amateur","alaska","badger","paradise","maryjane","poop","crazy","mozart","video","russell","vagina","spitfire","anderson","norman","eric","cherokee","cougar","barbara","long","420420","family","horse","enigma","allison","raider","brazil","blonde","jones","55555","dude","drowssap","jeff","school","marshall","lovely","1qaz2wsx","jeffrey","caroline","franklin","booty","molly","snickers","leslie","nipples","courtney","diesel","rocks","eminem","westside","suzuki","daddy","passion","hummer","ladies","zachary","frankie","elvis","reggie","alpha","suckme","simpson","patricia","147147","pirate","tommy","semperfi","jupiter","redrum","freeuser","wanker","stinky","ducati","paris","natalie","babygirl","bishop","windows","spirit","pantera","monday","patches","brutus","houston","smooth","penguin","marley","forest","cream","212121","flash","maximus","nipple","bobby","bradley","vision","pokemon","champion","fireman","indian","softball","picard","system","clinton","cobra","enjoy","lucky1","claire","claudia","boogie","timothy","marines","security","dirty","admin","wildcats","pimp","dancer","hardon","veronica","fucked","abcd1234","abcdefg","ironman","wolverin","remember","great","freepass","bigred","squirt","justice","francis","hobbes","kermit","pearljam","mercury","domino","9999","denver","brooke","rascal","hitman","mistress","simon","tony","bbbbbb","friend","peekaboo","naked","budlight","electric","sluts","stargate","saints","bondage","brittany","bigman","zombie","swimming","duke","qwerty1","babes","scotland","disney","rooster","brenda","mookie","swordfis","candy","duncan","olivia","hunting","blink182","alicia","8888","samsung","bubba1","whore","virginia","general","passport","aaaaaaaa","erotic","liberty","arizona","jesus","abcd","newport","skipper","rolltide","balls","happy1","galore","christ","weasel","242424","wombat","digger","classic","bulldogs","poopoo","accord","popcorn","turkey","jenny","amber","bunny","mouse","007007","titanic","liverpool","dreamer","everton","friends","chevelle","carrie","gabriel","psycho","nemesis","burton","pontiac","connor","eatme","lickme","roland","cumming","mitchell","ireland","lincoln","arnold","spiderma","patriots","goblue","devils","eugene","empire","asdfg","cardinal","brown","shaggy","froggy","qwer","kawasaki","kodiak","people","phpbb","light","54321","kramer","chopper","hooker","honey","whynot","lesbian","lisa","baxter","adam","snake","teen","ncc1701d","qqqqqq","airplane","britney","avalon","sandy","sugar","sublime","stewart","wildcat","raven","scarface","elizabet","123654","trucks","wolfpack","pervert","lawrence","raymond","redhead","american","alyssa","bambam","movie","woody","shaved","snowman","tiger1","chicks","raptor","1969","stingray","shooter","france","stars","madmax","kristen","sports","jerry","789456","garcia","simpsons","lights","ryan","looking","chronic","alison","hahaha","packard","hendrix","perfect","service","spring","srinivas","spike","katie","252525","oscar","brother","bigmac","suck","single","cannon","georgia","popeye","tattoo","texas","party","bullet","taurus","sailor","wolves","panthers","japan","strike","flowers","pussycat","chris1","loverboy","berlin","sticky","marina","tarheels","fisher","russia","connie","wolfgang","testtest","mature","bass","catch22","juice","michael1","nigger","159753","women","alpha1","trooper","hawkeye","head","freaky","dodgers","pakistan","machine","pyramid","vegeta","katana","moose","tinker","coyote","infinity","inside","pepsi","letmein1","bang","control","hercules","morris","james1","tickle","outlaw","browns","billybob","pickle","test1","michele","antonio","sucks","pavilion","changeme","caesar","prelude","tanner","adrian","darkside","bowling","wutang","sunset","robbie","alabama","danger","zeppelin","juan","rusty","pppppp","nick","2001","ping","darkstar","madonna","qwe123","bigone","casino","cheryl","charlie1","mmmmmm","integra","wrangler","apache","tweety","qwerty12","bobafett","simone","none","business","sterling","trevor","transam","dustin","harvey","england","2323","seattle","ssssss","rose","harry","openup","pandora","pussys","trucker","wallace","indigo","storm","malibu","weed","review","babydoll","doggy","dilbert","pegasus","joker","catfish","flipper","valerie","herman","fuckit","detroit","kenneth","cheyenne","bruins","stacey","smoke","joey","seven","marino","fetish","xfiles","wonder","stinger","pizza","babe","pretty","stealth","manutd","gracie","gundam","cessna","longhorn","presario","mnbvcxz","wicked","mustang1","victory","21122112","shelly","awesome","athena","q1w2e3r4","help","holiday","knicks","street","redneck","12341234","casey","gizmo","scully","dragon1","devildog","triumph","eddie","bluebird","shotgun","peewee","ronnie","angel1","daisy","special","metallica","madman","country","impala","lennon","roscoe","omega","access14","enterpri","miranda","search","smitty","blizzard","unicorn","tight","rick","ronald","asdf1234","harrison","trigger","truck","danny","home","winnie","beauty","thailand","1234567890","cadillac","castle","tyler","bobcat","buddy1","sunny","stones","asian","freddie","chuck","butt","loveyou","norton","hellfire","hotsex","indiana","short","panzer","lonewolf","trumpet","colors","blaster","12121212","fireball","logan","precious","aaron","elaine","jungle","atlanta","gold","corona","curtis","nikki","polaris","timber","theone","baller","chipper","orlando","island","skyline","dragons","dogs","benson","licker","goldie","engineer","kong","pencil","basketba","open","hornet","world","linda","barbie","chan","farmer","valentin","wetpussy","indians","larry","redman","foobar","travel","morpheus","bernie","target","141414","hotstuff","photos","laura","savage","holly","rocky1","fuck_inside","dollar","turbo","design","newton","hottie","moon","202020","blondes","4128","lestat","avatar","future","goforit","random","abgrtyu","jjjjjj","cancer","q1w2e3","smiley","goldberg","express","virgin","zipper","wrinkle1","stone","andy","babylon","dong","powers","consumer","dudley","monkey1","serenity","samurai","99999999","bigboobs","skeeter","lindsay","joejoe","master1","aaaaa","chocolat","christia","birthday","stephani","tang","1234qwer","alfred","ball","98765432","maria","sexual","maxima","77777777","sampson","buckeye","highland","kristin","seminole","reaper","bassman","nugget","lucifer","airforce","nasty","watson","warlock","2121","philip","always","dodge","chrissy","burger","bird","snatch","missy","pink","gang","maddie","holmes","huskers","piglet","photo","joanne","hamilton","dodger","paladin","christy","chubby","buckeyes","hamlet","abcdefgh","bigfoot","sunday","manson","goldfish","garden","deftones","icecream","blondie","spartan","julie","harold","charger","brandi","stormy","sherry","pleasure","juventus","rodney","galaxy","holland","escort","zxcvb","planet","jerome","wesley","blues","song","peace","david1","ncc1701e","1966","51505150","cavalier","gambit","karen","sidney","ripper","oicu812","jamie","sister","marie","martha","nylons","aardvark","nadine","minnie","whiskey","bing","plastic","anal","babylon5","chang","savannah","loser","racecar","insane","yankees1","mememe","hansolo","chiefs","fredfred","freak","frog","salmon","concrete","yvonne","zxcv","shamrock","atlantis","warren","wordpass","julian","mariah","rommel","1010","harris","predator","sylvia","massive","cats","sammy1","mister","stud","marathon","rubber","ding","trunks","desire","montreal","justme","faster","kathleen","irish","1999","bertha","jessica1","alpine","sammie","diamonds","tristan","00000","swinger","shan","stallion","pitbull","letmein2","roberto","ready","april","palmer","ming","shadow1","audrey","chong","clitoris","wang","shirley","fuckers","jackoff","bluesky","sundance","renegade","hollywoo","151515","bernard","wolfman","soldier","picture","pierre","ling","goddess","manager","nikita","sweety","titans","hang","fang","ficken","niners","bottom","bubble","hello123","ibanez","webster","sweetpea","stocking","323232","tornado","lindsey","content","bruce","buck","aragorn","griffin","chen","campbell","trojan","christop","newman","wayne","tina","rockstar","father","geronimo","pascal","crimson","brooks","hector","penny","anna","google","camera","chandler","fatcat","lovelove","cody","cunts","waters","stimpy","finger","cindy","wheels","viper1","latin","robin","greenday","987654321","creampie","brendan","hiphop","willy","snapper","funtime","duck","trombone","adult","cotton","cookies","kaiser","mulder","westham","latino","jeep","ravens","aurora","drizzt","madness","energy","kinky","314159","sophia","stefan","slick","rocker","55555555","freeman","french","mongoose","speed","dddddd","hong","henry","hungry","yang","catdog","cheng","ghost","gogogo","randy","tottenha","curious","butterfl","mission","january","singer","sherman","shark","techno","lancer","lalala","autumn","chichi","orion","trixie","clifford","delta","bobbob","bomber","holden","kang","kiss","1968","spunky","liquid","mary","beagle","granny","network","bond","kkkkkk","millie","1973","biggie","beetle","teacher","susan","toronto","anakin","genius","dream","cocks","dang","bush","karate","snakes","bangkok","callie","fuckyou2","pacific","daytona","kelsey","infantry","skywalke","foster","felix","sailing","raistlin","vanhalen","huang","herbert","jacob","blackie","tarzan","strider","sherlock","lang","gong","sang","dietcoke","ultimate","tree","shai","sprite","ting","artist","chai","chao","devil","python","ninja","misty","ytrewq","sweetie","superfly","456789","tian","jing","jesus1","freedom1","dian","drpepper","potter","chou","darren","hobbit","violet","yong","shen","phillip","maurice","gloria","nolimit","mylove","biscuit","yahoo","shasta","sex4me","smoker","smile","pebbles","pics","philly","tong","tintin","lesbians","marlin","cactus","frank1","tttttt","chun","danni","emerald","showme","pirates","lian","dogg","colleen","xiao","xian","tazman","tanker","patton","toshiba","richie","alberto","gotcha","graham","dillon","rang","emily","keng","jazz","bigguy","yuan","woman","tomtom","marion","greg","chaos","fossil","flight","racerx","tuan","creamy","boss","bobo","musicman","warcraft","window","blade","shuang","sheila","shun","lick","jian","microsoft","rong","allen","feng","getsome","sally","quality","kennedy","morrison","1977","beng","wwwwww","yoyoyo","zhang","seng","teddy","joanna","andreas","harder","luke","qazxsw","qian","cong","chuan","deng","nang","boeing","keeper","western","isabelle","1963","subaru","sheng","thuglife","teng","jiong","miao","martina","mang","maniac","pussie","tracey","a1b2c3","clayton","zhou","zhuang","xing","stonecol","snow","spyder","liang","jiang","memphis","regina","ceng","magic1","logitech","chuang","dark","million","blow","sesame","shao","poison","titty","terry","kuan","kuai","kyle","mian","guan","hamster","guai","ferret","florence","geng","duan","pang","maiden","quan","velvet","nong","neng","nookie","buttons","bian","bingo","biao","zhong","zeng","xiong","zhun","ying","zong","xuan","zang","0.0.000","suan","shei","shui","sharks","shang","shua","small","peng","pian","piao","liao","meng","miami","reng","guang","cang","change","ruan","diao","luan","lucas","qing","chui","chuo","cuan","nuan","ning","heng","huan","kansas","muscle","monroe","weng","whitney","1passwor","bluemoon","zhui","zhua","xiang","zheng","zhen","zhei","zhao","zhan","yomama","zhai","zhuo","zuan","tarheel","shou","shuo","tiao","lady","leonard","leng","kuang","jiao","13579","basket","qiao","qiong","qiang","chuai","nian","niao","niang","huai","22222222","bianca","zhuan","zhuai","shuan","shuai","stardust","jumper","margaret","archie","66666666","charlott","forget","qwertz","bones","history","milton","waterloo","2002","stuff","11223344","office","oldman","preston","trains","murray","vertigo","246810","black1","swallow","smiles","standard","alexandr","parrot","luther","user","nicolas","1976","surfing","pioneer","pete","masters","apple1","asdasd","auburn","hannibal","frontier","panama","lucy","buffy","brianna","welcome1","vette","blue22","shemale","111222","baggins","groovy","global","turner","181818","1979","blades","spanking","life","byteme","lobster","collins","dawg","hilton","japanese","1970","1964","2424","polo","markus","coco","deedee","mikey","1972","171717","1701","strip","jersey","green1","capital","sasha","sadie","putter","vader","seven7","lester","marcel","banshee","grendel","gilbert","dicks","dead","hidden","iloveu","1980","sound","ledzep","michel","147258","female","bugger","buffett","bryan","hell","kristina","molson","2020","wookie","sprint","thanks","jericho","102030","grace","fuckin","mandy","ranger1","trebor","deepthroat","bonehead","molly1","mirage","models","1984","2468","stuart","showtime","squirrel","pentium","mario","anime","gator","powder","twister","connect","neptune","bruno","butts","engine","eatshit","mustangs","woody1","shogun","septembe","pooh","jimbo","roger","annie","bacon","center","russian","sabine","damien","mollie","voyeur","2525","363636","leonardo","camel","chair","germany","giant","qqqq","nudist","bone","sleepy","tequila","megan","fighter","garrett","dominic","obiwan","makaveli","vacation","walnut","1974","ladybug","cantona","ccbill","satan","rusty1","passwor1","columbia","napoleon","dusty","kissme","motorola","william1","1967","zzzz","skater","smut","play","matthew1","robinson","valley","coolio","dagger","boner","bull","horndog","jason1","blake","penguins","rescue","griffey","8j4ye3uz","californ","champs","qwertyuiop","portland","queen","colt45","boat","xxxxxxx","xanadu","tacoma","mason","carpet","gggggg","safety","palace","italia","stevie","picturs","picasso","thongs","tempest","ricardo","roberts","asd123","hairy","foxtrot","gary","nimrod","hotboy","343434","1111111","asdfghjkl","goose","overlord","blood","wood","stranger","454545","shaolin","sooners","socrates","spiderman","peanuts","maxine","rogers","13131313","andrew1","filthy","donnie","ohyeah","africa","national","kenny","keith","monique","intrepid","jasmin","pickles","assass","fright","potato","darwin","hhhhhh","kingdom","weezer","424242","pepsi1","throat","romeo","gerard","looker","puppy","butch","monika","suzanne","sweets","temple","laurie","josh","megadeth","analsex","nymets","ddddddd","bigballs","support","stick","today","down","oakland","oooooo","qweasd","chucky","bridge","carrot","chargers","discover","dookie","condor","night","butler","hoover","horny1","isabella","sunrise","sinner","jojo","megapass","martini","assfuck","grateful","ffffff","abigail","esther","mushroom","janice","jamaica","wright","sims","space","there","timmy","7654321","77777","cccccc","gizmodo","roxanne","ralph","tractor","cristina","dance","mypass","hongkong","helena","1975","blue123","pissing","thomas1","redred","rich","basketball","attack","cash","satan666","drunk","dixie","dublin","bollox","kingkong","katrina","miles","1971","22222","272727","sexx","penelope","thompson","anything","bbbb","battle","grizzly","passat","porter","tracy","defiant","bowler","knickers","monitor","wisdom","wild","slappy","thor","letsgo","robert1","feet","rush","brownie","hudson","098765","playing","playtime","lightnin","melvin","atomic","bart","hawk","goku","glory","llllll","qwaszx","cosmos","bosco","knights","bentley","beast","slapshot","lewis","assword","frosty","gillian","sara","dumbass","mallard","dddd","deanna","elwood","wally","159357","titleist","angelo","aussie","guest","golfing","doobie","loveit","chloe","elliott","werewolf","vipers","janine","1965","blabla","surf","sucking","tardis","serena","shelley","thegame","legion","rebels","fernando","fast","gerald","sarah1","double","onelove","loulou","toto","crash","blackcat","0007","tacobell","soccer1","jedi","manuel","method","river","chase","ludwig","poopie","derrick","boob","breast","kittycat","isabel","belly","pikachu","thunder1","thankyou","jose","celeste","celtics","frances","frogger","scoobydo","sabbath","coltrane","budman","willis","jackal","bigger","zzzzz","silvia","sooner","licking","gopher","geheim","lonestar","primus","pooper","newpass","brasil","heather1","husker","element","moomoo","beefcake","zzzzzzzz","tammy","shitty","smokin","personal","jjjj","anthony1","anubis","backup","gorilla","fuckface","painter","lowrider","punkrock","traffic","claude","daniela","dale","delta1","nancy","boys","easy","kissing","kelley","wendy","theresa","amazon","alan","fatass","dodgeram","dingdong","malcolm","qqqqqqqq","breasts","boots","honda1","spidey","poker","temp","johnjohn","miguel","147852","archer","asshole1","dogdog","tricky","crusader","weather","syracuse","spankme","speaker","meridian","amadeus","back","harley1","falcons","dorothy","turkey50","kenwood","keyboard","ilovesex","1978","blackman","shazam","shalom","lickit","jimbob","richmond","roller","carson","check","fatman","funny","garbage","sandiego","loving","magnus","cooldude","clover","mobile","bell","payton","plumber","texas1","tool","topper","jenna","mariners","rebel","harmony","caliente","celica","fletcher","german","diana","oxford","osiris","orgasm","punkin","porsche9","tuesday","close","breeze","bossman","kangaroo","billie","latinas","judith","astros","scruffy","donna","qwertyu","davis","hearts","kathy","jammer","java","springer","rhonda","ricky","1122","goodtime","chelsea1","freckles","flyboy","doodle","city","nebraska","bootie","kicker","webmaster","vulcan","iverson","191919","blueeyes","stoner","321321","farside","rugby","director","pussy69","power1","bobbie","hershey","hermes","monopoly","west","birdman","blessed","blackjac","southern","peterpan","thumbs","lawyer","melinda","fingers","fuckyou1","rrrrrr","a1b2c3d4","coke","nicola","bohica","heart","elvis1","kids","blacky","stories","sentinel","snake1","phoebe","jesse","richard1","1234abcd","guardian","candyman","fisting","scarlet","dildo","pancho","mandingo","lucky7","condom","munchkin","billyboy","summer1","student","sword","skiing","sergio","site","sony","thong","rootbeer","assassin","cassidy","frederic","fffff","fitness","giovanni","scarlett","durango","postal","achilles","dawn","dylan","kisses","warriors","imagine","plymouth","topdog","asterix","hallo","cameltoe","fuckfuck","bridget","eeeeee","mouth","weird","will","sithlord","sommer","toby","theking","juliet","avenger","backdoor","goodbye","chevrole","faith","lorraine","trance","cosworth","brad","houses","homers","eternity","kingpin","verbatim","incubus","1961","blond","zaphod","shiloh","spurs","station","jennie","maynard","mighty","aliens","hank","charly","running","dogman","omega1","printer","aggies","chocolate","deadhead","hope","javier","bitch1","stone55","pineappl","thekid","lizzie","rockets","ashton","camels","formula","forrest","rosemary","oracle","rain","pussey","porkchop","abcde","clancy","nellie","mystic","inferno","blackdog","steve1","pauline","alexander","alice","alfa","grumpy","flames","scream","lonely","puffy","proxy","valhalla","unreal","cynthia","herbie","engage","yyyyyy","010101","solomon","pistol","melody","celeb","flying","gggg","santiago","scottie","oakley","portugal","a12345","newbie","mmmm","venus","1qazxsw2","beverly","zorro","work","writer","stripper","sebastia","spread","phil","tobias","links","members","metal","1221","andre","565656","funfun","trojans","again","cyber","hurrican","moneys","1x2zkg8w","zeus","thing","tomato","lion","atlantic","celine","usa123","trans","account","aaaaaaa","homerun","hyperion","kevin1","blacks","44444444","skittles","sean","hastings","fart","gangbang","fubar","sailboat","older","oilers","craig","conrad","church","damian","dean","broken","buster1","hithere","immortal","sticks","pilot","peters","lexmark","jerkoff","maryland","anders","cheers","possum","columbus","cutter","muppet","beautiful","stolen","swordfish","sport","sonic","peter1","jethro","rockon","asdfghj","pass123","paper","pornos","ncc1701a","bootys","buttman","bonjour","escape","1960","becky","bears","362436","spartans","tinman","threesom","lemons","maxmax","1414","bbbbb","camelot","chad","chewie","gogo","fusion","saint","dilligaf","nopass","myself","hustler","hunter1","whitey","beast1","yesyes","spank","smudge","pinkfloy","patriot","lespaul","annette","hammers","catalina","finish","formula1","sausage","scooter1","orioles","oscar1","over","colombia","cramps","natural","eating","exotic","iguana","bella","suckers","strong","sheena","start","slave","pearl","topcat","lancelot","angelica","magelan","racer","ramona","crunch","british","button","eileen","steph","456123","skinny","seeking","rockhard","chief","filter","first","freaks","sakura","pacman","poontang","dalton","newlife","homer1","klingon","watcher","walleye","tasha","tasty","sinatra","starship","steel","starbuck","poncho","amber1","gonzo","grover","catherin","carol","candle","firefly","goblin","scotch","diver","usmc","huskies","eleven","kentucky","kitkat","israel","beckham","bicycle","yourmom","studio","tara","33333333","shane","splash","jimmy1","reality","12344321","caitlin","focus","sapphire","mailman","raiders1","clark","ddddd","hopper","excalibu","more","wilbur","illini","imperial","phillips","lansing","maxx","gothic","golfball","carlton","camille","facial","front242","macdaddy","qwer1234","vectra","cowboys1","crazy1","dannyboy","jane","betty","benny","bennett","leader","martinez","aquarius","barkley","hayden","caught","franky","ffff","floyd","sassy","pppp","pppppppp","prodigy","clarence","noodle","eatpussy","vortex","wanking","beatrice","billy1","siemens","pedro","phillies","research","groups","carolyn","chevy1","cccc","fritz","gggggggg","doughboy","dracula","nurses","loco","madrid","lollipop","trout","utopia","chrono","cooler","conner","nevada","wibble","werner","summit","marco","marilyn","1225","babies","capone","fugazi","panda","mama","qazwsxed","puppies","triton","9876","command","nnnnnn","ernest","momoney","iforgot","wolfie","studly","shawn","renee","alien","hamburg","81fukkc","741852","catman","china","forgot","gagging","scott1","drew","oregon","qweqwe","train","crazybab","daniel1","cutlass","brothers","holes","heidi","mothers","music1","what","walrus","1957","bigtime","bike","xtreme","simba","ssss","rookie","angie","bathing","fresh","sanchez","rotten","maestro","luis","look","turbo1","99999","butthole","hhhh","elijah","monty","bender","yoda","shania","shock","phish","thecat","rightnow","reagan","baddog","asia","greatone","gateway1","randall","abstr","napster","brian1","bogart","high","hitler","emma","kill","weaver","wildfire","jackson1","isaiah","1981","belinda","beaner","yoyo","0.0.0.000","super1","select","snuggles","slutty","some","phoenix1","technics","toon","raven1","rayray","123789","1066","albion","greens","fashion","gesperrt","santana","paint","powell","credit","darling","mystery","bowser","bottle","brucelee","hehehe","kelly1","mojo","1998","bikini","woofwoof","yyyy","strap","sites","spears","theodore","julius","richards","amelia","central","f**k","nyjets","punisher","username","vanilla","twisted","bryant","brent","bunghole","here","elizabeth","erica","kimber","viagra","veritas","pony","pool","titts","labtec","lifetime","jenny1","masterbate","mayhem","redbull","govols","gremlin","505050","gmoney","rupert","rovers","diamond1","lorenzo","trident","abnormal","davidson","deskjet","cuddles","nice","bristol","karina","milano","vh5150","jarhead","1982","bigbird","bizkit","sixers","slider","star69","starfish","penetration","tommy1","john316","meghan","michaela","market","grant","caligula","carl","flicks","films","madden","railroad","cosmo","cthulhu","bradford","br0d3r","military","bearbear","swedish","spawn","patrick1","polly","these","todd","reds","anarchy","groove","franco","fuckher","oooo","tyrone","vegas","airbus","cobra1","christine","clips","delete","duster","kitty1","mouse1","monkeys","jazzman","1919","262626","swinging","stroke","stocks","sting","pippen","labrador","jordan1","justdoit","meatball","females","saturday","park","vector","cooter","defender","desert","demon","nike","bubbas","bonkers","english","kahuna","wildman","4121","sirius","static","piercing","terror","teenage","leelee","marissa","microsof","mechanic","robotech","rated","hailey","chaser","sanders","salsero","nuts","macross","quantum","rachael","tsunami","universe","daddy1","cruise","nguyen","newpass6","nudes","hellyeah","vernon","1959","zaq12wsx","striker","sixty","steele","spice","spectrum","smegma","thumb","jjjjjjjj","mellow","astrid","cancun","cartoon","sabres","samiam","pants","oranges","oklahoma","lust","coleman","denali","nude","noodles","buzz","brest","hooter","mmmmmmmm","warthog","bloody","blueblue","zappa","wolverine","sniffing","lance","jean","jjjjj","harper","calico","freee","rover","door","pooter","closeup","bonsai","evelyn","emily1","kathryn","keystone","iiii","1955","yzerman","theboss","tolkien","jill","megaman","rasta","bbbbbbbb","bean","handsome","hal9000","goofy","gringo","gofish","gizmo1","samsam","scuba","onlyme","tttttttt","corrado","clown","clapton","deborah","boris","bulls","vivian","jayhawk","bethany","wwww","sharky","seeker","ssssssss","somethin","pillow","thesims","lighter","lkjhgf","melissa1","marcius2","barry","guiness","gymnast","casey1","goalie","godsmack","doug","lolo","rangers1","poppy","abby","clemson","clipper","deeznuts","nobody","holly1","elliot","eeee","kingston","miriam","belle","yosemite","sucked","sex123","sexy69","pic's","tommyboy","lamont","meat","masterbating","marianne","marc","gretzky","happyday","frisco","scratch","orchid","orange1","manchest","quincy","unbelievable","aberdeen","dawson","nathalie","ne1469","boxing","hill","korn","intercourse","161616","1985","ziggy","supersta","stoney","senior","amature","barber","babyboy","bcfields","goliath","hack","hardrock","children","frodo","scout","scrappy","rosie","qazqaz","tracker","active","craving","commando","cohiba","deep","cyclone","dana","bubba69","katie1","mpegs","vsegda","jade","irish1","better","sexy1","sinclair","smelly","squerting","lions","jokers","jeanette","julia","jojojo","meathead","ashley1","groucho","cheetah","champ","firefox","gandalf1","packer","magnolia","love69","tyler1","typhoon","tundra","bobby1","kenworth","village","volley","beth","wolf359","0420","000007","swimmer","skydive","smokes","patty","peugeot","pompey","legolas","kristy","redhot","rodman","redalert","having","grapes","4runner","carrera","floppy","dollars","ou8122","quattro","adams","cloud9","davids","nofear","busty","homemade","mmmmm","whisper","vermont","webmaste","wives","insertion","jayjay","philips","phone","topher","tongue","temptress","midget","ripken","havefun","gretchen","canon","celebrity","five","getting","ghetto","direct","otto","ragnarok","trinidad","usnavy","conover","cruiser","dalshe","nicole1","buzzard","hottest","kingfish","misfit","moore","milfnew","warlord","wassup","bigsexy","blackhaw","zippy","shearer","tights","thursday","kungfu","labia","journey","meatloaf","marlene","rider","area51","batman1","bananas","636363","cancel","ggggg","paradox","mack","lynn","queens","adults","aikido","cigars","nova","hoosier","eeyore","moose1","warez","interacial","streaming","313131","pertinant","pool6123","mayday","rivers","revenge","animated","banker","baddest","gordon24","ccccc","fortune","fantasies","touching","aisan","deadman","homepage","ejaculation","whocares","iscool","jamesbon","1956","1pussy","womam","sweden","skidoo","spock","sssss","petra","pepper1","pinhead","micron","allsop","amsterda","army","aside","gunnar","666999","chip","foot","fowler","february","face","fletch","george1","sapper","science","sasha1","luckydog","lover1","magick","popopo","public","ultima","derek","cypress","booker","businessbabe","brandon1","edwards","experience","vulva","vvvv","jabroni","bigbear","yummy","010203","searay","secret1","showing","sinbad","sexxxx","soleil","software","piccolo","thirteen","leopard","legacy","jensen","justine","memorex","marisa","mathew","redwing","rasputin","134679","anfield","greenbay","gore","catcat","feather","scanner","pa55word","contortionist","danzig","daisy1","hores","erik","exodus","vinnie","iiiiii","zero","1001","subway","tank","second","snapple","sneakers","sonyfuck","picks","poodle","test1234","their","llll","junebug","june","marker","mellon","ronaldo","roadkill","amanda1","asdfjkl","beaches","greene","great1","cheerleaers","force","doitnow","ozzy","madeline","radio","tyson","christian","daphne","boxster","brighton","housewifes","emmanuel","emerson","kkkk","mnbvcx","moocow","vides","wagner","janet","1717","bigmoney","blonds","1000","storys","stereo","4545","420247","seductive","sexygirl","lesbean","live","justin1","124578","animals","balance","hansen","cabbage","canadian","gangbanged","dodge1","dimas","lori","loud","malaka","puss","probes","adriana","coolman","crawford","dante","nacked","hotpussy","erotica","kool","mirror","wearing","implants","intruder","bigass","zenith","woohoo","womans","tanya","tango","stacy","pisces","laguna","krystal","maxell","andyod22","barcelon","chainsaw","chickens","flash1","downtown","orgasms","magicman","profit","pusyy","pothead","coconut","chuckie","contact","clevelan","designer","builder","budweise","hotshot","horizon","hole","experienced","mondeo","wifes","1962","strange","stumpy","smiths","sparks","slacker","piper","pitchers","passwords","laptop","jeremiah","allmine","alliance","bbbbbbb","asscock","halflife","grandma","hayley","88888","cecilia","chacha","saratoga","sandy1","santos","doogie","number","positive","qwert40","transexual","crow","close-up","darrell","bonita","ib6ub9","volvo","jacob1","iiiii","beastie","sunnyday","stoned","sonics","starfire","snapon","pictuers","pepe","testing1","tiberius","lisalisa","lesbain","litle","retard","ripple","austin1","badgirl","golfgolf","flounder","garage","royals","dragoon","dickie","passwor","ocean","majestic","poppop","trailers","dammit","nokia","bobobo","br549","emmitt","knock","minime","mikemike","whitesox","1954","3232","353535","seamus","solo","sparkle","sluttey","pictere","titten","lback","1024","angelina","goodluck","charlton","fingerig","gallaries","goat","ruby","passme","oasis","lockerroom","logan1","rainman","twins","treasure","absolutely","club","custom","cyclops","nipper","bucket","homepage-","hhhhh","momsuck","indain","2345","beerbeer","bimmer","susanne","stunner","stevens","456456","shell","sheba","tootsie","tiny","testerer","reefer","really","1012","harcore","gollum","545454","chico","caveman","carole","fordf150","fishes","gaymen","saleen","doodoo","pa55w0rd","looney","presto","qqqqq","cigar","bogey","brewer","helloo","dutch","kamikaze","monte","wasser","vietnam","visa","japanees","0123","swords","slapper","peach","jump","marvel","masterbaiting","march","redwood","rolling","1005","ametuer","chiks","cathy","callaway","fucing","sadie1","panasoni","mamas","race","rambo","unknown","absolut","deacon","dallas1","housewife","kristi","keywest","kirsten","kipper","morning","wings","idiot","18436572","1515","beating","zxczxc","sullivan","303030","shaman","sparrow","terrapin","jeffery","masturbation","mick","redfish","1492","angus","barrett","goirish","hardcock","felicia","forfun","galary","freeporn","duchess","olivier","lotus","pornographic","ramses","purdue","traveler","crave","brando","enter1","killme","moneyman","welder","windsor","wifey","indon","yyyyy","stretch","taylor1","4417","shopping","picher","pickup","thumbnils","johnboy","jets","jess","maureen","anne","ameteur","amateurs","apollo13","hambone","goldwing","5050","charley","sally1","doghouse","padres","pounding","quest","truelove","underdog","trader","crack","climber","bolitas","bravo","hohoho","model","italian","beanie","beretta","wrestlin","stroker","tabitha","sherwood","sexyman","jewels","johannes","mets","marcos","rhino","bdsm","balloons","goodman","grils","happy123","flamingo","games","route66","devo","dino","outkast","paintbal","magpie","llllllll","twilight","critter","christie","cupcake","nickel","bullseye","krista","knickerless","mimi","murder","videoes","binladen","xerxes","slim","slinky","pinky","peterson","thanatos","meister","menace","ripley","retired","albatros","balloon","bank","goten","5551212","getsdown","donuts","divorce","nwo4life","lord","lost","underwear","tttt","comet","deer","damnit","dddddddd","deeznutz","nasty1","nonono","nina","enterprise","eeeee","misfit99","milkman","vvvvvv","isaac","1818","blueboy","beans","bigbutt","wyatt","tech","solution","poetry","toolman","laurel","juggalo","jetski","meredith","barefoot","50spanks","gobears","scandinavian","original","truman","cubbies","nitram","briana","ebony","kings","warner","bilbo","yumyum","zzzzzzz","stylus","321654","shannon1","server","secure","silly","squash","starman","steeler","staples","phrases","techniques","laser","135790","allan","barker","athens","cbr600","chemical","fester","gangsta","fucku2","freeze","game","salvador","droopy","objects","passwd","lllll","loaded","louis","manchester","losers","vedder","clit","chunky","darkman","damage","buckshot","buddah","boobed","henti","hillary","webber","winter1","ingrid","bigmike","beta","zidane","talon","slave1","pissoff","person","thegreat","living","lexus","matador","readers","riley","roberta","armani","ashlee","goldstar","5656","cards","fmale","ferris","fuking","gaston","fucku","ggggggg","sauron","diggler","pacers","looser","pounded","premier","pulled","town","trisha","triangle","cornell","collin","cosmic","deeper","depeche","norway","bright","helmet","kristine","kendall","mustard","misty1","watch","jagger","bertie","berger","word","3x7pxr","silver1","smoking","snowboar","sonny","paula","penetrating","photoes","lesbens","lambert","lindros","lillian","roadking","rockford","1357","143143","asasas","goodboy","898989","chicago1","card","ferrari1","galeries","godfathe","gawker","gargoyle","gangster","rubble","rrrr","onetime","pussyman","pooppoop","trapper","twenty","abraham","cinder","company","newcastl","boricua","bunny1","boxer","hotred","hockey1","hooper","edward1","evan","kris","misery","moscow","milk","mortgage","bigtit","show","snoopdog","three","lionel","leanne","joshua1","july","1230","assholes","cedric","fallen","farley","gene","frisky","sanity","script","divine","dharma","lucky13","property","tricia","akira","desiree","broadway","butterfly","hunt","hotbox","hootie","heat","howdy","earthlink","karma","kiteboy","motley","westwood","1988","bert","blackbir","biggles","wrench","working","wrestle","slippery","pheonix","penny1","pianoman","tomorrow","thedude","jenn","jonjon","jones1","mattie","memory","micheal","roadrunn","arrow","attitude","azzer","seahawks","diehard","dotcom","lola","tunafish","chivas","cinnamon","clouds","deluxe","northern","nuclear","north","boom","boobie","hurley","krishna","momomo","modles","volume","23232323","bluedog","wwwwwww","zerocool","yousuck","pluto","limewire","link","joung","marcia","awnyce","gonavy","haha","films+pic+galeries","fabian","francois","girsl","fuckthis","girfriend","rufus","drive","uncencored","a123456","airport","clay","chrisbln","combat","cygnus","cupoi","never","netscape","brett","hhhhhhhh","eagles1","elite","knockers","kendra","mommy","1958","tazmania","shonuf","piano","pharmacy","thedog","lips","jillian","jenkins","midway","arsenal1","anaconda","australi","gromit","gotohell","787878","66666","carmex2","camber","gator1","ginger1","fuzzy","seadoo","dorian","lovesex","rancid","uuuuuu","911911","nature","bulldog1","helen","health","heater","higgins","kirk","monalisa","mmmmmmm","whiteout","virtual","ventura","jamie1","japanes","james007","2727","2469","blam","bitchass","believe","zephyr","stiffy","sweet1","silent","southpar","spectre","tigger1","tekken","lenny","lakota","lionking","jjjjjjj","medical","megatron","1369","hawaiian","gymnastic","golfer1","gunners","7779311","515151","famous","glass","screen","rudy","royal","sanfran","drake","optimus","panther1","love1","mail","maggie1","pudding","venice","aaron1","delphi","niceass","bounce","busted","house1","killer1","miracle","momo","musashi","jammin","2003","234567","wp2003wp","submit","silence","sssssss","state","spikes","sleeper","passwort","toledo","kume","media","meme","medusa","mantis","remote","reading","reebok","1017","artemis","hampton","harry1","cafc91","fettish","friendly","oceans","oooooooo","mango","ppppp","trainer","troy","uuuu","909090","cross","death1","news","bullfrog","hokies","holyshit","eeeeeee","mitch","jasmine1","&amp","&amp;","sergeant","spinner","leon","jockey","records","right","babyblue","hans","gooner","474747","cheeks","cars","candice","fight","glow","pass1234","parola","okokok","pablo","magical","major","ramsey","poseidon","989898","confused","circle","crusher","cubswin","nnnn","hollywood","erin","kotaku","milo","mittens","whatsup","vvvvv","iomega","insertions","bengals","bermuda","biit","yellow1","012345","spike1","south","sowhat","pitures","peacock","pecker","theend","juliette","jimmie","romance","augusta","hayabusa","hawkeyes","castro","florian","geoffrey","dolly","lulu","qaz123","usarmy","twinkle","cloud","chuckles","cold","hounddog","hover","hothot","europa","ernie","kenshin","kojak","mikey1","water1","196969","because","wraith","zebra","wwwww","33333","simon1","spider1","snuffy","philippe","thunderb","teddy1","lesley","marino13","maria1","redline","renault","aloha","antoine","handyman","cerberus","gamecock","gobucks","freesex","duffman","ooooo","papa","nuggets","magician","longbow","preacher","porno1","county","chrysler","contains","dalejr","darius","darlene","dell","navy","buffy1","hedgehog","hoosiers","honey1","hott","heyhey","europe","dutchess","everest","wareagle","ihateyou","sunflowe","3434","senators","shag","spoon","sonoma","stalker","poochie","terminal","terefon","laurence","maradona","maryann","marty","roman","1007","142536","alibaba","america1","bartman","astro","goth","century","chicken1","cheater","four","ghost1","passpass","oral","r2d2c3po","civic","cicero","myxworld","kkkkk","missouri","wishbone","infiniti","jameson","1a2b3c","1qwerty","wonderboy","skip","shojou","stanford","sparky1","smeghead","poiuy","titanium","torres","lantern","jelly","jeanne","meier","1213","bayern","basset","gsxr750","cattle","charlene","fishing1","fullmoon","gilles","dima","obelix","popo","prissy","ramrod","unique","absolute","bummer","hotone","dynasty","entry","konyor","missy1","moses","282828","yeah","xyz123","stop","426hemi","404040","seinfeld","simmons","pingpong","lazarus","matthews","marine1","manning","recovery","12345a","beamer","babyface","greece","gustav","7007","charity","camilla","ccccccc","faggot","foxy","frozen","gladiato","duckie","dogfood","paranoid","packers1","longjohn","radical","tuna","clarinet","claudio","circus","danny1","novell","nights","bonbon","kashmir","kiki","mortimer","modelsne","moondog","monaco","vladimir","insert","1953","zxc123","supreme","3131","sexxx","selena","softail","poipoi","pong","together","mars","martin1","rogue","alone","avalanch","audia4","55bgates","cccccccc","chick","came11","figaro","geneva","dogboy","dnsadm","dipshit","paradigm","othello","operator","officer","malone","post","rafael","valencia","tripod","choice","chopin","coucou","coach","cocksuck","common","creature","borussia","book","browning","heritage","hiziad","homerj","eight","earth","millions","mullet","whisky","jacques","store","4242","speedo","starcraf","skylar","spaceman","piggy","pierce","tiger2","legos","lala","jezebel","judy","joker1","mazda","barton","baker","727272","chester1","fishman","food","rrrrrrrr","sandwich","dundee","lumber","magazine","radar","ppppppp","tranny","aaliyah","admiral","comics","cleo","delight","buttfuck","homeboy","eternal","kilroy","kellie","khan","violin","wingman","walmart","bigblue","blaze","beemer","beowulf","bigfish","yyyyyyy","woodie","yeahbaby","0123456","tbone","style","syzygy","starter","lemon","linda1","merlot","mexican","11235813","anita","banner","bangbang","badman","barfly","grease","carla","charles1","ffffffff","screw","doberman","diane","dogshit","overkill","counter","coolguy","claymore","demons","demo","nomore","normal","brewster","hhhhhhh","hondas","iamgod","enterme","everett","electron","eastside","kayla","minimoni","mybaby","wildbill","wildcard","ipswich","200000","bearcat","zigzag","yyyyyyyy","xander","sweetnes","369369","skyler","skywalker","pigeon","peyton","tipper","lilly","asdf123","alphabet","asdzxc","babybaby","banane","barnes","guyver","graphics","grand","chinook","florida1","flexible","fuckinside","otis","ursitesux","tototo","trust","tower","adam12","christma","corey","chrome","buddie","bombers","bunker","hippie","keegan","misfits","vickie","292929","woofer","wwwwwwww","stubby","sheep","secrets","sparta","stang","spud","sporty","pinball","jorge","just4fun","johanna","maxxxx","rebecca1","gunther","fatima","fffffff","freeway","garion","score","rrrrr","sancho","outback","maggot","puddin","trial","adrienne","987456","colton","clyde","brain","brains","hoops","eleanor","dwayne","kirby","mydick","villa","19691969","bigcat","becker","shiner","silverad","spanish","templar","lamer","juicy","marsha","mike1","maximum","rhiannon","real","1223","10101010","arrows","andres","alucard","baldwin","baron","avenue","ashleigh","haggis","channel","cheech","safari","ross","dog123","orion1","paloma","qwerasdf","presiden","vegitto","trees","969696","adonis","colonel","cookie1","newyork1","brigitte","buddyboy","hellos","heineken","dwight","eraser","kerstin","motion","moritz","millwall","visual","jaybird","1983","beautifu","bitter","yvette","zodiac","steven1","sinister","slammer","smashing","slick1","sponge","teddybea","theater","this","ticklish","lipstick","jonny","massage","mann","reynolds","ring","1211","amazing","aptiva","applepie","bailey1","guitar1","chanel","canyon","gagged","fuckme1","rough","digital1","dinosaur","punk","98765","90210","clowns","cubs","daniels","deejay","nigga","naruto","boxcar","icehouse","hotties","electra","kent","widget","india","insanity","1986","2004","best","bluefish","bingo1","*****","stratus","strength","sultan","storm1","44444","4200","sentnece","season","sexyboy","sigma","smokie","spam","point","pippo","ticket","temppass","joel","manman","medicine","1022","anton","almond","bacchus","aztnm","axio","awful","bamboo","hakr","gregor","hahahaha","5678","casanova","caprice","camero1","fellow","fountain","dupont","dolphin1","dianne","paddle","magnet","qwert1","pyon","porsche1","tripper","vampires","coming","noway","burrito","bozo","highheel","hughes","hookem","eddie1","ellie","entropy","kkkkkkkk","kkkkkkk","illinois","jacobs","1945","1951","24680","21212121","100000","stonecold","taco","subzero","sharp","sexxxy","skolko","shanna","skyhawk","spurs1","sputnik","piazza","testpass","letter","lane","kurt","jiggaman","matilda","1224","harvard","hannah1","525252","4ever","carbon","chef","federico","ghosts","gina","scorpio1","rt6ytere","madison1","loki","raquel","promise","coolness","christina","coldbeer","citadel","brittney","highway","evil","monarch","morgan1","washingt","1997","bella1","berry","yaya","yolanda","superb","taxman","studman","stephanie","3636","sherri","sheriff","shepherd","poland","pizzas","tiffany1","toilet","latina","lassie","larry1","joseph1","mephisto","meagan","marian","reptile","rico","razor","1013","barron","hammer1","gypsy","grande","carroll","camper","chippy","cat123","call","chimera","fiesta","glock","glenn","domain","dieter","dragonba","onetwo","nygiants","odessa","password2","louie","quartz","prowler","prophet","towers","ultra","cocker","corleone","dakota1","cumm","nnnnnnn","natalia","boxers","hugo","heynow","hollow","iceberg","elvira","kittykat","kate","kitchen","wasabi","vikings1","impact","beerman","string","sleep","splinter","snoopy1","pipeline","pocket","legs","maple","mickey1","manuela","mermaid","micro","meowmeow","redbird","alisha","baura","battery","grass","chevys","chestnut","caravan","carina","charmed","fraser","frogman","diving","dogger","draven","drifter","oatmeal","paris1","longdong","quant4307s","rachel1","vegitta","cole","cobras","corsair","dadada","noelle","mylife","nine","bowwow","body","hotrats","eastwood","moonligh","modena","wave","illusion","iiiiiii","jayhawks","birgit","zone","sutton","susana","swingers","shocker","shrimp","sexgod","squall","stefanie","squeeze","soul","patrice","poiu","players","tigers1","toejam","tickler","line","julie1","jimbo1","jefferso","juanita","michael2","rodeo","robot","1023","annie1","bball","guess","happy2","charter","farm","flasher","falcon1","fiction","fastball","gadget","scrabble","diaper","dirtbike","dinner","oliver1","partner","paco","lucille","macman","poopy","popper","postman","ttttttt","ursula","acura","cowboy1","conan","daewoo","cyrus","customer","nation","nemrac58","nnnnn","nextel","bolton","bobdylan","hopeless","eureka","extra","kimmie","kcj9wx5n","killbill","musica","volkswag","wage","windmill","wert","vintage","iloveyou1","itsme","bessie","zippo","311311","starligh","smokey1","spot","snappy","soulmate","plasma","thelma","tonight","krusty","just4me","mcdonald","marius","rochelle","rebel1","1123","alfredo","aubrey","audi","chantal","fick","goaway","roses","sales","rusty2","dirt","dogbone","doofus","ooooooo","oblivion","mankind","luck","mahler","lllllll","pumper","puck","pulsar","valkyrie","tupac","compass","concorde","costello","cougars","delaware","niceguy","nocturne","bob123","boating","bronze","hopkins","herewego","hewlett","houhou","hubert","earnhard","eeeeeeee","keller","mingus","mobydick","venture","verizon","imation","1950","1948","1949","223344","bigbig","blossom","zack","wowwow","sissy","skinner","spiker","square","snooker","sluggo","player1","junk","jeannie","jsbach","jumbo","jewel","medic","robins","reddevil","reckless","123456a","1125","1031","beacon","astra","gumby","hammond","hassan","757575","585858","chillin","fuck1","sander","lowell","radiohea","upyours","trek","courage","coolcool","classics","choochoo","darryl","nikki1","nitro","bugs","boytoy","ellen","excite","kirsty","kane","wingnut","wireless","icu812","1master","beatle","bigblock","blanca","wolfen","summer99","sugar1","tartar","sexysexy","senna","sexman","sick","someone","soprano","pippin","platypus","pixies","telephon","land","laura1","laurent","rimmer","road","report","1020","12qwaszx","arturo","around","hamish","halifax","fishhead","forum","dododo","doit","outside","paramedi","lonesome","mandy1","twist","uuuuu","uranus","ttttt","butcher","bruce1","helper","hopeful","eduard","dusty1","kathy1","katherin","moonbeam","muscles","monster1","monkeybo","morton","windsurf","vvvvvvv","vivid","install","1947","187187","1941","1952","tatiana","susan1","31415926","sinned","sexxy","senator","sebastian","shadows","smoothie","snowflak","playstat","playa","playboy1","toaster","jerry1","marie1","mason1","merlin1","roger1","roadster","112358","1121","andrea1","bacardi","auto","hardware","hardy","789789","5555555","captain1","flores","fergus","sascha","rrrrrrr","dome","onion","nutter","lololo","qqqqqqq","quick","undertak","uuuuuuuu","uuuuuuu","criminal","cobain","cindy1","coors","dani","descent","nimbus","nomad","nanook","norwich","bomb","bombay","broker","hookup","kiwi","winners","jackpot","1a2b3c4d","1776","beardog","bighead","blast","bird33","0987","stress","shot","spooge","pelican","peepee","perry","pointer","titan","thedoors","jeremy1","annabell","altima","baba","hallie","hate","hardone","5454","candace","catwoman","flip","faithful","finance","farmboy","farscape","genesis1","salomon","destroy","papers","option","page","loser1","lopez","r2d2","pumpkins","training","chriss","cumcum","ninjas","ninja1","hung","erika","eduardo","killers","miller1","islander","jamesbond","intel","jarvis","19841984","2626","bizzare","blue12","biker","yoyoma","sushi","styles","shitface","series","shanti","spanker","steffi","smart","sphinx","please1","paulie","pistons","tiburon","limited","maxwell1","mdogg","rockies","armstron","alexia","arlene","alejandr","arctic","banger","audio","asimov","augustus","grandpa","753951","4you","chilly","care1839","chapman","flyfish","fantasia","freefall","santa","sandrine","oreo","ohshit","macbeth","madcat","loveya","mallory","rage","quentin","qwerqwer","project","ramirez","colnago","citizen","chocha","cobalt","crystal1","dabears","nevets","nineinch","broncos1","helene","huge","edgar","epsilon","easter","kestrel","moron","virgil","winston1","warrior1","iiiiiiii","iloveyou2","1616","beat","bettina","woowoo","zander","straight","shower","sloppy","specialk","tinkerbe","jellybea","reader","romero","redsox1","ride","1215","1112","annika","arcadia","answer","baggio","base","guido","555666","carmel","cayman","cbr900rr","chips","gabriell","gertrude","glennwei","roxy","sausages","disco","pass1","luna","lovebug","macmac","queenie","puffin","vanguard","trip","trinitro","airwolf","abbott","aaa111","cocaine","cisco","cottage","dayton","deadly","datsun","bricks","bumper","eldorado","kidrock","wizard1","whiskers","wind","wildwood","istheman","interest","italy","25802580","benoit","bigones","woodland","wolfpac","strawber","suicide","3030","sheba1","sixpack","peace1","physics","pearson","tigger2","toad","megan1","meow","ringo","roll","amsterdam","717171","686868","5424","catherine","canuck","football1","footjob","fulham","seagull","orgy","lobo","mancity","truth","trace","vancouve","vauxhall","acidburn","derf","myspace1","boozer","buttercu","howell","hola","easton","minemine","munch","jared","1dragon","biology","bestbuy","bigpoppa","blackout","blowfish","bmw325","bigbob","stream","talisman","tazz","sundevil","3333333","skate","shutup","shanghai","shop","spencer1","slowhand","polish","pinky1","tootie","thecrow","leroy","jonathon","jubilee","jingle","martine","matrix1","manowar","michaels","messiah","mclaren","resident","reilly","redbaron","rollins","romans","return","rivera","andromed","athlon","beach1","badgers","guitars","harald","harddick","gotribe","6996","7grout","5wr2i7h8","635241","chase1","carver","charlotte","fallout","fiddle","fredrick","fenris","francesc","fortuna","ferguson","fairlane","felipe","felix1","forward","gasman","frost","fucks","sahara","sassy1","dogpound","dogbert","divx1","manila","loretta","priest","pornporn","quasar","venom","987987","access1","clippers","daylight","decker","daman","data","dentist","crusty","nathan1","nnnnnnnn","bruno1","bucks","brodie","budapest","kittens","kerouac","mother1","waldo1","wedding","whistler","whatwhat","wanderer","idontkno","1942","1946","bigdawg","bigpimp","zaqwsx","414141","3000gt","434343","shoes","serpent","starr","smurf","pasword","tommie","thisisit","lake","john1","robotics","redeye","rebelz","1011","alatam","asses","asians","bama","banzai","harvest","gonzalez","hair","hanson","575757","5329","cascade","chinese","fatty","fender1","flower2","funky","sambo","drummer1","dogcat","dottie","oedipus","osama","macleod","prozac","private1","rampage","punch","presley","concord","cook","cinema","cornwall","cleaner","christopher","ciccio","corinne","clutch","corvet07","daemon","bruiser","boiler","hjkl","eyes","egghead","expert","ethan","kasper","mordor","wasted","jamess","iverson3","bluesman","zouzou","090909","1002","switch","stone1","4040","sisters","sexo","shawna","smith1","sperma","sneaky","polska","thewho","terminat","krypton","lawson","library","lekker","jules","johnson1","johann","justus","rockie","romano","aspire","bastards","goodie","cheese1","fenway","fishon","fishin","fuckoff1","girls1","sawyer","dolores","desmond","duane","doomsday","pornking","ramones","rabbits","transit","aaaaa1","clock","delilah","noel","boyz","bookworm","bongo","bunnies","brady","buceta","highbury","henry1","heels","eastern","krissy","mischief","mopar","ministry","vienna","weston","wildone","vodka","jayson","bigbooty","beavis1","betsy","xxxxxx1","yogibear","000001","0815","zulu","420000","september","sigmar","sprout","stalin","peggy","patch","lkjhgfds","lagnaf","rolex","redfox","referee","123123123","1231","angus1","ariana","ballin","attila","hall","greedy","grunt","747474","carpedie","cecile","caramel","foxylady","field","gatorade","gidget","futbol","frosch","saiyan","schmidt","drums","donner","doggy1","drum","doudou","pack","pain","nutmeg","quebec","valdepen","trash","triple","tosser","tuscl","track","comfort","choke","comein","cola","deputy","deadpool","bremen","borders","bronson","break","hotass","hotmail1","eskimo","eggman","koko","kieran","katrin","kordell1","komodo","mone","munich","vvvvvvvv","winger","jaeger","ivan","jackson5","2222222","bergkamp","bennie","bigben","zanzibar","worm","xxx123","sunny1","373737","services","sheridan","slater","slayer1","snoop","stacie","peachy","thecure","times","little1","jennaj","marquis","middle","rasta69","1114","aries","havana","gratis","calgary","checkers","flanker","salope","dirty1","draco","dogface","luv2epus","rainbow6","qwerty123","umpire","turnip","vbnm","tucson","troll","aileen","codered","commande","damon","nana","neon","nico","nightwin","neil","boomer1","bushido","hotmail0","horace","enternow","kaitlyn","keepout","karen1","mindy","mnbv","viewsoni","volcom","wizards","wine","1995","berkeley","bite","zach","woodstoc","tarpon","shinobi","starstar","phat","patience","patrol","toolbox","julien","johnny1","joebob","marble","riders","reflex","120676","1235","angelus","anthrax","atlas","hawks","grandam","harlem","hawaii50","gorgeous","655321","cabron","challeng","callisto","firewall","firefire","fischer","flyer","flower1","factory","federal","gambler","frodo1","funk","sand","sam123","scania","dingo","papito","passmast","olive","palermo","ou8123","lock","ranch","pride","randy1","twiggy","travis1","transfer","treetop","addict","admin1","963852","aceace","clarissa","cliff","cirrus","clifton","colin","bobdole","bonner","bogus","bonjovi","bootsy","boater","elway7","edison","kelvin","kenny1","moonshin","montag","moreno","wayne1","white1","jazzy","jakejake","1994","1991","2828","blunt","bluejays","beau","belmont","worthy","systems","sensei","southpark","stan","peeper","pharao","pigpen","tomahawk","teensex","leedsutd","larkin","jermaine","jeepster","jimjim","josephin","melons","marlon","matthias","marriage","robocop","1003","1027","antelope","azsxdc","gordo","hazard","granada","8989","7894","ceasar","cabernet","cheshire","california","chelle","candy1","fergie","fanny","fidelio","giorgio","fuckhead","ruth","sanford","diego","dominion","devon","panic","longer","mackie","qawsed","trucking","twelve","chloe1","coral","daddyo","nostromo","boyboy","booster","bucky","honolulu","esquire","dynamite","motor","mollydog","wilder","windows1","waffle","wallet","warning","virus","washburn","wealth","vincent1","jabber","jaguars","javelin","irishman","idefix","bigdog1","blue42","blanked","blue32","biteme1","bearcats","blaine","yessir","sylveste","team","stephan","sunfire","tbird","stryker","3ip76k2","sevens","sheldon","pilgrim","tenchi","titman","leeds","lithium","lander","linkin","landon","marijuan","mariner","markie","midnite","reddwarf","1129","123asd","12312312","allstar","albany","asdf12","antonia","aspen","hardball","goldfing","7734","49ers","carlo","chambers","cable","carnage","callum","carlos1","fitter","fandango","festival","flame","gofast","gamma","fucmy69","scrapper","dogwood","django","magneto","loose","premium","addison","9999999","abc1234","cromwell","newyear","nichole","bookie","burns","bounty","brown1","bologna","earl","entrance","elway","killjoy","kerry","keenan","kick","klondike","mini","mouser","mohammed","wayer","impreza","irene","insomnia","24682468","2580","24242424","billbill","bellaco","blessing","blues1","bedford","blanco","blunts","stinks","teaser","streets","sf49ers","shovel","solitude","spikey","sonia","pimpdadd","timeout","toffee","lefty","johndoe","johndeer","mega","manolo","mentor","margie","ratman","ridge","record","rhodes","robin1","1124","1210","1028","1226","another","babylove","barbados","harbor","gramma","646464","carpente","chaos1","fishbone","fireblad","glasgow","frogs","scissors","screamer","salem","scuba1","ducks","driven","doggies","dicky","donovan","obsidian","rams","progress","tottenham","aikman","comanche","corolla","clarke","conway","cumslut","cyborg","dancing","boston1","bong","houdini","helmut","elvisp","edge","keksa12","misha","monty1","monsters","wetter","watford","wiseguy","veronika","visitor","janelle","1989","1987","20202020","biatch","beezer","bigguns","blueball","bitchy","wyoming","yankees2","wrestler","stupid1","sealteam","sidekick","simple1","smackdow","sporting","spiral","smeller","sperm","plato","tophat","test2","theatre","thick","toomuch","leigh","jello","jewish","junkie","maxim","maxime","meadow","remingto","roofer","124038","1018","1269","1227","123457","arkansas","alberta","aramis","andersen","beaker","barcelona","baltimor","googoo","goochi","852456","4711","catcher","carman","champ1","chess","fortress","fishfish","firefigh","geezer","rsalinas","samuel1","saigon","scooby1","doors","dick1","devin","doom","dirk","doris","dontknow","load","magpies","manfred","raleigh","vader1","universa","tulips","defense","mygirl","burn","bowtie","bowman","holycow","heinrich","honeys","enforcer","katherine","minerva","wheeler","witch","waterboy","jaime","irving","1992","23skidoo","bimbo","blue11","birddog","woodman","womble","zildjian","030303","stinker","stoppedby","sexybabe","speakers","slugger","spotty","smoke1","polopolo","perfect1","things","torpedo","tender","thrasher","lakeside","lilith","jimmys","jerk","junior1","marsh","masamune","rice","root","1214","april1","allgood","bambi","grinch","767676","5252","cherries","chipmunk","cezer121","carnival","capecod","finder","flint","fearless","goats","funstuff","gideon","savior","seabee","sandro","schalke","salasana","disney1","duckman","options","pancake","pantera1","malice","lookin","love123","lloyd","qwert123","puppet","prayers","union","tracer","crap","creation","cwoui","nascar24","hookers","hollie","hewitt","estrella","erection","ernesto","ericsson","edthom","kaylee","kokoko","kokomo","kimball","morales","mooses","monk","walton","weekend","inter","internal","1michael","1993","19781978","25252525","worker","summers","surgery","shibby","shamus","skibum","sheepdog","sex69","spliff","slipper","spoons","spanner","snowbird","slow","toriamos","temp123","tennesse","lakers1","jomama","julio","mazdarx7","rosario","recon","riddle","room","revolver","1025","1101","barney1","babycake","baylor","gotham","gravity","hallowee","hancock","616161","515000","caca","cannabis","castor","chilli","fdsa","getout","fuck69","gators1","sail","sable","rumble","dolemite","dork","dickens","duffer","dodgers1","painting","onions","logger","lorena","lookout","magic32","port","poon","prime","twat","coventry","citroen","christmas","civicsi","cocksucker","coochie","compaq1","nancy1","buzzer","boulder","butkus","bungle","hogtied","honor","hero","hotgirls","hilary","heidi1","eggplant","mustang6","mortal","monkey12","wapapapa","wendy1","volleyba","vibrate","vicky","bledsoe","blink","birthday4","woof","xxxxx1","talk","stephen1","suburban","stock","tabatha","sheeba","start1","soccer10","something","starcraft","soccer12","peanut1","plastics","penthous","peterbil","tools","tetsuo","torino","tennis1","termite","ladder","last","lemmein","lakewood","jughead","melrose","megane","reginald","redone","request","angela1","alive","alissa","goodgirl","gonzo1","golden1","gotyoass","656565","626262","capricor","chains","calvin1","foolish","fallon","getmoney","godfather","gabber","gilligan","runaway","salami","dummy","dungeon","dudedude","dumb","dope","opus","paragon","oxygen","panhead","pasadena","opendoor","odyssey","magellan","lottie","printing","pressure","prince1","trustme","christa","court","davies","neville","nono","bread","buffet","hound","kajak","killkill","mona","moto","mildred","winner1","vixen","whiteboy","versace","winona","voyager1","instant","indy","jackjack","bigal","beech","biggun","blake1","blue99","big1","woods","synergy","success1","336699","sixty9","shark1","skin","simba1","sharpe","sebring","spongebo","spunk","springs","sliver","phialpha","password9","pizza1","plane","perkins","pookey","tickling","lexingky","lawman","joe123","jolly","mike123","romeo1","redheads","reserve","apple123","alanis","ariane","antony","backbone","aviation","band","hand","green123","haley","carlitos","byebye","cartman1","camden","chewy","camaross","favorite6","forumwp","franks","ginscoot","fruity","sabrina1","devil666","doughnut","pantie","oldone","paintball","lumina","rainbow1","prosper","total","true","umbrella","ajax","951753","achtung","abc12345","compact","color","corn","complete","christi","closer","corndog","deerhunt","darklord","dank","nimitz","brandy1","bowl","breanna","holidays","hetfield","holein1","hillbill","hugetits","east","evolutio","kenobi","whiplash","waldo","wg8e3wjf","wing","istanbul","invis","1996","benton","bigjohn","bluebell","beef","beater","benji","bluejay","xyzzy","wrestling","storage","superior","suckdick","taichi","stellar","stephane","shaker","skirt","seymour","semper","splurge","squeak","pearls","playball","pitch","phyllis","pooky","piss","tomas","titfuck","joemama","johnny5","marcello","marjorie","married","maxi","rhubarb","rockwell","ratboy","reload","rooney","redd","1029","1030","1220","anchor","bbking","baritone","gryphon","gone","57chevy","494949","celeron","fishy","gladiator","fucker1","roswell","dougie","downer","dicker","diva","domingo","donjuan","nympho","omar","praise","racers","trick","trauma","truck1","trample","acer","corwin","cricket1","clemente","climax","denmark","cuervo","notnow","nittany","neutron","native","bosco1","buffa","breaker","hello2","hydro","estelle","exchange","explore","kisskiss","kittys","kristian","montecar","modem","mississi","mooney","weiner","washington","20012001","bigdick1","bibi","benfica","yahoo1","striper","tabasco","supra","383838","456654","seneca","serious","shuttle","socks","stanton","penguin1","pathfind","testibil","thethe","listen","lightning","lighting","jeter2","marma","mark1","metoo","republic","rollin","redleg","redbone","redskin","rocco","1245","armand","anthony7","altoids","andrews","barley","away","asswipe","bauhaus","bbbbbb1","gohome","harrier","golfpro","goldeney","818181","6666666","5000","5rxypn","cameron1","calling","checker","calibra","fields","freefree","faith1","fist","fdm7ed","finally","giraffe","glasses","giggles","fringe","gate","georgie","scamper","rrpass1","screwyou","duffy","deville","dimples","pacino","ontario","passthie","oberon","quest1","postov1000","puppydog","puffer","raining","protect","qwerty7","trey","tribe","ulysses","tribal","adam25","a1234567","compton","collie","cleopatr","contract","davide","norris","namaste","myrtle","buffalo1","bonovox","buckley","bukkake","burning","burner","bordeaux","burly","hun999","emilie","elmo","enters","enrique","keisha","mohawk","willard","vgirl","whale","vince","jayden","jarrett","1812","1943","222333","bigjim","bigd","zoom","wordup","ziggy1","yahooo","workout","young1","written","xmas","zzzzzz1","surfer1","strife","sunlight","tasha1","skunk","shauna","seth","soft","sprinter","peaches1","planes","pinetree","plum","pimping","theforce","thedon","toocool","leeann","laddie","list","lkjh","lara","joke","jupiter1","mckenzie","matty","rene","redrose","1200","102938","annmarie","alexa","antares","austin31","ground","goose1","737373","78945612","789987","6464","calimero","caster","casper1","cement","chevrolet","chessie","caddy","chill","child","canucks","feeling","favorite","fellatio","f00tball","francine","gateway2","gigi","gamecube","giovanna","rugby1","scheisse","dshade","dudes","dixie1","owen","offshore","olympia","lucas1","macaroni","manga","pringles","puff","tribble","trouble1","ussy","core","clint","coolhand","colonial","colt","debra","darthvad","dealer","cygnusx1","natalie1","newark","husband","hiking","errors","eighteen","elcamino","emmett","emilia","koolaid","knight1","murphy1","volcano","idunno","2005","2233","block","benito","blueberr","biguns","yamahar1","zapper","zorro1","0911","3006","sixsix","shopper","siobhan","sextoy","stafford","snowboard","speedway","sounds","pokey","peabody","playboy2","titi","think","toast","toonarmy","lister","lambda","joecool","jonas","joyce","juniper","mercer","max123","manny","massimo","mariposa","met2002","reggae","ricky1","1236","1228","1016","all4one","arianna","baberuth","asgard","gonzales","484848","5683","6669","catnip","chiquita","charisma","capslock","cashmone","chat","figure","galant","frenchy","gizmodo1","girlies","gabby","garner","screwy","doubled","divers","dte4uw","done","dragonfl","maker","locks","rachelle","treble","twinkie","trailer","tropical","acid","crescent","cooking","cococo","cory","dabomb","daffy","dandfa","cyrano","nathanie","briggs","boners","helium","horton","hoffman","hellas","espresso","emperor","killa","kikimora","wanda","w4g8at","verona","ilikeit","iforget","1944","20002000","birthday1","beatles1","blue1","bigdicks","beethove","blacklab","blazers","benny1","woodwork","0069","0101","taffy","susie","survivor","swim","stokes","4567","shodan","spoiled","steffen","pissed","pavlov","pinnacle","place","petunia","terrell","thirty","toni","tito","teenie","lemonade","lily","lillie","lalakers","lebowski","lalalala","ladyboy","jeeper","joyjoy","mercury1","mantle","mannn","rocknrol","riversid","reeves","123aaa","11112222","121314","1021","1004","1120","allen1","ambers","amstel","ambrose","alice1","alleycat","allegro","ambrosia","alley","australia","hatred","gspot","graves","goodsex","hattrick","harpoon","878787","8inches","4wwvte","cassandr","charlie123","case","chavez","fighting","gabriela","gatsby","fudge","gerry","generic","gareth","fuckme2","samm","sage","seadog","satchmo","scxakv","santafe","dipper","dingle","dizzy","outoutout","madmad","london1","qbg26i","pussy123","randolph","vaughn","tzpvaw","vamp","comedy","comp","cowgirl","coldplay","dawgs","delaney","nt5d27","novifarm","needles","notredam","newness","mykids","bryan1","bouncer","hihihi","honeybee","iceman1","herring","horn","hook","hotlips","dynamo","klaus","kittie","kappa","kahlua","muffy","mizzou","mohamed","musical","wannabe","wednesda","whatup","weller","waterfal","willy1","invest","blanche","bear1","billabon","youknow","zelda","yyyyyy1","zachary1","01234567","070462","zurich","superstar","storms","tail","stiletto","strat","427900","sigmachi","shelter","shells","sexy123","smile1","sophie1","stefano","stayout","somerset","smithers","playmate","pinkfloyd","phish1","payday","thebear","telefon","laetitia","kswbdu","larson","jetta","jerky","melina","metro","revoluti","retire","respect","1216","1201","1204","1222","1115","archange","barry1","handball","676767","chandra","chewbacc","flesh","furball","gocubs","fruit","fullback","gman","gentle","dunbar","dewalt","dominiqu","diver1","dhip6a","olemiss","ollie","mandrake","mangos","pretzel","pusssy","tripleh","valdez","vagabond","clean","comment","crew","clovis","deaths","dandan","csfbr5yy","deadspin","darrel","ninguna","noah","ncc74656","bootsie","bp2002","bourbon","brennan","bumble","books","hose","heyyou","houston1","hemlock","hippo","hornets","hurricane","horseman","hogan","excess","extensa","muffin1","virginie","werdna","idontknow","info","iron","jack1","1bitch","151nxjmt","bendover","bmwbmw","bills","zaq123","wxcvbn","surprise","supernov","tahoe","talbot","simona","shakur","sexyone","seviyi","sonja","smart1","speed1","pepito","phantom1","playoffs","terry1","terrier","laser1","lite","lancia","johngalt","jenjen","jolene","midori","message","maserati","matteo","mental","miami1","riffraff","ronald1","reason","rhythm","1218","1026","123987","1015","1103","armada","architec","austria","gotmilk","hawkins","gray","camila","camp","cambridg","charge","camero","flex","foreplay","getoff","glacier","glotest","froggie","gerbil","rugger","sanity72","salesman","donna1","dreaming","deutsch","orchard","oyster","palmtree","ophelia","pajero","m5wkqf","magenta","luckyone","treefrog","vantage","usmarine","tyvugq","uptown","abacab","aaaaaa1","advance","chuck1","delmar","darkange","cyclones","nate","navajo","nope","border","bubba123","building","iawgk2","hrfzlz","dylan1","enrico","encore","emilio","eclipse1","killian","kayleigh","mutant","mizuno","mustang2","video1","viewer","weed420","whales","jaguar1","insight","1990","159159","1love","bliss","bears1","bigtruck","binder","bigboss","blitz","xqgann","yeahyeah","zeke","zardoz","stickman","table","3825","signal","sentra","side","shiva","skipper1","singapor","southpaw","sonora","squid","slamdunk","slimjim","placid","photon","placebo","pearl1","test12","therock1","tiger123","leinad","legman","jeepers","joeblow","mccarthy","mike23","redcar","rhinos","rjw7x4","1102","13576479","112211","alcohol","gwju3g","greywolf","7bgiqk","7878","535353","4snz9g","candyass","cccccc1","carola","catfight","cali","fister","fosters","finland","frankie1","gizzmo","fuller","royalty","rugrat","sandie","rudolf","dooley","dive","doreen","dodo","drop","oemdlg","out3xf","paddy","opennow","puppy1","qazwsxedc","pregnant","quinn","ramjet","under","uncle","abraxas","corner","creed","cocoa","crown","cows","cn42qj","dancer1","death666","damned","nudity","negative","nimda2k","buick","bobb","braves1","brook","henrik","higher","hooligan","dust","everlast","karachi","mortis","mulligan","monies","motocros","wally1","weapon","waterman","view","willie1","vicki","inspiron","1test","2929","bigblack","xytfu7","yackwin","zaq1xsw2","yy5rbfsc","100100","0660","tahiti","takehana","talks","332211","3535","sedona","seawolf","skydiver","shine","spleen","slash","spjfet","special1","spooner","slimshad","sopranos","spock1","penis1","patches1","terri","thierry","thething","toohot","large","limpone","johnnie","mash4077","matchbox","masterp","maxdog","ribbit","reed","rita","rockin","redhat","rising","1113","14789632","1331","allday","aladin","andrey","amethyst","ariel","anytime","baseball1","athome","basil","goofy1","greenman","gustavo","goofball","ha8fyp","goodday","778899","charon","chappy","castillo","caracas","cardiff","capitals","canada1","cajun","catter","freddy1","favorite2","frazier","forme","follow","forsaken","feelgood","gavin","gfxqx686","garlic","sarge","saskia","sanjose","russ","salsa","dilbert1","dukeduke","downhill","longhair","loop","locutus","lockdown","malachi","mamacita","lolipop","rainyday","pumpkin1","punker","prospect","rambo1","rainbows","quake","twin","trinity1","trooper1","aimee","citation","coolcat","crappy","default","dental","deniro","d9ungl","daddys","napoli","nautica","nermal","bukowski","brick","bubbles1","bogota","board","branch","breath","buds","hulk","humphrey","hitachi","evans","ender","export","kikiki","kcchiefs","kram","morticia","montrose","mongo","waqw3p","wizzard","visited","whdbtp","whkzyc","image","154ugeiu","1fuck","binky","blind","bigred1","blubber","benz","becky1","year2005","wonderfu","wooden","xrated","0001","tampabay","survey","tammy1","stuffer","3mpz4r","3000","3some","selina","sierra1","shampoo","silk","shyshy","slapnuts","standby","spartan1","sprocket","sometime","stanley1","poker1","plus","thought","theshit","torture","thinking","lavalamp","light1","laserjet","jediknig","jjjjj1","jocelyn","mazda626","menthol","maximo","margaux","medic1","release","richter","rhino1","roach","renate","repair","reveal","1209","1234321","amigos","apricot","alexandra","asdfgh1","hairball","hatter","graduate","grimace","7xm5rq","6789","cartoons","capcom","cheesy","cashflow","carrots","camping","fanatic","fool","format","fleming","girlie","glover","gilmore","gardner","safeway","ruthie","dogfart","dondon","diapers","outsider","odin","opiate","lollol","love12","loomis","mallrats","prague","primetime21","pugsley","program","r29hqq","touch","valleywa","airman","abcdefg1","darkone","cummer","dempsey","damn","nadia","natedogg","nineball","ndeyl5","natchez","newone","normandy","nicetits","buddy123","buddys","homely","husky","iceland","hr3ytm","highlife","holla","earthlin","exeter","eatmenow","kimkim","karine","k2trix","kernel","kirkland","money123","moonman","miles1","mufasa","mousey","wilma","wilhelm","whites","warhamme","instinct","jackass1","2277","20spanks","blobby","blair","blinky","bikers","blackjack","becca","blue23","xman","wyvern","085tzzqi","zxzxzx","zsmj2v","suede","t26gn4","sugars","sylvie","tantra","swoosh","swiss","4226","4271","321123","383pdjvl","shoe","shane1","shelby1","spades","spain","smother","soup","sparhawk","pisser","photo1","pebble","phones","peavey","picnic","pavement","terra","thistle","tokyo","therapy","lives","linden","kronos","lilbit","linux","johnston","material","melanie1","marbles","redlight","reno","recall","1208","1138","1008","alchemy","aolsucks","alexalex","atticus","auditt","ballet","b929ezzh","goodyear","hanna","griffith","gubber","863abgsg","7474","797979","464646","543210","4zqauf","4949","ch5nmk","carlito","chewey","carebear","caleb","checkmat","cheddar","chachi","fever","forgetit","fine","forlife","giants1","gates","getit","gamble","gerhard","galileo","g3ujwg","ganja","rufus1","rushmore","scouts","discus","dudeman","olympus","oscars","osprey","madcow","locust","loyola","mammoth","proton","rabbit1","question","ptfe3xxp","pwxd5x","purple1","punkass","prophecy","uyxnyd","tyson1","aircraft","access99","abcabc","cocktail","colts","civilwar","cleveland","claudia1","contour","clement","dddddd1","cypher","denied","dapzu455","dagmar","daisydog","name","noles","butters","buford","hoochie","hotel","hoser","eddy","ellis","eldiablo","kingrich","mudvayne","motown","mp8o6d","wife","vipergts","italiano","innocent","2055","2211","beavers","bloke","blade1","yamato","zooropa","yqlgr667","050505","zxcvbnm1","zw6syj","suckcock","tango1","swing","stern","stephens","swampy","susanna","tammie","445566","333666","380zliki","sexpot","sexylady","sixtynin","sickboy","spiffy","sleeping","skylark","sparkles","slam","pintail","phreak","places","teller","timtim","tires","thighs","left","latex","llamas","letsdoit","lkjhg","landmark","letters","lizzard","marlins","marauder","metal1","manu","register","righton","1127","alain","alcat","amigo","basebal1","azertyui","attract","azrael","hamper","gotenks","golfgti","gutter","hawkwind","h2slca","harman","grace1","6chid8","789654","canine","casio","cazzo","chamber","cbr900","cabrio","calypso","capetown","feline","flathead","fisherma","flipmode","fungus","goal","g9zns4","full","giggle","gabriel1","fuck123","saffron","dogmeat","dreamcas","dirtydog","dunlop","douche","dresden","dickdick","destiny1","pappy","oaktree","lydia","luft4","puta","prayer","ramada","trumpet1","vcradq","tulip","tracy71","tycoon","aaaaaaa1","conquest","click","chitown","corps","creepers","constant","couples","code","cornhole","danman","dada","density","d9ebk7","cummins","darth","cute","nash","nirvana1","nixon","norbert","nestle","brenda1","bonanza","bundy","buddies","hotspur","heavy","horror","hufmqw","electro","erasure","enough","elisabet","etvww4","ewyuza","eric1","kinder","kenken","kismet","klaatu","musician","milamber","willi","waiting","isacs155","igor","1million","1letmein","x35v8l","yogi","ywvxpz","xngwoj","zippy1","020202","****","stonewal","sweeney","story","sentry","sexsexsex","spence","sonysony","smirnoff","star12","solace","sledge","states","snyder","star1","paxton","pentagon","pkxe62","pilot1","pommes","paulpaul","plants","tical","tictac","toes","lighthou","lemans","kubrick","letmein22","letmesee","jys6wz","jonesy","jjjjjj1","jigga","joelle","mate","merchant","redstorm","riley1","rosa","relief","14141414","1126","allison1","badboy1","asthma","auggie","basement","hartley","hartford","hardwood","gumbo","616913","57np39","56qhxs","4mnveh","cake","forbes","fatluvr69","fqkw5m","fidelity","feathers","fresno","godiva","gecko","gladys","gibson1","gogators","fridge","general1","saxman","rowing","sammys","scotts","scout1","sasasa","samoht","dragon69","ducky","dragonball","driller","p3wqaw","nurse","papillon","oneone","openit","optimist","longshot","portia","rapier","pussy2","ralphie","tuxedo","ulrike","undertow","trenton","copenhag","come","delldell","culinary","deltas","mytime","nicky","nickie","noname","noles1","bucker","bopper","bullock","burnout","bryce","hedges","ibilltes","hihje863","hitter","ekim","espana","eatme69","elpaso","envelope","express1","eeeeee1","eatme1","karaoke","kara","mustang5","misses","wellingt","willem","waterski","webcam","jasons","infinite","iloveyou!","jakarta","belair","bigdad","beerme","yoshi","yinyang","zimmer","x24ik3","063dyjuy","0000007","ztmfcq","stopit","stooges","survival","stockton","symow8","strato","2hot4u","ship","simons","skins","shakes","sex1","shield","snacks","softtail","slimed123","pizzaman","pipe","pitt","pathetic","pinto","tigercat","tonton","lager","lizzy","juju","john123","jennings","josiah","jesse1","jordon","jingles","martian","mario1","rootedit","rochard","redwine","requiem","riverrat","rats","1117","1014","1205","althea","allie","amor","amiga","alpina","alert","atreides","banana1","bahamut","hart","golfman","happines","7uftyx","5432","5353","5151","4747","byron","chatham","chadwick","cherie","foxfire","ffvdj474","freaked","foreskin","gayboy","gggggg1","glenda","gameover","glitter","funny1","scoobydoo","scroll","rudolph","saddle","saxophon","dingbat","digimon","omicron","parsons","ohio","panda1","loloxx","macintos","lululu","lollypop","racer1","queen1","qwertzui","prick","upnfmc","tyrant","trout1","9skw5g","aceman","adelaide","acls2h","aaabbb","acapulco","aggie","comcast","craft","crissy","cloudy","cq2kph","custer","d6o8pm","cybersex","davecole","darian","crumbs","daisey","davedave","dasani","needle","mzepab","myporn","narnia","nineteen","booger1","bravo1","budgie","btnjey","highlander","hotel6","humbug","edwin","ewtosi","kristin1","kobe","knuckles","keith1","katarina","muff","muschi","montana1","wingchun","wiggle","whatthe","walking","watching","vette1","vols","virago","intj3a","ishmael","intern","jachin","illmatic","199999","2010","beck","blender","bigpenis","bengal","blue1234","your","zaqxsw","xray","xxxxxxx1","zebras","yanks","worlds","tadpole","stripes","svetlana","3737","4343","3728","4444444","368ejhih","solar","sonne","smalls","sniffer","sonata","squirts","pitcher","playstation","pktmxr","pescator","points","texaco","lesbos","lilian","l8v53x","jo9k2jw2","jimbeam","josie","jimi","jupiter2","jurassic","marines1","maya","rocket1","ringer","14725836","12345679","1219","123098","1233","alessand","althor","angelika","arch","armando","alpha123","basher","barefeet","balboa","bbbbb1","banks","badabing","harriet","gopack","golfnut","gsxr1000","gregory1","766rglqy","8520","753159","8dihc6","69camaro","666777","cheeba","chino","calendar","cheeky","camel1","fishcake","falling","flubber","giuseppe","gianni","gloves","gnasher23","frisbee","fuzzy1","fuzzball","sauce","save13tx","schatz","russell1","sandra1","scrotum","scumbag","sabre","samdog","dripping","dragon12","dragster","paige","orwell","mainland","lunatic","lonnie","lotion","maine","maddux","qn632o","poophead","rapper","porn4life","producer","rapunzel","tracks","velocity","vanessa1","ulrich","trueblue","vampire1","abacus","902100","crispy","corky","crane","chooch","d6wnro","cutie","deal","dabulls","dehpye","navyseal","njqcw4","nownow","nigger1","nightowl","nonenone","nightmar","bustle","buddy2","boingo","bugman","bulletin","bosshog","bowie","hybrid","hillside","hilltop","hotlegs","honesty","hzze929b","hhhhh1","hellohel","eloise","evilone","edgewise","e5pftu","eded","embalmer","excalibur","elefant","kenzie","karl","karin","killah","kleenex","mouses","mounta1n","motors","mutley","muffdive","vivitron","winfield","wednesday","w00t88","iloveit","jarjar","incest","indycar","17171717","1664","17011701","222777","2663","beelch","benben","yitbos","yyyyy1","yasmin","zapata","zzzzz1","stooge","tangerin","taztaz","stewart1","summer69","sweetness","system1","surveyor","stirling","3qvqod","3way","456321","sizzle","simhrq","shrink","shawnee","someday","sparty","ssptx452","sphere","spark","slammed","sober","persian","peppers","ploppy","pn5jvw","poobear","pianos","plaster","testme","tiff","thriller","larissa","lennox","jewell","master12","messier","rockey","1229","1217","1478","1009","anastasi","almighty","amonra","aragon","argentin","albino","azazel","grinder","6uldv8","83y6pv","8888888","4tlved","515051","carsten","changes","flanders","flyers88","ffffff1","firehawk","foreman","firedog","flashman","ggggg1","gerber","godspeed","galway","giveitup","funtimes","gohan","giveme","geryfe","frenchie","sayang","rudeboy","savanna","sandals","devine","dougal","drag0n","dga9la","disaster","desktop","only","onlyone","otter","pandas","mafia","lombard","luckys","lovejoy","lovelife","manders","product","qqh92r","qcmfd454","pork","radar1","punani","ptbdhw","turtles","undertaker","trs8f7","tramp","ugejvp","abba","911turbo","acdc","abcd123","clever","corina","cristian","create","crash1","colony","crosby","delboy","daniele","davinci","daughter","notebook","niki","nitrox","borabora","bonzai","budd","brisbane","hotter","heeled","heroes","hooyah","hotgirl","i62gbq","horse1","hills","hpk2qc","epvjb6","echo","korean","kristie","mnbvc","mohammad","mind","mommy1","munster","wade","wiccan","wanted","jacket","2369","bettyboo","blondy","bismark","beanbag","bjhgfi","blackice","yvtte545","ynot","yess","zlzfrh","wolvie","007bond","******","tailgate","tanya1","sxhq65","stinky1","3234412","3ki42x","seville","shimmer","sheryl","sienna","shitshit","skillet","seaman","sooners1","solaris","smartass","pastor","pasta","pedros","pennywis","pfloyd","tobydog","thetruth","lethal","letme1n","leland","jenifer","mario66","micky","rocky2","rewq","ripped","reindeer","1128","1207","1104","1432","aprilia","allstate","alyson","bagels","basic","baggies","barb","barrage","greatest","gomez","guru","guard","72d5tn","606060","4wcqjn","caldwell","chance1","catalog","faust","film","flange","fran","fartman","geil","gbhcf2","fussball","glen","fuaqz4","gameboy","garnet","geneviev","rotary","seahawk","russel","saab","seal","samadams","devlt4","ditto","drevil","drinker","deuce","dipstick","donut","octopus","ottawa","losangel","loverman","porky","q9umoz","rapture","pump","pussy4me","university","triplex","ue8fpw","trent","trophy","turbos","troubles","agent","aaa340","churchil","crazyman","consult","creepy","craven","class","cutiepie","ddddd1","dejavu","cuxldv","nettie","nbvibt","nikon","niko","norwood","nascar1","nolan","bubba2","boobear","boogers","buff","bullwink","bully","bulldawg","horsemen","escalade","editor","eagle2","dynamic","ella","efyreg","edition","kidney","minnesot","mogwai","morrow","msnxbi","moonlight","mwq6qlzo","wars","werder","verygood","voodoo1","wheel","iiiiii1","159951","1624","1911a1","2244","bellagio","bedlam","belkin","bill1","woodrow","xirt2k","worship","??????","tanaka","swift","susieq","sundown","sukebe","tales","swifty","2fast4u","senate","sexe","sickness","shroom","shaun","seaweed","skeeter1","status","snicker","sorrow","spanky1","spook","patti","phaedrus","pilots","pinch","peddler","theo","thumper1","tessie","tiger7","tmjxn151","thematri","l2g7k3","letmeinn","lazy","jeffjeff","joan","johnmish","mantra","mariana","mike69","marshal","mart","mazda6","riptide","robots","rental","1107","1130","142857","11001001","1134","armored","alvin","alec","allnight","alright","amatuers","bartok","attorney","astral","baboon","bahamas","balls1","bassoon","hcleeb","happyman","granite","graywolf","golf1","gomets","8vjzus","7890","789123","8uiazp","5757","474jdvff","551scasi","50cent","camaro1","cherry1","chemist","final","firenze","fishtank","farrell","freewill","glendale","frogfrog","gerhardt","ganesh","same","scirocco","devilman","doodles","dinger","okinawa","olympic","nursing","orpheus","ohmygod","paisley","pallmall","null","lounge","lunchbox","manhatta","mahalo","mandarin","qwqwqw","qguvyt","pxx3eftp","president","rambler","puzzle","poppy1","turk182","trotter","vdlxuc","trish","tugboat","valiant","tracie","uwrl7c","chris123","coaster","cmfnpu","decimal","debbie1","dandy","daedalus","dede","natasha1","nissan1","nancy123","nevermin","napalm","newcastle","boats","branden","britt","bonghit","hester","ibxnsm","hhhhhh1","holger","durham","edmonton","erwin","equinox","dvader","kimmy","knulla","mustafa","monsoon","mistral","morgana","monica1","mojave","month","monterey","mrbill","vkaxcs","victor1","wacker","wendell","violator","vfdhif","wilson1","wavpzt","verena","wildstar","winter99","iqzzt580","jarrod","imback","1914","19741974","1monkey","1q2w3e4r5t","2500","2255","blank","bigshow","bigbucks","blackcoc","zoomer","wtcacq","wobble","xmen","xjznq5","yesterda","yhwnqc","zzzxxx","streak","393939","2fchbg","skinhead","skilled","shakira","shaft","shadow12","seaside","sigrid","sinful","silicon","smk7366","snapshot","sniper1","soccer11","staff","slap","smutty","peepers","pleasant","plokij","pdiddy","pimpdaddy","thrust","terran","topaz","today1","lionhear","littlema","lauren1","lincoln1","lgnu9d","laughing","juneau","methos","medina","merlyn","rogue1","romulus","redshift","1202","1469","12locked","arizona1","alfarome","al9agd","aol123","altec","apollo1","arse","baker1","bbb747","bach","axeman","astro1","hawthorn","goodfell","hawks1","gstring","hannes","8543852","868686","4ng62t","554uzpad","5401","567890","5232","catfood","frame","flow","fire1","flipflop","fffff1","fozzie","fluff","garrison","fzappa","furious","round","rustydog","sandberg","scarab","satin","ruger","samsung1","destin","diablo2","dreamer1","detectiv","dominick","doqvq3","drywall","paladin1","papabear","offroad","panasonic","nyyankee","luetdi","qcfmtz","pyf8ah","puddles","privacy","rainer","pussyeat","ralph1","princeto","trivia","trewq","tri5a3","advent","9898","agyvorc","clarkie","coach1","courier","contest","christo","corinna","chowder","concept","climbing","cyzkhw","davidb","dad2ownu","days","daredevi","de7mdf","nose","necklace","nazgul","booboo1","broad","bonzo","brenna","boot","butch1","huskers1","hgfdsa","hornyman","elmer","elektra","england1","elodie","kermit1","knife","kaboom","minute","modern","motherfucker","morten","mocha","monday1","morgoth","ward","weewee","weenie","walters","vorlon","website","wahoo","ilovegod","insider","jayman","1911","1dallas","1900","1ranger","201jedlz","2501","1qaz","bertram","bignuts","bigbad","beebee","billows","belize","bebe","wvj5np","wu4etd","yamaha1","wrinkle5","zebra1","yankee1","zoomzoom","09876543","0311","?????","stjabn","tainted","3tmnej","shoot","skooter","skelter","sixteen","starlite","smack","spice1","stacey1","smithy","perrin","pollux","peternorth","pixie","paulina","piston","pick","poets","pine","toons","tooth","topspin","kugm7b","legends","jeepjeep","juliana","joystick","junkmail","jojojojo","jonboy","judge","midland","meteor","mccabe","matter","mayfair","meeting","merrill","raul","riches","reznor","rockrock","reboot","reject","robyn","renee1","roadway","rasta220","1411","1478963","1019","archery","allman","andyandy","barks","bagpuss","auckland","gooseman","hazmat","gucci","guns","grammy","happydog","greek","7kbe9d","7676","6bjvpe","5lyedn","5858","5291","charlie2","chas","c7lrwu","candys","chateau","ccccc1","cardinals","fear","fihdfv","fortune12","gocats","gaelic","fwsadn","godboy","gldmeo","fx3tuo","fubar1","garland","generals","gforce","rxmtkp","rulz","sairam","dunhill","division","dogggg","detect","details","doll","drinks","ozlq6qwm","ov3ajy","lockout","makayla","macgyver","mallorca","loves","prima","pvjegu","qhxbij","raphael","prelude1","totoro","tusymo","trousers","tunnel","valeria","tulane","turtle1","tracy1","aerosmit","abbey1","address","clticic","clueless","cooper1","comets","collect","corbin","delpiero","derick","cyprus","dante1","dave1","nounours","neal","nexus6","nero","nogard","norfolk","brent1","booyah","bootleg","buckaroo","bulls23","bulls1","booper","heretic","icecube","hellno","hounds","honeydew","hooters1","hoes","howie","hevnm4","hugohugo","eighty","epson","evangeli","eeeee1","eyphed"]
},{}], 3:[function(require,module,exports){module.exports = {
    methods: {
        canonical(path){
            if (path == null)
                return "";
            if (path.startsWith("/"))
                path = path.substring(1);
            if (path.endsWith("/"))
                path = path.substring(0, path.length - 1);
            return path;
        },

	updateHistory(app, path, args, writable) {
            path = this.canonical(path);
	    console.log('updateHistory:', app, path, args)
            
	    const currentProps = this.getPropsFromUrl();
	    const pathFromUrl = this.canonical(currentProps == null ? null : currentProps.path);
	    const appFromUrl = currentProps == null ? null : currentProps.app;
            const argsFromUrl = currentProps == null ? null : currentProps.args;
            
	    if (path == pathFromUrl && app == appFromUrl && JSON.stringify(args) === JSON.stringify(argsFromUrl))
		return;

            var rawProps = { app: app, path: path, args: args, writable: writable || false }
	    if (currentProps != null && currentProps.secretLink) {
                rawProps.secretLink = true;
                rawProps.link = currentProps.link;
                if (currentProps.linkpassword != null)
                    rawProps.linkpassword = currentProps.linkpassword
                if (currentProps.open)
                    rawProps.open = true;
            }
	    var encodedProps = propsToFragment(rawProps);
            const props = (currentProps != null && currentProps.secretLink) ? rawProps : this.encryptProps(encodedProps);
            
	    window.location.hash = "#" + propsToFragment(props);
	},
        
	getPropsFromUrl() {
            let hash = window.location.hash;
            if (hash.length == 0)
                return null;
	    try {
                const rawProps = fragmentToProps(hash.substring(1))
		return this.decryptProps(rawProps);
	    } catch (e) {
                try {
		    return rawProps;
                } catch (f) {
                    return null;
                }
	    }
	},
	decryptProps(props) {
	    if (props.secretLink)
		return props;
            
	    return fragmentToProps(this.context.decryptURL(props.ciphertext, props.nonce));
	},
        
	encryptProps(props) {
	    var both = this.context.encryptURL(props)
	    const nonce = both.base64Nonce;
	    const ciphertext = both.base64Ciphertext;
	    return { nonce: nonce, ciphertext: ciphertext };
	},

    availableAppsForFile: function(file) {
       try {
           if (file.getFileProperties().isHidden)
               return [];
            if (file.isDirectory()) {
                let folderApps = this.sandboxedApps.appsInstalled.slice().filter(app => app.folderAction);
                return folderApps.sort(function(a, b) {
                    return a.displayName.localeCompare(b.displayName);
                });
            }
            let currentFilename = file.getFileProperties().name;
            let extension = currentFilename.substring(currentFilename.lastIndexOf(".") +1);

            var currentFileExtensionMapping = this.sandboxedApps.appFileExtensionRegistrationMap.get(extension);
            currentFileExtensionMapping = currentFileExtensionMapping == null ? [] : currentFileExtensionMapping;
            currentFileExtensionMapping = currentFileExtensionMapping.concat(this.sandboxedApps.appFileExtensionWildcardRegistrationList);

            let mimeType = file.getFileProperties().mimeType;
            var currentMimeTypeMapping = this.sandboxedApps.appMimeTypeRegistrationMap.get(mimeType);
            currentMimeTypeMapping = currentMimeTypeMapping == null ? [] : currentMimeTypeMapping;
            currentMimeTypeMapping = currentMimeTypeMapping.concat(this.sandboxedApps.appMimeTypeWildcardRegistrationList);

            let fileType = file.getFileProperties().getType();
            var currentFileTypeMapping = this.sandboxedApps.appFileTypeRegistrationMap.get(fileType);
            currentFileTypeMapping = currentFileTypeMapping == null ? [] : currentFileTypeMapping;
            currentFileTypeMapping = currentFileTypeMapping.concat(this.sandboxedApps.appFileTypeWildcardRegistrationList);

            let combinedMapping = currentFileExtensionMapping
                .concat(currentMimeTypeMapping)
                .concat(currentFileTypeMapping)
                .filter(a => !a.folderAction);
            let dedupedItems = [];
            combinedMapping.forEach(item => {
                let foundIndex = dedupedItems.findIndex(v => v.name === item.name);
                if (foundIndex == -1) {
                    dedupedItems.push(item);
                }
            });
            return dedupedItems.sort(function(a, b) {
                return a.displayName.localeCompare(b.displayName);
            });
       } catch (err) {
           return [];
       }
    },
    getRecommendedViewer(file) {
        let filename = file.getName();
        if (file.isDirectory()) {
            return null;
        }
        try {
            let extension = filename.substring(filename.lastIndexOf(".") + 1).toLowerCase();
            if (extension == "docx" || extension == "odt") {
                return "doc-viewer";
            } else if (extension == "sheet" || extension == "xlsx" || extension == "ods") {
                return "luckysheet";
            } else if (extension == "tldr") {
                return "tldraw";
            } else if (extension == "drawio") {
                return "drawio";
            } else if (extension == "todo") {
                return "tasks";
            } else if (extension == "epub") {
                return "ebookreader";
            }
        } catch (ex) {
            return null;
        }
        return null;
    },
    getInbuiltApps(file) {
        let filename = file.getName();
        let mimeType = file.getFileProperties().mimeType;
        let matchingInbuiltApps = [];
        if (mimeType.startsWith("audio") || mimeType.startsWith("video") || mimeType.startsWith("image")) {
            let gallery = {name:'Gallery', contextMenuText: 'View in Gallery'};
            matchingInbuiltApps.push(gallery);
        } else if (mimeType === "application/pdf") {
            let pdf = {name:"pdf", contextMenuText: 'Open PDF Viewer'};
            matchingInbuiltApps.push(pdf);
        } else if (mimeType === "text/calendar") {
            let calendar = {name:"Calendar", contextMenuText: 'Open Calendar'};
            matchingInbuiltApps.push(calendar);
        } else if (mimeType === "application/vnd.peergos-identity-proof") {
            let identity = {name:"identity-proof", contextMenuText: 'Open in Identify Proof Viewer'};
            matchingInbuiltApps.push(identity);
        }
        if (mimeType.startsWith("text/x-markdown") ||
           ( mimeType.startsWith("text/") && filename.endsWith('.md'))) {
            let markup = {name:"markup", contextMenuText:'Open in Markdown Viewer'};
            matchingInbuiltApps.push(markup);
        }
        if (mimeType.startsWith("text/") && filename.endsWith('.note')) {
            let markup = {name:"markup", contextMenuText:'Open in Notes Viewer'};
            matchingInbuiltApps.push(markup);
        }
        if (mimeType.startsWith("text/html") ||
            ( mimeType.startsWith("text/") && filename.endsWith('.html'))) {
            let htmlviewer = {name:"htmlviewer", contextMenuText:'Open in HTML Viewer'};
            matchingInbuiltApps.push(htmlviewer);
        }
        if (mimeType.startsWith("text/")) {
            let editor = {name:"editor", contextMenuText:'Open in Text Editor'};
            matchingInbuiltApps.push(editor);
        }
        if (matchingInbuiltApps.length == 0) {
            let hex = {name:"hex", contextMenuText:'Open in Hex Viewer'};
            matchingInbuiltApps.push(hex);
        }
        return matchingInbuiltApps;
    },
        getApp(file, path, writable) {
            let pathParts = path.split("/");
            if (pathParts.length >= 4) {
                if (pathParts[0] == '' &&
                    pathParts[2] == '.apps' &&
                    pathParts[3] == 'calendar' &&
                    pathParts.length <= 6)
                    return "Calendar";
                if (pathParts[0] == '' &&
                    pathParts[2] == '.messaging')
                    return "Chat";
            }
            if (file.isDirectory()) {
                return "Drive";
            }
            var filename = file.getName();
	    var mimeType = file.getFileProperties().mimeType;
            if (mimeType.startsWith("audio") ||
		mimeType.startsWith("video") ||
		mimeType.startsWith("image")) {
		return 'Gallery';
	    } else if (mimeType === "application/pdf") {
		return "pdf";
	    } else if (mimeType === "text/calendar") {
		return "Calendar";
	    } else if (mimeType === "application/vnd.peergos-identity-proof") {
		return "identity-proof";
        } else if (mimeType.startsWith("text/x-markdown") ||
            ( mimeType.startsWith("text/") &&
            ( filename.endsWith('.md') || filename.endsWith('.note') ) )  ) {
            return writable ? "editor" : "markup";
        } else if (mimeType.startsWith("text/html") ||
            ( mimeType.startsWith("text/") && filename.endsWith('.html'))) {
            return writable ? "editor" : "htmlviewer";
	    } else if (mimeType.startsWith("text/") || mimeType == "application/json") {
		return "editor";
	    } else {
		return "hex";
	    }
        },

        openFileOrDir(app, path, args, writable) {
	    this.updateHistory(app, path, args, writable);
        }
    },
}
},{}], 49:[function(require,module,exports){const ProgressBar = require("../../components/drive/ProgressBar.vue");
const i18n = require("../../i18n/index.js");

module.exports = {
    data() {
        return {
            currentAppSchema: "1"
        };
    },
    mixins:[i18n],
    computed: {
        ...Vuex.mapState([
        "context",
        "sandboxedApps",
        'mirrorBatId',
        ])
    },
  methods: {
      initSandboxedApps() {
          let that = this;
          let future = peergos.shared.util.Futures.incomplete();
          this.context.getByPath(this.context.username + "/.apps").thenApply(appsDirOpt => {
              if (appsDirOpt.ref != null) {
                  appsDirOpt.get().getChildren(that.context.crypto.hasher, that.context.network).thenApply(children => {
                      that.loadAllAppProperties(children.toArray()).thenApply(sandboxedAppsPropsList => {
                          that.registerApps(sandboxedAppsPropsList);
                          future.complete(true);
                      });
                  });
              }
          });
          return future;
      },
      convertPermissionToHumanReadable: function(permission) {
          if (permission === 'STORE_APP_DATA') {
              return this.translate("SANDBOX.APP.DATA");
          } else if (permission === 'EDIT_CHOSEN_FILE') {
              return this.translate("SANDBOX.EDIT.FILE");
          } else if (permission === 'READ_CHOSEN_FOLDER') {
              return this.translate("SANDBOX.READ.FOLDER");
          } else if (permission === 'EXCHANGE_MESSAGES_WITH_FRIENDS') {
              return this.translate("SANDBOX.MESSAGES");
          } else if (permission === 'USE_MAILBOX') {
              return this.translate("SANDBOX.MAILBOX");
          } else if (permission === 'ACCESS_PROFILE_PHOTO') {
              return this.translate("SANDBOX.PROFILE.PHOTO");
          } else if (permission === 'CSP_UNSAFE_EVAL') {
              return this.translate("SANDBOX.UNSAFE");
          } else {
              this.$toast.error(this.translate("SANDBOX.UNSAFE") + ': ' + permission, {timeout:false});
          }
      },
      isString: function(x) { //https://stackoverflow.com/a/9436948
        return typeof x === 'string' || x instanceof String;
      },
      verifyJSONFile: function(file, appPath) {
          let that = this;
          let appNames = this.sandboxedApps.appsInstalled.slice();
          let future = peergos.shared.util.Futures.incomplete();
          this.readJSONFile(file).thenApply(props => {
              let that = this;
              if (props == null) {
                  future.complete({props: null, errors: ['Unable to parse peergos-app.json. See console for details']});
              } else {
                  let errors = [];
                  let mandatoryFields = ["displayName", "description", "launchable"];
                  let stringFields = ["displayName", "description", "version", "author", "appIcon", "source"];
                  let existingCreateMenuItems = ["upload files","upload folder","new folder","new file", "new app"];
                  let validPermissions = ["STORE_APP_DATA", "EDIT_CHOSEN_FILE", "READ_CHOSEN_FOLDER",
                    "EXCHANGE_MESSAGES_WITH_FRIENDS", "USE_MAILBOX", "ACCESS_PROFILE_PHOTO", "CSP_UNSAFE_EVAL"];
                  mandatoryFields.forEach(field => {
                      if (props[field] == null) {
                          errors.push("Missing property " + field);
                      }
                  });
                  stringFields.forEach(field => {
                      let prop = props[field];
                      if (!that.isString(prop)) {
                          errors.push("Property not of type String: " + field);
                      }
                  });
                  if (errors.length == 0) {
                      if (props.schemaVersion != this.currentAppSchema) {
                          errors.push("Invalid schemaVersion property. Must be: " + this.currentAppSchema);
                      }
                        if (!(props.permissions.constructor === Array)) {
                            errors.push("Invalid App Permissions. Must be an array. Can be empty []");
                        } else {
                            props.permissions.forEach(permission => {
                                let permissionIndex = validPermissions.findIndex(v => v === permission);
                                if (permissionIndex == -1) {
                                    errors.push("Invalid permission: " + permission);
                                }
                            });
                        }
                        if (props.displayName.length > 25) {
                            errors.push("Invalid displayName property. Length must not exceed 25 characters");
                        }
                        if (!that.validateDisplayName(props.displayName)) {
                            errors.push("Invalid displayName property. Use only alphanumeric characters plus dash and underscore");
                        }
                      const versionStr = props.version;
                      try {
                        peergos.shared.util.Version.parse(versionStr);
                      } catch {
                          errors.push("Invalid version property. Must be of format: major.minor.patch-suffix");
                      }
                      if (props.description.length > 100) {
                          errors.push("Invalid description property. Length must not exceed 100 characters");
                      }
                      if (!(typeof props.launchable == "boolean")) {
                          errors.push("Invalid launchable property. Must have boolean value of true or false");
                      }
                      if (!(typeof props.folderAction == "boolean")) {
                          errors.push("Invalid folderAction property. Must have boolean value of true or false");
                      }
                      if (props.author.length > 32) {
                          errors.push("Invalid Author property. Length must not exceed 32 characters");
                      }
                      if (props.source.length > 256) {
                          errors.push("Invalid Source property. Length must not exceed 256 characters");
                      }
                      if (!(props.fileExtensions.constructor === Array)) {
                          errors.push("Invalid fileExtensions property. Must be an array. Can be empty []");
                      } else {
                          props.fileExtensions.forEach(extension => {
                              if (!that.isString(extension)) {
                                  errors.push("Invalid fileExtensions property. Element value not of type String");
                              }
                          });
                      }
                      if (!(props.mimeTypes.constructor === Array)) {
                          errors.push("Invalid mimeTypes property. Must be an array. Can be empty []");
                      } else {
                          props.mimeTypes.forEach(mimeType => {
                              if (!that.isString(mimeType)) {
                                  errors.push("Invalid mimeTypes property. Element value not of type String");
                              }
                          });
                      }
                      if (!(props.fileTypes.constructor === Array)) {
                          errors.push("Invalid fileTypes property. Must be an array. Can be empty []");
                      } else {
                          props.fileTypes.forEach(fileType => {
                              if (!that.isString(fileType)) {
                                  errors.push("Invalid fileTypes property. Element value not of type String");
                              }
                          });
                      }
                  }
                    if (errors.length == 0 && appPath != null) {
                      that.validateAppIconImage(props.appIcon, appPath, errors).thenApply(isIconOK => {
                          future.complete({props:props, errors: errors});
                      });
                    } else {
                      future.complete({props:props, errors: errors});
                    }
              }
          });
          return future;
      },
      validateAppIconImage: function(iconFilename, appPath, errors) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            if (iconFilename.length == 0) {
                future.complete(true);
            } else {
                this.context.getByPath(appPath + '/assets/').thenApply(assetsDirOpt => {
                    if (assetsDirOpt.ref == null) {
                        errors.push("Invalid App icon. App assets directory not found");
                        future.complete(false);
                    } else {
                        assetsDirOpt.get().getChild(iconFilename, that.context.crypto.hasher, that.context.network).thenApply(function(iconFileOpt) {
                            if (iconFileOpt.ref == null) {
                                errors.push("Invalid App icon. Image file not found: " + iconFilename); //Image format not supported?");
                                future.complete(false);
                            } else {
                                let type = iconFileOpt.ref.props.getType();
                                if(type != 'image') {
                                    errors.push("Invalid App icon. Image format not supported");
                                    future.complete(false);
                                } else {
                                    future.complete(true);
                                }
                            }
                        });
                    }
                });
            }
            return future;
      },
      validateDisplayName: function(displayName) {
          if (displayName === '')
              return false;
          if (displayName.includes('.') || displayName.includes('..'))
              return false;
          if (!displayName.match(/^[a-z\d\-_\s]+$/i)) {
              return false;
          }
          return true;
      },
      readJSONFile: function(file) {
          let future = peergos.shared.util.Futures.incomplete();
          if (file == null) {
                future.complete(null);
          } else {
              let props = file.getFileProperties();
              var low = props.sizeLow();
              if (low < 0) low = low + Math.pow(2, 32);
              let size = low + (props.sizeHigh() * Math.pow(2, 32));
              file.getInputStream(this.context.network, this.context.crypto, props.sizeHigh(), props.sizeLow(), (progress) => {}).thenApply(reader => {
                  let data = convertToByteArray(new Int8Array(size));
                  return reader.readIntoArray(data, 0, data.length).thenApply(read => {
                      try {
                          let props = JSON.parse(new TextDecoder().decode(data));
                          if (props.schemaVersion == null) {
                              props.schemaVersion = this.currentAppSchema;
                          }
                          if (props.version == null) {
                              props.version = "0.0.1";
                          }
                          if (props.source == null) {
                              props.source = "";
                          }
                          if (props.author == null) {
                              props.author = "";
                          }
                          if (props.folderAction == null) {
                              props.folderAction = false;
                          }
                          if (props.appIcon == null) {
                              props.appIcon = '';
                          }
                          if (props.fileExtensions == null) {
                              props.fileExtensions = [];
                          }
                          if (props.mimeTypes == null) {
                              props.mimeTypes = [];
                          }
                          if (props.fileTypes == null) {
                              props.fileTypes = [];
                          }
                          if (props.permissions == null) {
                              props.permissions = [];
                          }
                          props.name = props.displayName.replaceAll(' ', '').toLowerCase().trim();
                          future.complete(props);
                      } catch (ex) {
                          console.log(ex);
                          future.complete(null);
                      }
                  });
              });
          }
          return future;
      },
        readAppProperties: function(appName, appFolderLocation) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let fromRecommendedApps = appFolderLocation != null && appFolderLocation == "/peergos/recommended-apps/";
            let folderLocation = appFolderLocation != null && appFolderLocation.length > 0 ? appFolderLocation : this.context.username + "/.apps/";
            this.context.getByPath(folderLocation + appName).thenApply(appDirOpt => {
                if (appDirOpt.ref != null) {
                    appDirOpt.get().getChild("peergos-app.json", that.context.crypto.hasher, that.context.network).thenApply(function(propFileOpt) {
                        if (propFileOpt.ref == null) {
                            console.log('peergos-app.json not found! App: ' + appName);
                            future.complete(null);
                        } else {
                            let props = propFileOpt.ref.getFileProperties();
                            if (!fromRecommendedApps && !props.created.equals(props.modified)) {
                                console.log('peergos-app.json file has changed! App: ' + appName);
                                future.complete(null);
                            } else {
                                that.readJSONFile(propFileOpt.ref).thenApply(res => {
                                    if (res == null) {
                                        console.log('Properties not found! App: ' + appName);
                                        future.complete(null);
                                    } else {
                                        future.complete(res);
                                    }
                                });
                            }
                        }
                    });
                } else {
                    console.log('App directory not found! App: ' + appName);
                    future.complete(null);
                }
            });
            return future;
        },
      readAllAppProperties: function(appDirectories) {
          let that = this;
          let accumulator = [];
          let future = peergos.shared.util.Futures.incomplete();
          let appCount = appDirectories.length;
          if (appCount == 0) {
            that.installDefaultApp().thenApply( res => {
                accumulator.push(res);
                future.complete(accumulator);
            });
          } else {
              appDirectories.forEach(currentApp => {
                  currentApp.getChild("peergos-app.json", this.context.crypto.hasher, this.context.network).thenApply(function(propFileOpt) {
                      that.readJSONFile(propFileOpt.ref).thenApply(res => {
                          if (res == null) {
                            appCount = appCount -1;
                          } else {
                            accumulator.push(res);
                          }
                          if (accumulator.length == appCount) {
                              future.complete(accumulator);
                          }
                      });
                  });
              });
          }
          return future;
      },
      installDefaultApp: function() {
          let future = peergos.shared.util.Futures.incomplete();
          let that = this;
          let path = ".apps/htmlviewer";
          let appDir = peergos.client.PathUtils.directoryToPath(path.split('/'));
          this.context.getByPath("/" + this.context.username).thenApply(rootOpt => {
              rootOpt.get().getOrMkdirs(appDir, that.context.network, true, that.mirrorBatId, that.context.crypto).thenApply(dir => {
                let encoder = new TextEncoder();
                let props = {"schemaVersion": "1", "displayName": "HTML Viewer", "name": "htmlviewer",
                    "version": "1.0.0-initial", "author": "peergos", "folderAction": false,
                    "description": "for viewing HTML files", "source": "",
                    "launchable": false,
                    "fileExtensions": [], "mimeTypes": [], "fileTypes": [], "permissions": []
                };
                let uint8Array = encoder.encode(JSON.stringify(props, null, 2));
                let bytes = convertToByteArray(uint8Array);
                let reader = new peergos.shared.user.fs.AsyncReader.ArrayBacked(bytes);
                dir.uploadFileJS("peergos-app.json", reader, 0, bytes.byteLength,
                    true, that.mirrorBatId, that.context.network, that.context.crypto, function (len) { },
                    that.context.getTransactionService(), f => peergos.shared.util.Futures.of(true)
                ).thenApply(function (res) {
                    future.complete(props);
                })
              });
          });
          return future;
      },
      loadAllAppProperties: function(appDirectoryNames) {
          var appDirectories = appDirectoryNames.filter(n => n.getName() != "calendar" &&
                                    n.getName() != "launcher");
          let future = peergos.shared.util.Futures.incomplete();
          this.readAllAppProperties(appDirectories).thenApply(props => {
              future.complete(props);
          });
          return future;
      },
        registerApps: function(sandboxedAppsPropsList) {
            let that = this;
            sandboxedAppsPropsList.forEach(props => {
                that.registerApp(props);
            });
        },
        deRegisterApp: function(app) {
            let appFileExtensionRegistrationMap = new Map();
            let appMimeTypeRegistrationMap = new Map();
            let appFileTypeRegistrationMap = new Map();

            let appFileExtensionWildcardRegistrationList =
                    this.sandboxedApps.appFileExtensionWildcardRegistrationList.filter(entry => entry.name != app.name);
            let appMimeTypeWildcardRegistrationList =
                    this.sandboxedApps.appMimeTypeWildcardRegistrationList.filter(entry => entry.name != app.name);
            let appFileTypeWildcardRegistrationList =
                    this.sandboxedApps.appFileTypeWildcardRegistrationList.filter(entry => entry.name != app.name);

            let appsInstalled = this.sandboxedApps.appsInstalled.slice();
            let appIndex = appsInstalled.findIndex(v => v.name === app.name);
            if (appIndex > -1) {
                appsInstalled.splice(appIndex, 1);
                this.$store.commit("SET_SANDBOXED_APPS", appsInstalled);
            }
            this.sandboxedApps.appFileExtensionRegistrationMap.forEach(function(value, key) {
                let updatedList = [];
                value.forEach(entry => {
                    if (entry.name != app.name) {
                        updatedList.push(entry);
                    }
                });
                if (updatedList.length > 0) {
                    appFileExtensionRegistrationMap.set(key, updatedList);
                }
            });
            this.sandboxedApps.appMimeTypeRegistrationMap.forEach(function(value, key) {
                let updatedList = [];
                value.forEach(entry => {
                    if (entry.name != app.name) {
                        updatedList.push(entry);
                    }
                });
                if (updatedList.length > 0) {
                    appMimeTypeRegistrationMap.set(key, updatedList);
                }
            });
            this.sandboxedApps.appFileTypeRegistrationMap.forEach(function(value, key) {
                let updatedList = [];
                value.forEach(entry => {
                    if (entry.name != app.name) {
                        updatedList.push(entry);
                    }
                });
                if (updatedList.length > 0) {
                    appFileTypeRegistrationMap.set(key, updatedList);
                }
            });
            this.$store.commit("SET_FILE_EXTENSION_REGISTRATIONS", appFileExtensionRegistrationMap);
            this.$store.commit("SET_MIMETYPE_REGISTRATIONS", appMimeTypeRegistrationMap);
            this.$store.commit("SET_FILETYPE_REGISTRATIONS", appFileTypeRegistrationMap);

            this.$store.commit("SET_FILE_EXTENSION_WILDCARD_REGISTRATIONS", appFileExtensionWildcardRegistrationList);
            this.$store.commit("SET_MIMETYPE_WILDCARD_REGISTRATIONS", appMimeTypeWildcardRegistrationList);
            this.$store.commit("SET_FILETYPE_WILDCARD_REGISTRATIONS", appFileTypeWildcardRegistrationList);
        },
        registerApp: function(props) {
            var appsInstalled = this.sandboxedApps.appsInstalled.slice();
            let appIndex = appsInstalled.findIndex(v => v.name === props.name);
            if (appIndex > -1) {
                this.deRegisterApp(props);
            }
            appsInstalled = this.sandboxedApps.appsInstalled.slice();
            let appFileExtensionRegistrationMap = new Map(this.sandboxedApps.appFileExtensionRegistrationMap);
            let appMimeTypeRegistrationMap = new Map(this.sandboxedApps.appMimeTypeRegistrationMap);
            let appFileTypeRegistrationMap = new Map(this.sandboxedApps.appFileTypeRegistrationMap);

            let appFileExtensionWildcardRegistrationList = this.sandboxedApps.appFileExtensionWildcardRegistrationList.slice();
            let appMimeTypeWildcardRegistrationList = this.sandboxedApps.appMimeTypeWildcardRegistrationList.slice();
            let appFileTypeWildcardRegistrationList = this.sandboxedApps.appFileTypeWildcardRegistrationList.slice();

            let editPermission = props.permissions.filter(p => p == 'EDIT_CHOSEN_FILE').length > 0;
            let contextMenuText = editPermission ? 'Edit in ' + props.displayName : 'View in ' + props.displayName;

            let hasFileExtensions = props.fileExtensions.length > 0
                && props.fileExtensions[0].trim().length > 0
                && props.fileExtensions[0] != '*';
            let createFile = editPermission && hasFileExtensions;
            let openFile = props.launchable && !props.folderAction && !createFile
                && (props.fileExtensions.length > 0 || props.mimeTypes.length > 0 || props.fileTypes.length > 0);
            let openFileFilters = {fileExtensions: props.fileExtensions, mimeTypes: props.mimeTypes, fileTypes: props.fileTypes};
            let primaryFileExtension = hasFileExtensions ? props.fileExtensions[0] : '';

            let item = {name: props.name, displayName: props.displayName,
                createFile: createFile, openFile: openFile, openFileFilters: openFileFilters, launchable: props.launchable,
                folderAction: props.folderAction, appIcon: props.appIcon, contextMenuText: contextMenuText,
                source: props.source, version: props.version, createFile: createFile, primaryFileExtension: primaryFileExtension};

            appsInstalled.push(item);
            props.fileExtensions.forEach(extension => {
                if (extension == '*') {
                    appFileExtensionWildcardRegistrationList.push(item);
                } else {
                    let currentMapping = appFileExtensionRegistrationMap.get(extension);
                    if (currentMapping == null) {
                        currentMapping = [item];
                    } else {
                        currentMapping.push(item);
                    }
                    appFileExtensionRegistrationMap.set(extension, currentMapping);
                }
            });
            props.mimeTypes.forEach(mimeType => {
                if (mimeType == '*') {
                    appMimeTypeWildcardRegistrationList.push(item);
                } else {
                    let currentMapping = appMimeTypeRegistrationMap.get(mimeType);
                    if (currentMapping == null) {
                        currentMapping = [item];
                    } else {
                        currentMapping.push(item);
                    }
                    appMimeTypeRegistrationMap.set(mimeType, currentMapping);
                }
            });
            props.fileTypes.forEach(fileType => {
                if (fileType == '*') {
                    appFileTypeWildcardRegistrationList.push(item);
                } else {
                    let currentMapping = appFileTypeRegistrationMap.get(fileType);
                    if (currentMapping == null) {
                        currentMapping = [item];
                    } else {
                        currentMapping.push(item);
                    }
                    appFileTypeRegistrationMap.set(fileType, currentMapping);
                }
            });
            this.$store.commit("SET_FILE_EXTENSION_REGISTRATIONS", appFileExtensionRegistrationMap);
            this.$store.commit("SET_MIMETYPE_REGISTRATIONS", appMimeTypeRegistrationMap);
            this.$store.commit("SET_FILETYPE_REGISTRATIONS", appFileTypeRegistrationMap);

            this.$store.commit("SET_FILE_EXTENSION_WILDCARD_REGISTRATIONS", appFileExtensionWildcardRegistrationList);
            this.$store.commit("SET_MIMETYPE_WILDCARD_REGISTRATIONS", appMimeTypeWildcardRegistrationList);
            this.$store.commit("SET_FILETYPE_WILDCARD_REGISTRATIONS", appFileTypeWildcardRegistrationList);

            this.$store.commit("SET_SANDBOXED_APPS", appsInstalled);
        },
  }
}
},{ "../../components/drive/ProgressBar.vue": 48, "../../i18n/index.js": 11}], 85:[function(require,module,exports){module.exports = {

	roundToDisplay:function(x) {
			return Math.round(x * 100) / 100;
	},

	convertBytesToHumanReadable:function(bytesAsString) {
		let bytes = Number(bytesAsString);
		if (bytes < 1000)
			return bytes + " Bytes";
		if (bytes < 1000 * 100)
			return this.roundToDisplay(bytes / 1000) + " KB";
		if (bytes < 1000 * 1000 * 1000)
			return this.roundToDisplay(bytes / 1000 / 1000) + " MB";
		return this.roundToDisplay(bytes / 1000 / 1000 / 1000) + " GB";
	},
}
},{}], 35:[function(require,module,exports){module.exports = {
    methods: {
        loadSubFoldersAndFiles: function(path, fileExtension, filterMedia, fileFilters, callback) {
            this.loadSubFoldersNotRecursive(path, callback, true, fileExtension, filterMedia, fileFilters);
        },
        loadSubFolders: function(path, callback) {
            this.loadSubFoldersNotRecursive(path, callback, false, '', false, null);
        },

        loadSubFoldersNotRecursive: function(path, callback, includeFiles, fileExtension, filterMedia, fileFilters) {
            var that = this;
            let folderTree = {};
            this.context.getByPath(path).thenApply(function(dirOpt){
                let dir = dirOpt.get();
                let folderProperties = dir.getFileProperties();
                if (folderProperties.isDirectory && !folderProperties.isHidden) {
                    that.walkNotRecursive(dir, path, folderTree, includeFiles, fileExtension, filterMedia, fileFilters).thenApply( () => {
                        callback(folderTree);
                    });
                } else {
                    callback(folderTree);
                }
            }).exceptionally(function(throwable) {
                this.spinnerMessage = 'Unable to load sub folders...';
                throwable.printStackTrace();
            });
        },

        walkNotRecursive: function(file, path, currentTreeData, includeFiles, fileExtension, filterMedia, fileFilters) {
            currentTreeData.path = path.substring(0, path.length -1);
            currentTreeData.children = [];
            currentTreeData.isOpen = false;
            currentTreeData.isRoot = true;
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            file.getChildren(that.context.crypto.hasher, that.context.network).thenApply(function(children) {
                let arr = children.toArray();
                arr.forEach(function(child, index){
                    let childProps = child.getFileProperties();
                    let newPath = childProps.isDirectory ? path + child.getFileProperties().name + '/' : path;
                    if (childProps.isDirectory && !childProps.isHidden) {
                        let node = {};
                        node.path = newPath.substring(0, newPath.length -1);
                        node.children = [{lazy:true}];
                        node.isOpen = false;
                        currentTreeData.children.push(node);
                    }
                    if (includeFiles === true && !childProps.isDirectory && !childProps.isHidden) {
                        var fileMatch = false;
                        if (fileFilters != null) { //{fileExtensions: app.fileExtensions, mimeTypes: app.mimeTypes, fileTypes: app.fileTypes}
                            let wildcardInclude =  fileFilters.fileExtensions.length == 1 && fileFilters.fileExtensions[0] == '*'
                                                || fileFilters.mimeTypes.length == 1 && fileFilters.mimeTypes[0] == '*'
                                                || fileFilters.fileTypes.length == 1 && fileFilters.fileTypes[0] == '*'
                            let props = child.getFileProperties();
                            let filename = props.name.toLowerCase().trim();
                            let extensionMatches = fileFilters.fileExtensions.filter(ext => filename.endsWith(ext.toLowerCase().trim())).length > 0;
                            let mimeTypesMatches = fileFilters.mimeTypes.filter(mimeType => props.mimeType == mimeType).length > 0;
                            let fileType = props.getType();
                            let fileTypesMatches = fileFilters.fileTypes.filter(ft => fileType == ft).length > 0;
                            fileMatch = wildcardInclude || extensionMatches || mimeTypesMatches || fileTypesMatches;
                        } else {
                            let testAcceptAll = (fileExtension == null || fileExtension.length == 0 ) && !filterMedia;
                            var matchExtension = false;
                            if (!testAcceptAll ) {
                                if (filterMedia) {
                                    let mimeType = childProps.mimeType;
                                    matchExtension = mimeType.startsWith("image") || mimeType.startsWith("video");
                                }
                                if (!matchExtension) {
                                    let extensions = fileExtension.split(',').filter(e => e.length > 0).map(i => i.toLowerCase().trim());
                                    let matches = extensions.filter(ext => child.getFileProperties().name.toLowerCase().endsWith(ext));
                                    matchExtension = matches.length > 0;
                                }
                            }
                            fileMatch = testAcceptAll || matchExtension;
                        }
                        if (fileMatch) {
                            let node = {};
                            node.path = newPath + child.getName();
                            node.children = [];
                            node.isLeaf = true;
                            node.isOpen = false;
                            currentTreeData.children.push(node);
                        }
                    }
                });
                future.complete(true);
            });
            return future;
        },
	}
}
},{}], 27:[function(require,module,exports){module.exports = {
    methods: {
        uriDecode: function(urlencoded) {
            let jsErrorBody = urlencoded.split("\\+").join("%20")
                .split("\\%21").join("!")
                .split("\\%27").join("'")
                .split("\\%28").join("(")
                .split("\\%29").join(")")
                .split("\\%7E").join("~")
                .split("+").join("%20");

            let str = decodeURIComponent(jsErrorBody);
            let token = 'java.lang.JsException: ';
            return str.startsWith(token) ? str.substring(token.length) : str;
        }
    }
}
},{}], 89:[function(require,module,exports){const ProgressBar = require("../../components/drive/ProgressBar.vue");
module.exports = {
	data() {
		return {
            CrcPreCalcTable: [],
            ZipConstants: {
                fileHeaderSignature: 0x504b_0304, fileHeaderLength: 30,
                descriptorSignature: 0x504b_0708, descriptorLength: 16,
                centralHeaderSignature: 0x504b_0102, centralHeaderLength: 46,
                endSignature: 0x504b_0506, endLength: 22,
                zip64endRecordSignature: 0x504b_0606, zip64endRecordLength: 56,
                zip64endLocatorSignature: 0x504b_0607, zip64endLocatorLength: 20
            }
		};
	},
    methods: {
        //from https://stackoverflow.com/a/18639903
        precalcCrc32() {
              if (this.CrcPreCalcTable.length > 0) {
                  return;
              }
              let table = [];
              for(var i=256; i--;){
                  var tmp = i;
                  for(var k=8; k--;){
                      tmp = tmp & 1 ? 3988292384 ^ tmp >>> 1 : tmp >>> 1;
                  }
                  table[i] = tmp;
              }
              this.CrcPreCalcTable = table;
          },
          crc32(data, crc) {
              let table = this.CrcPreCalcTable;
              for(var i=0, l=data.length; i<l; i++){
                  crc = crc >>> 8 ^ table[ crc & 255 ^ data[i] ];
              }
              return crc;
          },
        zipFiles(zipFilename, allFiles, progress) {
            let that = this;
            let mimeType = "application/zip";
            let writerContainer = {};
            let zipFuture = peergos.shared.util.Futures.incomplete();
            let fileStream = streamSaver.createWriteStream(zipFilename, mimeType,
                function (url) {
                    let link = document.createElement('a')
                    let click = new MouseEvent('click')
                    link.type = mimeType
                    link.href = url
                    link.dispatchEvent(click)
                    that.startZipDownload(zipFilename, allFiles, progress, zipFuture, writerContainer);
                },function (seekHi, seekLo, seekLength, uuid) {},undefined, progress.max);
            writerContainer.writer = fileStream.getWriter();
            return zipFuture;
        },
        reduceZippingFiles(allFiles, index, future, progress, writer, zipFilename, state) {
            let that = this;
            if (index == allFiles.length) {
                future.complete(true);
            } else {
                let fileEntry = allFiles[index];
                this.zipFile(fileEntry, progress, writer, zipFilename, state).thenApply(res => {
                    that.reduceZippingFiles(allFiles, ++index, future, progress, writer, zipFilename, state);
                }).exceptionally(function(throwable) {
                    console.log(throwable);
                    that.showToastError("Unable to process file: " + file.getName());
                    future.complete(false);
                });
            }
        },
        startZipDownload(zipFilename, allFiles, progress, completedZipping, writerContainer) {
            let that = this;
            this.precalcCrc32();
            let writer = writerContainer.writer;
            let future = peergos.shared.util.Futures.incomplete();
            let state = {centralRecord: [], offset: BigInt(0), fileCount: 0, archiveNeedsZip64: false};
            this.reduceZippingFiles(allFiles, 0, future, progress, writer, zipFilename, state);
            future.thenApply(done => {
                if (done) {
                    // write central repository
                    let centralSize = 0
                    for (var i =0 ; i < state.centralRecord.length; i++) {
                        let record = state.centralRecord[i];
                        centralSize += record.length;
                    }
                    if (state.archiveNeedsZip64 || state.offset >= 0xffffffffn) {
                        const endZip64 = that.makeBuffer(that.ZipConstants.zip64endRecordLength + that.ZipConstants.zip64endLocatorLength)
                        // 4.3.14 Zip64 end of central directory record
                        endZip64.setUint32(0, that.ZipConstants.zip64endRecordSignature)
                        endZip64.setBigUint64(4, BigInt(that.ZipConstants.zip64endRecordLength - 12), true)
                        endZip64.setUint32(12, 0x2d03_2d_00) // UNIX app version 4.5 | ZIP version 4.5
                        // leave 8 bytes at zero
                        endZip64.setBigUint64(24, BigInt(state.fileCount), true)
                        endZip64.setBigUint64(32, BigInt(state.fileCount), true)
                        endZip64.setBigUint64(40, BigInt(centralSize), true)
                        endZip64.setBigUint64(48, BigInt(state.offset), true)

                        // 4.3.15 Zip64 end of central directory locator
                        endZip64.setUint32(56, that.ZipConstants.zip64endLocatorSignature)
                        // leave 4 bytes at zero
                        endZip64.setBigUint64(64, state.offset + BigInt(centralSize), true)
                        endZip64.setUint32(72, 1, true)
                        let zip64end = that.makeUint8Array(endZip64)
                        combinedCentralRecord = new Uint8Array(centralSize + zip64end.length);
                        combinedCentralRecord.set(zip64end, centralSize);
                    } else {
                        combinedCentralRecord = new Uint8Array(centralSize);
                    }
                    var insertOffset = 0;
                    for (var i =0 ; i < state.centralRecord.length; i++) {
                        let record = state.centralRecord[i];
                        combinedCentralRecord.set(record, insertOffset);
                        insertOffset += record.length;
                    }
                    writer.write(combinedCentralRecord).then(() => {
                        const end = that.makeBuffer(that.ZipConstants.endLength)
                        end.setUint32(0, that.ZipConstants.endSignature)
                        // skip 4 useless bytes here
                        end.setUint16(8, that.clampInt16(state.fileCount), true)
                        end.setUint16(10, that.clampInt16(state.fileCount), true)
                        end.setUint32(12, that.clampInt32(centralSize), true)
                        end.setUint32(16, that.clampInt32(state.offset), true)
                        // leave comment length = zero (2 bytes)
                        let zipEnd = that.makeUint8Array(end)
                        writer.write(zipEnd).then(() => {
                            writer.close()
                            completedZipping.complete(done);
                        });
                    });
                } else {
                    writer.close()
                    completedZipping.complete(done);
                }
            });
        },
        zipFile(fileEntry, progress, writer, zipFilename, state) {
            let future = peergos.shared.util.Futures.incomplete();
            let file = fileEntry.file;
            let path = fileEntry.path == '' ? '' : fileEntry.path + '/';
            var props = file.getFileProperties()
            var that = this;
            file.getInputStream(this.context.network, this.context.crypto, props.sizeHigh(), props.sizeLow(),
                function (read) {
                    progress.done += read.value_0;
                    if (progress.done >= progress.max) {
                        setTimeout(function () {
                            that.$toast.dismiss(zipFilename);
                        }, 100);
                    }
                }
            ).thenApply(function (reader) {
                console.log('zipping: ' + path + file.getName());
                var crc = -1; // Begin with all bits set ( 0xffffffff )
                let fileEncodedName = new TextEncoder().encode(path + file.getName());
                let header = that.createZipFileHeader(props, fileEncodedName);
                let fileSize = that.getFileSize(props);
                writer.write(header).then(() => {
                    var size = that.getFileSize(props);
                    var maxBlockSize = 1024 * 1024 * 5;
                    var blockSize = size > maxBlockSize ? maxBlockSize : size;
                    let pump = () => {
                        if (blockSize == 0) {
                            crc = (crc ^ -1) >>> 0; // Apply binary NOT

                            const bigFile = fileSize >= 0xffffffffn;
                            const bigOffset = state.offset >= 0xffffffffn;
                            const zip64HeaderLength = (+bigOffset * 12 | +bigFile * 28);
                            let descriptor = that.createDataDescriptor(crc, fileSize, bigFile);
                            writer.write(descriptor).then(() => {
                                let centralHeader = that.createCentralHeader(fileEncodedName, props, crc, fileSize, state.offset, zip64HeaderLength);
                                state.centralRecord.push(centralHeader);
                                state.centralRecord.push(fileEncodedName);
                                if (zip64HeaderLength) {
                                    state.centralRecord.push(that.createZip64ExtraField(fileSize, state.offset, zip64HeaderLength))
                                }
                                if (bigFile) {
                                    state.offset += 8n // because the data descriptor will have 64-bit sizes
                                }
                                state.fileCount++
                                state.offset += BigInt(that.ZipConstants.fileHeaderLength)
                                    + BigInt(that.ZipConstants.descriptorLength) + BigInt(fileEncodedName.length) + BigInt(fileSize)
                                state.archiveNeedsZip64 ||= bigFile

                                future.complete(true);
                            });
                        } else {
                            var data = convertToByteArray(new Uint8Array(blockSize))
                            reader.readIntoArray(data, 0, blockSize).thenApply(function (read) {
                                size = size - read.value_0;
                                blockSize = size > maxBlockSize ? maxBlockSize : size;
                                crc = that.crc32(data, crc);
                                writer.write(data).then(() => {
                                    setTimeout(pump);
                                })
                            })
                        }
                    }
                    pump();
                });
            }).exceptionally(function (throwable) {
                console.log(throwable);
                that.showToastError("Unable to zip file: " + file.getName());
                future.complete(false);
            })
            return future;
        },
        //zip code from https://github.com/Touffy/client-zip MIT license
        makeBuffer(size) {
        	return new DataView(new ArrayBuffer(size));
        },
        makeUint8Array(thing) {
        	return new Uint8Array(thing.buffer || thing);
        },
        clampInt32(n) {
        	return Math.min(0xffffffff, Number(n));
        },
        clampInt16(n) {
        	return Math.min(0xffff, Number(n));
        },
        toJsDate(dateTime) {
            let date = new Date(dateTime.toString() + "+00:00");//adding UTC TZ in ISO_OFFSET_DATE_TIME ie 2021-12-03T10:25:30+00:00
            return date;
        },
        createZip64ExtraField(fileSize, offset, zip64HeaderLength) {
            const header = this.makeBuffer(zip64HeaderLength)
            header.setUint16(0, 1, true)
            header.setUint16(2, zip64HeaderLength - 4, true)
            if (zip64HeaderLength & 16) {
                header.setBigUint64(4, BigInt(fileSize), true)
                header.setBigUint64(12, BigInt(fileSize), true)
            }
            header.setBigUint64(zip64HeaderLength - 8, offset, true)
            return this.makeUint8Array(header)
        },
        createCentralHeader: function(fileEncodedName, fileProps, crc, fileSize, offset, zip64HeaderLength) {
            const header = this.makeBuffer(this.ZipConstants.centralHeaderLength)
            header.setUint32(0, this.ZipConstants.centralHeaderSignature)
            header.setUint32(4, 0x2d03_2d_00) // UNIX app version 4.5 | ZIP version 4.5
            header.setUint16(8, 0x0800) // flags, bit 3 on
            // leave compression = zero (2 bytes) until we implement compression
            this.formatDOSDateTime(this.toJsDate(fileProps.modified), header, 12)
            header.setUint32(16, crc, true)
            header.setUint32(20, this.clampInt32(fileSize), true)
            header.setUint32(24, this.clampInt32(fileSize), true)
            header.setUint16(28, fileEncodedName.length, true)
            header.setUint16(30, zip64HeaderLength, true)
            // useless disk fields = zero (4 bytes)
            // useless attributes = zero (4 bytes)
            header.setUint16(40, 0o100664, true) // UNIX regular file, permissions 664
            header.setUint32(42, this.clampInt32(offset), true) // offset
            return this.makeUint8Array(header)
        },
        createDataDescriptor(crc, fileSize, needsZip64) {
          const header = this.makeBuffer(this.ZipConstants.descriptorLength + (needsZip64 ? 8 : 0))
          header.setUint32(0, this.ZipConstants.descriptorSignature)
          header.setUint32(4, crc, true)
          if (needsZip64) {
              header.setBigUint64(8, BigInt(fileSize), true)
              header.setBigUint64(16, BigInt(fileSize), true)
          } else {
            header.setUint32(8, this.clampInt32(fileSize), true)
            header.setUint32(12, this.clampInt32(fileSize), true)
          }
          return this.makeUint8Array(header)
        },
        createZipFileHeader(fileProps, fileEncodedName) {
            const header = this.makeBuffer(this.ZipConstants.fileHeaderLength + fileEncodedName.length)
            header.setUint32(0, this.ZipConstants.fileHeaderSignature)
            header.setUint32(4, 0x2d_00_0800) // ZIP version 4.5 | flags, bit 3 on = size and CRCs will be zero
            // leave compression = zero (2 bytes) until we implement compression
            this.formatDOSDateTime(this.toJsDate(fileProps.modified), header, 10)
            // leave CRC = zero (4 bytes) because we'll write it later, in the central repo
            // leave lengths = zero (2x4 bytes) because we'll write them later, in the central repo
            header.setUint16(26, fileEncodedName.length, true)
            // leave extra field length = zero (2 bytes)
            let headerBytes = this.makeUint8Array(header)
            headerBytes.set(fileEncodedName, this.ZipConstants.fileHeaderLength);
            return headerBytes;
        },
        formatDOSDateTime(date, into, offset = 0) {
            const dosTime = date.getSeconds() >> 1
            | date.getMinutes() << 5
            | date.getHours() << 11

            const dosDate = date.getDate()
            | (date.getMonth() + 1) << 5
            | (date.getFullYear() - 1980) << 9

            into.setUint16(offset, dosTime, true)
            into.setUint16(offset + 2, dosDate, true)
        }
  }
}
},{ "../../components/drive/ProgressBar.vue": 48}], 106:[function(require,module,exports){
var App  			= require('./components/App.vue');
Vue.component('App', Vue.extend(App));

Vue.directive('focus', {
  inserted: function (el) {
    // Focus the element
    el.focus()
  }
})

Vue.config.productionTip = false;

Vue.use(Vuex);
var store = require('./store/index.js');

const ToastOptions = {
	hideProgressBar: true,
	maxToasts: 3,
	showCloseButtonOnHover: true,
	position: 'bottom-right'
};

Vue.use( VueToastification.default, ToastOptions);

// Initializing Vue after GWT has finished
setTimeout(function() {
    var vueRoot = new Vue({
		el: '#app',
		store,
        data: {
            currentView: 'App',
        },
        render: function() {
            with(this){return _c('div',{staticClass:"fillspace",attrs:{"id":"app"}},[_c(currentView,{tag:"component"})],1)}
        }
    });
}, 500);

console.log("█╗█╗█╗█╗   ██████╗ ███████╗███████╗██████╗  ██████╗  ██████╗ ███████╗   █╗█╗█╗█╗\n" +
            " █████╔╝   ██╔══██╗██╔════╝██╔════╝██╔══██╗██╔════╝ ██╔═══██╗██╔════╝    █████╔╝\n" +
            " ██ ██║    ██████╔╝█████╗  █████╗  ██████╔╝██║  ███╗██║   ██║███████╗    ██ ██║\n" +
            " █████║    ██╔═══╝ ██╔══╝  ██╔══╝  ██╔══██╗██║   ██║██║   ██║╚════██║    █████║\n" +
            "███████╗   ██║     ███████╗███████╗██║  ██║╚██████╔╝╚██████╔╝███████║   ███████╗\n" +
            "╚══════╝   ╚═╝     ╚══════╝╚══════╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚══════╝   ╚══════╝");
},{ "./components/App.vue": 104, "./store/index.js": 105}], 105:[function(require,module,exports){// TODO: split store in modules (UI, Settings, Storage, Drive,...)

const helpers = require("../mixins/storage/index.js");
function shallow(val) {
    // tag a value so vue will only shallow watch it
    if (val != null) {
        val._isVue = true;
    }
    return val;
}
module.exports = new Vuex.Store({
	state: {
		windowWidth: null,
		currentView: null,
		isDark: false,
		isSidebarOpen: false,
		showModal: false,
		currentModal: 'AppModal',

		quotaBytes: 0,
		usageBytes: 0,
		isSecretLink: false,

		crypto: null,
		network: null,
        context: null,
        mirrorBatId: null,
		download: null,
		open: null,
		initPath: null,

		paymentProperties: null,

		isLoggedIn: false,
		isAdmin: false,

		driveMenuTarget: null,
		path: [],
		currentFilename: "",
        currentFeedback: "",
		// urlProps: null

		socialData: {
			annotations: {},
			friends: [],
			followers: [],
			following: [],
			pending: [],
			pendingOutgoing: [],
			blocked: [],
			groupsNameToUid: {},
			groupsUidToName: {}
		},
        sandboxedApps: {
            appFileExtensionRegistrationMap: new Map(),
            appMimeTypeRegistrationMap: new Map(),
            appFileTypeRegistrationMap: new Map(),
            appFileExtensionWildcardRegistrationList: [],
            appMimeTypeWildcardRegistrationList: [],
            appFileTypeWildcardRegistrationList: [],
            appsInstalled: [],
            appsLoaded: false
        },
        shortcuts: {
            shortcutsMap: new Map()
        }
	},

	getters: {
		currentTheme: (state) => {
			return state.isDark ? "dark-mode" : "";
		},
		isMobile:(state) => {
			return state.windowWidth < 1024;
		},
		quota: (state) => {
			if (state.quotaBytes == 0)
				return "N/A";

			return helpers.convertBytesToHumanReadable(state.quotaBytes.toString());
		},
		usage: (state) => {
			if (state.usageBytes == 0)
				return "N/A";

			return helpers.convertBytesToHumanReadable(state.usageBytes.toString());
		},
		isSecretLink: (state) => {
			return state.context != null && state.context.username == null
		},
		getPath: (state) => {
			return '/' + state.path.join('/') + (state.path.length > 0 ? "/" : "");
		},
		currentFilename: (state) => {
			return state.currentFilename;
		},
		isPaid: (state) => {
			return state.paymentProperties != null && state.paymentProperties.isPaid()
		},
		getCurrentFeedback: (state) => {
			return state.currentFeedback;
		},
	},

	// Sync
	mutations: {
		// UI
		SET_WINDOW_WIDTH(state, payload) {
			state.windowWidth = payload;
		},
		SET_VIEW(state, payload) {
			state.view = payload;
		},
		SET_THEME(state, payload) {
			state.isDark = payload;
		},
		TOGGLE_THEME(state) {
			state.isDark = !state.isDark;
		},
		SET_SIDEBAR(state, payload) {
			state.isSidebarOpen = payload;
		},
		TOGGLE_SIDEBAR(state) {
			state.isSidebarOpen = !state.isSidebarOpen;
		},
		SET_MODAL(state, payload) {
			state.showModal = payload;
		},
		CURRENT_MODAL(state, payload) {
			state.currentModal = payload;
			state.showModal = true;
		},
		CURRENT_VIEW(state, payload) {
			state.currentView = payload;
		},

		// Settings
		SET_CRYPTO(state, payload) {
		    state.crypto = shallow(payload);
		},
		SET_NETWORK(state, payload) {
		    state.network = shallow(payload);
		},
		SET_CONTEXT(state, payload) {
		    state.context = shallow(payload);
		},
		SET_DOWNLOAD(state, payload) {
			state.download = payload;
		},
		SET_OPEN(state, payload) {
			state.open = payload;
		},
		SET_IS_SECRET_LINK(state, payload) {
			state.isSecretLink = payload;
		},
		SET_INIT_PATH(state, payload) {
			state.initPath = payload;
		},
		SET_PAYMENT_PROPERTIES(state, payload) {
			state.paymentProperties = payload;
		},

		// Storage
		SET_QUOTA(state, payload) {
			state.quotaBytes = payload;
		},
		SET_USAGE(state, payload) {
			state.usageBytes = payload;
		},

		// User
		USER_LOGIN(state, payload) {
			state.isLoggedIn = payload;
		},
		USER_ADMIN(state, payload) {
			state.isAdmin = payload;
		},
        SET_MIRROR_BAT_ID(state, payload) {
			state.mirrorBatId = payload;
		},
		//Drive
		// SET_DRIVE_MENU_POSITION(state, payload) {
		// 	state.driveMenuPosition = payload;
		// },
		SET_DRIVE_MENU_TARGET(state, payload) {
			state.driveMenuTarget = payload;
		},
		SET_PATH(state, payload) {
			state.path = payload;
		},
		SET_CURRENT_FILENAME(state, payload) {
			state.currentFilename = payload;
		},
		// SET_URL_PROPS(state, payload) {
		// 	state.urlProps = payload;
		// },
		SET_CURRENT_FEEDBACK(state, payload) {
			state.currentFeedback = payload;
		},
		// Social
		SET_ANOTATIONS(state, payload) {
			state.socialData.annotations = payload;
		},
		SET_FRIENDS(state, payload) {
			state.socialData.friends = payload;
		},
		SET_FOLLOWERS(state, payload) {
			state.socialData.followers = payload;
		},
		SET_FOLLOWING(state, payload) {
			state.socialData.following = payload;
		},
        SET_FOLLOWING_ROOTS(state, payload) {
            state.socialData.followingRoots = payload;
        },
		SET_GROUP_TO_NAME(state, payload) {
			state.socialData.groupsUidToName = payload;
		},
		SET_GROUP_TO_UID(state, payload) {
			state.socialData.groupsNameToUid = payload;
		},
		SET_PENDING_INCOMING(state, payload) {
			state.socialData.pending = payload;
		},
		SET_PENDING_OUTGOING(state, payload) {
			state.socialData.pendingOutgoing = payload;
		},
		SET_BLOCKED(state, payload) {
			state.socialData.blocked = payload;
		},
        //sandboxed Apps
        SET_FILE_EXTENSION_REGISTRATIONS(state, payload) {
            state.sandboxedApps.appFileExtensionRegistrationMap = payload;
        },
        SET_MIMETYPE_REGISTRATIONS(state, payload) {
            state.sandboxedApps.appMimeTypeRegistrationMap = payload;
        },
        SET_FILETYPE_REGISTRATIONS(state, payload) {
            state.sandboxedApps.appFileTypeRegistrationMap = payload;
        },
        SET_FILE_EXTENSION_WILDCARD_REGISTRATIONS(state, payload) {
            state.sandboxedApps.appFileExtensionWildcardRegistrationList = payload;
        },
        SET_MIMETYPE_WILDCARD_REGISTRATIONS(state, payload) {
            state.sandboxedApps.appMimeTypeWildcardRegistrationList = payload;
        },
        SET_FILETYPE_WILDCARD_REGISTRATIONS(state, payload) {
            state.sandboxedApps.appFileTypeWildcardRegistrationList = payload;
        },
        SET_SANDBOXED_APPS(state, payload) {
            state.sandboxedApps.appsLoaded = true;
            state.sandboxedApps.appsInstalled = payload;
        },
        SET_SHORTCUTS(state, payload) {
            state.shortcuts.shortcutsMap = payload;
        }
	},

	// Async
	actions: {
		updateQuota({ commit, state }, callback) {
			if (state.isSecretLink)
				return;
			return state.context.getQuota().thenApply(q => {
			    commit('SET_QUOTA', q)
				// return q;
				if (callback != null) {
					callback(q)
				}
            }).exceptionally(err => {
				if (callback != null) {
					callback(null);
				}
            });
		},

		updateUsage({ commit, state }, callback) {
			if (state.isSecretLink)
				return;

			return state.context.getSpaceUsage().thenApply(u => {
				commit('SET_USAGE', u);
                if (callback != null) {
                    callback(u)
                }
			});
		},

		updateMirrorBatId({ commit, state }) {
			if (state.isSecretLink)
				return;

			return state.context.ensureMirrorId().thenApply(u => {
				commit('SET_MIRROR_BAT_ID', u);
			});
		},

		updatePayment({ commit, state }, callback) {
			state.context
				.getPaymentProperties(false)
				.thenApply(function (paymentProps) {
					commit("SET_PAYMENT_PROPERTIES", paymentProps);
					if (paymentProps.isPaid()) {
					    commit("SET_PAYMENT_PROPERTIES", paymentProps);
                                            if (callback != null)
                                                callback()
					} else {
						state.context.getPendingSpaceRequests().thenApply(reqs => {
						if (reqs.toArray([]).length > 0)
							commit("USER_ADMIN", true);
						});
					}
				});
		},

		updateSocial({ commit, state }, callback) {

			return state.context.getSocialState().thenApply(function (socialState) {

				let annotations = {}
				socialState.friendAnnotations.keySet().toArray([]).map(name => annotations[name]=socialState.friendAnnotations.get(name))
				commit('SET_ANOTATIONS', annotations)


				let followerNames = socialState.followerRoots.keySet().toArray([])
				let followeeNames = socialState.followingRoots.toArray([]).map(function (f) { return f.getFileProperties().name })
				let friendNames = followerNames.filter(x => followeeNames.includes(x))
				followerNames = followerNames.filter(x => !friendNames.includes(x))
				followeeNames = followeeNames.filter(x => !friendNames.includes(x))

				commit('SET_FRIENDS', friendNames)
				commit('SET_FOLLOWERS', followerNames)
				commit('SET_FOLLOWING', followeeNames)
				commit('SET_FOLLOWING_ROOTS', socialState.followingRoots)

				let groupsUidToName = {}
				socialState.uidToGroupName.keySet().toArray([]).map(uid => groupsUidToName[uid] = socialState.uidToGroupName.get(uid))
				commit('SET_GROUP_TO_NAME', groupsUidToName)

				let groupsNameToUid = {}
				socialState.groupNameToUid.keySet().toArray([]).map(name => groupsNameToUid[name]=socialState.groupNameToUid.get(name));
				commit('SET_GROUP_TO_UID', groupsNameToUid)

				let pendingOutgoingUsernames = [];
				socialState.pendingOutgoing.toArray([]).map(u => pendingOutgoingUsernames.push(u));
				commit('SET_PENDING_OUTGOING', pendingOutgoingUsernames)

				commit('SET_PENDING_INCOMING', socialState.pendingIncoming.toArray([]))

				let blockedUsernames = [];
				socialState.blocked.toArray([]).filter(u => u.length > 0).map(i => blockedUsernames.push(i));
				commit('SET_BLOCKED', blockedUsernames)

				if (callback != null) {
					callback()
				}


			}).exceptionally(function(throwable) {
				return `Error retrieving social state ${throwable.getMessage()}`
			});
		}
	}
});
},{ "../mixins/storage/index.js": 85}], 96:[function(require,module,exports){
const AppHeader = require("../components/AppHeader.vue");
const Choice = require('../components/choice/Choice.vue');
const Confirm = require("../components/confirm/Confirm.vue");
const Share = require("../components/drive/DriveShare.vue");
const ProgressBar = require("../components/drive/ProgressBar.vue");
const Prompt = require("../components/prompt/Prompt.vue");
const Spinner = require("../components/spinner/Spinner.vue");
const i18n = require("../i18n/index.js");

const routerMixins = require("../mixins/router/index.js");

module.exports = {
render: function() {with(this){return _c('article',{staticClass:"app-view calendar-view"},[_c('AppHeader',{scopedSlots:_u([{key:"primary",fn:function(){return [_c('h1',[_v(_s(translate("CALENDAR.TITLE")))])]},proxy:true}])}),_v(" "),_c('main',[(showSpinner)?_c('Spinner',{attrs:{"message":spinnerMessage}}):_e(),_v(" "),_c('a',{staticStyle:{"display":"none"},attrs:{"id":"downloadEventAnchor"}}),_v(" "),_c('iframe',{staticStyle:{"width":"100%","min-height":"100vh"},attrs:{"id":"calendar-iframe","src":frameUrl(),"frameBorder":"0"}}),_v(" "),(showChoice)?_c('Choice',{attrs:{"choice_message":choice_message,"choice_body":choice_body,"choice_consumer_func":choice_consumer_func,"choice_options":choice_options},on:{"hide-choice":function($event){showChoice = false}}}):_e(),_v(" "),(showPrompt)?_c('Prompt',{attrs:{"prompt_message":prompt_message,"placeholder":prompt_placeholder,"max_input_size":prompt_max_input_size,"value":prompt_value,"consumer_func":prompt_consumer_func},on:{"hide-prompt":function($event){showPrompt = false}}}):_e(),_v(" "),(showConfirm)?_c('Confirm',{attrs:{"confirm_message":confirm_message,"confirm_body":confirm_body,"consumer_cancel_func":confirm_consumer_cancel_func,"consumer_func":confirm_consumer_func},on:{"hide-confirm":function($event){showConfirm = false}}}):_e(),_v(" "),(showShare)?_c('Share',{attrs:{"data":sharedWithData,"fromApp":fromApp,"displayName":displayName,"allowReadWriteSharing":allowReadWriteSharing,"allowCreateSecretLink":allowCreateSecretLink,"autoOpenSecretLink":true,"files":filesToShare,"path":pathToFile,"followernames":followernames,"friendnames":friendnames,"groups":groups,"messages":messages},on:{"hide-share-with":closeShare,"update-shared-refresh":function($event){forceSharedRefreshWithUpdate++},"update-files":function($event){return updateSharedFile()}}}):_e()],1)],1)}},    components: {
        Choice,
        Confirm,
		Share,
		AppHeader,
		ProgressBar,
		Prompt,
		Spinner
	},
	data: function() {
        return {
            APPS_DIR_NAME: '.apps',
            CALENDAR_DIR_NAME: 'calendar',
            DATA_DIR_NAME: 'data',
            CALENDAR_FILE_EXTENSION: '.ics',
            CONFIG_FILENAME: 'App.config',
            NEW_CALENDAR_FILENAME: 'calendar.inf',
            showSpinner: false,
            showShare: false,
            spinnerMessage: "",
            calendarProperties: null,
            showPrompt: false,
            prompt_message: '',
            prompt_placeholder: '',
            prompt_max_input_size: null,
            prompt_value: '',
            prompt_consumer_func: () => {},
            showConfirm: false,
            confirm_message: "",
            confirm_body: "",
            confirm_consumer_cancel_func: () => {},
            confirm_consumer_func: () => {},
            showChoice: false,
            choice_message: '',
            choice_body: '',
            choice_consumer_func: () => {},
            choice_options: [],
            isIframeInitialised: false,
            importFile: null,
            importCalendarPath: null,
            owner: null,
            loadCalendarAsGuest: false,
            hasEmail: false
        }
    },
    props: ['messages'],
	computed: {
		...Vuex.mapState([
			'context',
			'socialData',
			'mirrorBatId',
		]),
		...Vuex.mapGetters([
			'isSecretLink',
			'getPath',
			'currentFilename'
		]),
        friendnames: function() {
            return this.socialData.friends;
        },
        followernames: function() {
            return this.socialData.followers;
        },
        groups: function() {
		    return {groupsNameToUid: this.socialData.groupsNameToUid, groupsUidToName: this.socialData.groupsUidToName};
	    },
	},
	mixins:[routerMixins, i18n],
    created() {
        let that = this;
        this.displaySpinner();
        this.getInputParameters().thenApply(inputParameters => {
            that.loadInputParameters(inputParameters).thenApply(loadedParameters => {
                if (loadedParameters != null) {
                    that.importFile = loadedParameters.importFile;
                    that.importCalendarPath = loadedParameters.importCalendarPath;
                    that.owner = loadedParameters.owner;
                    that.hasEmail = loadedParameters.hasEmail;
                    that.loadCalendarAsGuest = that.isSecretLink;
                    peergos.shared.user.App.init(that.context, "calendar").thenApply(calendar => {
                        if (that.loadCalendarAsGuest) {
                            that.startListener(calendar);
                        } else {
                            that.getPropertiesFile(calendar).thenApply(props => {
                                that.calendarProperties = props;
                                that.startListener(calendar)
                            })
                        }
                    });
                }
            });
        });
    },
	mounted(){
	},
    methods: {
    getInputParameters: function() {
        let that = this;
        let future = peergos.shared.util.Futures.incomplete();
        const props = this.getPropsFromUrl();
        
        let filename = props.args.filename;
        let isFile = filename != null && filename.length > 0;
        if (!isFile) {
            //loading calendar from left hand menu + shared calendar importing
            future.complete({path: props.path, filename: null});
        } else {
            //shared calendar item importing
            future.complete({path: props.path, filename: filename});
        }
        return future;
    },
    loadInputParameters: function(inputParameters) {
      let future = peergos.shared.util.Futures.incomplete();
      if (inputParameters == null) {
        future.complete(null);
        return future;
      }
      let path = inputParameters.path
      let filename = inputParameters.filename;
      let query = new URLSearchParams(window.location.search)
      let hasEmail = query.get("email") == "true";
      let that = this;
      if (filename == null) {
            if (path == that.context.username) {
                future.complete({importFile: null, importCalendarPath: null,
                    owner: that.context.username, hasEmail: hasEmail});
            } else {
                that.context.getByPath(path).thenApply(dirOpt => {
                    if (! dirOpt.isPresent()) {
                        that.$toast.error(that.translate('CALENDAR.ERROR.LOAD'), {timeout:false});
                        future.complete(null);
                    } else {
                        let dir = dirOpt.get();
                        let dirParts = path.split('/').filter(s => s.length > 0);
                        future.complete({importFile: null, importCalendarPath: path,
                            owner: dirParts[0], hasEmail: hasEmail});
                    }
                });
            }
      } else {
            that.context.getByPath(path + (path.endsWith("/") ? "" : '/') + filename).thenApply(fileOpt => {
                if (! fileOpt.isPresent()) {
                    that.$toast.error(that.translate('CALENDAR.ERROR.LOAD.FILE'), {timeout:false});
                    future.complete(null);
                    return;
                }
                let file = fileOpt.get();
                let props = file.getFileProperties();
                file.getInputStream(that.context.network, that.context.crypto, props.sizeHigh(), props.sizeLow(), function(read) {})
                .thenCompose(function(reader) {
                    var size = that.getFileSize(props);
                    var data = convertToByteArray(new Int8Array(size));
                    return reader.readIntoArray(data, 0, data.length)
                    .thenApply(function(read){
                        future.complete({importFile: new TextDecoder().decode(data), importCalendarPath: null,
                            owner: file.getOwnerName(), hasEmail: hasEmail});
                    });
                });
            });
      }
      return future;
    },
    getFileSize: function(props) {
            var low = props.sizeLow();
            if (low < 0) low = low + Math.pow(2, 32);
            return low + (props.sizeHigh() * Math.pow(2, 32));
    },
    frameUrl: function() {
        return this.frameDomain() + "/apps/calendar/index.html";
    },
    frameDomain: function() {
        return window.location.protocol + "//calendar." + window.location.host;
    },
    postMessage: function(obj) {
    	var iframe = document.getElementById("calendar-iframe");
        if (this.isIframeInitialised) {
            iframe.contentWindow.postMessage(obj, '*');
        } else {
            let that = this;
            this.sendPing(iframe);
            window.setTimeout(function() {that.postMessage(obj);}, 30);
        }
    },
    sendPing: function(iframe) {
        let theme = this.$store.getters.currentTheme;
        iframe.contentWindow.postMessage({type: 'ping', currentTheme: theme, hasEmail: this.hasEmail}, '*');
    },
    initialiseIFrameCommunication: function(iframe, callback, retryCount){
        if (this.isIframeInitialised) {
            callback();
        } else {
            if (retryCount == 0) {
                this.$toast.error("Unable to register service worker. Calendar will not work offline. \nTo enable offline usage, allow 3rd party cookies for " + window.location.protocol + "//[*]." + window.location.host + "\n Note: this is not tracking", {timeout:false});
                callback();
            }else {
                let that = this;
                this.sendPing(iframe);
                window.setTimeout(function() {that.initialiseIFrameCommunication(iframe, callback, retryCount - 1);}, 100);
            }
        }
    },
    startListener: function(calendar) {
	    var that = this;
	    var iframe = document.getElementById("calendar-iframe");
	    if (iframe == null) {
    		setTimeout(function(){that.startListener(calendar)}, 1000);
	    	return;
	    }
        // Listen for response messages from the frames.
        window.addEventListener('message', function (e) {
            // Normally, you should verify that the origin of the message's sender
            // was the origin and source you expected. This is easily done for the
            // unsandboxed frame. The sandboxed frame, on the other hand is more
            // difficult. Sandboxed iframes which lack the 'allow-same-origin'
            // header have "null" rather than a valid origin. This means you still
            // have to be careful about accepting data via the messaging API you
            // create. Check that source, and validate those inputs!
            if ((e.origin === "null" || e.origin === that.frameDomain()) && e.source === iframe.contentWindow) {
                if (e.data.type == 'pong') {
                    that.isIframeInitialised = true;
                } else if(e.data.type=="save") {
                    that.saveEvent(calendar, e.data);
                } else if(e.data.type=="saveAll") {
                    that.saveAllEvents(calendar, e.data);
                } else if(e.data.type=="deleteCalendar") {
                    that.deleteCalendar(calendar, e.data);
                } else if(e.data.type=="delete") {
                    that.deleteEvent(calendar, e.data);
                } else if(e.data.type=="displaySpinner") {
                    that.displaySpinner();
                } else if(e.data.type=="removeSpinner") {
                    that.removeSpinner();
                } else if(e.data.type=="displayMessage") {
                    that.displayMessage(e.data.message);
                } else if(e.data.type=="loadAdditional") {
                    that.loadAdditional(calendar, e.data.year, e.data.month, 'loadAdditional');
                } else if(e.data.type=="downloadEvent") {
                    that.downloadEvent(calendar, e.data.title, e.data.event);
                } else if(e.data.type=="sendEventToNativeEmailClient") {
                    that.sendEventToNativeEmailClient(e.data.calendarName, e.data.id, e.data.year, e.data.month, e.data.isRecurring, e.data.title);
                } else if(e.data.type=="emailEvent") {
                    that.emailEvent(e.data.calendarName, e.data.id, e.data.year, e.data.month, e.data.isRecurring, e.data.title);
                } else if(e.data.type=="shareCalendarEvent") {
                    that.shareCalendarEvent(e.data.calendarName, e.data.id, e.data.year, e.data.month, e.data.isRecurring);
                } else if (e.data.action == 'requestRenameCalendar') {
                    that.renameCalendarRequest(calendar, e.data.calendar);
                } else if (e.data.action == 'requestCalendarColorChange') {
                    that.calendarColorChangeRequest(calendar, e.data.calendarName, e.data.newColor);
                } else if (e.data.action == 'requestAddCalendar') {
                    that.addCalendarRequest(calendar, e.data.newColor);
                } else if (e.data.action == 'requestChoiceSelection') {
                    that.requestChoiceSelection(e.data.method, e.data.includeChangeAll);
                } else if(e.data.action=="shareCalendar") {
                    that.shareCalendar(e.data.calendar);
                }
            }
        });
	    // Note that we're sending the message to "*", rather than some specific
            // origin. Sandboxed iframes which lack the 'allow-same-origin' header
            // don't have an origin which you can target: you'll have to send to any
            // origin, which might alow some esoteric attacks. Validate your output!
        let date = new Date();
        let year = 1900 + date.getYear();
        let month = date.getMonth() + 1;
        that.initialiseIFrameCommunication(iframe, function(){
            if (that.importFile != null) {
                that.importICSFile(calendar, year, month);
            } else if (that.importCalendarPath != null) {
                if (that.loadCalendarAsGuest) {
                    let pathArr = that.importCalendarPath.split('/').filter(n => n.length > 0)
                    let calendarDirectory = pathArr[pathArr.length - 1];
                    that.readCalendarFile(calendar, that.owner, calendarDirectory).thenApply(function(json) {
                        that.calendarProperties = new Object();
                        that.calendarProperties.calendars = [];
                        that.calendarProperties.calendars.push({name: json.name, owner: that.owner,
                           directory: calendarDirectory, color: json.color});
                       that.loadCalendars(calendar, year, month);
                    });
                } else {
                    that.importSharedCalendar(calendar, year, month);
                }
            } else {
                that.load(calendar, year, month);
            }
        }, 100);
	},
	closeShare: function() {
            this.showShare = false;
        },
        shareWith: function(app, filename, allowReadWriteSharing, allowCreateSecretLink, nameToDisplay) {
            let dirPath = this.context.username + "/.apps/" + app;
            this.showShareWithForFile(dirPath, filename, allowReadWriteSharing, allowCreateSecretLink, nameToDisplay);
        },
        showShareWithForFile: function(dirPath, filename, allowReadWriteSharing, allowCreateSecretLink, nameToDisplay) {
            let that = this;
            var context = this.context;
            this.context.getByPath(dirPath)
                .thenApply(function(dir){dir.get().getChild(filename, that.context.crypto.hasher, that.context.network).thenApply(function(child){
                    let file = child.get();
                    if (file == null) {
                        return;
                    }
                    that.filesToShare = [file];
                    that.pathToFile = dirPath.split('/');
                    let directoryPath = peergos.client.PathUtils.directoryToPath(that.pathToFile);
                    context.getDirectorySharingState(directoryPath).thenApply(function(updatedSharedWithState) {
                        let fileSharedWithState = updatedSharedWithState.get(file.getFileProperties().name);
                        let read_usernames = fileSharedWithState.readAccess.toArray([]);
                        let edit_usernames = fileSharedWithState.writeAccess.toArray([]);
                        that.sharedWithData = {read_shared_with_users:read_usernames, edit_shared_with_users:edit_usernames};
                        that.fromApp = true;
                        that.displayName = nameToDisplay != null && nameToDisplay.length > 0 ?
                                                     nameToDisplay : file.getFileProperties().name;
                        that.allowReadWriteSharing = allowReadWriteSharing;
                        that.allowCreateSecretLink = allowCreateSecretLink;
                        that.showShare = true;
                    });
                })});
        },
        requestChoiceSelection: function(method, includeChangeAll) {
	    let that = this;
        this.choice_message = method + ' ' + this.translate('CALENDAR.EVENT');
        this.choice_body = '';
        this.choice_consumer_func = (index) => {
            //console.log("response=" + response);
            let chosenIndex = includeChangeAll ? index : index + 1;
            that.postMessage({type: 'respondChoiceSelection', optionIndex: chosenIndex, method: method});
        };
        let options = [];
        if (includeChangeAll) {
            options.push(this.translate('CALENDAR.ALL.EVENTS'));
        }
        options.push(this.translate('CALENDAR.THIS.EVENT'));
        options.push(this.translate('CALENDAR.FUTURE.EVENTS'));
        this.choice_options = options;
        this.showChoice = true;
	},
    renameCalendarRequest: function(calendar, calendarItem) {
        let that = this;
        this.prompt_placeholder = this.translate('CALENDAR.NEW.NAME');
        this.prompt_value = calendarItem.name;
        this.prompt_message = this.translate('CALENDAR.ENTER.NAME');
        this.prompt_max_input_size = 20;
        this.prompt_consumer_func = function(prompt_result) {
            if (prompt_result === null)
                return;
            if (prompt_result === calendarItem.name)
                return;
            let newName = prompt_result.trim();
            if (newName === '')
                return;
            if (newName === '.' || newName === '..')
                return;
            if (!newName.match(/^[a-z\d\-_\s]+$/i)) {
                that.showMessage(true, that.translate('CALENDAR.INVALID.NAME'));
                return;
            }
            setTimeout(function(){
                //make sure names are unique
                for (var i=0;i < that.calendarProperties.calendars.length; i++) {
                    let calendar = that.calendarProperties.calendars[i];
                    if (calendar.name == newName) {
                        return;
                    }
                }
                var calendarToChange = null;
                for (var i=0;i < that.calendarProperties.calendars.length; i++) {
                    let calendar = that.calendarProperties.calendars[i];
                    if (calendar.name == calendarItem.name) {
                        calendarToChange = calendar;
                        break;
                    }
                }
                calendarToChange.name = newName;
                calendarItem.name = newName;
                that.displaySpinner();
                that.updatePropertiesFile(calendar, that.calendarProperties).thenApply(res => {
                    that.removeSpinner();
                    that.postMessage({type: 'respondRenameCalendar', calendar: calendarItem});
                });
            });
        };
        this.showPrompt =  true;
    },
    addCalendarRequest: function(calendar, newColor) {
        let that = this;
        this.prompt_placeholder = this.translate('CALENDAR.NEW.NAME');
        this.prompt_value = "";
        this.prompt_message = this.translate('CALENDAR.ENTER.NAME');
        this.prompt_max_input_size = 20;
        this.prompt_consumer_func = function(prompt_result) {
            if (prompt_result === null)
                return;
            let newName = prompt_result.trim();
            if (newName === '')
                return;
            if (newName === '.' || newName === '..')
                return;
            if (!newName.match(/^[a-z\d\-_\s]+$/i)) {
                that.showMessage(true, that.translate('CALENDAR.INVALID.NAME'));
                return;
            }
            setTimeout(function(){
                //make sure names are unique
                for (var i=0;i < that.calendarProperties.calendars.length; i++) {
                    let calendar = that.calendarProperties.calendars[i];
                    if (calendar.name == newName) {
                        return;
                    }
                }
                //create directory
                that.displaySpinner();
                let newId = String(that.calendarProperties.calendars.length + 1);
                let dirName = that.generateDirectoryName();
                that.calendarProperties.calendars.push({name:newName, directory:dirName, color: newColor, shareable: true});
                that.createCalendarFile(calendar, dirName, {name:newName, color: newColor}).thenApply(done => {
                    that.updatePropertiesFile(calendar, that.calendarProperties).thenApply(res => {
                        that.removeSpinner();
                        that.postMessage({type: 'respondAddCalendar', newId: newId, newName: newName, newColor: newColor});
                    });
                });
            });
        };
        this.showPrompt =  true;
    },
    isString: function(x) {
        return typeof x === 'string' || x instanceof String;
    },
    calendarColorChangeRequest: function(calendar, calendarName, newColor) {
        let that = this;
        if (!this.isString(newColor)) {
            return;
        }
        for (var i=0;i < that.calendarProperties.calendars.length; i++) {
            let calendar = that.calendarProperties.calendars[i];
            if (calendar.name == calendarName) {
                calendar.color = newColor;
                break;
            }
        }
        that.displaySpinner();
        that.updatePropertiesFile(calendar, that.calendarProperties).thenApply(res => {
            that.removeSpinner();
            that.postMessage({type: 'respondCalendarColorChange', calendarName: calendarName, newColor: newColor});
        });
    },
    //https://stackoverflow.com/questions/105034/how-to-create-guid-uuid
    generateDirectoryName: function() {
      return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
      ).substring(0, 8);
    },
    importICSFile: function(calendar, year, month) {
        let that = this;
        if (that.loadCalendarAsGuest) {
            that.postMessage({type: 'importICSFile', contents: that.importFile,
                isSharedWithUs: that.owner != that.context.username, loadCalendarAsGuest: that.loadCalendarAsGuest,
                username: that.context.username, confirmImport: that.confirmImport });
        } else {
            let importCalendarEventParams = {contents: that.importFile,
                isSharedWithUs: that.owner != that.context.username,
                loadCalendarAsGuest: that.loadCalendarAsGuest,
                username: that.context.username };
            this.loadCalendars(calendar, year, month, importCalendarEventParams);
        }
    },
    loadAdditional: function(calendar, year, month, messageType) {
        let that = this;
        this.getCalendarEventsForMonth(calendar, year, month).thenApply(function(allEvents) {
            that.loadAdditionalEvents(year, month, messageType, allEvents);
        });
    },
    loadAdditionalEvents: function(year, month, messageType, eventsThisMonth) {
        let that = this;
        let yearMonth = year * 12 + (month -1);
        that.postMessage({type: messageType, currentMonth: eventsThisMonth
            , yearMonth: yearMonth });
    },
    importSharedCalendar: function(calendar, year, month) {
        let that = this;
        let calendarDirectory = this.importCalendarPath.substring(this.importCalendarPath.lastIndexOf('/') +1);
        let existingCalendar = this.getCalendarForDirectory(calendarDirectory);
        if (existingCalendar != null) {
            that.showMessage(true, that.translate("CALENDAR.ALREADY.IMPORTED").replace("$NAME", existingCalendar.name));
            that.removeSpinner();
            that.close();
        } else {
            this.readCalendarFile(calendar, this.owner, calendarDirectory).thenApply(function(json) {
               that.removeSpinner();
               that.confirmImportCalendar(json.name,
                   () => {
                        that.showConfirm = false;
                        that.importCalendar(calendar, year, month, calendarDirectory, json.name, json.color);
                   },
                   () => { that.showConfirm = false; that.close();}
               );
            });
        }
    },
    importCalendar: function(calendar, year, month, directory, name, color) {
        let that = this;
        that.displaySpinner();
        let calendarName = name;
        var currentCalendarName = '' + calendarName;
        //make sure names are unique
        var done = false;
        var counter = 1;
        while (!done) {
            if (!that.calendarExists(currentCalendarName)) {
                done = true;
            } else {
                currentCalendarName = calendarName + ' (' + counter + ')';
                counter++;
            }
        }
        that.calendarProperties.calendars.push({name:currentCalendarName, owner: that.owner,
            directory: directory, color: color});
        that.updatePropertiesFile(calendar, that.calendarProperties).thenApply(res => {
            that.load(calendar, year, month);
        });
    },
    load: function(calendar, year, month) {
        let that = this;
        that.updateCalendarList(calendar).thenApply(function(modified) {
            if (modified) {
                that.updatePropertiesFile(calendar, that.calendarProperties).thenApply(res => {
                    that.loadCalendars(calendar, year, month);
                });
            } else {
                that.loadCalendars(calendar, year, month);
            }
        });
    },
    loadCalendars: function(calendar, year, month, importCalendarEventParams) {
        let that = this;
        that.getRecurringCalendarEvents(calendar).thenApply(function(recurringEvents) {
            that.getCalendarEventsAroundMonth(calendar, year, month).thenApply(function(allEvents) {
                that.loadEvents(year, month, allEvents.previous, allEvents.current,
                        allEvents.next, recurringEvents, importCalendarEventParams);
            });
        });
    },

    loadEvents: function(year, month, eventsPreviousMonth, eventsThisMonth, eventsNextMonth, recurringEvents, importCalendarEventParams) {
        let that = this;
        let yearMonth = year * 12 + (month-1);
        let calendars = [];
        for(var i=0;i < that.calendarProperties.calendars.length;i++) {
            let calendar = that.calendarProperties.calendars[i];
            calendars.push({name: calendar.name, color: calendar.color, owner: calendar.owner, shareable: calendar.shareable});
        }
        Vue.nextTick(function() {
            that.postMessage({type: 'load', previousMonth: eventsPreviousMonth,
                currentMonth: eventsThisMonth, nextMonth: eventsNextMonth, recurringEvents: recurringEvents,
                yearMonth: yearMonth, username: that.context.username, calendars: calendars, importCalendarEventParams: importCalendarEventParams});
        });
    },
    postDeleteCalendar: function(calendar, data) {
        let that = this;
        this.calendarProperties.calendars.splice(this.calendarProperties.calendars.findIndex(v => v.id === data.id), 1);
        this.updatePropertiesFile(calendar, this.calendarProperties).thenApply(res => {
            that.removeSpinner();
            that.postMessage({type: 'respondDeleteCalendar', calendar: data});
        });
    },
    deleteCalendar: function(calendar, data) {
        let that = this;
        var isSharedCalendar = false;
        for (var i=0; i < that.calendarProperties.calendars.length; i++) {
            let calendar = that.calendarProperties.calendars[i];
            if (calendar.name == data.calendarName) {
                if (calendar.owner != null && calendar.owner != that.context.username) {
                    isSharedCalendar = true;
                }
                break;
            }
        }
        this.confirmDeleteCalendar(data.calendarName,
            () => { that.showConfirm = false;
        	    that.displaySpinner();
        	    if (isSharedCalendar) {
                    that.postDeleteCalendar(calendar, data);
        	    } else {
                    let dirPath = peergos.client.PathUtils.directoryToPath(
                        [that.findCalendarDirectory(data.calendarName)]);
                    calendar.deleteInternal(dirPath).thenApply(function(res) {
                        that.postDeleteCalendar(calendar, data);
                    }).exceptionally(function(throwable) {
                        if (throwable.toString() == "java.util.NoSuchElementException") { //Because calendar had no events
                            that.postDeleteCalendar(calendar, data);
                        } else {
                            that.removeSpinner();
                            that.showMessage(true, that.translate('CALENDAR.ERROR.DELETE'));
                            console.log(throwable.getMessage());
                        }
                    });
                }
            },
            () => { that.showConfirm = false;}
        );
    },
    confirmDeleteCalendar: function(calendarName, deleteCalendarFunction, cancelFunction) {

        this.confirm_message= this.translate("CALENDAR.DELETE.CONFIRM").replace("$NAME", calendarName);
        this.confirm_body='';
        this.confirm_consumer_cancel_func = cancelFunction;
        this.confirm_consumer_func = deleteCalendarFunction;
        this.showConfirm = true;
    },
    removeCalendarEvent: function(calendar, calendarName, year, month, id, isRecurring) {
        let calendarDirectory = this.findCalendarDirectory(calendarName);
        let dirPath =  isRecurring ? calendarDirectory + "/recurring" : calendarDirectory + "/" + year + "/" + month;
        let filename = id + this.CALENDAR_FILE_EXTENSION;
        let filePath = peergos.client.PathUtils.toPath(dirPath.split('/'), filename);
        return calendar.deleteInternal(filePath);
    },
    deleteEvent: function(calendar, item) {
	    const that = this;
	    that.displaySpinner();
        this.removeCalendarEvent(calendar, item.calendarName, item.year, item.month, item.Id, item.isRecurring).thenApply(function(res) {
	        that.removeSpinner();
        }).exceptionally(function(throwable) {
            that.showMessage(true, that.translate("CALENDAR.ERROR.DELETE.EVENT"));
            console.log(throwable.getMessage());
	        that.removeSpinner();
        });
    },
    displaySpinner: function() {
        this.showSpinner = true;
    },
    removeSpinner: function() {
        this.showSpinner = false;
    },
    displayMessage: function(msg) {
        this.showMessage(true, msg);
    },
    getPropertiesFile: function(calendar) {
        let that = this;
        let filePath = peergos.client.PathUtils.directoryToPath([this.CONFIG_FILENAME]);
        return calendar.readInternal(filePath).thenApply(data => {
            return JSON.parse(new TextDecoder().decode(data));
        }).exceptionally(function(throwable) {//File not found
            if (throwable.detailMessage.startsWith("File not found")) {
                let props = new Object();
                props.calendars = [];
                props.calendars.push({name: 'My Calendar', directory: 'default', color: '#00a9ff'});
                return props;
            } else {
                that.showMessage(true, that.translate('CALENDAR.ERROR.LOAD.FILE'));
            }
        });
    },
    updatePropertiesFile: function(calendar, json) {
        let filePath = peergos.client.PathUtils.directoryToPath([this.CONFIG_FILENAME]);
        let encoder = new TextEncoder();
        let uint8Array = encoder.encode(JSON.stringify(json));
        let bytes = convertToByteArray(uint8Array);
        return calendar.writeInternal(filePath, bytes);
    },
    readCalendarFile: function(calendar, owner, directory) {
        let that = this;
        let filePath = peergos.client.PathUtils.directoryToPath([directory, this.NEW_CALENDAR_FILENAME]);
        return calendar.readInternal(filePath, owner).thenApply(data => {
            return JSON.parse(new TextDecoder().decode(data));
        }).exceptionally(function(throwable) {//File not found
            let props = new Object();
            props.calendars = [];
            props.calendars.push({name: this.owner + "-shared", color: '#00a9ff'});
            return props;
        });
    },
    createCalendarFile: function(calendar, directory, json) {
        let filePath = peergos.client.PathUtils.directoryToPath([directory, this.NEW_CALENDAR_FILENAME]);
        let encoder = new TextEncoder();
        let uint8Array = encoder.encode(JSON.stringify(json));
        let bytes = convertToByteArray(uint8Array);
        return calendar.writeInternal(filePath, bytes);
    },
    calendarExists: function(calendarName) {
        for (var i=0; i < this.calendarProperties.calendars.length; i++) {
            let calendar = this.calendarProperties.calendars[i];
            if (calendar.name == calendarName) {
                return true;
            }
        }
        return false;
    },
    getCalendarForDirectory: function(calendarDirectory) {
        for (var i=0; i < this.calendarProperties.calendars.length; i++) {
            let calendar = this.calendarProperties.calendars[i];
            if (calendar.directory == calendarDirectory) {
                return calendar;
            }
        }
        return null;
    },
    findCalendarDirectory: function(calendarName) {
        for (var i=0; i < this.calendarProperties.calendars.length; i++) {
            let calendar = this.calendarProperties.calendars[i];
            if (calendar.name == calendarName) {
                return calendar.directory;
            }
        }
        return "default";
    },
    updateCalendarEvent: function(calendar, item) {
        let calendarDirectory = this.findCalendarDirectory(item.calendarName);
        let dirPath =  item.isRecurring ? calendarDirectory + "/recurring" : calendarDirectory + "/" + item.year + "/" + item.month;
        let filename = item.Id + this.CALENDAR_FILE_EXTENSION;
        let filePath = peergos.client.PathUtils.toPath(dirPath.split('/'), filename);
        let encoder = new TextEncoder();
        let uint8Array = encoder.encode(item.item);
        let bytes = convertToByteArray(uint8Array);
        return calendar.writeInternal(filePath, bytes);
    },
    saveEvent: function(calendar, item) {
	    const that = this;
	    that.displaySpinner();
	    if (item.action == "createRecurring") {
            this.moveEvent(calendar, item, false);
	    } else if (item.action == "deleteRecurring") {
            this.moveEvent(calendar, item, true);
	    } else {
            if(item.calendarName == item.previousCalendarName) {
                this.updateCalendarEvent(calendar, item).thenApply(function(res) {
                    that.removeSpinner();
                }).exceptionally(function(throwable) {
                    that.showMessage(true, that.translate('CALENDAR.ERROR.SAVE.EVENT'));
                    console.log(throwable.getMessage());
                    that.removeSpinner();
                });
            } else {
                this.moveEvent(calendar, item, item.isRecurring);
            }
	    }
    },
    moveEvent: function(calendar, item, removeRecurring) {
        const that = this;
        this.removeCalendarEvent(calendar, item.previousCalendarName, item.year, item.month, item.Id, removeRecurring).thenApply(function(res) {
            that.updateCalendarEvent(calendar, item).thenApply(function(res2) {
                that.removeSpinner();
            }).exceptionally(function(throwable) {
                that.showMessage(true, that.translate('CALENDAR.ERROR.SAVE.MOVED.EVENT') + ". " + that.translate('CALENDAR.RECREATE.EVENT'));
                console.log(throwable.getMessage());
                that.removeSpinner();
            });
        }).exceptionally(function(throwable) {
            that.showMessage(true, that.translate('CALENDAR.ERROR.MOVE.EVENT'));
            console.log(throwable.getMessage());
            that.removeSpinner();
        });
    },
    getMirrorBatId(file) {
        return file.getOwnerName() == this.context.username ? this.mirrorBatId : java.util.Optional.empty()
    },
    bulkUpload: function(uploadParams) {
       let uploadFuture = peergos.shared.util.Futures.incomplete();
       if (uploadParams.uploadPaths.length == 0) {
           uploadFuture.complete(true);
       } else {
           let folderUPList = [];
           for(var i = 0 ; i <  uploadParams.uploadPaths.length; i++) {
               let relativePath = uploadParams.uploadPaths[i];
               let pathList = peergos.client.JsUtil.asList(relativePath.split('/').filter(n => n.length > 0));
               let filePropsList = peergos.client.JsUtil.asList(uploadParams.fileUploadProperties[i]);
               let folderUP = new peergos.shared.user.fs.FileWrapper.FolderUploadProperties(pathList, filePropsList);
               folderUPList.push(folderUP);
           }
           var commitWatcher = {
               get_0: function() {
                   if (uploadParams.progress.done >= uploadParams.progress.max) {
                       setTimeout(() => that.$toast.dismiss(uploadParams.progress.name), 1000);
                   }
                   return true;
               }
           };

           let folderStream = peergos.client.JsUtil.asList(folderUPList).stream();
           let that = this;
           let resumeFileUpload = function(f) {
               let future = peergos.shared.util.Futures.incomplete();
               future.complete(true);
               return future;
           }
           this.context.getByPath(uploadParams.directoryPath).thenApply(uploadDir => {
               uploadDir.ref.uploadSubtree(folderStream, that.getMirrorBatId(uploadDir.ref), that.context.network,
                   that.context.crypto, that.context.getTransactionService(),
                   f => resumeFileUpload(f),
                   commitWatcher).thenApply(res => {
                       uploadFuture.complete(true);
               }).exceptionally(function (throwable) {
                    that.removeSpinner();
                    that.showMessage(true, that.translate('CALENDAR.ERROR.UPLOAD'));
                    console.log(throwable.getMessage());
                    uploadFuture.complete(false);
               });
           });
       }
       return uploadFuture;
    },
    prepareImportCalendarEvent: function(item, uploadParams) {
        let that = this;

        let calendarDirectory = this.findCalendarDirectory(item.calendarName);
        let dirPath =  item.isRecurring ? calendarDirectory + "/recurring" : calendarDirectory + "/" + item.year + "/" + item.month;
        let filename = item.Id + this.CALENDAR_FILE_EXTENSION;
        let encoder = new TextEncoder();
        let uint8Array = encoder.encode(item.item);
        let bytes = convertToByteArray(uint8Array);
        let fileSize = uint8Array.byteLength;

        var updater = {
            done:0,
            max:fileSize,
        };

        let updateProgressBar = function(len){
            updater.done += len.value_0;
            if (updater.done > updater.max) {
                uploadParams.progress.done  = uploadParams.progress.done + 1;
                //console.log('uploadParams.progress.done=' + uploadParams.progress.done + " uploadParams.progress.max=" + uploadParams.progress.max);
                that.$toast.update(uploadParams.progress.name,
                   {content:
                        {
                            component: ProgressBar,
                            props:  {
                            title: uploadParams.progress.title,
                            done: uploadParams.progress.done,
                            max: uploadParams.progress.max
                            },
                        }
                   });
            }
        };

        var foundDirectoryIndex = -1;
        let uploadDirectoryPath = dirPath;
        for(var i = 0 ; i < uploadParams.uploadPaths.length; i++) {
            if (uploadDirectoryPath == uploadParams.uploadPaths[i]) {
                foundDirectoryIndex = i;
                break;
            }
        }
        if (foundDirectoryIndex == -1) {
            uploadParams.uploadPaths.push(uploadDirectoryPath);
            uploadParams.fileUploadProperties.push([]);
            foundDirectoryIndex = uploadParams.uploadPaths.length -1;
        }
        let reader = new peergos.shared.user.fs.AsyncReader.ArrayBacked(bytes);
        let fup = new peergos.shared.user.fs.FileWrapper.FileUploadProperties(filename, {get_0: () => reader},
            (fileSize - (fileSize % Math.pow(2, 32))) / Math.pow(2, 32), fileSize, java.util.Optional.empty(), java.util.Optional.empty(), false,
            true, updateProgressBar);
        let fileUploadList = uploadParams.fileUploadProperties[foundDirectoryIndex];
        fileUploadList.push(fup);
    },
    saveAllEvents: function(calendar, data) {
        this.removeSpinner();
        let name = 'bulkImport';
        let title = this.translate("CALENDAR.IMPORT.MSG").replace("$ITEMS", data.items.length);
        var progress = {
            title:title,
            done:0,
            max:data.items.length,
            name: name
        };
        let uploads = {
            directoryPath: this.context.username + "/.apps/calendar/data/",
            uploadPaths: [],
            fileUploadProperties: [],
            progress: progress,
            name: name,
            title: title
        };
        if (!data.showConfirmation) {
            this.$toast(
                {component: ProgressBar,props:  progress} ,
                { icon: false , timeout:false, id: name});
        }
        this.saveAllEventsRecursive(calendar, data.items, 0, data.showConfirmation, uploads);
    },
    saveAllEventsRecursive: function(calendar, items, index, showConfirmation, uploads) {
        const that = this;
        if (index == items.length) {
            if (showConfirmation) {
                that.removeSpinner();
                that.close();
            } else {
                this.bulkUpload(uploads).thenApply(done => {
                    that.removeSpinner();
                    if (done) {
                        that.showMessage(false, that.translate('CALENDAR.IMPORT.COMPLETE'));
                    }
                });
            }
        } else {
            let item = items[index];
            if (showConfirmation) {
                this.confirmImportEventFile(item.summary,
                    () => { that.showConfirm = false; that.importEventFile(calendar, items, index, showConfirmation, uploads);},
                    () => { that.showConfirm = false; that.saveAllEventsRecursive(calendar, items, ++index, showConfirmation, uploads);}
                );
            } else {
                this.importEventFile(calendar, items, index, showConfirmation, uploads);
            }
        }
    },
    importEventFile: function(calendar, items, index, showConfirmation, uploads) {
        let that = this;
        let item = items[index];
        that.displaySpinner();
        if (showConfirmation) {
            this.updateCalendarEvent(calendar, item).thenApply(function(res) {
                that.postMessage({type: 'respondConfirmImportICSFile', item: item, index: index});
                that.saveAllEventsRecursive(calendar, items, ++index, showConfirmation, uploads);
            }).exceptionally(function(throwable) {
                that.removeSpinner();
                that.close();
                that.showMessage(true, that.translate('CALENDAR.ERROR.IMPORT.EVENT'));
                console.log(throwable.getMessage());
            });
        } else {
            this.prepareImportCalendarEvent(item, uploads);
            this.saveAllEventsRecursive(calendar, items, ++index, showConfirmation, uploads);
        }
    },
    confirmImportEventFile: function(summary, importFunction, cancelFunction) {
        this.confirm_message= this.translate('CALENDAR.IMPORT.EVENT') + ' ' + summary.datetime
                + ' - ' + summary.title + ' ?';
        this.confirm_body='';
        this.confirm_consumer_cancel_func = cancelFunction;
        this.confirm_consumer_func = importFunction;
        this.showConfirm = true;
    },
    confirmImportCalendar: function(calendarName, importFunction, cancelFunction) {
        this.confirm_message= this.translate('CALENDAR.IMPORT.CALENDAR') + ' ' + calendarName + ' ?';
        this.confirm_body='';
        this.confirm_consumer_cancel_func = cancelFunction;
        this.confirm_consumer_func = importFunction;
        this.showConfirm = true;
    },
    getRecurringCalendarEvents: function(calendar) {
        let that = this;
        let accumulator = [];
        let future = peergos.shared.util.Futures.incomplete();
        if (that.calendarProperties.calendars.length == 0) {
            future.complete(accumulator);
        }
        that.calendarProperties.calendars.forEach(currentCalendar => {
            let dirStr = currentCalendar.directory + "/recurring";
            let directoryPath = peergos.client.PathUtils.directoryToPath(dirStr.split('/'));
            calendar.dirInternal(directoryPath, currentCalendar.owner).thenApply(filenames => {
                that.getEventsForMonth(calendar, currentCalendar.name, currentCalendar.owner, dirStr, filenames.toArray([])).thenApply(res => {
                    accumulator.push(res);
                    if (accumulator.length == that.calendarProperties.calendars.length) {
                        future.complete(accumulator.reduce((a, b) => a.concat(b), []));
                    }
                })
            });
        });
        return future;
    },
    getCalendarEventsForMonth: function(calendar, year, month) {
        let that = this;
        let accumulator = [];
        let future = peergos.shared.util.Futures.incomplete();
        if (that.calendarProperties.calendars.length == 0) {
            future.complete(accumulator);
        }
        that.calendarProperties.calendars.forEach(currentCalendar => {
            let dirStr = currentCalendar.directory + "/" + year + "/" + month;
            let directoryPath = peergos.client.PathUtils.directoryToPath(dirStr.split('/'));
            calendar.dirInternal(directoryPath, currentCalendar.owner).thenApply(filenames => {
                that.getEventsForMonth(calendar, currentCalendar.name, currentCalendar.owner, dirStr, filenames.toArray([])).thenApply(res => {
                    accumulator.push(res);
                    if (accumulator.length == that.calendarProperties.calendars.length) {
                        future.complete(accumulator.reduce((a, b) => a.concat(b), []));
                    }
                })
            });
        });
        return future;
    },
    updateCalendarList: function(calendar) {
        let that = this;
        let modified = [false];
        let calendarsToDelete = [];
        let processed = [];
        let future = peergos.shared.util.Futures.incomplete();
        if (that.calendarProperties.calendars.length == 0) {
            future.complete(false);
        }
        that.calendarProperties.calendars.forEach(currentCalendar => {
            let directoryPath = peergos.client.PathUtils.directoryToPath(currentCalendar.directory.split('/'));
            calendar.dirInternal(directoryPath, currentCalendar.owner).thenApply(filenames => {
                if (filenames.isEmpty() && currentCalendar.owner != null) { //unshared or deleted
                    calendarsToDelete.push(currentCalendar.directory);
                    modified[0] = true;
                }
                processed.push(currentCalendar.name);
                if (processed.length == that.calendarProperties.calendars.length) {
                    calendarsToDelete.forEach(directory => {
                        let index = that.calendarProperties.calendars.findIndex(v => v.directory === directory);
                        that.calendarProperties.calendars.splice(index, 1);
                    });
                    future.complete(modified[0]);
                }
            });
        });
        return future;
    },
    getCalendarEventsAroundMonth: function(calendar, year, month) {
        let that = this;
        let previousMonth = month == 1 ? {name: 'previous', year:year -1, month: 12}
                : {name: 'previous', year: year, month:month -1};
        let currentMonth = {name: 'current', year: year, month: month};
        let nextMonth = month == 12 ? {name: 'next', year:year +1, month:1}
                : {name: 'next', year:year, month:month +1};

        let loop = [previousMonth, currentMonth, nextMonth];
        let future = peergos.shared.util.Futures.incomplete();
        const resultMap = new Map();
        loop.forEach(currentMonth => {
            that.getCalendarEventsForMonth(calendar, currentMonth.year, currentMonth.month).thenApply(res => {
                    resultMap.set(currentMonth.name, res);
                    if (resultMap.size == 3) {
                        let result = {previous: resultMap.get('previous'), current: resultMap.get('current'), next: resultMap.get('next')};
                        future.complete(result);
                    }
            })
        });
        return future;
    },
    getEventsForMonth: function(calendar, calendarName, owner, directory, filenames) {
        let that = this;
        let accumulator = [];
        let future = peergos.shared.util.Futures.incomplete();
        if (filenames.length == 0) {
            future.complete(accumulator);
        }
        filenames.forEach(eventFilename => {
            let filePath = peergos.client.PathUtils.toPath(directory.split('/'), eventFilename);
            calendar.readInternal(filePath, owner).thenApply(data => {
                accumulator.push({calendarName: calendarName, data: new TextDecoder().decode(data)});
                if (accumulator.length == filenames.length) {
                    future.complete(accumulator);
                }
            });
        });
        return future;
    },
    downloadEvent: function(calendar, title, event) {
        this.displaySpinner();
        let encoder = new TextEncoder();
        let uint8Array = encoder.encode(event);
        let data = convertToByteArray(uint8Array);
        let blob =  new Blob([data], {type: "octet/stream"});
        let url = window.URL.createObjectURL(blob);
        let link = document.getElementById("downloadEventAnchor");
        link.href = url;
        link.type = "text/calendar";
        link.download = this.translate('CALENDAR.EVENT') + ' - ' + title + '.ics';
        link.click();
        this.removeSpinner();
    },
    sendEventToNativeEmailClient: function(calendarName, id, year, month, isRecurring, title) {
        let calendarDirectory = this.findCalendarDirectory(calendarName);
        let dirPath =  isRecurring ? calendarDirectory + "/recurring" : calendarDirectory + "/" + year + "/" + month;
        let path = this.context.username + "/.apps/" + this.CALENDAR_DIR_NAME + '/' + this.DATA_DIR_NAME + "/" + dirPath;
        let filename = id + '.ics';
        let that = this;
        this.context.getByPath(path + '/' + filename).thenApply(fileOpt => {
            if (fileOpt.isPresent()) {
                let file = fileOpt.get();
                let json = {open:true, secretLink:true,link:file.toLink()};
                let body = that.translate('CALENDAR.EVENT.LINK') + ': ' + window.location.origin + window.location.pathname + "#" + propsToFragment(json);
                var link = document.createElement("a");
                link.href = "mailto:?subject=" + escape(title) + "&body=" + body;
                link.click();
            }
        });
    },
    emailEvent: function(calendarName, id, year, month, isRecurring, title) {
        let calendarDirectory = this.findCalendarDirectory(calendarName);
        let dirPath =  isRecurring ? calendarDirectory + "/recurring" : calendarDirectory + "/" + year + "/" + month;
        let path = this.context.username + "/.apps/" + this.CALENDAR_DIR_NAME + '/' + this.DATA_DIR_NAME + "/" + dirPath;
        let filename = id + '.ics';
        this.openFileOrDir("Email", path, {filename:filename});
    },
    updateSharedFile: function() {
        var file = this.filesToShare[0];
        if (file == null)
            return;
        var that = this;
        file.getLatest(this.context.network).thenApply(updated => {
            that.filesToShare[0] = updated;
        })
    },
    shareCalendarEvent: function(calendarName, id, year, month, isRecurring) {
        let calendarDirectory = this.findCalendarDirectory(calendarName);
        let dirPath =  isRecurring ? calendarDirectory + "/recurring" : calendarDirectory + "/" + year + "/" + month;
        this.shareWith(this.CALENDAR_DIR_NAME + '/' + this.DATA_DIR_NAME + "/" + dirPath,
            id + '.ics', false, true, 'Calendar Event');
    },
    shareCalendar: function(calendar) {
        let calendarDirectory = this.findCalendarDirectory(calendar.name);
        this.shareWith(this.CALENDAR_DIR_NAME + '/' + this.DATA_DIR_NAME, calendarDirectory, false, true,
            this.translate('CALENDAR.LABEL') + ' - ' + calendar.name);
    },
    showMessage: function(isError, message) {
        if (isError) {
            this.$toast.error(message, {timeout:false});
        } else {
            this.$toast(message)
        }
    },
    close: function () {
        //this.$emit("hide-calendar");
    }
    }
}

},{ "../components/AppHeader.vue": 91, "../components/choice/Choice.vue": 37, "../components/confirm/Confirm.vue": 15, "../components/drive/DriveShare.vue": 40, "../components/drive/ProgressBar.vue": 48, "../components/prompt/Prompt.vue": 62, "../components/spinner/Spinner.vue": 16, "../i18n/index.js": 11, "../mixins/router/index.js": 3}], 90:[function(require,module,exports){

const AppInstall = require("../components/sandbox/AppInstall.vue");
const AppRunner = require("../components/sandbox/AppRunner.vue");
const AppSandbox = require("../components/sandbox/AppSandbox.vue");
const CodeEditor = require("../components/code-editor/CodeEditor.vue");
const Confirm = require("../components/confirm/Confirm.vue");
const DriveHeader = require("../components/drive/DriveHeader.vue");
const DriveGrid = require("../components/drive/DriveGrid.vue");
const DriveGridCard = require("../components/drive/DriveGridCard.vue");
const DriveGridDrop = require("../components/drive/DriveGridDrop.vue");
const DriveTable = require("../components/drive/DriveTable.vue");
const Error = require("../components/error/Error.vue");
const Gallery = require("../components/drive/DriveGallery.vue");
const Identity = require("../components/identity-proof-viewer.vue");
const Share = require("../components/drive/DriveShare.vue");
const Search = require("../components/Search.vue");
const Markup = require("../components/viewers/Markup.vue");
const Hex = require("../components/viewers/Hex.vue");
const ProgressBar = require("../components/drive/ProgressBar.vue");
const DriveMenu = require("../components/drive/DriveMenu.vue");
const DriveSelected = require("../components/drive/DriveSelected.vue");

const AppPrompt = require("../components/prompt/AppPrompt.vue");
const NewImageFilePrompt = require("../components/NewImageFilePrompt.vue");
const NewAppPrompt = require("../components/sandbox/new-app/NewAppPrompt.vue");
const FolderProperties = require("../components/FolderProperties.vue");
const Pdf = require("../components/pdf/PDF.vue");
const Replace = require("../components/replace/Replace.vue");
const Spinner = require("../components/spinner/Spinner.vue");
const Warning = require('../components/Warning.vue');

const helpers = require("../mixins/storage/index.js");
const downloaderMixins = require("../mixins/downloader/index.js");
const zipMixin = require("../mixins/zip/index.js");
const i18n = require("../i18n/index.js");

const router = require("../mixins/router/index.js");
const launcherMixin = require("../mixins/launcher/index.js");
const sandboxMixin = require("../mixins/sandbox/index.js");

module.exports = {
render: function() {with(this){return _c('article',{staticClass:"drive-view"},[_c('input',{staticStyle:{"display":"none"},attrs:{"type":"file","id":"uploadFileInput","multiple":""},on:{"change":uploadFiles}}),_v(" "),_c('input',{staticStyle:{"display":"none"},attrs:{"type":"file","id":"uploadDirectoriesInput","multiple":"","directory":"","mozDirectory":"","webkitDirectory":""},on:{"change":uploadFiles}}),_v(" "),(showSpinner)?_c('Spinner',{attrs:{"message":spinnerMessage}}):_e(),_v(" "),_c('a',{staticStyle:{"display":"none"},attrs:{"id":"downloadAnchor"}}),_v(" "),_c('DriveHeader',{attrs:{"gridView":isGrid,"isWritable":isWritable,"canPaste":isPasteOptionAvailable,"path":path},on:{"switchView":function($event){return switchView()},"goBackToLevel":function($event){return goBackToLevel($event)},"askMkdir":function($event){return askMkdir()},"createFile":function($event){return createBlankFile()},"createImageFile":function($event){return createBlankImageFile()},"newApp":function($event){return createNewApp()},"search":function($event){return openSearch(false)},"paste":function($event){return pasteToFolder($event)}}}),_v(" "),(showPrompt)?_c('AppPrompt',{attrs:{"message":prompt_message,"placeholder":prompt_placeholder,"max_input_size":prompt_max_input_size,"value":prompt_value,"consumer_func":prompt_consumer_func,"action":prompt_action},on:{"hide-prompt":function($event){return closePrompt()}}}):_e(),_v(" "),(showNewImageFilePrompt)?_c('NewImageFilePrompt',{attrs:{"consumer_func":prompt_consumer_func},on:{"hide-prompt":function($event){return closeNewImageFilePrompt()}}}):_e(),_v(" "),(showNewAppPrompt)?_c('NewAppPrompt',{attrs:{"consumer_func":prompt_new_app_func},on:{"hide-prompt":function($event){return closeNewAppPrompt()}}}):_e(),_v(" "),(showFolderProperties)?_c('FolderProperties',{attrs:{"folder_properties":folder_properties},on:{"hide-folder-properties-view":function($event){showFolderProperties = false}}}):_e(),_v(" "),_c('transition',{attrs:{"name":"fade","mode":"out-in","appear":""}},[(selectedFiles.length > 1)?_c('DriveSelected',{attrs:{"totalFiles":files.length,"selectedFiles":selectedFiles},on:{"selectAllOrNone":function($event){return selectAllOrNone()}}},[(allowCopy)?_c('li',{attrs:{"id":"copy"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return copyMultiSelect()},"click":function($event){return copyMultiSelect()}}},[_v(_s(translate("DRIVE.COPY")))]):_e(),_v(" "),(isWritable)?_c('li',{attrs:{"id":"cut"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return cutMultiSelect()},"click":function($event){return cutMultiSelect()}}},[_v(_s(translate("DRIVE.CUT")))]):_e(),_v(" "),(isWritable)?_c('li',{attrs:{"id":"delete"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return deleteFilesMultiSelect()},"click":function($event){return deleteFilesMultiSelect()}}},[_v(_s(translate("DRIVE.DELETE")))]):_e(),_v(" "),_c('li',{attrs:{"id":"download"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return downloadAllMultiSelect()},"click":function($event){return downloadAllMultiSelect()}}},[_v(_s(translate("DRIVE.DOWNLOAD")))]),_v(" "),_c('li',{attrs:{"id":"zip"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return zipAndDownloadMultiSelect()},"click":function($event){return zipAndDownloadMultiSelect()}}},[_v(_s(translate("DRIVE.ZIP")))]),_v(" "),_c('li',{attrs:{"id":"deselect"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;selectedFiles = []},"click":function($event){selectedFiles = []}}},[_v("\n        "+_s(translate("DRIVE.DESELECT"))+"\n      ")])]):_e()],1),_v(" "),_c('transition',{attrs:{"name":"drop"}},[(viewPasteMenu)?_c('DriveMenu',{ref:"drivePasteMenu",on:{"closeMenu":function($event){return closePasteMenu()}}},[_c('li',{attrs:{"id":"paste-files"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return pasteMultiSelect($event)},"click":pasteMultiSelect}},[_v("\n          "+_s(translate("DRIVE.PASTE"))+"\n        ")])]):_e()],1),_v(" "),_c('div',{class:{ not_owner: isNotMe, dnd: 'dnd' },attrs:{"id":"dnd"},on:{"drop":function($event){return dndDrop($event)},"dragover":function($event){$event.preventDefault();}}},[_c('transition',{attrs:{"name":"fade","mode":"out-in","appear":""}},[(isGrid)?_c('DriveGrid',{attrs:{"appear":""}},[_l((sortedFiles),function(file,index){return _c('DriveGridCard',{key:file.getFileProperties().name,class:{ shared: isShared(file) },attrs:{"filename":file.getFileProperties().name,"src":getThumbnailURL(file),"type":file.getFileProperties().getType(),"dragstartFunc":dragStart,"dropFunc":drop,"file":file,"itemIndex":index,"selected":isSelected(file)},on:{"openMenu":function($event){return openMenu(file)},"toggleSelection":function($event){return toggleSelection(file, $event)}},nativeOn:{"click":function($event){return navigateDrive(file)}}})}),_v(" "),(
              getPath.length > 1 &&
              sortedFiles.length == 0 &&
              currentDir != null &&
              currentDir.isWritable()
            )?_c('DriveGridDrop'):_e()],2):_c('DriveTable',{attrs:{"files":sortedFiles,"selectedFiles":selectedFiles},on:{"update:selectedFiles":function($event){selectedFiles=$event},"update:selected-files":function($event){selectedFiles=$event},"sortBy":setSortBy,"openMenu":openMenu,"navigateDrive":navigateDrive}})],1)],1),_v(" "),_c('transition',{attrs:{"name":"drop"}},[(viewMenu)?_c('DriveMenu',{ref:"driveMenu",on:{"closeMenu":function($event){return closeMenu()}}},[(canOpen && !isMarkup && !isHTML && !hexViewerAlternativeAvailable)?_c('li',{attrs:{"id":"gallery"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return viewFile()},"click":function($event){return viewFile()}}},[_v("\n          "+_s(translate("DRIVE.VIEW"))+"\n        ")]):_e(),_v(" "),(isMarkup)?_c('li',{attrs:{"id":"view-markup"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return viewFile()},"click":function($event){return viewFile()}}},[_v("\n          "+_s(translate("DRIVE.VIEW"))+"\n        ")]):_e(),_v(" "),(isMarkup)?_c('li',{attrs:{"id":"edit-markup"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return editFile()},"click":function($event){return editFile()}}},[_v("\n          "+_s(translate("DRIVE.EDIT"))+"\n        ")]):_e(),_v(" "),(isHTML && isHTMLViewable)?_c('li',{attrs:{"id":"view-html"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return viewFile()},"click":function($event){return viewFile()}}},[_v("\n          "+_s(translate("DRIVE.VIEW"))+"\n        ")]):_e(),_v(" "),(isHTML)?_c('li',{attrs:{"id":"edit-html"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return editFile()},"click":function($event){return editFile()}}},[_v("\n          "+_s(translate("DRIVE.EDIT"))+"\n        ")]):_e(),_v(" "),_l((availableApps),function(app){return _c('li',{attrs:{"id":"open-in-app"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return appOpen(app.name)},"click":function($event){return appOpen(app.name)}}},[_v("\n          "+_s(app.contextMenuText)+"\n        ")])}),_v(" "),(canOpen)?_c('li',{attrs:{"id":"download-folder"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return downloadAll($event)},"click":downloadAll}},[_v("\n          "+_s(translate("DRIVE.DOWNLOAD"))+"\n        ")]):_e(),_v(" "),(isWritable)?_c('li',{attrs:{"id":"rename-file"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return rename($event)},"click":rename}},[_v("\n          "+_s(translate("DRIVE.RENAME"))+"\n        ")]):_e(),_v(" "),(isWritable)?_c('li',{attrs:{"id":"delete-file"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return deleteFile($event)},"click":deleteFile}},[_v("\n          "+_s(translate("DRIVE.DELETE"))+"\n        ")]):_e(),_v(" "),(allowCopy)?_c('li',{attrs:{"id":"copy-file"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return copy($event)},"click":copy}},[_v("Copy")]):_e(),_v(" "),(isWritable)?_c('li',{attrs:{"id":"cut-file"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return cut($event)},"click":cut}},[_v("Cut")]):_e(),_v(" "),(isPasteAvailable)?_c('li',{attrs:{"id":"paste-file"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return paste($event)},"click":paste}},[_v("\n          "+_s(translate("DRIVE.PASTE"))+"\n        ")]):_e(),_v(" "),(allowShare)?_c('li',{attrs:{"id":"share-file"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return showShareWith($event)},"click":showShareWith}},[_v("\n          "+_s(translate("DRIVE.SHARE"))+"\n        ")]):_e(),_v(" "),(allowDownloadFolder)?_c('li',{attrs:{"id":"zip-folder"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return zipAndDownload($event)},"click":zipAndDownload}},[_v("\n          "+_s(translate("DRIVE.DOWNLOAD.ZIP"))+"\n        ")]):_e(),_v(" "),(isWritable && canCreateThumbnail)?_c('li',{attrs:{"id":"create-thumbnail"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return createThumbnail($event)},"click":createThumbnail}},[_v("\n          "+_s(translate("DRIVE.THUMB"))+"\n        ")]):_e(),_v(" "),(allowViewFolderProperties)?_c('li',{attrs:{"id":"folder-props"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return viewFolderProperties($event)},"click":viewFolderProperties}},[_v("\n          "+_s(translate("DRIVE.PROPS"))+"\n        ")]):_e(),_v(" "),(allowAddingToLauncher)?_c('li',{attrs:{"id":"add-to-launcher"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return addToLauncher($event)},"click":addToLauncher}},[_v("\n          "+_s(translate("DRIVE.ADD.LAUNCH"))+"\n        ")]):_e(),_v(" "),(isInstallable)?_c('li',{attrs:{"id":"app-run"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return runApp()},"click":function($event){return runApp()}}},[_v("\n          "+_s(translate("DRIVE.RUN"))+"\n        ")]):_e(),_v(" "),(isInstallable)?_c('li',{attrs:{"id":"app-install"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return installApp()},"click":function($event){return installApp()}}},[_v("\n          "+_s(translate("DRIVE.INSTALL"))+"\n        ")]):_e()],2):_e()],1),_v(" "),(showGallery)?_c('Gallery',{attrs:{"files":sortedFiles,"initial-file-name":appArgs.filename},on:{"hide-gallery":function($event){return back()}}}):_e(),_v(" "),(showHexViewer)?_c('Hex',{attrs:{"file":selectedFiles[0],"context":context},on:{"hide-hex-viewer":function($event){return back()}}}):_e(),_v(" "),(showPdfViewer)?_c('Pdf',{attrs:{"file":selectedFiles[0],"context":context},on:{"hide-pdf-viewer":function($event){return back()}}}):_e(),_v(" "),(showCodeEditor)?_c('CodeEditor',{attrs:{"file":selectedFiles[0],"context":context},on:{"hide-code-editor":function($event){return back()},"update-refresh":function($event){forceUpdate++}}}):_e(),_v(" "),(showMarkupViewer)?_c('Markup',{attrs:{"propAppArgs":appArgs},on:{"hide-markup-viewer":function($event){return showDrive()}}}):_e(),_v(" "),(showIdentityProof)?_c('Identity',{attrs:{"file":selectedFiles[0],"context":context},on:{"hide-identity-proof":function($event){return back()}}}):_e(),_v(" "),(showShare)?_c('Share',{attrs:{"data":sharedWithData,"fromApp":fromApp,"displayName":displayName,"allowReadWriteSharing":allowReadWriteSharing,"allowCreateSecretLink":allowCreateSecretLink,"files":filesToShare,"path":pathToFile,"currentDir":currentDir,"messages":messages},on:{"hide-share-with":closeShare,"update-shared-refresh":function($event){forceSharedRefreshWithUpdate++},"update-files":function($event){forceUpdate++}}}):_e(),_v(" "),(showSearch)?_c('Search',{attrs:{"path":searchPath,"navigateToAction":navigateToAction},on:{"hide-search":closeSearch}}):_e(),_v(" "),(showAppRunner)?_c('AppRunner',{attrs:{"appPropsFile":selectedFiles[0]},on:{"hide-app-run":closeAppRunner}}):_e(),_v(" "),(showAppInstallation)?_c('AppInstall',{attrs:{"appInstallSuccessFunc":appInstallSuccess,"appPropsFile":selectedFiles[0],"installFolder":getPath},on:{"hide-app-installation":closeAppInstallation}}):_e(),_v(" "),(showAppSandbox)?_c('AppSandbox',{attrs:{"sandboxAppName":sandboxAppName,"currentFile":currentFile,"currentPath":currentPath,"currentProps":appSandboxProps,"htmlAnchor":htmlAnchor},on:{"hide-app-sandbox":function($event){return closeAppSandbox(true)},"close-app-sandbox":function($event){return closeAppSandbox(false)},"refresh":function($event){forceSharedRefreshWithUpdate++}}}):_e(),_v(" "),(showReplace)?_c('Replace',{attrs:{"replace_message":replace_message,"replace_body":replace_body,"consumer_cancel_func":replace_consumer_cancel_func,"consumer_func":replace_consumer_func,"showApplyAll":replace_showApplyAll},on:{"hide-replace":function($event){showReplace = false}}}):_e(),_v(" "),(showWarning)?_c('Warning',{attrs:{"warning_message":warning_message,"warning_body":warning_body,"consumer_func":warning_consumer_func},on:{"hide-warning":closeWarning}}):_e(),_v(" "),(showError)?_c('Error',{attrs:{"title":errorTitle,"body":errorBody,"messageId":messageId},on:{"hide-error":function($event){showError = false}}}):_e(),_v(" "),(showConfirm)?_c('Confirm',{attrs:{"confirm_message":confirm_message,"confirm_body":confirm_body,"consumer_cancel_func":confirm_consumer_cancel_func,"consumer_func":confirm_consumer_func},on:{"hide-confirm":function($event){showConfirm = false}}}):_e()],1)}},	components: {
	    AppInstall,
	    AppRunner,
	    AppSandbox,
	    CodeEditor,
	    Confirm,
		DriveHeader,
		DriveGrid,
		DriveGridCard,
		DriveGridDrop,
		DriveTable,
		DriveMenu,
        DriveSelected,
		Error,
		AppPrompt,
		NewImageFilePrompt,
		NewAppPrompt,
		FolderProperties,
		ProgressBar,
		Gallery,
		Identity,
		Share,
		Search,
		Markup,
		Hex,
		Pdf,
		Replace,
		Spinner,
		Warning
	},
	data() {
		return {
			isGrid: true,
			// path: [],
            searchPath: null,
			currentDir: null,
			files: [],
			sortBy: "name",
			normalSortOrder: true,
			clipboard: {},
			selectedFiles: [],
			url: null,
			viewMenu: false,
			viewPasteMenu: false,
			showShare: false,
			sharedWithState: null,
			sharedWithData: {
				"edit_shared_with_users": [],
				"read_shared_with_users": []
			},
			forceSharedRefreshWithUpdate: 0,

                        appArgs: {},

			showAdmin: false,
			showGallery: false,
			showIdentityProof: false,
			showSocial: false,
			showSearch: false,
			showHexViewer: false,
			showCodeEditor: false,
			showMarkupViewer: false,
			showPdfViewer: false,
			showTextViewer: false,
			showPassword: false,
			showAccount: false,
			showRequestSpace: false,
			showBuySpace: false,
			paymentProperties: {
				isPaid() { return false; }
			},
			showFeedbackForm: false,
			admindata: { pending: [] },
			messages: [],
			messageId: null,
			messageMonitors: [],
			conversationMonitors: [],
			clipboardAction: "",
			forceUpdate: 0,
			externalChange: 0,

			prompt_message: '',
			prompt_placeholder: '',
			prompt_max_input_size: null,
			prompt_value: '',
			prompt_consumer_func: () => { },
			prompt_new_app_func: (name, permissions) => { },
			prompt_action: 'ok',
			showPrompt: false,
			showNewImageFilePrompt: false,
			showNewAppPrompt: false,
            showFolderProperties: false,
            showAppInstallation: false,
            showAppRunner: false,
            showAppSandbox: false,
            sandboxAppName: '',
            appSandboxProps: null,
			showSelect: false,
			showWarning: false,
			showReplace: false,
			warning_message: "",
			warning_body: "",
			warning_consumer_func: () => { },
			replace_message: "",
			replace_body: "",
			replace_consumer_cancel_func: (applyToAll) => { },
			replace_consumer_func: (applyToAll) => { },
			replace_showApplyAll: false,
			errorTitle: '',
			errorBody: '',
			showError: false,
            showConfirm: false,
            confirm_message: "",
            confirm_body: "",
            confirm_consumer_cancel_func: () => {},
            confirm_consumer_func: () => {},
			showSpinner: true,
			spinnerMessage: '',
			onUpdateCompletion: [], // methods to invoke when current dir is next refreshed
            dblClickDelay: 700,
            clicks: 0,
            clickTimer: null,
            clickedFilename: null,
            isStreamingAvailable: false,
            launcherApp: null,
            uploadProgressQueue: { entries:[]},
            executingUploadProgressCommands: false,
            progressBarUpdateFrequency: 30,
            zipAndDownloadFoldersCount: 0,
            htmlAnchor: "",
            previouslyOpenedApp: {path: '', filename: '', app: ''},
            disallowedFilenames: new Map(),
		};
	},
	mixins:[downloaderMixins, router, zipMixin, launcherMixin, i18n, sandboxMixin],
        mounted: function() {

        },
	computed: {
		...Vuex.mapState([
			'quotaBytes',
			'usageBytes',
			'context',
			'mirrorBatId',
			'download',
			'open',
			'initPath',
			'isLoggedIn',
			'path',
            "sandboxedApps",
            "shortcuts"
		]),
		...Vuex.mapGetters([
			'isSecretLink',
			'getPath'
		]),

        sortedFiles() {
			if (this.files == null) {
				return [];
			}
			var sortBy = this.sortBy;
			var reverseOrder = !this.normalSortOrder;
			var that = this;

			return this.files.slice(0).sort(function (a, b) {
				var aVal, bVal;
				if (sortBy == null)
					return 0;
				if (sortBy == "name") {
					aVal = a.getFileProperties().name;
					bVal = b.getFileProperties().name;
				} else if (sortBy == "size") {
					aVal = that.getFileSize(a.getFileProperties());
					bVal = that.getFileSize(b.getFileProperties());
				} else if (sortBy == "modified") {
					aVal = a.getFileProperties().modified;
					bVal = b.getFileProperties().modified;
                } else if (sortBy == "created") {
                    aVal = a.getFileProperties().created;
                    bVal = b.getFileProperties().created;
				} else if (sortBy == "type") {
					aVal = a.isDirectory();
					bVal = b.isDirectory();
				} else
					throw "Unknown sort type " + sortBy;
				if (reverseOrder) {
					var tmp = aVal;
					aVal = bVal;
					bVal = tmp;
					tmp = a;
					a = b;
					b = tmp;
				}

				if (a.isDirectory() !== b.isDirectory()) {
					return a.isDirectory() ? -1 : 1;
				} else {
					if (sortBy == "name") {
						return aVal.localeCompare(bVal, undefined, { numeric: true });
					} else if (sortBy == "modified" || sortBy == "created") {
						return aVal.compareTo(bVal);
					} else {
						if (aVal < bVal) {
							return -1;
						} else if (aVal == bVal) {
							return 0;
						} else {
							return 1;
						}
					}
				}
			});
		},

        isInstallable: function() {
           try {
               if (this.selectedFiles.length != 1)
                   return false;
               if (!this.isLoggedIn && this.path.length > 0)
                   return false;
               return !this.selectedFiles[0].isDirectory()
                    && this.selectedFiles[0].getFileProperties().name == "peergos-app.json";
           } catch (err) {
               return false;
           }
        },
        availableApps: function() {
            if (this.currentDir == null)
                return [];
            if (this.selectedFiles.length != 1)
                return [];
            return this.availableAppsForFile(this.selectedFiles[0]);
        },
		isSearchable() {
			try {
				if (this.currentDir == null)
					return false;
				if (this.selectedFiles.length != 1)
					return false;
				if (!this.selectedFiles[0].isDirectory())
					return false;
				var owner = this.currentDir.getOwnerName();
				var me = this.context.username
				if (owner != me) {
					return false;
				}
				return true;
			} catch (err) {
				return false;
			}
		},
		canCreateThumbnail() {
            if (this.selectedFiles.length != 1)
                return false;
            let file = this.selectedFiles[0];
            if (file.props.thumbnail.ref != null) {
                return false;
            }
            var mimeType = file.props.mimeType;
            if (mimeType.startsWith("video")) {
                return this.isStreamingAvailable;
            } else if(mimeType.startsWith("image") || mimeType.startsWith("audio/mpeg")) {
                return true;
            } else {
                return false;
            }
		},
        canOpen() {
            try {
                if (this.currentDir == null)
                    return false;
                if (this.selectedFiles.length != 1)
                    return false;
                return !this.selectedFiles[0].isDirectory()
            } catch (err) {
                return false;
            }
        },
        hexViewerAlternativeAvailable() {
            if (this.selectedFiles.length == 0)
                return;
            let file = this.selectedFiles[0];
            let filename = file.getName();
            let app = this.getApp(file, this.getPath, false);
            return this.availableApps.length > 0 && app === "hex";
        },
        isMarkup() {
            try {
                if (this.currentDir == null)
                    return false;
                if (this.selectedFiles.length != 1)
                    return false;
                if (this.selectedFiles[0].isDirectory())
                    return false;
                let file =  this.selectedFiles[0];
                let mimeType = file.getFileProperties().mimeType;
                return mimeType.startsWith("text/x-markdown") ||
                    (mimeType.startsWith("text/") &&
                    (file.getName().endsWith('.md') || file.getName().endsWith('.note')) );
            } catch (err) {
                return false;
            }
        },
        isHTMLViewable() {
            return this.isStreamingAvailable;
        },
        isHTML() {
            try {
                if (this.currentDir == null)
                    return false;
                if (this.selectedFiles.length != 1)
                    return false;
                if (this.selectedFiles[0].isDirectory())
                    return false;
                let file =  this.selectedFiles[0];
                let mimeType = file.getFileProperties().mimeType;
                return mimeType.startsWith("text/html") ||
                    (mimeType.startsWith("text/") && file.getName().endsWith('.html'));
            } catch (err) {
                return false;
            }
        },
		allowDownloadFolder() {
			try {
				if (this.currentDir == null)
					return false;
				if (this.selectedFiles.length != 1)
					return false;
                        if (this.path.length == 0 && this.selectedFiles[0].getName() != this.context.username) {
                            return false;
                        }
				return this.selectedFiles[0].isDirectory();
			} catch (err) {
				return false;
			}
		},
        allowViewFolderProperties() {
			try {
                if (!(this.path.length > 0)) {
                    return false;
                }
				if (this.currentDir == null)
					return false;
				if (this.selectedFiles.length != 1)
					return false;
				return this.selectedFiles[0].isDirectory();
			} catch (err) {
				return false;
			}
        },
        allowCopy() {
            return this.isLoggedIn && this.path.length > 0;
        },
		allowShare() {
			return this.isLoggedIn && this.path.length > 0;
		},
		allowAddingToLauncher() {
            try {
                if (this.currentDir == null)
                    return false;
                if (this.selectedFiles.length != 1)
                    return false;
                if (!this.isLoggedIn && this.path.length > 0)
                    return false;
                let file = this.selectedFiles[0];
                let postFix = file.isDirectory() ? '/' : '';
                let link = this.path.join('/') + '/' + file.getName() + postFix;
                let entry = this.shortcuts.shortcutsMap.get(link);
                return entry == null;
            } catch (err) {
                return false;
            }
        },
		isIcsFile() {
			try {
				if (this.currentDir == null)
					return false;
				if (this.selectedFiles.length != 1)
					return false;
				return !this.selectedFiles[0].isDirectory() &&
					this.selectedFiles[0].getFileProperties().name.toUpperCase().endsWith(".ICS");
			} catch (err) {
				return false;
			}
		},
		isWritable() {
			try {
				if (this.currentDir == null)
					return false;
				return this.currentDir.isWritable();
			} catch (err) {
				return false;
			}
		},

		isNotMe() {
			if (this.currentDir == null)
				return true;

			var owner = this.currentDir.getOwnerName();
			var me = this.context.username
			if (owner === me) {
				return false;
			}
			return true;
		},
		isPasteOptionAvailable() {
		    let singlePasteOption = this.isPasteToFolderAvailable();
		    let multiPasteOption = this.isPasteToFolderMultiSelectAvailable(this.currentDir);
		    if (multiPasteOption) {
    		    this.multiSelectTargetFolder = this.currentDir;
		    }
		    return singlePasteOption || multiPasteOption;
		},
		isPasteAvailable() {
			return this.isPasteToFolderAvailable();
		},
	},



	created() {
	    let that = this;
		this.onResize();
		let illegalFilenames = [
                                    'constructor',
                                    '__defineGetter__',
                                    '__defineSetter__',
                                    'hasOwnProperty',
                                    '__lookupGetter__',
                                    '__lookupSetter__',
                                    'isPrototypeOf',
                                    'propertyIsEnumerable',
                                    'toString',
                                    'valueOf',
                                    '__proto__',
                                    'toLocaleString'
                                  ];
		illegalFilenames.forEach(item => that.disallowedFilenames.set(item, ""));
		// TODO: throttle onResize and make it global?
		window.addEventListener('resize', this.onResize, {passive: true} );
        peergos.shared.user.App.init(that.context, "launcher").thenApply(launcher => {
            that.launcherApp = launcher;
            that.init();
        });
	},

	beforeDestroy() {
		window.removeEventListener('resize', this.onResize );

	},


	watch: {
		// manually encode currentDir dependencies to get around infinite dependency chain issues with async-computed methods
		context(newContext, oldContext) {
			this.updateCurrentDir();
			if (newContext != null && newContext.username != null) {
				this.updateUsage();
				this.updateQuota();
				const that = this;
			}
		},

		path(newPath, oldPath) {
            this.updateCurrentDir();
		},
		forceSharedRefreshWithUpdate(newCounter, oldCounter) {
			this.updateCurrentDir();
		},
		forceUpdate(newUpdateCounter, oldUpdateCounter) {
			this.updateCurrentDir();
		},

		externalChange(newExternalChange, oldExternalChange) {
			let that = this;
			this.updateSocial(() => {
			    that.updateCurrentDir();
			});
		},

		files(newFiles, oldFiles) {

			// console.log('drive oldFiles: ', oldFiles )
			// console.log('drive newFiles: ', newFiles )

			if (newFiles == null)
				return;

			if (oldFiles == null && newFiles != null)
				return this.processPending();

			if (oldFiles.length != newFiles.length) {
				this.processPending();
			} else {
				for (var i = 0; i < oldFiles.length; i++)
					if (!oldFiles[i].samePointer(newFiles[i]))
						return this.processPending();
			}
		}
	},



	methods: {
		...Vuex.mapActions([
			'updateQuota',
			'updateUsage',
            'updateSocial',
            'updateMirrorBatId'
		]),

		init() {
		    this.isStreamingAvailable = this.supportsStreaming();
		    let that = this;
            streamSaver.createWriteStream("init-sw", null,
                function (url) {
                    console.log('init-sw complete');
                },
                function (seekHi, seekLo, seekLength, uuid) {},
                undefined,
                0
            );
            Vue.nextTick(() => {
                that.setup();
            });
        },
		setup() {
			const that = this;
			if (this.context != null && this.context.username == null) {
			    // open drive from a secret link
			    this.context.getEntryPath().thenApply(function (linkPath) {
				var path = that.initPath == null ? null : decodeURIComponent(that.initPath);
				if (path != null && (path.startsWith(linkPath) || linkPath.startsWith(path))) {
                    that.$store.commit('SET_PATH', path.split('/').filter(n => n.length > 0))
                    if (that.download || that.open) {
                        that.context.getByPath(path)
                            .thenApply(function (file) {
                            if (! file.get().isDirectory()) {
                                if (that.download) {
                                that.downloadFile(file.get());
                                } else if (that.open) {
                                var open = () => {
                                    const filename = file.get().getName();
                                    that.selectedFiles = that.files.filter(f => f.getName() == filename);
                                    var app = that.getApp(file.get(), path, false);
                                    that.openInApp({filename:filename}, app);
                                    that.openFileOrDir(app, that.getPath, {filename:filename}, false);
                                };
                                that.onUpdateCompletion.push(open);
                                }
                            } else {
                                let app = that.getApp(file.get(), linkPath);
                                that.openFileOrDir(app, linkPath, {path:path});
                            }
                        });
                    } else if(path.startsWith("/peergos/recommended-apps")) {
                        let appPath = "/peergos/recommended-apps/";
                        that.context.getByPath(appPath + "index.html").thenApply(file => {
                            if (file.ref != null) {
                                var openRecApps = () => {
                                    const filename = "index.html";
                                    that.selectedFiles = that.files.filter(f => f.getName() == filename);
                                    that.sandboxAppName = '$$app-gallery$$';
                                    that.currentFile = file.ref;
                                    that.currentPath = appPath;
                                    that.showAppSandbox = true;
                                };
                                that.onUpdateCompletion.push(openRecApps);
                            }
                        });
                    }
				} else {
                                    that.$store.commit('SET_PATH', linkPath.split('/').filter(n => n.length > 0))
                                    if (that.download) {
                                        var download = () => {
                                            that.downloadFile(that.files[0]);
				 	};
				 	that.onUpdateCompletion.push(download);
                                    }
                                    if (that.open) {
                                        const props = that.getPropsFromUrl();
                                        var open = () => {
                                            const oneFile = that.files.length == 1;
                                            const openSubdir = props.args != null && props.args.path != null;
                                            const appDir = "Drive" != that.getApp(that.currentDir, linkPath);
                                            if (props.args != null && props.args.filename != null && props.args.filename != "") {
                                                // if props name a file, open it
                                                that.appArgs = props.args;
                                                const filename = props.args.filename;
                                                that.selectedFiles = that.files.filter(f => f.getName() == filename);
					        var app = props.app || that.getApp(that.selectedFiles[0], that.getPath, false);
                                                that.openInApp(props.args, app);
                                                that.openFileOrDir(app, that.getPath, props.args, false);
                                            } else if (openSubdir) {
                                                // if props name a dir, open it
                                                that.appArgs = props.args;
					        var app = props.app || that.getApp(that.currentDir, that.getPath, false);
                                                that.openInApp(props.args, app);
                                                that.openFileOrDir(app, that.getPath, props.args, false);
                                            } else if (oneFile && !appDir) { // if there is exactly 1 file, open it
                                                const filename = that.files[0].getName();
                                                that.selectedFiles = that.files;
					                            let inbuiltApps = that.getInbuiltApps(that.files[0]);
					                            if (inbuiltApps.length > 0 && inbuiltApps[0].name != "hex" && inbuiltApps[0].name != "editor") {
                                                    that.openInApp({filename:filename}, inbuiltApps[0].name);
                                                    that.openFileOrDir(inbuiltApps[0].name, that.getPath, {filename:filename}, false);
                                                } else { //get from recommended apps if possible
                                                    let recommendedApp = that.getRecommendedViewer(that.files[0]);
                                                    if (recommendedApp != null) {
                                                        that.readAppProperties(recommendedApp, "/peergos/recommended-apps/").thenApply(props => {
                                                            if (props == null) {
                                                                var app = that.getApp(that.files[0], that.getPath, false);
                                                                that.openInApp({filename:filename}, app);
                                                                that.openFileOrDir(app, that.getPath, {filename:filename}, false);
                                                            } else {
                                                                that.sandboxAppName = recommendedApp;
                                                                that.currentFile= that.files[0];
                                                                that.currentPath= that.getPath
                                                                that.appSandboxProps = props;
                                                                that.showAppSandbox = true;
                                                            }
                                                        });
                                                    } else {
                                                        var app = that.getApp(that.files[0], that.getPath, false);
                                                        that.openInApp({filename:filename}, app);
                                                        that.openFileOrDir(app, that.getPath, {filename:filename}, false);
                                                    }
                                                }
                                            } else {
                                                // open a directory
                                                let app = that.getApp(that.currentDir, linkPath);
                                                that.openFileOrDir(app, linkPath, {filename:""});
                                            }
				 	};
                                        // first init history with drive so back button/close app works
                                        that.openFileOrDir("Drive", that.getPath, {filename:""}, false);
				 	that.onUpdateCompletion.push(open);
                                    }
				}
			    });
			} else {
				const props = this.getPropsFromUrl();

				// const app = props == null ? null : props.app;
				// const path = props == null ? null : props.path;
				// const filename = props == null ? null : props.filename;

				const pathFromUrl = props == null ? null : props.path;
				const appFromUrl = props == null ? null : props.app;
				const argsFromUrl = props == null ? null : props.args;

				const apps = ['Calendar', 'NewsFeed', 'Social', 'Launcher']

				if (pathFromUrl !== null && !apps.includes(appFromUrl) ) {

					this.showSpinner = true;

					let open = () => {
					    that.openInApp(argsFromUrl, appFromUrl)
					};
					this.onUpdateCompletion.push(open);

					this.$store.commit('SET_PATH', pathFromUrl.split('/').filter(n => n.length > 0))

				} else {
					this.$store.commit('SET_PATH', [this.context.username])
					this.updateHistory('Drive', this.getPath, {filename:""})
				}

				this.updateSocial(() => {
                    that.updateUsage()
                    that.updateQuota()
                    that.updateMirrorBatId()

                    that.context.getPaymentProperties(false).thenApply(function (paymentProps) {
                        if (paymentProps.isPaid()) {
                            that.paymentProperties = paymentProps;
                        } else
                            that.context.getPendingSpaceRequests().thenApply(reqs => {
                                if (reqs.toArray([]).length > 0)
                                    that.$store.commit('USER_ADMIN', true);
                            });
                    });
                });
			}
			this.showPendingServerMessages();
		},

        selectAllOrNone() {
            if (this.selectedFiles.length == this.files.length) {
                this.selectedFiles = [];
            } else {
                this.selectedFiles = this.files.slice();
            }
        },

        appInstallSuccess(appName) {
        },

		setSortBy(prop) {
			if (this.sortBy == prop)
				this.normalSortOrder = !this.normalSortOrder;
			this.sortBy = prop;
		},

		onResize() {
			this.closeMenu()
			this.$store.commit('SET_WINDOW_WIDTH', window.innerWidth)
		},
        installApp() {
            this.closeMenu();
            this.showAppInstallation = true;
        },
        closeAppInstallation() {
            this.showAppInstallation = false;
            this.forceSharedRefreshWithUpdate++;
        },
        runApp() {
            this.closeMenu();
            this.showAppRunner = true;
        },
        closeAppRunner() {
            this.showAppRunner = false;
            this.forceSharedRefreshWithUpdate++;
        },
        createThumbnail() {
            this.closeMenu();
            if (this.selectedFiles.length != 1)
                return false;
            let file = this.selectedFiles[0];
            let that = this;
            file.calculateAndUpdateThumbnail(this.context.network, this.context.crypto).thenApply(res => {
                if (res) {
                    that.currentDirChanged();
                }
             });
        },
		showPendingServerMessages() {
			// let context = this.getContext();
			let that = this;
			this.context.getServerConversations().thenApply(function (conversations) {
				let allConversations = [];
				let conv = conversations.toArray();
				conv.forEach(function (conversation) {
					let arr = conversation.messages.toArray();
					let lastMessage = arr[arr.length - 1];
					allConversations.push({
						id: lastMessage.id(), sendTime: lastMessage.getSendTime().toString().replace("T", " "),
						contents: lastMessage.getContents(), previousMessageId: lastMessage.getPreviousMessageId(),
						from: lastMessage.getAuthor(), msg: lastMessage
					});
					arr.forEach(function (message) {
						that.messageMonitors.push({
							id: message.id(), sendTime: message.getSendTime().toString().replace("T", " "),
							contents: message.getContents(), previousMessageId: message.getPreviousMessageId(),
							from: message.getAuthor(), msg: message
						});
					});
				});
				if (allConversations.length > 0) {
					Vue.nextTick(function () {
						allConversations.forEach(function (msg) {
							that.conversationMonitors.push(msg);
						});
					});
				}
			}).exceptionally(function (throwable) {
                console.log(throwable.getMessage());
			});
		},
		showFiles(data) {
			// this.path = data.path;
			this.$store.commit('SET_PATH', data.path)

		},
		processPending() {
			for (var i = 0; i < this.onUpdateCompletion.length; i++) {
				this.onUpdateCompletion[i].call();
			}
			this.onUpdateCompletion = [];
		},

                back() {
                    this.previouslyOpenedApp = {path: '', filename: '', app: ''};
                    history.back();
                },

                showDrive() {
                    this.previouslyOpenedApp = {path: '', filename: '', app: ''};
                    this.updateHistory("Drive", this.getPath, {filename:""});
                },

		closeApps() {
		    this.showGallery = false;
            this.showIdentityProof = false;
		    this.showPdfViewer = false;
		    this.showCodeEditor = false;
		    this.showMarkupViewer = false;
		    this.showAppSandbox = false;
		    this.showTextViewer = false;
		    this.showHexViewer = false;
		    this.showSearch = false;
		},

		navigateToAction(directory) {
			let newPath = directory.startsWith("/") ? directory.substring(1).split('/') : directory.split('/');
			let currPath = this.path;
			if (newPath.length != currPath.length) {
				this.changePath(directory);
			} else {
				for (var i = 0; i < newPath.length; i++) {
					if (newPath[i] != currPath[i]) {
						this.changePath(directory);
						return;
					}
				}
			}
		},
        appOpen(appName) {
            this.closeMenu();
            this.sandboxAppName = appName;
            this.currentFile= this.selectedFiles[0];
            this.currentPath= this.getPath;
            this.showAppSandbox = true;
        },
        closeAppSandbox(reloadDrive) {
            this.showAppSandbox = false;
            this.appSandboxProps = null;
            if (reloadDrive) {
                this.showDrive();
            }
            if(this.htmlAnchor.length > 0) {
                let file = this.selectedFiles[0];
                let filename = file.getName();
                let writable = file.isWritable();
                let userApps = this.availableAppsForFile(file);
                var args = {filename:filename}
                this.appArgs = args;
                if (userApps.length == 1) {
                    this.openFileOrDir(userApps[0].name, this.getPath, args, writable);
                } else {
                    var app = this.getApp(file, this.getPath, writable);
                    this.openFileOrDir(app, this.getPath, args, writable);
                }
            }
            this.htmlAnchor = "";
        },
	    openInApp(args, app) {
                if (app == null || app == "" || app == "Drive") {
                    this.previouslyOpenedApp = {path: '', filename: '', app: ''};
                    this.closeApps();
                    return;
                }
                if (this.previouslyOpenedApp.path == this.getPath && this.previouslyOpenedApp.filename == args.filename && this.previouslyOpenedApp.app == app) {
                    return;
                }
                this.appArgs = args;
		        this.selectedFiles = this.files.filter(f => f.getName() == args.filename);
                let that = this;
                this.closeApps();
                if (app == "Gallery")
                    that.showGallery = true;
                else if (app == "pdf")
                    that.showPdfViewer = true;
                else if (app == "editor")
                    that.showCodeEditor = true;
                else if (app == "identity-proof")
                    that.showIdentityProof = true;
                else if (app == "hex")
                    that.showHexViewer = true;
                else if (app == "markdown" || app == "markup")
                    that.showMarkupViewer = true;
                else if (app == "htmlviewer") {
                    that.sandboxAppName = "htmlviewer";
                    that.currentFile= that.selectedFiles[0];
                    that.currentPath= that.getPath;
                    that.showAppSandbox = true;
                } else if (app == "search") {
                    that.showSearch = true;
                } else {
                    that.appOpen(app);
                }
                this.previouslyOpenedApp = {path: this.getPath, filename: args.filename, app: app};
		},
		openSearch(fromRoot) {
			var path = fromRoot ? "/" + this.context.username : this.getPath;

			if (!fromRoot) {
				// if (this.isNotBackground) {
				// 	path = path + this.selectedFiles[0].getFileProperties().name;
				// } else {
					path = path.substring(0, path.length - 1);
				// }
			}
			this.searchPath = path;
			this.showSearch = true;
			this.updateHistory("search", this.getPath, {filename:""});

			this.closeMenu();
		},
		closeSearch() {
			this.showSearch = false;
		},
		updateCurrentDir() {
			this.updateCurrentDirectory(null, null);
		},
		updateCurrentDirectory(selectedFilename, callback) {
		    if (this.context == null)
			return Promise.resolve(null);
		    var path = this.getPath;
		    var that = this;
		    this.context.getByPath(path).thenApply(function (fileOpt) {
		        if (fileOpt.isPresent()) {
                    let file = fileOpt.get();
                    file.getLatest(that.context.network).thenApply(updated => {
                        if (! updated.isDirectory()) {
                            // go to parent if we tried to navigate to file
                            if (path.endsWith("/"))
                                path = path.substring(0, path.length-1)
                            let index = path.lastIndexOf("/");
                            that.changePath(path.substring(0, index));
                            that.updateCurrentDirectory(selectedFilename, callback);
                            return;
                        }
                        that.currentDir = updated;
                        that.updateFiles(selectedFilename, callback);
                    }).exceptionally(function (throwable) {
                        that.$toast.error(that.translate("DRIVE.MISSING.FOLDER"));
                        if (!that.isSecretLink && path.startsWith("/" + that.context.username)) {
                            if (path.endsWith("/"))
                                path = path.substring(0, path.length-1)
                            let index = path.lastIndexOf("/");
                            that.changePath(path.substring(0, index));
                            that.updateCurrentDirectory(selectedFilename, callback);
                        }
                    });
                } else {
                    that.$toast.error(that.translate("DRIVE.MISSING.FOLDER"));
                    if (!that.isSecretLink && path.startsWith("/" + that.context.username)) {
                        if (path.endsWith("/"))
                            path = path.substring(0, path.length-1)
                        let index = path.lastIndexOf("/");
                        that.changePath(path.substring(0, index));
                        that.updateCurrentDirectory(selectedFilename, callback);
                    }
                }
		    }).exceptionally(function (throwable) {
			    console.log(throwable.getMessage());
		    });
		},

		updateFiles(selectedFilename, callback) {
			var current = this.currentDir;
			if (current == null)
				return Promise.resolve([]);
			let that = this;
			// let context = this.getContext();
			let path = that.path.length == 0 ? ["/"] : that.path;
			let directoryPath = peergos.client.PathUtils.directoryToPath(path);
			this.context.getDirectorySharingState(directoryPath).thenApply(function (updatedSharedWithState) {
				current.getChildren(that.context.crypto.hasher, that.context.network).thenApply(function (children) {
					that.sharedWithState = updatedSharedWithState;
					var arr = children.toArray();
					that.showSpinner = false;
					let notHiddenFiles = arr.filter(function (f) {
                        return !f.getFileProperties().isHidden;
                    });
                    let allowedFiles = notHiddenFiles.filter(function (f) {
                        return that.disallowedFilenames.get(f.getName()) == null
                            && !f.getName().includes("/");
                    });
                    if (notHiddenFiles.length != allowedFiles.length) {
                        console.log('Folder contains files with disallowed filenames!');
                    }
					that.files = allowedFiles;
                    if (selectedFilename != null) {
                        that.selectedFiles = that.files.filter(f => f.getName() == selectedFilename);
                        that.openFile();
                    } else {
                        that.selectedFiles = [];
                    }
                    if (callback != null) {
                        callback();
                    }
				}).exceptionally(function (throwable) {
					console.log(throwable.getMessage());
				});
			}).exceptionally(function (throwable) {
				console.log(throwable.getMessage());
			});
		},

		getThumbnailURL(file) {
			// cache thumbnail to avoid recalculating it
			if (file.thumbnail != null)
				return file.thumbnail;
			var thumb = file.getBase64Thumbnail();
			file.thumbnail = thumb;
			return thumb;
		},

		goBackToLevel(level) {
			// By default let's jump to the root.

			// this.changePath('/');
			var newLevel = level || 0,
				path = this.path.slice(0, newLevel).join('/');

			if (newLevel < this.path.length) {
				this.changePath(path);
			} else if (newLevel == this.path.length) {
				this.currentDirChanged();
			}
		},

		askMkdir() {
		    let that = this;
			this.prompt_placeholder = this.translate("NEW.FOLDER.NAME.LABEL");
			this.prompt_message = this.translate("NEW.FOLDER.NAME.MESSAGE");
			this.prompt_value = '';
			this.prompt_action = this.translate("PROMPT.OK");
			this.prompt_consumer_func = function (prompt_result) {
				if (prompt_result === null)
					return;
				let folderName = prompt_result.trim();
				if (folderName === '')
					return;
				if (folderName === '.' || folderName === '..')
					return;
				if (folderName.includes("/"))
					return;
                if (that.disallowedFilenames.get(folderName) != null) {
                    that.showToastError(that.translate("DRIVE.FOLDERNAME.INVALID"));
                    return;
                }
				this.mkdir(folderName);
			}.bind(this);
			this.showPrompt = true;
		},

		confirmDelete(file, deleteFn) {
		    const extra = file.isDirectory() ? this.translate("DRIVE.DELETE.FILE2") : "";
		    this.prompt_placeholder = null;
                    this.prompt_message = this.translate("DRIVE.DELETE.FILE") + ` ${file.getName()} ${extra}?`;
		    this.prompt_value = '';
		    this.prompt_consumer_func = deleteFn;
		    this.prompt_action = this.translate("PROMPT.OK");
		    this.showPrompt = true;
		},

		closeWarning() {
			this.showWarning = false;
		},
		confirmDownload(file, downloadFn) {
			var size = this.getFileSize(file.getFileProperties());
			if (this.isStreamingAvailable || size < 50 * 1024 * 1024)
				return downloadFn();
			var sizeMb = (size / 1000 / 1000) | 0;
		    this.warning_message = this.translate("DRIVE.DOWNLOAD.WARN").replace("$NAME", file.getName()).replace("$SIZE", sizeMb);
			if (this.detectFirefoxWritableSteams()) {
				this.warning_body = "Firefox has added support for streaming behind a feature flag. To enable streaming; open about:config, enable 'javascript.options.writable_streams' and then open a new tab";
			} else {
				this.warning_body = "We recommend Chrome for downloads of large files. Your browser doesn't support it and may crash or be very slow";
			}
			this.warning_consumer_func = downloadFn;
			this.showWarning = true;
		},

		switchView() {
			this.isGrid = !this.isGrid;
		},

		currentDirChanged() {
			// force reload of computed properties
			this.forceUpdate++;
		},


		openLinkInNewTab(url) {
			let link = document.createElement('a')
			let click = new MouseEvent('click')

			link.rel = "noopener noreferrer";
			link.target = "_blank"
			link.href = url
			link.dispatchEvent(click)
		},

		getMirrorBatId(file) {
			return file.getOwnerName() == this.context.username ? this.mirrorBatId : java.util.Optional.empty()
		},

		mkdir(name) {
			this.showSpinner = true;
			var that = this;
			this.currentDir.mkdir(name, this.context.network, false, this.getMirrorBatId(this.currentDir), this.context.crypto)
				.thenApply(function (updatedDir) {
					that.currentDir = updatedDir;
					that.updateFiles();
					that.updateUsage();
					that.showSpinner = false;
				}.bind(this)).exceptionally(function (throwable) {
					that.showSpinner = false;
					that.$toast.error(throwable.getMessage(), {timeout:false, id: 'mkdir'})
					that.updateUsage();
				});
		},
        viewFolderProperties() {
            if (this.selectedFiles.length != 1)
                return;
            this.closeMenu();
            let file = this.selectedFiles[0];
            this.showSpinner = true;
            let that = this;
            this.calculateTotalSize(file, this.getPath).thenApply(statistics => {
                that.showSpinner = false;
                that.showFolderProperties = true;
                that.folder_properties = statistics;
            });
        },
	showToastError: function(message) {
            this.$toast.error(message, {timeout:false});
        },
    zipAndDownloadMultiSelect() {
        if (this.currentDir == null)
            return false;
        if (this.isStreamingAvailable) {
            this.zipAndDownloadFolders();
        } else {
            this.showToastError(this.translate("DRIVE.ZIP.ERROR"));
        }
    },
    reduceTotalSize(index, path, files, accumTotalSize, stats, future) {
        let that = this;
        if (files.length == index) {
            var folderCount = 0;
            for(var i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    folderCount = folderCount + 1;
                }
            }
            this.confirmZipAndDownloadOfFolders(folderCount, stats,
                () => {
                    that.showConfirm = false;
                    future.complete(true);
                },
                () => {
                    that.showConfirm = false;
                    future.complete(false);
                }
            );
        } else {
            let file = files[index];
            this.calculateTotalSize(file, path).thenApply(statistics => {
                let updatedAccumTotalSize = statistics.actualSize + accumTotalSize;
                stats.push(statistics);
                if (file.isDirectory() && statistics.fileCount == 0) {
                    that.$toast(this.translate("DRIVE.EMPTY.FOLDER").replace("$NAME", file.getName()));
                    future.complete(false);
                } else {
                    that.reduceTotalSize(index + 1, path, files, updatedAccumTotalSize, stats, future);
                }
            });
        }
    },
    reduceCollectFilesToZip(index, path, files, accumulatorList, futureCollectFiles) {
        let that = this;
        if (files.length == index) {
            futureCollectFiles.complete(true);
        } else {
            let file = files[index];
            let accumulator = {directoryMap: new Map(), files: []};
            if (file.isDirectory()) {
                let future = peergos.shared.util.Futures.incomplete();
                that.collectFilesToZip(path, file, path + file.getFileProperties().name, accumulator, future);
                future.thenApply(allFiles => {
                    for(var i = 0; i < allFiles.files.length; i++) {
                        accumulatorList.push(allFiles.files[i]);
                    }
                    that.reduceCollectFilesToZip(index +1, path, files, accumulatorList, futureCollectFiles);
                }).exceptionally(function (throwable) {
                    that.$toast.error(throwable.getMessage())
                    futureCollectFiles.complete(false);
                })
            } else {
                accumulatorList.push({path: '', file: file});
                that.reduceCollectFilesToZip(index +1, path, files, accumulatorList, futureCollectFiles);
            }
        }
    },
    confirmZipAndDownloadOfFolders(numberOfFoldersSelected, statisticsList, continueFunction, cancelFunction) {
        var folderCount = numberOfFoldersSelected;
        var fileCount = 0;
        var actualSize = 0;
        for(var i = 0; i < statisticsList.length; i++) {
            folderCount = folderCount + statisticsList[i].folderCount;
            fileCount = fileCount + statisticsList[i].fileCount;
            actualSize = actualSize + statisticsList[i].actualSize;
        }
        this.confirm_message=this.translate("DRIVE.CONFIRM.DOWNLOAD.TITLE");
        this.confirm_body=this.translate("DRIVE.CONFIRM.DOWNLOAD.BODY")
            .replace("$FOLDERS", folderCount)
            .replace("$FILES", fileCount)
            .replace("$SIZE", helpers.convertBytesToHumanReadable(actualSize));
        this.confirm_consumer_cancel_func = cancelFunction;
        this.confirm_consumer_func = continueFunction;
        this.showConfirm = true;
    },
    zipAndDownloadFolders() {
        this.showSpinner = true;
        let that = this;
        let futureTotalSize = peergos.shared.util.Futures.incomplete();
        let files = this.selectedFiles.slice();
        let path = this.getPath;
        let statisticsList = [];
        that.reduceTotalSize(0, path, files, 0, statisticsList, futureTotalSize);
        futureTotalSize.thenApply(res => {
            that.showSpinner = false;
            if (res) {
                that.showSpinner = true;
                var actualSize = 0;
                for(var i = 0; i < statisticsList.length; i++) {
                    actualSize = actualSize + statisticsList[i].actualSize;
                }
                let progress = {
                    show: true,
                    title: that.translate("DRIVE.DOWNLOAD.FOLDERS"),
                    done: 0,
                    max: actualSize
                }
                let zipFilename = 'archive-' + that.zipAndDownloadFoldersCount + '.zip';
                that.zipAndDownloadFoldersCount = that.zipAndDownloadFoldersCount + 1;
                let accumulator = {directoryMap: new Map(), files: []};
                let future = peergos.shared.util.Futures.incomplete();
                let allFilesList = [];
                that.$toast({component: ProgressBar,props: progress}, { icon: false , timeout:false, id: zipFilename});
                that.reduceCollectFilesToZip(0, path, files, allFilesList, future);
                future.thenApply(res => {
                    that.showSpinner = false;
                    if (res) {
                        that.zipFiles(zipFilename, allFilesList, progress).thenApply(res2 => {
                            console.log('zip complete');
                            that.selectedFiles = [];
                        }).exceptionally(function (throwable) {
                            that.$toast.error(throwable.getMessage())
                        });
                    }
                });
            }
        });
    },
	zipAndDownload() {
        if (this.isStreamingAvailable) {
            this.zipAndDownloadFolder();
        } else {
            this.showToastError(this.translate("DRIVE.ZIP.ERROR"));
        }
    },
	zipAndDownloadFolder() {
            if (this.selectedFiles.length != 1)
                return;
            this.closeMenu();
            let file = this.selectedFiles[0];
			this.showSpinner = true;
			let that = this;
            this.calculateTotalSize(file, this.getPath).thenApply(statistics => {
                that.showSpinner = false;
                if (statistics.fileCount == 0) {
                    that.$toast(that.translate("DRIVE.EMPTY.FOLDER").replace("$NAME", file.getName()));
                } else {
                    let filename = file.getName();
                    that.confirmZipAndDownloadOfFolder(filename, statistics,
                        () => {
                            that.showConfirm = false;
                            var progress = {
                                show: true,
                                title: that.translate("DRIVE.DOWNLOAD.FOLDER").replace("$NAME", filename),
                                done: 0,
                                max: statistics.actualSize
                            }
                            let zipFilename = filename + '.zip';
                            let accumulator = {directoryMap: new Map(), files: []};
                            let future = peergos.shared.util.Futures.incomplete();

                            that.collectFilesToZip(that.getPath, file,
                                that.getPath + file.getFileProperties().name, accumulator, future);
                            future.thenApply(allFiles => {
                                that.$toast({component: ProgressBar,props: progress}
                                    , { icon: false , timeout:false, id: zipFilename});
                                that.zipFiles(zipFilename, allFiles.files, progress).thenApply(res => {
                                    console.log('folder download complete');
                                }).exceptionally(function (throwable) {
                                    that.$toast.error(throwable.getMessage())
                                });
                            }).exceptionally(function (throwable) {
                                that.$toast.error(throwable.getMessage())
                            })
                        },
                        () => {
                            that.showConfirm = false;
                        }
                    );
                }
            }).exceptionally(function (throwable) {
                that.$toast.error(throwable.getMessage())
            });
		},
        confirmZipAndDownloadOfFolder(folderName, statistics, continueFunction, cancelFunction) {
            this.confirm_message=this.translate("DRIVE.CONFIRM.DOWNLOAD.FOLDER.TITLE").replace("$NAME", folderName);
            this.confirm_body=this.translate("DRIVE.CONFIRM.DOWNLOAD.BODY")
                .replace("$FOLDERS", statistics.folderCount)
                .replace("$FILES", statistics.fileCount)
                .replace("$SIZE", helpers.convertBytesToHumanReadable(statistics.actualSize));
            this.confirm_consumer_cancel_func = cancelFunction;
            this.confirm_consumer_func = continueFunction;
            this.showConfirm = true;
        },
		collectFilesToZip(prefix, file, path, accumulator, future) {
			let that = this;
			file.getChildren(this.context.crypto.hasher, this.context.network).thenApply(function (children) {
				let arr = children.toArray();
				for (var i = 0; i < arr.length; i++) {
					let child = arr[i];
					let childProps = child.getFileProperties();
					if (childProps.isDirectory) {
						let newPath = path + "/" + childProps.name;
						accumulator.directoryMap.set(newPath, '');
						that.collectFilesToZip(prefix, child, newPath, accumulator, future);
					} else {
					    let relativePath = path.substring(prefix.length);
						accumulator.files.push({path: relativePath, file: child});
					}
				}
				accumulator.directoryMap.delete(path)
				if (accumulator.directoryMap.size == 0) {
					future.complete(accumulator);
				}
			});
		},
		dndDrop(evt) {
			evt.preventDefault();
			let entries = evt.dataTransfer.items;
			let allItems = [];
			for (i = 0; i < entries.length; i++) {
				let entry = entries[i].webkitGetAsEntry();
				if (entry != null) {
					allItems.push(entry);
				}
			}
			let allFiles = [];
			if (allItems.length > 0) {
				this.getEntries(allItems, 0, this, allFiles);
			}
		},
		getEntries(items, itemIndex, that, allFiles) {
			if (itemIndex < items.length) {
				let item = items[itemIndex];
				if (item.isDirectory) {
					let reader = item.createReader();
					let doBatch = function () {
						reader.readEntries(function (entries) {
							if (entries.length > 0) {
								for (i = 0; i < entries.length; i++) {
									items.push(entries[i]);
								}
								doBatch();
							} else {
								that.getEntries(items, ++itemIndex, that, allFiles);
							}
						});
					};
					doBatch();
				} else {
                    item.file(function (fileEntry) {
                        if (fileEntry.name != '.DS_Store') {
                            fileEntry.directory = that.extractDirectory(item);
                            allFiles.push(fileEntry);
                        }
                        that.getEntries(items, ++itemIndex, that, allFiles);
                    });
				}
			} else {
				this.processFileUpload(allFiles);
			}
		},
        extractDirectory(file) {
            var path = null;
            if (file.fullPath != null) {
                path = file.fullPath.substring(0, file.fullPath.lastIndexOf('/'));
            }else if (file.webkitRelativePath == null) {
                path = '';
            } else {
                path = file.webkitRelativePath.substring(0, file.webkitRelativePath.lastIndexOf('/'));
            }
            if (path.length == 0) {
                return path;
            }
            return path.startsWith('/') ? path : '/' + path;
        },
        uploadFiles(evt) {
            var files = evt.target.files || evt.dataTransfer.files;
            let that = this;
            let accumulatedFiles = [];
            for(var i = 0; i < files.length; i++) {
                let fileEntry = files[i];
                if (fileEntry.name != '.DS_Store') {
                    fileEntry.directory = that.extractDirectory(fileEntry);
                    accumulatedFiles.push(fileEntry);
                }
            }
            this.processFileUpload(accumulatedFiles);
        },
        sortFilesByDirectory(files, directoryPath) {
            let that = this;
            let uploadPaths = [];
            let uploadFileLists = [];
            for(var j = 0; j < files.length; j++) {
                var foundDirectoryIndex = -1;
                let file = files[j];
                let uploadDirectoryPath = file.directory.length == 0 ? directoryPath
                    : directoryPath.substring(0, directoryPath.length -1) + file.directory;
                for(var i = 0 ; i < uploadPaths.length; i++) {
                    if (uploadDirectoryPath == uploadPaths[i]) {
                        foundDirectoryIndex = i;
                        break;
                    }
                }
                if (foundDirectoryIndex == -1) {
                    uploadPaths.push(uploadDirectoryPath);
                    uploadFileLists.push([]);
                    foundDirectoryIndex = uploadPaths.length -1;
                }
                let fileUploadList = uploadFileLists[foundDirectoryIndex];
                fileUploadList.push(file);
            }
            let combinedSortedFileList = [];
            for(var i = 0 ; i < uploadPaths.length; i++) {
                uploadFileLists[i].sort(function(a, b){return a.size-b.size});
                combinedSortedFileList = combinedSortedFileList.concat(uploadFileLists[i]);
            }
            return combinedSortedFileList;
        },
        uuid() {
          return '-' + ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
          );
        },
	processFileUpload(files, retrying) {
            let that = this;
            if (this.isSecretLink && !this.currentDir.isWritable()) {
                return;
            }
            if (this.quotaBytes.toString() == '0' && !this.isSecretLink) {
                if (retrying == null) {
                    this.updateQuota(quotaBytes => {
                        if (quotaBytes != null) {
                            that.updateUsage(usageBytes => {
                                that.processFileUpload(files, true);
                            });
                        } else {
                            that.processFileUpload(files, true);
                        }
                    });
                } else {
                    this.$toast.error(this.translate("DRIVE.OFFLINE"), {timeout:false, id: 'upload'})
                }
            } else {
                let isWritableSecretLink = this.isSecretLink && this.currentDir.isWritable();
                let totalSize = 0;
                for(var i=0; i < files.length; i++) {
                    totalSize += (files[i].size + (4096 - (files[i].size % 4096)));
                }
                if (!isWritableSecretLink && Number(that.quotaBytes.toString()) < totalSize) {
                    let errMsg = "File upload operation exceeds total space\n" + "Please upgrade to get more space";
                    that.$toast.error(errMsg, {timeout:false, id: 'upload'})
                } else {
                    let spaceAfterOperation = that.checkAvailableSpace(totalSize);
                    if (!isWritableSecretLink && spaceAfterOperation < 0) {
                        let errMsg = this.translate("DRIVE.UPLOAD.SPACE.ERROR").replace("$SPACE",  helpers.convertBytesToHumanReadable('' + -spaceAfterOperation));
                        that.$toast.error(errMsg, {timeout:false, id: 'upload'})
                    } else {
                        //resetting .value tricks browser into allowing subsequent upload of same file(s)
                        document.getElementById('uploadFileInput').value = "";
                        document.getElementById('uploadDirectoriesInput').value = "";
                        let name = 'bulkUpload-' + this.uuid();
                        let title = this.translate("DRIVE.UPLOAD.TITLE");
                        let sortedFiles = this.sortFilesByDirectory(files, this.getPath);
                        let progress = {
                            title: title,
                            done:0,
                            max:totalSize,
                            name:name,
                            current: 0,
                            total: files.length,
                        };
                        that.$toast(
                            {component: ProgressBar,props:  progress} ,
                            { icon: false , timeout:false, id: name})
                        let uploadDirectoryPath = that.getPath;
                        const uploadParams = {
                            applyReplaceToAll: false,
                            replaceFile: false,
                            directoryPath: uploadDirectoryPath,
                            uploadPaths: [],
                            fileUploadProperties: [],
                            triggerRefresh: false,
                            progress: progress,
                            name: name,
                            title: title
                        }
                        let prepareFuture = peergos.shared.util.Futures.incomplete();
                        let previousDirectoryHolder = {
                            fileWrapper: null,
                            path: ''
                        };
                        that.reduceAllUploads(0, sortedFiles, prepareFuture, uploadParams, previousDirectoryHolder);
                        prepareFuture.thenApply(preparationDone => {
                            that.bulkUpload(uploadParams).thenApply(res => {
                                console.log("upload complete");
                            });
                        });
                    }
                }
            }
        },
        bulkUpload: function(uploadParams) {
            let that = this;
            let uploadFuture = peergos.shared.util.Futures.incomplete();
            if (uploadParams.uploadPaths.length == 0) {
                uploadFuture.complete(true);
            } else {
                let folderUPList = [];
                for(var i = 0 ; i <  uploadParams.uploadPaths.length; i++) {
                    let relativePath = uploadParams.uploadPaths[i].substring(uploadParams.directoryPath.length);
                    let pathList = peergos.client.JsUtil.asList(relativePath.split('/').filter(n => n.length > 0));
                    let filePropsList = peergos.client.JsUtil.asList(uploadParams.fileUploadProperties[i]);
                    let folderUP = new peergos.shared.user.fs.FileWrapper.FolderUploadProperties(pathList, filePropsList);
                    folderUPList.push(folderUP);
                }
                let commitContext = {
                    completed: false
                }
                var commitWatcher = {
                    get_0: function() {
                        if (uploadParams.triggerRefresh) {
                            uploadParams.triggerRefresh = false;
                            if (!that.isSecretLink) {
                                that.context.getSpaceUsage().thenApply(u => {
                                    that.$store.commit('SET_USAGE', u);
                                });
                            }
                            that.updateCurrentDirectory();
                        }
                        if (!commitContext.completed && uploadParams.progress.current >= uploadParams.progress.total) {
                            commitContext.completed = true;
                            let title = that.translate("DRIVE.UPLOAD.COMPLETE");
                            that.addUploadProgressMessage(uploadParams, title, '', '', true);
                        }
                        return true;
                    }
                };

                let folderStream = peergos.client.JsUtil.asList(folderUPList).stream();
                let resumeFileUpload = function(f) {
                    let future = peergos.shared.util.Futures.incomplete();
                    let path = f.getPath();
                    let lastSlashIdx = path.lastIndexOf('/');
                    let filename = path.substring(lastSlashIdx + 1);
                    let folderPath = path.substring(0, lastSlashIdx);
                    that.confirmResumeFileUpload(filename, folderPath,
                        () => {
                            that.showConfirm = false;
                            future.complete(true);
                        },
                        () => {
                            that.showConfirm = false;
                            future.complete(false);
                        }
                    );
                    return future;
                }
                this.context.getByPath(uploadParams.directoryPath).thenApply(uploadDir => {
                    uploadDir.ref.uploadSubtree(folderStream, that.getMirrorBatId(uploadDir.ref), that.context.network,
                        that.context.crypto, that.context.getTransactionService(),
                        f => resumeFileUpload(f),
                        commitWatcher).thenApply(res => {
                            uploadFuture.complete(true);
                    }).exceptionally(function (throwable) {
                        that.errorTitle = that.translate("DRIVE.UPLOAD.ERROR");
                        that.errorBody = throwable.getMessage();
                        that.showError = true;
                        that.$toast.clear();
                    });
                });
            }
            return uploadFuture;
        },
        confirmMove() {
            var future = peergos.shared.util.Futures.incomplete();;
            this.confirm_message=this.translate("DRIVE.MOVE.ACCESS.TITLE");
            this.confirm_body=this.translate("DRIVE.MOVE.ACCESS.BODY");
            this.confirm_consumer_cancel_func = () => {
               future.complete(false);
            };
            this.confirm_consumer_func = () => {
                future.complete(true);
            };
            this.showConfirm = true;
            return future;
        },
        confirmResumeFileUpload(filename, folderPath, confirmFunction, cancelFunction) {
            this.confirm_message=this.translate("DRIVE.UPLOAD.RESUME.TITLE");
            this.confirm_body=this.translate("DRIVE.UPLOAD.RESUME.BODY")
                .replace("$NAME", filename)
                .replace("$PATH", folderPath);
            this.confirm_consumer_cancel_func = cancelFunction;
            this.confirm_consumer_func = confirmFunction;
            this.showConfirm = true;
        },
        reduceAllUploads: function(index, files, future, uploadParams, previousDirectoryHolder) {
            let that = this;
            if (index == files.length) {
                if (uploadParams.progress.total == 0) {
                    that.addUploadProgressMessage(uploadParams, that.translate("DRIVE.UPLOAD.EMPTY"), '', '', true);
                }
                future.complete(true);
            } else {
                this.uploadFile(files[index], uploadParams, previousDirectoryHolder).thenApply(result => {
                    that.reduceAllUploads(index+1, files, future, uploadParams, previousDirectoryHolder);
                });
            }
        },
        getUploadDirectory(previousDirectoryHolder, directoryPath, file) {
            let future = peergos.shared.util.Futures.incomplete();
            let uploadDirectoryPath = file.directory.length == 0 ? directoryPath
                : directoryPath + file.directory.substring(1);
            if (previousDirectoryHolder.path == uploadDirectoryPath) {
                    future.complete(previousDirectoryHolder.fileWrapper);
            } else {
                this.context.getByPath(uploadDirectoryPath).thenApply(function (optDir) {
                    previousDirectoryHolder.path = uploadDirectoryPath;
                    previousDirectoryHolder.fileWrapper = optDir.ref;
                    future.complete(optDir.ref);
                });
            }
            return future;
        },
        uploadFile: function(file, uploadParams, previousDirectoryHolder) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            this.getUploadDirectory(previousDirectoryHolder, uploadParams.directoryPath, file).thenApply(function (updatedDir) {
                if (updatedDir == null) {
                    that.uploadFileJS(file, false, future, uploadParams);
                } else {
                    updatedDir.hasChild(file.name, that.context.crypto.hasher, that.context.network).thenApply(function (alreadyExists) {
                        if (alreadyExists) {
                            if (uploadParams.applyReplaceToAll) {
                                if (uploadParams.replaceFile) {
                                    that.uploadFileJS(file, true, future, uploadParams)
                                } else {
                                    uploadParams.progress.total = uploadParams.progress.total - 1;
                                    uploadParams.progress.max = uploadParams.progress.max - file.size;
                                    future.complete(true);
                                }
                            } else {
                                that.confirmReplaceFile(file,
                                    (applyToAll) => {
                                        uploadParams.applyReplaceToAll = applyToAll;
                                        uploadParams.replaceFile = false;
                                        uploadParams.progress.total = uploadParams.progress.total - 1;
                                        uploadParams.progress.max = uploadParams.progress.max - file.size;
                                        future.complete(true);
                                    },
                                    (applyToAll) => {
                                        uploadParams.applyReplaceToAll = applyToAll;
                                        uploadParams.replaceFile = true;
                                        that.uploadFileJS(file, true, future, uploadParams)
                                    }
                                );
                            }
                        } else {
                            that.uploadFileJS(file, false, future, uploadParams);
                        }
                    });
                }
            });
            return future;
        },
		confirmReplaceFile(file, cancelFn, replaceFn) {
			this.showSpinner = false;
		    this.replace_message = this.translate("DRIVE.UPLOAD.EXISTS")
                        .replace("$NAME", file.name);
			this.replace_body = this.translate("DRIVE.UPLOAD.REPLACE");
			this.replace_consumer_cancel_func = cancelFn;
			this.replace_consumer_func = replaceFn;
			this.replace_showApplyAll = true;
			this.showReplace = true;
		},
		formatTitle(text) {
            let width = 32;
            return text.length > width ? text.substring(0, width-3) + '... ' : text;
		},
		uploadFileJS(file, overwriteExisting, future, uploadParams) {
            let that = this;
            let updater = {
                done:0,
                max:file.size,
                finished:false,
                lastUpdate: false
            };
            let thumbnailOffset = 20 * 1024;
            let updateProgressBar = function(len){
                let firstUpdate = updater.done == 0;
                updater.done += len.value_0;
                uploadParams.progress.done += len.value_0;
                if (!updater.finished && updater.done >= (updater.max + thumbnailOffset)) {
                    updater.finished = true;
                    //console.log('uploadParams.progress.done=' + uploadParams.progress.done + " uploadParams.progress.max=" + uploadParams.progress.max);
                    uploadParams.progress.current  = uploadParams.progress.current + 1;
                    uploadParams.triggerRefresh = true;
                }
                let title = '[' + uploadParams.progress.current + '/' + uploadParams.progress.total + '] ' + uploadParams.title;
                if (!firstUpdate && !updater.lastUpdate) {
                    if (updater.finished) {
                        updater.lastUpdate = true;
                    }
                    that.addUploadProgressMessage(uploadParams, title, that.formatTitle(file.name), file.directory, false);
                }
            };
            var foundDirectoryIndex = -1;
            let uploadDirectoryPath = file.directory.length == 0 ? uploadParams.directoryPath
                : uploadParams.directoryPath.substring(0, uploadParams.directoryPath.length -1) + file.directory;
            for(var i = 0 ; i < uploadParams.uploadPaths.length; i++) {
                if (uploadDirectoryPath == uploadParams.uploadPaths[i]) {
                    foundDirectoryIndex = i;
                    break;
                }
            }
            if (foundDirectoryIndex == -1) {
                uploadParams.uploadPaths.push(uploadDirectoryPath);
                uploadParams.fileUploadProperties.push([]);
                foundDirectoryIndex = uploadParams.uploadPaths.length -1;
            }
            let reader = new browserio.JSFileReader(file);
            let java_reader = new peergos.shared.user.fs.BrowserFileReader(reader);
            let jsModifiedDate = new Date(file.lastModified);
            let utcJsModifiedDate = Date.UTC(jsModifiedDate.getUTCFullYear(), jsModifiedDate.getUTCMonth(),
                            jsModifiedDate.getUTCDate(), jsModifiedDate.getUTCHours(),
                            jsModifiedDate.getUTCMinutes(), jsModifiedDate.getUTCSeconds(), jsModifiedDate.getMilliseconds());
            let fileModifiedDateTime = peergos.client.JsUtil.fromUtcMillis(utcJsModifiedDate);
            peergos.shared.user.fs.HashTree.build(java_reader, (file.size - (file.size % Math.pow(2, 32))) / Math.pow(2, 32),
            file.size, this.context.crypto.hasher).thenCompose(function(hashtree) {
                return java_reader.reset().thenApply(function(resetReader) {
                    let fup = new peergos.shared.user.fs.FileWrapper.FileUploadProperties(file.name, {get_0: () => resetReader},
                        (file.size - (file.size % Math.pow(2, 32))) / Math.pow(2, 32), file.size, java.util.Optional.of(fileModifiedDateTime), java.util.Optional.of(hashtree), false,
                        overwriteExisting ? true : false, updateProgressBar);

                    let fileUploadList = uploadParams.fileUploadProperties[foundDirectoryIndex];
                    fileUploadList.push(fup);
                    future.complete(true);
                });
            }).exceptionally(function(t){future.completeExceptionally(t)})
		},
        addUploadProgressMessage: function(uploadParams, title, subtitle, directory, finalCall) {
            let that = this;
            function update(message, conversationId) {
                let future = peergos.shared.util.Futures.incomplete();
                setTimeout( () => {
                    that.$toast.update(uploadParams.name,
                    {content:
                        {
                            component: ProgressBar,
                            props:  {
                            title: title,
                            subtitle: subtitle,
                            done: uploadParams.progress.done,
                            max: uploadParams.progress.max
                            },
                        }
                    });
                    future.complete(true);
                }, that.progressBarUpdateFrequency);
                return future;
            }
            let command = {
                func: () => update(),
                path: title + '-' + directory + '-' + subtitle,
            };
            this.drainProgressBarQueue(uploadParams, command, finalCall, false);
        },
        reduceProgressBarUpdates: function(uploadParams, future, finalCall) {
            let that = this;
            let queueCopy = this.uploadProgressQueue.entries.slice();
            let command = queueCopy.shift();
            if (command == null) {
                if (finalCall) {
                    setTimeout(() => that.$toast.dismiss(uploadParams.progress.name), 1000);
                }
                future.complete(true);
            } else {
                try {
                    let newQueue = [];
                    for(var i=0;i < queueCopy.length; i++) {
                        let entry = queueCopy[i];
                        if (command.path == entry.path) {
                            command = entry;
                        } else {
                            newQueue.push(entry);
                        }
                    }
                    this.uploadProgressQueue.entries = newQueue;
                    command.func().thenApply(function(res){
                        that.reduceProgressBarUpdates(uploadParams, future, finalCall);
                    });
                } catch(ex) {
                    future.complete(true);
                }
            }
            return future;
        },
        drainProgressBarQueue: function(uploadParams, newCommand, finalCall, repeated) {
            if (!repeated) {
                this.uploadProgressQueue.entries.push(newCommand);
            }
            let that = this;
            if (!that.executingUploadProgressCommands) {
                that.executingUploadProgressCommands = true;
                let future = peergos.shared.util.Futures.incomplete();
                that.reduceProgressBarUpdates(uploadParams, future, finalCall);
                future.thenApply(res => {
                    that.executingUploadProgressCommands = false;
                });
            } else {
                if (finalCall) {
                    setTimeout(() => that.drainProgressBarQueue(uploadParams, newCommand, finalCall, true), 1000);
                }
            }
        },
		toggleFeedbackForm() {
			this.showFeedbackForm = !this.showFeedbackForm;
			// this.clearTabNavigation();
		},

		popConversation(msgId) {
			if (msgId != null) {
				for (var i = 0; i < this.conversationMonitors.length; i++) {
					let currentMessage = this.conversationMonitors[i];
					if (currentMessage.id == msgId) {
						this.conversationMonitors.splice(i, 1);
						break;
					}
				}
			}
		},

		getMessage(msgId) {
			if (msgId != null) {
				//linear scan
				for (var i = 0; i < this.messageMonitors.length; i++) {
					let currentMessage = this.messageMonitors[i];
					if (currentMessage.id == msgId) {
						return this.messageMonitors[i];
					}
				}
			}
			return null;
		},

		copyMultiSelect() {
			if (this.selectedFiles.length < 1)
				return;
			let files = this.selectedFiles.slice();
			this.clipboardMultiSelect = {
				fileTreeNodes: files,
				op: "copy",
				path: this.getPath
			};
		},

		cutMultiSelect() {
			if (this.selectedFiles.length < 1)
				return;
			let files = this.selectedFiles.slice();
			this.clipboardMultiSelect = {
				parent: this.currentDir,
				fileTreeNodes: files,
				op: "cut",
				path: this.getPath
			};
		},

        copy() {
            if (this.selectedFiles.length != 1)
                return;
            var file = this.selectedFiles[0];
            this.clipboard = {
                fileTreeNode: file,
                op: "copy",
                path: this.getPath
            };
            this.closeMenu();
        },

        cut() {
            if (this.selectedFiles.length != 1)
                return;
            var file = this.selectedFiles[0];

            this.clipboard = {
                parent: this.currentDir,
                fileTreeNode: file,
                op: "cut",
                path: this.getPath
            };
            this.closeMenu();
        },

        reduceMove(index, path, parent, target, fileTreeNodes, multiSelectParams, future) {
            let that = this;
            if (index == fileTreeNodes.length) {
                let title = that.translate("DRIVE.MOVING.COMPLETE");
                that.addUploadProgressMessage(multiSelectParams, title, '', '', true);
                future.complete(true);
            } else {
                let fileTreeNode = fileTreeNodes[index];
                let name = fileTreeNode.getFileProperties().name;
                let filePath = peergos.client.PathUtils.toPath(path, name);
                target.getLatest(this.context.network).thenApply(updatedTarget => {
                    parent.getLatest(that.context.network).thenApply(updatedParent => {
                        fileTreeNode.getLatest(that.context.network)
                        .thenCompose(updatedFile => updatedFile.moveTo(updatedTarget, updatedParent, filePath, that.context, {get_0:() => that.confirmMove()})).thenApply(() => {
                            multiSelectParams.progress.done += 1;
                            let title = '[' + multiSelectParams.progress.done + '/' + multiSelectParams.progress.max + '] '
                                + multiSelectParams.title;
                            that.addUploadProgressMessage(multiSelectParams, title, '', '', false);
                            that.updateCurrentDirectory(null , () => {
                                that.showSpinner = true;
                                that.reduceMove(index + 1, path, updatedParent, updatedTarget, fileTreeNodes, multiSelectParams, future);
                            });
                        }).exceptionally(function (throwable) {
                            that.updateCurrentDirectory(null , () => {
                                that.errorTitle = that.translate("DRIVE.MOVE.ERROR").replace("$NAME", name);
                                that.errorBody = throwable.getMessage();
                                that.showError = true;
                                future.complete(false);
                            });
                        });
                    });
                });
            }
        },
        reduceCopy(index, fileTreeNodes, target, multiSelectParams, future) {
            let that = this;
            if (index == fileTreeNodes.length) {
                let title = that.translate("DRIVE.COPYING.COMPLETE");
                that.addUploadProgressMessage(multiSelectParams, title, '', '', true);
                future.complete(true);
            } else {
                let fileTreeNode = fileTreeNodes[index];
                target.getLatest(this.context.network).thenApply(updatedTarget => {
                    fileTreeNode.copyTo(updatedTarget, that.context).thenApply(function () {
                        multiSelectParams.progress.done += 1;
                        let title = '[' + multiSelectParams.progress.done + '/' + multiSelectParams.progress.max + '] '
                            + multiSelectParams.title;
                        that.addUploadProgressMessage(multiSelectParams, title, '', '', false);
                        that.updateUsage(usageBytes => {
                            that.updateCurrentDirectory(null , () => {
                                that.showSpinner = true;
                                that.reduceCopy(index + 1, fileTreeNodes, updatedTarget, multiSelectParams, future)
                            });
                        });
                    }).exceptionally(function (throwable) {
                        that.updateCurrentDirectory(null , () => {
                            that.errorTitle = that.translate("DRIVE.COPY.ERROR").replace("$NAME", fileTreeNode.getFileProperties().name);
                            that.errorBody = throwable.getMessage();
                            that.showError = true;
                            future.complete(false);
                        });
                    });
                });
            }
        },
        reduceSizeCalculation(index, path, fileTreeNodes, accumApparentSize, sizeFuture) {
            let that = this;
            if (index == fileTreeNodes.length) {
                sizeFuture.complete(true);
            } else {
                let fileTreeNode = fileTreeNodes[index];
                this.calculateTotalSize(fileTreeNode, path).thenApply(statistics => {
                    let updatedAccumApparentSize = accumApparentSize + statistics.apparentSize;
                    if (Number(that.quotaBytes.toString()) < updatedAccumApparentSize) {
                        let errMsg = that.translate("DRIVE.COPY.TOTAL.SPACE.ERROR");
                        that.$toast.error(errMsg, {timeout:false});
                        sizeFuture.complete(false);
                    } else {
                        let spaceAfterOperation = that.checkAvailableSpace(updatedAccumApparentSize);
                        if (spaceAfterOperation < 0) {
                            let errMsg = that.translate("DRIVE.COPY.SPACE.ERROR")
                                .replace("$SPACE", helpers.convertBytesToHumanReadable('' + -spaceAfterOperation));
                            that.$toast.error(errMsg, {timeout:false})
                            that.showSpinner = false;
                            sizeFuture.complete(false);
                        } else {
                            that.reduceSizeCalculation(index + 1, path, fileTreeNodes, updatedAccumApparentSize, sizeFuture);
                        }
                    }
                });
            }
        },
        isPasteToFolderAvailable() {
            if (this.currentDir == null)
                return false;

            if (typeof (this.clipboard) == undefined || this.clipboard == null || this.clipboard.op == null || typeof (this.clipboard.op) == "undefined")
                return false;

            if (this.selectedFiles.length > 1)
                return false;
            var target = this.selectedFiles.length == 1 ? this.selectedFiles[0] : this.currentDir;

            if (target == null) {
                return false;
            }

            if (this.clipboard.fileTreeNode != null && this.clipboard.fileTreeNode.samePointer(target)) {
                return false;
            }

            return target.isWritable() && target.isDirectory();
        },
        pasteToFolder(e) {
            var target = this.multiSelectTargetFolder;
            if (target == null) {
                this.paste(e);
            } else {
                this.pasteMultiSelect(e);
            }
        },
		pasteMultiSelect(e, retrying) {
			var target = this.multiSelectTargetFolder;
            if (target == null) {
                return;
            }
			var that = this;
			if (!target.isDirectory()) {
			    return;
            }
            let clipboard = this.clipboardMultiSelect;
            if (typeof (clipboard) == undefined || typeof (clipboard.op) == "undefined")
                return;
            for(var i=0; i < clipboard.fileTreeNodes.length; i++) {
                let fileTreeNode = clipboard.fileTreeNodes[i];
                if (fileTreeNode.samePointer(target)) {
                    that.$toast.error(that.translate("DRIVE.PASTE.LOCATION.SAME"), {timeout:false})
                    return;
                }
            }
            this.closePasteMenu();
            that.showSpinner = true;
            let name = 'multiselect-' + this.uuid();
            let title = clipboard.op == "cut" ?
                this.translate("DRIVE.MOVING.TITLE") : this.translate("DRIVE.COPYING.TITLE");
            let progress = {
                title: title,
                done:0,
                max:clipboard.fileTreeNodes.length,
                name:name,
            };
            that.$toast(
                {component: ProgressBar,props:  progress} ,
                { icon: false , timeout:false, id: name})
            const multiSelectParams = {
                progress: progress,
                name: name,
                title: title
            }
            if (clipboard.op == "cut") {
                let future = peergos.shared.util.Futures.incomplete();
                this.reduceMove(0, that.path, clipboard.parent, target, clipboard.fileTreeNodes, multiSelectParams, future);
                future.thenApply(res => {
                    if (res) {
                        that.showSpinner = false;
                        clipboard.op = null;
                        that.selectedFiles = [];
                    }
                });
            } else if (clipboard.op == "copy") {
                if (this.quotaBytes.toString() == '0') {
                    if (retrying == null) {
                        this.updateQuota(quotaBytes => {
                            if (quotaBytes != null) {
                                that.updateUsage(usageBytes => {
                                    that.pasteMultiSelect(e, true);
                                });
                            } else {
                                that.pasteMultiSelect(e, true);
                            }
                        });
                    } else {
                        this.$toast.error(this.translate("DRIVE.OFFLINE"), {timeout:false});
                        this.showSpinner = false;
                    }
                } else {
                    let sizeFuture = peergos.shared.util.Futures.incomplete();
                    this.reduceSizeCalculation(0, clipboard.path, clipboard.fileTreeNodes, 0, sizeFuture);
                    sizeFuture.thenApply(res => {
                        if (res) {
                            let copyFuture = peergos.shared.util.Futures.incomplete();
                            that.reduceCopy(0, clipboard.fileTreeNodes, target, multiSelectParams, copyFuture);
                            copyFuture.thenApply(res2 => {
                                if (res2) {
                                    that.showSpinner = false;
                                    clipboard.op = null;
                                    that.selectedFiles = [];
                                }
                            });
                        }
                    });
                }
            }
		},
		paste(e, retrying) {
			if (this.selectedFiles.length > 1)
				return;
			var target = this.selectedFiles.length == 1 ? this.selectedFiles[0] : this.currentDir;
			var that = this;
			this.closeMenu();
			if (target.isDirectory()) {
				let clipboard = this.clipboard;
				if (typeof (clipboard) == undefined || typeof (clipboard.op) == "undefined")
					return;

				if (clipboard.fileTreeNode.samePointer(target)) {
					return;
				}
				that.showSpinner = true;


				if (clipboard.op == "cut") {
					let name = clipboard.fileTreeNode.getFileProperties().name;
					console.log("paste-cut " + name + " -> " + target.getFileProperties().name);
					let filePath = peergos.client.PathUtils.toPath(clipboard.path.split("/").filter(x => x.length > 0), name);
                                        target.getLatest(this.context.network).thenApply(updatedTarget => {
                                            clipboard.parent.getLatest(that.context.network).thenApply(updatedParent => {
                                            clipboard.fileTreeNode.getLatest(that.context.network)
                                            .thenCompose(updatedFile => updatedFile.moveTo(updatedTarget, updatedParent, filePath, that.context, {get_0:() => that.confirmMove()})
						.thenApply(function () {
							that.currentDirChanged();
							that.onUpdateCompletion.push(function () {
								that.showSpinner = false;
							});
						}).exceptionally(function (throwable) {
							that.errorTitle = that.translate("DRIVE.MOVE.ERROR").replace("$NAME", name);
							that.errorBody = throwable.getMessage();
							that.showError = true;
							that.showSpinner = false;
						}));
                                            });
                                        });
                        this.clipboard.op = null;
				} else if (clipboard.op == "copy") {
					console.log("paste-copy");
                    if (this.quotaBytes.toString() == '0') {
                        if (retrying == null) {
                            this.updateQuota(quotaBytes => {
                                if (quotaBytes != null) {
                                    that.updateUsage(usageBytes => {
                                        that.paste(e, true);
                                    });
                                } else {
                                    that.paste(e, true);
                                }
                            });
                        } else {
                            this.$toast.error(this.translate("DRIVE.OFFLINE"), {timeout:false});
                            this.showSpinner = false;
                        }
                    } else {
                        this.calculateTotalSize(clipboard.fileTreeNode, clipboard.path).thenApply(statistics => {
                            if (Number(that.quotaBytes.toString()) < statistics.apparentSize) {
                                let errMsg = that.translate("DRIVE.COPY.TOTAL.SPACE.ERROR");
                                that.$toast.error(errMsg, {timeout:false, id: 'upload'})
                            } else {
                                let spaceAfterOperation = that.checkAvailableSpace(statistics.apparentSize);
                                if (spaceAfterOperation < 0) {
                                    let errMsg = that.translate("DRIVE.COPY.SPACE.ERROR")
                                        .replace("$SPACE", helpers.convertBytesToHumanReadable('' + -spaceAfterOperation));
                                    that.$toast.error(errMsg, {timeout:false, id: 'upload'})
                                    that.showSpinner = false;
                                    return;
                                }
                                clipboard.fileTreeNode.copyTo(target, that.context)
                                    .thenApply(function () {
                                        that.currentDirChanged();
                                        that.onUpdateCompletion.push(function () {
                                            that.updateUsage();
                                            that.showSpinner = false;
                                        });
                                    }).exceptionally(function (throwable) {
                                        that.errorTitle = that.translate("DRIVE.COPY.ERROR").replace("$NAME", clipboard.fileTreeNode.getName());
                                        that.errorBody = throwable.getMessage();
                                        that.showError = true;
                                        that.showSpinner = false;
                                    });
                            }
                        });
                        this.clipboard.op = null;
                    }
				}
			}
		},
		calculateDirectorySize(file, path, accumulator, future) {
			let that = this;
			file.getChildren(this.context.crypto.hasher, this.context.network).thenApply(function (children) {
				let arr = children.toArray();
				for (var i = 0; i < arr.length; i++) {
					let child = arr[i];
					let childProps = child.getFileProperties();
					if (childProps.isDirectory) {
						accumulator.size += 4096;
						let newPath = path + "/" + childProps.name;
						accumulator.directoryMap.set(newPath, '');
						that.calculateDirectorySize(child, newPath, accumulator, future);
					} else {
						let size = that.getFileSize(childProps);
						accumulator.size += (size + (4096 - (size % 4096)));
					}
				}
				accumulator.directoryMap.remove(path);
				if (accumulator.directoryMap.size == 0) {
					future.complete(accumulator.size);
				}
			});
		},
		checkAvailableSpace(fileSize) {
		    if (this.currentDir.getOwnerName() != this.context.username) {
		        return 0;
		    }
			return Number(this.quotaBytes.toString()) - (Number(this.usageBytes.toString()) + fileSize);
		},
		addToLauncher() {
            if (this.selectedFiles.length != 1)
                return false;
            let file = this.selectedFiles[0];
            this.closeMenu();

            let postFix = file.isDirectory() ? '/' : '';
            let link = this.path.join('/') + '/' + file.getName() + postFix;
            this.refreshAndAddShortcutLink(link, new Date(file.getFileProperties().created.toString() + "+00:00"));
		},
		refreshAndAddShortcutLink(link, created) {
		    let that = this;
            this.showSpinner = true;
            this.loadShortcutsFile(this.launcherApp).thenApply(shortcutsMap => {
                if (shortcutsMap.get(link) == null) {
                    let entry = {added: new Date(), created: created};
                    shortcutsMap.set(link, entry)
                    that.updateShortcutsFile(that.launcherApp, shortcutsMap).thenApply(res => {
                        that.showSpinner = false;
                        that.$store.commit("SET_SHORTCUTS", shortcutsMap);
                    });
                } else {
                    that.showSpinner = false;
                }
            })
		},
		showShareWith() {
			if (this.selectedFiles.length == 0)
				return;
			if (this.selectedFiles.length != 1)
				return;
			this.closeMenu();
			var file = this.selectedFiles[0];
			var filename = file.getFileProperties().name;
			let latestFile = this.files.filter(f => f.getName() == filename)[0];
			this.filesToShare = [latestFile];
			this.pathToFile = this.path;
			let fileSharedWithState = this.sharedWithState.get(filename);
			let read_usernames = fileSharedWithState.readAccess.toArray([]);
			let edit_usernames = fileSharedWithState.writeAccess.toArray([]);
			this.sharedWithData = { read_shared_with_users: read_usernames, edit_shared_with_users: edit_usernames };
			this.fromApp = false;
			this.displayName = latestFile.getFileProperties().name;
			this.allowReadWriteSharing = true;
			this.allowCreateSecretLink = true;
			this.showShare = true;
		},
		closeShare() {
			this.showShare = false;
		},

		updateContext(newContext) {
			// this.context = newContext;
			this.$store.commit('SET_CONTEXT', newContext);

		},

		changePath(path) {
			if (path == "/" && this.path.length == 0) {
				return; //already root
			}
			console.log('Changing to path:' + path);
			if (path.startsWith("/"))
				path = path.substring(1);

			// this.path = path ? path.split('/') : [];
		        let pathArr = path.length > 0 ? path.split('/') : []
                        this.$store.commit('SET_PATH', pathArr)

			this.showSpinner = true;
			this.updateHistory("Drive", path, {filename:""});
		},
        reduceDownload(index, files, future) {
            let that = this;
            if (index == files.length) {
                future.complete(true);
            } else {
                let file = files[index];
                that.downloadFile(file).thenApply(res => {
                    setTimeout(() => that.reduceDownload(index + 1, files, future), 10);//browser download may fail on tiny files if timeout not used
                });
            }
        },
        downloadAllMultiSelect() {
            if (this.currentDir == null)
                return false;
            if (this.selectedFiles.length == 0)
                return;
            if (!this.isStreamingAvailable) {
                this.showToastError(this.translate("DRIVE.DOWNLOAD.MULTIPLE.STREAM.ERROR"));
                return;
            }
            let foundFolder = false;
            for (var i = 0; i < this.selectedFiles.length; i++) {
                let file = this.selectedFiles[i];
                if (file.isDirectory()) {
                    foundFolder = true;
                }
            }
            let that = this;
            if (foundFolder) {
                that.zipAndDownloadMultiSelect();
            } else {
                let files = this.selectedFiles.slice();
                let future = peergos.shared.util.Futures.incomplete();
                this.reduceDownload(0,files, future);
                future.thenApply(res => {
                    that.selectedFiles = [];
                });
            }
        },
		downloadAll() {
			if (this.selectedFiles.length == 0)
				return;
			this.closeMenu();
			for (var i = 0; i < this.selectedFiles.length; i++) {
				var file = this.selectedFiles[i];
				this.navigateOrDownload(file);
			}
		},

                viewFile() {
                    this.openFile(false)
                },

		editFile() {
                    this.openFile(true)
                },

		openFile(writable) {
		    // TODO: once we support selecting files re-enable this
		    //if (this.selectedFiles.length == 0)
		    //    return;
		    this.closeMenu();
		    if (this.selectedFiles.length == 0)
			    return;
            let that = this;
		    var file = this.selectedFiles[0];
		    var filename = file.getName();

            var app = this.getApp(file, this.getPath, writable);
            if (app != "hex" && app != "editor") {
                var args = {filename:filename}
                this.appArgs = args;
                this.openFileOrDir(app, this.getPath, args, writable);
            } else { //get from recommended apps if possible
                let recommendedApp = this.getRecommendedViewer(file);
                if (this.context.username == null && recommendedApp != null) {
                    this.readAppProperties(recommendedApp, "/peergos/recommended-apps/").thenApply(props => {
                        if (props == null) {
                            var args = {filename:filename}
                            that.appArgs = args;
                            that.openFileOrDir(app, that.getPath, args, writable);
                        } else {
                            that.sandboxAppName = recommendedApp;
                            that.currentFile= file;
                            that.currentPath= that.getPath;
                            that.appSandboxProps = props;
                            that.showAppSandbox = true;
                        }
                    });
                } else {
                    let userApps = this.availableAppsForFile(file);
                    var args = {filename:filename}
                    this.appArgs = args;
                    if (userApps.length == 1 && app != "editor") {
                        this.openFileOrDir(userApps[0].name, this.getPath, args, writable);
                    } else {
                        if (recommendedApp != null) {
                            this.navigateToRecommendedApps(recommendedApp);
                        } else {
                            this.openFileOrDir(app, this.getPath, args, writable);
                        }
                    }
                }
            }
		},
        navigateToRecommendedApps: function(appName) {
            let that = this;
            let path = "/peergos/recommended-apps/";
            this.context.getByPath(path + "index.html").thenApply(function(fileOpt){
                if (fileOpt.ref != null && fileOpt.get().getFileProperties().sizeLow() > 20) {
                    that.$toast(that.translate("DRIVE.INSTALL_DEDICATED_APP"), {timeout:false});
                    that.showAppSandbox = true;
                    that.sandboxAppName = '$$app-gallery$$';
                    that.currentFile = fileOpt.get();
                    that.currentPath = path;
                    that.htmlAnchor = appName;
                } else {
                    let file = that.selectedFiles[0];
                    let filename = file.getName();
                    let writable = file.isWritable();
                    let args = {filename:filename}
                    that.appArgs = args;
                    let app = that.getApp(file, that.getPath, writable);
                    that.openFileOrDir(app, that.getPath, args, writable);
                }
            });
        },
		navigateOrDownload(file) {
			if (this.showSpinner) // disable user input whilst refreshing
				return;
			if (file.isDirectory()) {
				this.navigateToSubdir(file.getFileProperties().name);
			} else {
				var that = this;
				this.confirmDownload(file, () => { that.downloadFile(file); });
			}
		},

		navigateDrive(file) {
			this.closeMenu();
            // console.log(file, 'navigateDrive' )
			if (file.isDirectory()) {
				this.navigateToSubdir(file.getFileProperties().name);
			} else {
			    let newClickedFilename = file.getFileProperties().name;
			    let existingClickedFilename = this.clickedFilename;
			    this.clickedFilename = newClickedFilename;
                this.clicks++;
                if (this.clicks === 1) {
                    this.clickTimer = setTimeout( () => { this.clicks = 0}, this.dblClickDelay);
                } else {
                    clearTimeout(this.clickTimer);
                    if (newClickedFilename == existingClickedFilename) {
                        this.selectedFiles = [file];
                        this.openFile();
                    }
                    this.clicks = 0;
                }
			}
		},
		navigateToSubdir(name) {
			this.changePath(this.getPath + name);
		},
		getFileClass(file) {
			if (file.isDirectory())
				return "dir";
			return "file"
		},
        dragStart: function(ev, treeNode) {
            console.log("dragstart");

            ev.dataTransfer.effectAllowed='move';
            var id = ev.target.id;
            ev.dataTransfer.setData("text/plain", id);
            var owner = treeNode.getOwnerName();
            var me = this.context.username;
            if (owner === me) {
                console.log("cut");
                this.clipboard = {
                    parent: this.currentDir,
                    fileTreeNode: treeNode,
                    op: "cut"
                };
            } else {
                console.log("copy");
                ev.dataTransfer.effectAllowed='copy';
                this.clipboard = {
                    fileTreeNode: treeNode,
                    op: "copy"
                };
            }
        },
        // DragEvent, FileTreeNode => boolean
        drop: function(ev, target) {
            console.log("drop");
            ev.preventDefault();
            var moveId = ev.dataTransfer.getData("text");
            var id = ev.currentTarget.id;
            var that = this;
            if(id != moveId && target.isDirectory()) {
                const clipboard = this.clipboard;
                if (typeof(clipboard) ==  undefined || typeof(clipboard.op) == "undefined")
                    return;
                that.showSpinner = true;
                if (clipboard.op == "cut") {
        		    var name = clipboard.fileTreeNode.getFileProperties().name;
                    console.log("drop-cut " + name + " -> "+target.getFileProperties().name);
                    let filePath = peergos.client.PathUtils.toPath(that.path, name);
                    clipboard.fileTreeNode.moveTo(target, clipboard.parent, filePath, this.context, {get_0:() => that.confirmMove()})
                    .thenApply(function() {
                        that.currentDirChanged();
			            that.onUpdateCompletion.push(function() {
                            that.showSpinner = false;
                            that.clipboard = null;
			            });
                    }).exceptionally(function(throwable) {
                        that.errorTitle = that.translate("DRIVE.MOVE.ERROR")
                            .replace("$NAME", clipboard.fileTreeNode.getName());
                        that.errorBody = throwable.getMessage();
                        that.showError = true;
                        that.showSpinner = false;
                    });
                } else if (clipboard.op == "copy") {
                    console.log("drop-copy");
                    var file = clipboard.fileTreeNode;
                    var props = file.getFileProperties();
                    file.copyTo(target, this.context)
                    .thenApply(function() {
                        that.currentDirChanged();
                        that.onUpdateCompletion.push(function() {
                            that.showSpinner = false;
                            that.clipboard = null;
                        });
                    }).exceptionally(function(throwable) {
                        that.errorTitle = that.translate("DRIVE.COPY.ERROR")
                            .replace("$NAME", clipboard.fileTreeNode.getName());
                        that.errorBody = throwable.getMessage();
                        that.showError = true;
                        that.showSpinner = false;
                    });
                }
            }
        },
		isProfileViewable: function() {
           try {
               if (this.currentDir.props.name != "/")
                   return false;
               if (this.selectedFiles.length != 1)
                   return false;
               return this.selectedFiles[0].isDirectory()
           } catch (err) {
               return false;
           }
        },

        isPasteToFolderMultiSelectAvailable(target) {
            if (this.currentDir == null)
                return false;

            if (typeof (this.clipboardMultiSelect) == undefined || this.clipboardMultiSelect == null ||
                this.clipboardMultiSelect.op == null || typeof (this.clipboardMultiSelect.op) == "undefined")
                return false;
            if (target == null)
                return false;
            return target.isWritable() && target.isDirectory();
        },

		openMenu(file) {
			// console.log(file)
			if (this.isPasteToFolderMultiSelectAvailable(file)) {
                this.multiSelectTargetFolder = file;
                this.viewPasteMenu = true
                Vue.nextTick(() => {
                    this.$refs.drivePasteMenu.$el.focus()
                });
			} else {
			    this.multiSelectTargetFolder = null;
                if (file) {
                    this.selectedFiles = [file];
                } else {
                    this.selectedFiles = [this.currentDir];
                }

                this.viewMenu = true
                Vue.nextTick(() => {
                    this.$refs.driveMenu.$el.focus()
                });
            }
		},

		createNewApp() {
            this.prompt_new_app_func = function (appName, permissions) {
                this.buildNewAppSkeleton(appName, permissions);
            }.bind(this);
            this.showNewAppPrompt = true;
		},

        buildNewAppSkeleton(appDisplayName, permissions) {
			var that = this;
            let appNameLowercase = appDisplayName.toLowerCase();
            let dupApp = this.sandboxedApps.appsInstalled.slice().filter(app => app.displayName.toLowerCase() == appNameLowercase);
            if (dupApp.length != 0) {
                this.$toast.error(this.translate("DRIVE.APP.EXISTS").replace("$NAME", appDisplayName));
                return;
            }
            let launchable = permissions.filter(p => p == 'EDIT_CHOSEN_FILE' || p == 'READ_CHOSEN_FOLDER').length == 0 ? true : false;
            let folderAction = permissions.filter(p => p == 'READ_CHOSEN_FOLDER').length == 0 ? false : true;
			this.showSpinner = true;
			let appName = appDisplayName.replaceAll(' ', '').toLowerCase().trim();
            let encoder = new TextEncoder();
            let props = {"schemaVersion": "1", "displayName": appDisplayName, "name": appName,
                "version": "0.0.1", "author": this.context.username, "folderAction": folderAction,
                "description": "", "launchable": launchable,
                "fileExtensions": [], "mimeTypes": [], "fileTypes": [], "permissions": permissions
            };
            let manifestUint8Array = encoder.encode(JSON.stringify(props, null, 2));
            let appManifest = convertToByteArray(manifestUint8Array);
            let manifestReader = new peergos.shared.user.fs.AsyncReader.ArrayBacked(appManifest);
            let manifestProps =
                    new peergos.shared.user.fs.FileWrapper.FileUploadProperties("peergos-app.json", {get_0: () => manifestReader}, 0,
                        manifestUint8Array.byteLength, java.util.Optional.empty(), java.util.Optional.empty(), false, true, x => {});
            let html = '<!DOCTYPE html>\n' +
            '<html lang="en">\n' +
            '    <head>\n' +
            '        <meta charset="UTF-8">\n' +
            '        <meta name="viewport" content="width=device-width, initial-scale=1">\n' +
            '        <title>App: ' + appDisplayName + '</title>\n' +
            '    </head>\n' +
            '    <body>\n' +
            '	<h1>' + appDisplayName + '</h1>\n' +
            '    </body>\n' +
            '</html>';
            let indexUint8Array = encoder.encode(html);
            let appIndexPage = convertToByteArray(indexUint8Array);
            let indexReader = new peergos.shared.user.fs.AsyncReader.ArrayBacked(appIndexPage);
            let indexPageProps =
                    new peergos.shared.user.fs.FileWrapper.FileUploadProperties("index.html", {get_0: () => indexReader}, 0,
                        indexUint8Array.byteLength, java.util.Optional.empty(), java.util.Optional.empty(), false, true, x => {});
            let folderUPList = [];
            let appFolderProps = new peergos.shared.user.fs.FileWrapper.FolderUploadProperties(
                peergos.client.JsUtil.asList([appName]), peergos.client.JsUtil.asList([manifestProps]));
            folderUPList.push(appFolderProps);
            let assetFolderProps = new peergos.shared.user.fs.FileWrapper.FolderUploadProperties(
                peergos.client.JsUtil.asList([appName, 'assets']), peergos.client.JsUtil.asList([indexPageProps]));
            folderUPList.push(assetFolderProps);

            let folderStream = peergos.client.JsUtil.asList(folderUPList).stream();
            let alwaysResumeFileUpload = function(f) {
                let future = peergos.shared.util.Futures.incomplete();
                future.complete(true);
                return future;
            }
            var commitWatcher = {
                get_0: function() {
                    return true;
                }
            };
            this.currentDir.uploadSubtree(folderStream, this.getMirrorBatId(this.currentDir), this.context.network,
                this.context.crypto, this.context.getTransactionService(),
                f => alwaysResumeFileUpload(f), commitWatcher).thenApply(res => {
                    that.showSpinner = false;
                    that.updateCurrentDir();
                    that.updateFiles();
                    that.updateUsage();
            }).exceptionally(function (throwable) {
                that.errorTitle = that.translate("DRIVE.APP.ERROR");
                that.errorBody = throwable.getMessage();
                that.showError = true;
                that.showSpinner = false;
            });
        },

		createBlankFile() {
		    let that = this;
			this.prompt_placeholder = this.translate("DRIVE.FILENAME.PLACEHOLDER");
			this.prompt_message = this.translate("DRIVE.FILENAME");
			this.prompt_value = '';
			this.prompt_action = this.translate("PROMPT.OK");
			this.prompt_consumer_func = function (prompt_result) {
				if (prompt_result === null)
					return;
				let fileName = prompt_result.trim();
				if (fileName === '')
					return;
                if (fileName.includes("/"))
                    return
				if (that.disallowedFilenames.get(fileName) != null) {
				    that.showToastError(that.translate("DRIVE.FILENAME.INVALID"));
				    return;
                }
    			let fileData = peergos.shared.user.JavaScriptPoster.emptyArray();
				this.uploadEmptyFile(fileName, fileData);
			}.bind(this);
			this.showPrompt = true;
		},

		createBlankImageFile() {
			this.prompt_consumer_func = function (prompt_result) {
				if (prompt_result === null)
					return;
				let fileName = prompt_result.trim();
				if (fileName === '')
					return;
    			let fileData = this.createBlankImage(fileName);
				this.uploadEmptyFile(fileName, fileData);
			}.bind(this);
			this.showNewImageFilePrompt = true;
		},

		uploadEmptyFile(filename, fileData) {
			this.showSpinner = true;
			let that = this;
			// let context = this.getContext();
			let reader = new peergos.shared.user.fs.AsyncReader.ArrayBacked(fileData);
			this.currentDir.uploadFileJS(filename, reader, 0, fileData.length,
				false, that.getMirrorBatId(that.currentDir), this.context.network, this.context.crypto, function (len) { },
				this.context.getTransactionService(),
				f => peergos.shared.util.Futures.of(false)
			).thenApply(function (res) {
				that.currentDir = res;
				that.updateFiles();
				that.onUpdateCompletion.push(function () {
					that.showSpinner = false;
				});
			}).exceptionally(function (throwable) {
				that.showSpinner = false;
				that.errorTitle = that.translate("DRIVE.CREATE.ERROR");
				that.errorBody = throwable.getMessage();
				that.showError = true;
			})
		},
 		createBlankImage(filename) {
        	var imageFormat = null;
        	let dotIndex = filename.indexOf('.');
            let fileExtension = filename.substring(filename.lastIndexOf('.') + 1);
            if (fileExtension == 'jpg') {
                imageFormat = "image/jpeg";
            } else if (fileExtension == 'png') {
                imageFormat = "image/png";
            }
            var canvas = document.createElement('canvas');
            canvas.width = 800;
            canvas.height = 600;
            let dataUrl = canvas.toDataURL(imageFormat);
            let prefix = "data:" + imageFormat + ";base64,";
            let binaryThumbnail = window.atob(dataUrl.substring(prefix.length));
            var data = new Int8Array(binaryThumbnail.length);
            for (var i = 0; i < binaryThumbnail.length; i++) {
                data[i] = binaryThumbnail.charCodeAt(i);
            }
            return convertToByteArray(data);
		},
		rename() {
			if (this.selectedFiles.length == 0)
				return;
			if (this.selectedFiles.length > 1)
				throw "Can't rename more than one file at once!";
			let file = this.selectedFiles[0];
			let fileProps = file.getFileProperties();
			let old_name = fileProps.name
			this.closeMenu();
			let fileType = fileProps.isDirectory ? "directory" : "file";

			this.prompt_placeholder = this.translate("DRIVE.RENAME.PLACEHOLDER");
			this.prompt_value = old_name;
			this.prompt_message = this.translate("DRIVE.RENAME.TITLE");
			var that = this;
			this.prompt_consumer_func = function (prompt_result) {
				if (prompt_result === null)
					return;
				if (prompt_result === old_name)
					return;
				let newName = prompt_result.trim();
				if (newName === '')
					return;
				if (newName === '.' || newName === '..')
					return;
				that.showSpinner = true;
				console.log("Renaming " + old_name + "to " + newName);
				Vue.nextTick(function () {
					let filePath = peergos.client.PathUtils.toPath(that.path, old_name);
					file.rename(newName, that.currentDir, filePath, that.context)
						.thenApply(function (parent) {
							that.currentDir = parent;
							that.updateFiles();
							that.showSpinner = false;
						}).exceptionally(function (throwable) {
							that.updateFiles();
						    that.errorTitle = that.translate("DRIVE.RENAME.ERROR")
                                                        .replace("$TYPE", fileType)
                                                        .replace("$NAME", old_name);
							that.errorBody = throwable.getMessage();
							that.showError = true;
							that.showSpinner = false;
						});
				});
			};
			this.prompt_action = this.translate("PROMPT.OK");
			this.showPrompt = true;
		},

		deleteFilesMultiSelect() {
			var selectedCount = this.selectedFiles.length;
			if (selectedCount == 0)
				return;
            var that = this;
            this.confirmDeleteMultiSelect(selectedCount, (prompt_result) => {
                that.showPrompt = false;
                if (prompt_result != null) {
                    that.showSpinner = true;
                    let parent = that.currentDir;
                    let filesToDelete = peergos.client.JsUtil.asList(that.selectedFiles.slice());
                    let path = that.getPath;
                    let parentPath = peergos.client.PathUtils.directoryToPath(path.split('/').filter(n => n.length > 0));
                    peergos.shared.user.fs.FileWrapper.deleteChildren(parent, filesToDelete, parentPath, that.context).thenApply(updatedParent => {
                        that.updateUsage(usageBytes => {
                            that.updateCurrentDirectory(null , () => {
                                that.showSpinner = false;
                                that.selectedFiles = [];
                            });
                        });
                    }).exceptionally(function (throwable) {
                        that.errorTitle = that.translate("DRIVE.DELETE.ERROR");
                        that.errorBody = throwable.getMessage();
                        that.showError = true;
                        future.complete(false);
                    });
                }
            });
		},

		confirmDeleteMultiSelect(fileCount, deleteFn) {
			this.prompt_placeholder = null;
		    this.prompt_message = this.translate("DRIVE.DELETE.CONFIRM")
                        .replace("$COUNT", fileCount);
			this.prompt_value = '';
			this.prompt_consumer_func = deleteFn;
			this.prompt_action = this.translate("PROMPT.OK");
			this.showPrompt = true;
		},

		deleteFile() {
			var selectedCount = this.selectedFiles.length;
			if (selectedCount == 0)
				return;

			this.closeMenu();
            var file = this.selectedFiles[0];
            var that = this;
            var parent = this.currentDir;

            this.confirmDelete(file, (prompt_result) => {
                if (prompt_result != null) {
                    that.deleteOne(file, parent, this.context);
                }
            });
		},

		deleteOne(file, parent, context) {
			let name = file.getFileProperties().name;
			console.log("deleting: " + name);
			this.showSpinner = true;
			var that = this;
			let filePath = peergos.client.PathUtils.toPath(that.path, name);
			file.remove(parent, filePath, context)
				.thenApply(function (b) {
					that.currentDirChanged();
					that.showSpinner = false;
					that.updateUsage();
				}).exceptionally(function (throwable) {
					that.$toast.error(that.translate("DRIVE.DELETE.FILE.ERROR").replace("$NAME", file.getFileProperties().name).replace("$MESSAGE", throwable.getMessage()), {timeout:false, id: 'deleteFile'})
					that.updateUsage();
				});
		},


		isShared(file) {
			if (this.currentDir == null)
				return false;
			if (this.sharedWithState == null)
				return false;
			return this.sharedWithState.isShared(file.getFileProperties().name);
		},



		closePrompt() {
			this.showPrompt = false;
		},
		closeNewImageFilePrompt() {
			this.showNewImageFilePrompt = false;
		},
        closeNewAppPrompt() {
            this.showNewAppPrompt = false;
        },
		closeMenu() {
		    this.viewMenu = false
		},
		closePasteMenu() {
			this.viewPasteMenu = false
		},
        isSelected(file) {
            return this.selectedFiles.findIndex(selected => selected == file) > -1
        },
        toggleSelection(file, shiftModifier) {
            let index = this.selectedFiles.findIndex(selected=> selected == file)
            if (index > -1) {
                this.selectedFiles.splice(index, 1)
            } else {
                if (shiftModifier) {
                    let newIndex = this.sortedFiles.indexOf(file);
                    var largestIndex = -1;
                    for(var i=0; i < this.selectedFiles.length; i++) {
                        let index = this.sortedFiles.indexOf(this.selectedFiles[i]);
                        if (index < newIndex && index > largestIndex) {
                            largestIndex = index;
                        }
                    }
                    this.selectedFiles = this.selectedFiles.concat(this.sortedFiles.slice(largestIndex +1, newIndex +1));
                } else {
                    this.selectedFiles.push(file);
                }
            }
        }

	},

};

},{ "../components/FolderProperties.vue": 86, "../components/NewImageFilePrompt.vue": 83, "../components/Search.vue": 78, "../components/Warning.vue": 59, "../components/code-editor/CodeEditor.vue": 68, "../components/confirm/Confirm.vue": 15, "../components/drive/DriveGallery.vue": 60, "../components/drive/DriveGrid.vue": 73, "../components/drive/DriveGridCard.vue": 74, "../components/drive/DriveGridDrop.vue": 75, "../components/drive/DriveHeader.vue": 72, "../components/drive/DriveMenu.vue": 81, "../components/drive/DriveSelected.vue": 82, "../components/drive/DriveShare.vue": 40, "../components/drive/DriveTable.vue": 76, "../components/drive/ProgressBar.vue": 48, "../components/error/Error.vue": 61, "../components/identity-proof-viewer.vue": 77, "../components/pdf/PDF.vue": 87, "../components/prompt/AppPrompt.vue": 56, "../components/replace/Replace.vue": 88, "../components/sandbox/AppInstall.vue": 54, "../components/sandbox/AppRunner.vue": 67, "../components/sandbox/AppSandbox.vue": 66, "../components/sandbox/new-app/NewAppPrompt.vue": 84, "../components/spinner/Spinner.vue": 16, "../components/viewers/Hex.vue": 80, "../components/viewers/Markup.vue": 79, "../i18n/index.js": 11, "../mixins/downloader/index.js": 53, "../mixins/launcher/index.js": 65, "../mixins/router/index.js": 3, "../mixins/sandbox/index.js": 49, "../mixins/storage/index.js": 85, "../mixins/zip/index.js": 89}], 100:[function(require,module,exports){
const AppInstall = require("../components/sandbox/AppInstall.vue");
const AppHeader = require("../components/AppHeader.vue");
const AppDetails = require("../components/sandbox/AppDetails.vue");
const AppGrid = require("../components/app-grid/AppGrid.vue");
const AppSandbox = require("../components/sandbox/AppSandbox.vue");
const Confirm = require("../components/confirm/Confirm.vue");
const FilePicker = require('../components/picker/FilePicker.vue');
const FolderPicker = require('../components/picker/FolderPicker.vue');
const NewFilePicker = require("../components/picker/NewFilePicker.vue");
const Replace = require("../components/replace/Replace.vue");
const Share = require("../components/drive/DriveShare.vue");
const Spinner = require("../components/spinner/Spinner.vue");

const routerMixins = require("../mixins/router/index.js");
const mixins = require("../mixins/mixins.js");
const launcherMixin = require("../mixins/launcher/index.js");
const sandboxMixin = require("../mixins/sandbox/index.js");
const i18n = require("../i18n/index.js");
module.exports = {
render: function() {with(this){return _c('Article',{staticClass:"app-view launcher-view"},[_c('AppHeader'),_v(" "),_c('div',{staticClass:"modal-body"},[(showSpinner)?_c('Spinner'):_e(),_v(" "),(showReplace)?_c('Replace',{attrs:{"replace_message":replace_message,"replace_body":replace_body,"consumer_cancel_func":replace_consumer_cancel_func,"consumer_func":replace_consumer_func,"showApplyAll":replace_showApplyAll},on:{"hide-replace":function($event){showReplace = false}}}):_e(),_v(" "),(showNewFilePicker)?_c('NewFilePicker',{attrs:{"pickerFileExtension":pickerFileExtension,"consumer_func":prompt_consumer_func},on:{"hide-prompt":function($event){return closeNewFilePicker()}}}):_e(),_v(" "),(showFilePicker)?_c('FilePicker',{attrs:{"baseFolder":filePickerBaseFolder,"pickerFileExtension":pickerFileExtension,"pickerFilterMedia":pickerFilterMedia,"pickerFilters":pickerFilters,"pickerShowThumbnail":pickerShowThumbnail,"selectedFile_func":selectedFileFromPicker}}):_e(),_v(" "),(showFolderPicker)?_c('FolderPicker',{attrs:{"baseFolder":folderPickerBaseFolder,"selectedFolder_func":selectedFoldersFromPicker,"multipleFolderSelection":multipleFolderSelection,"initiallySelectedPaths":initiallySelectedPaths}}):_e(),_v(" "),(showAppInstallation)?_c('AppInstall',{attrs:{"appInstallSuccessFunc":appInstallSuccess,"appPropsFile":appInstallPropsFile,"installFolder":appInstallFolder},on:{"hide-app-installation":closeAppInstallation}}):_e(),_v(" "),(showAppSandbox)?_c('AppSandbox',{attrs:{"sandboxAppName":sandboxAppName,"currentFile":currentFile,"currentPath":currentPath,"htmlAnchor":htmlAnchor},on:{"hide-app-sandbox":closeAppSandbox}}):_e(),_v(" "),(showConfirm)?_c('Confirm',{attrs:{"confirm_message":confirm_message,"confirm_body":confirm_body,"consumer_cancel_func":confirm_consumer_cancel_func,"consumer_func":confirm_consumer_func},on:{"hide-confirm":function($event){showConfirm = false}}}):_e(),_v(" "),(showAppDetails)?_c('AppDetails',{attrs:{"appPropsFile":currentAppPropertiesFile},on:{"hide-app-details":closeAppDetails}}):_e(),_v(" "),(showShare)?_c('Share',{attrs:{"data":sharedWithData,"fromApp":fromApp,"displayName":displayName,"allowReadWriteSharing":allowReadWriteSharing,"allowCreateSecretLink":allowCreateSecretLink,"files":filesToShare,"path":pathToFile},on:{"hide-share-with":closeShare,"update-shared-refresh":sharingChangesMade}}):_e(),_v(" "),(showAppMenu)?_c('ul',{staticClass:"dropdown-menu",staticStyle:{"cursor":"pointer","display":"block","min-width":"100px","padding":"10px"},style:({top:menutop, left:menuleft}),attrs:{"id":"appMenu"}},_l((availableApps),function(app){return _c('li',{staticStyle:{"padding-bottom":"5px","color":"black"},attrs:{"id":"open-in-app"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return appOpen($event, app.name, app.path, app.file)},"click":function($event){return appOpen($event, app.name, app.path, app.file)}}},[_v(_s(app.contextMenuText))])}),0):_e(),_v(" "),_c('div',[_c('h3',[_c('button',{staticClass:"btn btn-success",staticStyle:{"margin-left":"10px"},on:{"click":function($event){return navigateToRecommendedApps()}}},[_c('svg',{staticClass:"white-svg",attrs:{"viewBox":"0 0 1792 1792","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{attrs:{"d":"M1728 1098q0 81-44.5 135t-123.5 54q-41 0-77.5-17.5t-59-38-56.5-38-71-17.5q-110 0-110 124 0 39 16 115t15 115v5q-22 0-33 1-34 3-97.5 11.5t-115.5 13.5-98 5q-61 0-103-26.5t-42-83.5q0-37 17.5-71t38-56.5 38-59 17.5-77.5q0-79-54-123.5t-135-44.5q-84 0-143 45.5t-59 127.5q0 43 15 83t33.5 64.5 33.5 53 15 50.5q0 45-46 89-37 35-117 35-95 0-245-24-9-2-27.5-4t-27.5-4l-13-2q-1 0-3-1-2 0-2-1v-1024q2 1 17.5 3.5t34 5 21.5 3.5q150 24 245 24 80 0 117-35 46-44 46-89 0-22-15-50.5t-33.5-53-33.5-64.5-15-83q0-82 59-127.5t144-45.5q80 0 134 44.5t54 123.5q0 41-17.5 77.5t-38 59-38 56.5-17.5 71q0 57 42 83.5t103 26.5q64 0 180-15t163-17v2q-1 2-3.5 17.5t-5 34-3.5 21.5q-24 150-24 245 0 80 35 117 44 46 89 46 22 0 50.5-15t53-33.5 64.5-33.5 83-15q82 0 127.5 59t45.5 143z"}})]),_v("\n                        "+_s(translate("LAUNCHER.CUSTOM"))+"\n                        ")]),_v(" "),_c('button',{staticClass:"btn btn-info",staticStyle:{"margin-left":"10px"},on:{"click":function($event){return checkForAppUpdates()}}},[_v(_s(translate("LAUNCHER.UPDATE")))]),_v(" "),_c('span',{staticStyle:{"margin-left":"40px"}},[_v(_s(updateMessage))])]),_v(" "),(appsList.length ==0)?_c('div',{staticClass:"table-responsive"},[_v("\n                    "+_s(translate("LAUNCHER.NONE"))+"\n                ")]):_e(),_v(" "),(appsList!=0)?_c('div',[(showAppGrid)?_c('AppGrid',{attrs:{"launchAppFunc":launchAppFromUI,"appDetailsFunc":displayAppDetails,"removeAppFunc":removeApp,"updateAppFunc":updateApp,"apps":appGridItems}}):_e()],1):_e()]),_v(" "),_c('div',[_c('h3',[_v(_s(translate("LAUNCHER.SHORTCUTS")))]),_v(" "),(shortcutList.length ==0)?_c('div',{staticClass:"table-responsive"},[_v("\n                    "+_s(translate("LAUNCHER.ADD.SHORTCUT"))+"\n                ")]):_e(),_v(" "),(shortcutList!=0)?_c('div',{staticClass:"table-responsive"},[_c('table',{staticClass:"table"},[_c('thead',[(shortcutList.length!=0)?_c('tr',{staticStyle:{"cursor":"pointer"}},[_c('th',{on:{"click":function($event){return setShortcutsSortBy('added')}}},[_v(_s(translate("LAUNCHER.ADDED"))+" "),(shortcutsSortBy=='added')?_c('span',{class:['fas', shortcutsNormalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()]),_v(" "),_c('th',{on:{"click":function($event){return setShortcutsSortBy('name')}}},[_v(_s(translate("LAUNCHER.NAME"))+" "),(shortcutsSortBy=='name')?_c('span',{class:['fas', shortcutsNormalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()]),_v(" "),_c('th',{on:{"click":function($event){return setShortcutsSortBy('path')}}},[_v(_s(translate("LAUNCHER.FOLDER"))+" "),(shortcutsSortBy=='path')?_c('span',{class:['fas', shortcutsNormalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()]),_v(" "),_c('th',{on:{"click":function($event){return setShortcutsSortBy('modified')}}},[_v(_s(translate("DRIVE.MODIFIED"))+" "),(shortcutsSortBy=='modified')?_c('span',{class:['fas', shortcutsNormalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()]),_v(" "),_c('th',{on:{"click":function($event){return setShortcutsSortBy('created')}}},[_v(_s(translate("DRIVE.CREATED"))+" "),(shortcutsSortBy=='created')?_c('span',{class:['fas', shortcutsNormalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()]),_v(" "),_c('th')]):_e()]),_v(" "),_c('tbody',_l((sortedShortcuts),function(shortcut){return _c('tr',[_c('td',{class:[shortcut.missing ? 'deleted-entry' : '']},[_v("\n                                "+_s(formatJSDate(shortcut.added))+"\n                            ")]),_v(" "),_c('td',{class:[shortcut.missing ? 'deleted-entry' : ''],staticStyle:{"cursor":"pointer"},on:{"click":function($event){return view($event, shortcut)}}},[_v(_s(shortcut.name))]),_v(" "),_c('td',{class:[shortcut.missing ? 'deleted-entry' : ''],staticStyle:{"cursor":"pointer"},on:{"click":function($event){return navigateTo(shortcut)}}},[_v("\n                                "+_s(shortcut.path)+"\n                            ")]),_v(" "),_c('td',{class:[shortcut.missing ? 'deleted-entry' : '']},[_v("\n                                "+_s(formatDateTime(shortcut.lastModified))+"\n                            ")]),_v(" "),_c('td',{class:[shortcut.missing ? 'deleted-entry' : '']},[_v("\n                                "+_s(formatJSDate(shortcut.created))+"\n                            ")]),_v(" "),_c('td',[_c('button',{staticClass:"btn btn-danger",on:{"click":function($event){return removeShortcut(shortcut)}}},[_v(_s(translate("LAUNCHER.REMOVE")))])])])}),0)])]):_e()]),_v(" "),(showSharedItems)?_c('div',[_c('h3',[_v("Files & Folders I have Shared")]),_v(" "),_c('div',{staticClass:"flex-container"},[_c('div',{staticClass:"flex-item",staticStyle:{"margin":"10px"}},[_c('button',{staticClass:"btn btn-success",attrs:{"id":"submit-search"},on:{"click":function($event){return findShared()}}},[_v("Recalculate")])])]),_v(" "),(sharedItemsList!=0)?_c('div',{staticClass:"table-responsive"},[_c('table',{staticClass:"table"},[_c('thead',[(sharedItemsList!=0)?_c('tr',{staticStyle:{"cursor":"pointer"}},[_c('th',{on:{"click":function($event){return setSharedSortBy('name')}}},[_v("Name "),(sortBy=='name')?_c('span',{class:['fas', normalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()]),_v(" "),_c('th',{on:{"click":function($event){return setSharedSortBy('path')}}},[_v("Directory "),(sortBy=='path')?_c('span',{class:['fas', normalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()]),_v(" "),_c('th',{on:{"click":function($event){return setSharedSortBy('modified')}}},[_v("Modified "),(sortBy=='modified')?_c('span',{class:['fas', normalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()]),_v(" "),_c('th',{on:{"click":function($event){return setSharedSortBy('created')}}},[_v("Created "),(sortBy=='created')?_c('span',{class:['fas', normalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()]),_v(" "),_c('th',{on:{"click":function($event){return setSharedSortBy('access')}}},[_v("Access "),(sortBy=='access')?_c('span',{class:['fas', normalSortOrder ? 'fa-angle-down' : 'fa-angle-up']}):_e()]),_v(" "),_c('th',[_v("Share")])]):_e()]),_v(" "),_c('tbody',_l((sortedSharedItems),function(match){return _c('tr',[_c('td',{staticStyle:{"cursor":"pointer"},on:{"click":function($event){return view($event, match)}}},[_v(_s(match.name))]),_v(" "),_c('td',{staticStyle:{"cursor":"pointer"},on:{"click":function($event){return navigateTo(match)}}},[_v("\n                                "+_s(match.path)+"\n                            ")]),_v(" "),_c('td',[_v("\n                                "+_s(formatDateTime(match.lastModified))+"\n                            ")]),_v(" "),_c('td',[_v("\n                                "+_s(formatDateTime(match.created))+"\n                            ")]),_v(" "),_c('td',[_v("\n                                "+_s(match.access)+"\n                            ")]),_v(" "),_c('td',[_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return share(match)}}},[_v("Share")])])])}),0)])]):_e()]):_e()],1)],1)}},    components: {
        AppInstall,
		AppHeader,
		AppDetails,
		AppGrid,
		AppSandbox,
		Confirm,
		FilePicker,
		FolderPicker,
		NewFilePicker,
		Replace,
		Share,
		Spinner,
    },
    data: function() {
        return {
            showSpinner: false,
            walkCounter: 0,
            sharedItemsList: [],
            sortBy: "name",
            normalSortOrder: true,
            launcherApp: null,
            shortcutList: [],
            shortcutsSortBy: "added",
            shortcutsNormalSortOrder: false,
            appsList: [],
            appsSortBy: "name",
            appsNormalSortOrder: true,
            showConfirm: false,
            confirm_message: "",
            confirm_body: "",
            confirm_consumer_cancel_func: () => {},
            confirm_consumer_func: () => {},
            showAppDetails: false,
            currentAppPropertiesFile: null,
            showAppSandbox: false,
            sandboxAppName: '',
            showShare: false,
            messages: [],
            currentEntry: null,
            currentFile: null,
            currentPath: null,
            showSharedItems: false,
            updateMessage:'',
            showAppInstallation: false,
            appInstallPropsFile: null,
            appInstallFolder: '',
            availableApps: [],
            showAppMenu: false,
            menutop:"",
            menuleft:"",
            showNewFilePicker: false,
            prompt_consumer_func: () => { },
            pickerFileExtension: '',
            showReplace: false,
            replace_message: "",
            replace_body: "",
            replace_consumer_cancel_func: (applyToAll) => { },
            replace_consumer_func: (applyToAll) => { },
            showAppGrid: false,
            forceAppDisplayUpdate: 0,
            appGridItems: [],
            showFolderPicker: false,
            folderPickerBaseFolder: "",
            multipleFolderSelection: false,
            initiallySelectedPaths: [],
            showFilePicker: false,
            selectedFileFromPicker: null,
            pickerFileExtension: "",
            pickerFilterMedia: false,
            pickerFilters: null,
            pickerShowThumbnail: false,
            filePickerBaseFolder: "",
            htmlAnchor: "",
        }
    },
    props: [],
    mixins:[routerMixins, mixins, launcherMixin, sandboxMixin, i18n],
	watch: {
		forceAppDisplayUpdate(newUpdateCounter, oldUpdateCounter) {
		    let that = this;
            this.showAppGrid = false;
			this.appGridItems = this.appsList.slice().sort(function (a, b) {
                 return ('' + a.name).localeCompare(b.name);
             });
            Vue.nextTick(function() {
                that.showAppGrid = true;
            });
		},
    },
    computed: {
        ...Vuex.mapState([
            'context',
            "shortcuts",
            "sandboxedApps",
            'mirrorBatId',
        ]),
        sortedShortcuts(){
            var sortBy = this.shortcutsSortBy;
            var reverseOrder = ! this.shortcutsNormalSortOrder;
            if(sortBy == "name") {
                return this.shortcutList.sort(function (a, b) {
                    if (reverseOrder) {
                        return ('' + b.name).localeCompare(a.name);
                    } else {
                        return ('' + a.name).localeCompare(b.name);
                    }
                });
            } else if(sortBy == "path") {
                return this.shortcutList.sort(function (a, b) {
                    if (reverseOrder) {
                        return ('' + b.path).localeCompare(a.path);
                    } else {
                        return ('' + a.path).localeCompare(b.path);
                    }
                });
            } else if(sortBy == "modified") {
                return this.shortcutList.sort(function (a, b) {
                    let aVal = a.lastModified;
                    let bVal = b.lastModified;
                    if (reverseOrder) {
                        return bVal.compareTo(aVal);
                    } else {
                        return aVal.compareTo(bVal);
                    }
                });
            } else if(sortBy == "created") {
                return this.shortcutList.sort(function (a, b) {
                    let aVal = a.created;
                    let bVal = b.created;
                    if (reverseOrder) {
                        return bVal - aVal;
                    } else {
                        return aVal - bVal;
                    }
                });
            } else if(sortBy == "added") {
                return this.shortcutList.sort(function (a, b) {
                    let aVal = a.added;
                    let bVal = b.added;
                    if (reverseOrder) {
                        return bVal - aVal;
                    } else {
                        return aVal - bVal;
                    }
                });
            }
        },
        sortedSharedItems(){
            var sortBy = this.sortBy;
            var reverseOrder = ! this.normalSortOrder;
            if(sortBy == "name" || sortBy == "path") {
                return this.sharedItemsList.sort(function (a, b) {
                    if (reverseOrder) {
                        return ('' + b.name).localeCompare(a.name);
                    } else {
                        return ('' + a.name).localeCompare(b.name);
                    }
                });
            } else if(this.sortBy == "modified") {
                return this.sharedItemsList.sort(function (a, b) {
                    let aVal = a.lastModified;
                    let bVal = b.lastModified;
                    if (reverseOrder) {
                        return bVal.compareTo(aVal);
                    } else {
                        return aVal.compareTo(bVal);
                    }
                });
            } else if(this.sortBy == "created") {
                return this.sharedItemsList.sort(function (a, b) {
                    let aVal = a.created;
                    let bVal = b.created;
                    if (reverseOrder) {
                        return bVal.compareTo(aVal);
                    } else {
                        return aVal.compareTo(bVal);
                    }
                });
            } else if(sortBy == "access") {
                return this.sharedItemsList.sort(function (a, b) {
                    let aVal = a.access;
                    let bVal = b.access;
                    if (reverseOrder) {
                        return bVal.compareTo(aVal);
                    } else {
                        return aVal.compareTo(bVal);
                    }
                });
            }
        }
    },
    created: function() {
        let that = this;
        this.showSpinner = true;
        peergos.shared.user.App.init(that.context, "launcher").thenApply(launcher => {
            that.launcherApp = launcher;
            that.setShortcutList(new Map(that.shortcuts.shortcutsMap));
            that.loadInstalledApps();
        });
    },
    methods: {
        confirmReplaceFile(filename, cancelFn, replaceFn) {
            this.showSpinner = false;
            this.replace_message = this.translate("LAUNCHER.FILE.EXISTS").replace("$NAME", filename);
            this.replace_body = this.translate("LAUNCHER.FILE.REPLACE");
            this.replace_consumer_cancel_func = cancelFn;
            this.replace_consumer_func = replaceFn;
            this.showReplace = true;
        },
        launchAppFromUI: function(app) {
            let that = this;
            if (app.createFile) {
                this.prompt_consumer_func = function (prompt_result, folder) {
                    if (prompt_result === null)
                        return;
                    let fileName = prompt_result.trim();
                    if (fileName === '')
                        return;
                    that.uploadEmptyFileToFolder(app.name, folder, fileName).thenApply(fileCreated => {
                        if (fileCreated != null && fileCreated === true) {
                            let pathString = '/' + folder;
                            that.findFile(pathString + "/" + fileName).thenApply(file => {
                                that.openFileOrDir(app.name, pathString, {filename: fileName})
                            });
                        }
                    });
                };
                this.pickerFileExtension = app.primaryFileExtension;
                this.showNewFilePicker = true;
            } else if (app.openFile) {
                this.filePickerBaseFolder = "/" + this.context.username;
                this.pickerFilters = app.openFileFilters;
                this.selectedFileFromPicker = function (pathString) {
                    if(pathString != null) {
                        let folder = pathString.substring(0, pathString.lastIndexOf('/'));
                        let filename = pathString.substring(pathString.lastIndexOf('/') + 1);
                        that.openFileOrDir(app.name, folder, {filename: filename})
                    }
                    that.showFilePicker = false;
                }.bind(this);
                this.showFilePicker = true;
            } else if (app.folderAction) {
                this.folderPickerBaseFolder = "/" + this.context.username;
                this.selectedFoldersFromPicker = function (chosenFolders) {
                    if (chosenFolders.length == 1) {
                        let pathString = chosenFolders[0];
                        let folder = pathString.substring(0, pathString.lastIndexOf('/'));
                        let filename = pathString.substring(pathString.lastIndexOf('/') + 1);
                        that.openFileOrDir(app.name, folder, {filename: filename})
                    }
                    that.showFolderPicker = false;
                };
                this.initiallySelectedPaths = [];
                that.showFolderPicker = true;
            } else {
                this.launchApp(app.name);
            }
        },
        getMirrorBatId(file) {
            return file.getOwnerName() == this.context.username ? this.mirrorBatId : java.util.Optional.empty()
        },
        uploadEmptyFileToFolder(appName, folder, filename) {
            this.showSpinner = true;
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            this.context.getByPath(folder).thenApply(function (optDir) {
                let dir = optDir.get();
                dir.hasChild(filename, that.context.crypto.hasher, that.context.network).thenApply(function (alreadyExists) {
                    if (alreadyExists) {
                        that.confirmReplaceFile(filename,
                            () => {
                                future.complete(null);
                            },
                            () => {
                                that.uploadEmptyFile(appName, dir, filename, future);
                            }
                        );
                    } else {
                        that.uploadEmptyFile(appName, dir, filename, future);
                    }
                });
            });
            return future;
        },
        readInEmptyFile: function(fullPathToFile) {
            let that = this;
            var future = peergos.shared.util.Futures.incomplete();
            this.findFile(fullPathToFile).thenApply(file => {
                if (file == null) {
                    future.complete(peergos.shared.user.JavaScriptPoster.emptyArray());
                } else {
                    const props = file.getFileProperties();
                    file.getInputStream(that.context.network, that.context.crypto, props.sizeHigh(), props.sizeLow(), function(read){})
                        .thenCompose(function(reader) {
                            var size = that.getFileSize(props);
                            var data = convertToByteArray(new Int8Array(size));
                            return reader.readIntoArray(data, 0, data.length).thenApply(function(read){
                                future.complete(data);
                            });
                    });
                }
            });
            return future;
        },

        uploadEmptyFile(appName, dir, filename, future) {
            let that = this;
            let extension = filename.substring(filename.lastIndexOf('.') + 1);
            let fullPathToAppEmptyFile = "/" + this.context.username + "/.apps/" + appName + '/assets/empty.' + extension;
            this.readInEmptyFile(fullPathToAppEmptyFile).thenApply(fileData => {
                let reader = new peergos.shared.user.fs.AsyncReader.ArrayBacked(fileData);
                dir.uploadFileJS(filename, reader, 0, fileData.length,
                    true, that.getMirrorBatId(dir), that.context.network, that.context.crypto, function (len) { },
                    that.context.getTransactionService(),
                    f => peergos.shared.util.Futures.of(false)
                ).thenApply(function (res) {
                    that.showMessage(false, that.translate("LAUNCHER.CREATED.SUCCESS"));
                    that.showSpinner = false;
                    future.complete(true);
                }).exceptionally(function (throwable) {
                    that.showSpinner = false;
                    that.showMessage(true, that.translate("LAUNCHER.CREATED.ERROR"));
                    future.complete(false);
                });
            });
            return future;
        },
        closeNewFilePicker() {
            this.showNewFilePicker = false;
        },
        appOpen(event, appName, path, file) {
            this.showAppMenu = false;
            event.stopPropagation();
            this.availableApps = [];
            this.openFileOrDir(appName, path, {filename:file.isDirectory() ? "" : file.getName()})
        },
        loadInstalledApps() {
            let that = this;
            if(!this.sandboxedApps.appsLoaded) {
                setTimeout( () => { that.loadInstalledApps();}, 1000);
            } else {
                let installedApps = that.sandboxedApps.appsInstalled.slice().filter(a => a.name != "htmlviewer");
                for(var i=0; i < installedApps.length; i++) {
                    let appRow = installedApps[i];
                    appRow.updateAvailable = false;
                }
                that.appsList = installedApps;
                that.loadAppIcons();
                that.showSpinner = false;
            }
        },
        appInstallSuccess(appName) {
            let appIndex = this.appsList.findIndex(v => v.name === appName);
            let appRow = this.appsList[appIndex];
            this.appsList.splice(appIndex, 1);
            appRow.updateAvailable = false;
            appRow.thumbnail = null;
            this.appsList.push(appRow);
            this.updateMessage = '';
            this.loadAppIcons();
        },
        closeAppInstallation() {
            this.showAppInstallation = false;
        },
        updateApp: function(app) {
            let that = this;
            let pathStr = app.source.endsWith('/') ? app.source  : app.source + '/';
            this.context.getByPath(pathStr + 'peergos-app.json').thenApply(propsFileOpt => {
                if (propsFileOpt.ref != null) {
                    that.appInstallPropsFile = propsFileOpt.ref;
                    that.appInstallFolder = pathStr;
                    that.showAppInstallation = true;
                }
            });
        },
        checkForAppUpdates: function() {
            let that = this;
            this.showSpinner = true;
            let appsInstalledWithSource = this.sandboxedApps.appsInstalled.slice().filter(a => a.source.length > 0);
            let future = peergos.shared.util.Futures.incomplete();
            this.gatherAppsWithUpdates(appsInstalledWithSource, 0, [], future);
            future.thenApply(appsWithUpdates => {
                if (appsWithUpdates.length == 0) {
                    that.updateMessage = that.translate("LAUNCHER.UPDATES.NONE");
                } else if (appsWithUpdates.length == 1) {
                    that.updateMessage = that.translate("LAUNCHER.UPDATES.ONE");
                } else {
                    that.updateMessage = that.translate("LAUNCHER.UPDATES.MANY").replace("$COUNT", appsWithUpdates.length);
                }
                for(var i=0; i < appsWithUpdates.length; i++) {
                    let appName = appsWithUpdates[i].name;
                    let appIndex = that.appsList.findIndex(v => v.name === appName);
                    let appRow = that.appsList[appIndex];
                    appRow.updateAvailable = true;
                    that.forceAppDisplayUpdate++;
                }
                that.showSpinner = false;
            });
        },
        gatherAppsWithUpdates: function(appsInstalledWithSource, index, accumulator, future) {
            if (index == appsInstalledWithSource.length) {
                future.complete(accumulator);
            } else {
                let that = this;
                let app = appsInstalledWithSource[index];
                let pathStr = app.source.endsWith('/') ? app.source + 'peergos-app.json' : app.source + '/peergos-app.json';
                this.context.getByPath(pathStr).thenApply(propsFileOpt => {
                    if (propsFileOpt.ref != null) {
                        that.readJSONFile(propsFileOpt.ref).thenApply(props => {
                            if (that.isAppVersionNewer(app.version, props.version)) {
                                accumulator.push(app);
                            }
                            that.gatherAppsWithUpdates(appsInstalledWithSource, index + 1, accumulator, future);
                        });
                    } else {
                        that.gatherAppsWithUpdates(appsInstalledWithSource, index + 1, accumulator, future);
                    }
                });
            }
        },
        isAppVersionNewer: function(existingVersionStr, sourceVersionStr) {
            try {
                let existingVersion = peergos.shared.util.Version.parse(existingVersionStr);
                let sourceVersion = peergos.shared.util.Version.parse(sourceVersionStr);
                return existingVersion.isBefore(sourceVersion);
            } catch {
                return false;
            }
        },
        navigateToRecommendedApps: function() {
            let that = this;
            let path = "/peergos/recommended-apps/";
            that.findFile(path + "index.html").thenApply(file => {
                if (file != null) {
                    that.launchApp('$$app-gallery$$', file, path);
                }
            });

        },
        loadAppIcons: function() {
            let that = this;
            this.loadAppIconsRecursively(this.appsList, 0, () => {
                    that.forceAppDisplayUpdate++;
                });
        },
        loadAppIconsRecursively: function(apps, index, cb) {
            if (index == apps.length) {
                cb();
            } else {
                let that = this;
                let app = apps[index];
                let appIndex = this.appsList.findIndex(v => v.name === app.name);
                if (app.appIcon.length == 0 ||  (appIndex > -1 && this.appsList[appIndex].thumbnail != null)) {
                    this.loadAppIconsRecursively(apps, index + 1, cb);
                } else {
                    let fullPathToAppIcon = "/" + this.context.username + "/.apps/" + app.name + '/assets/' + app.appIcon;
                    that.findFile(fullPathToAppIcon).thenApply(file => {
                        if (file != null) {
                           if (appIndex > -1) {
                               let appRow = that.appsList[appIndex];
                               appRow.thumbnail = file.getBase64Thumbnail();
                           }
                        }
                        that.loadAppIconsRecursively(apps, index + 1, cb);
                    });
                }
            }
        },
        setShortcutList: function(shortcutsMap) {
            let that = this;
            let allShortcuts = [];
            shortcutsMap.forEach(function(value, key) {
                var isDirectory = false;
                var name = '';
                if (key.endsWith('/')) {
                    isDirectory = true;
                } else {
                    name = key.substring(key.lastIndexOf('/') + 1);
                }
                let path = key.substring(0, key.lastIndexOf('/'));
                let shortcut = {missing: false, name: name, path: path, isDirectory : isDirectory, lastModified: '',
                    created: new Date(value.created), added: new Date(value.added)};
                that.populateShortcut(shortcut);
                allShortcuts.push(shortcut);
            });
            that.shortcutList = allShortcuts;
        },
        launchApp: function(appName, currentFile, currentPath) {
            this.showAppSandbox = true;
            this.sandboxAppName = appName;
            this.currentFile = currentFile;
            this.currentPath = currentPath;
        },
        closeAppSandbox() {
            this.showAppSandbox = false;
            this.setShortcutList(new Map(this.shortcuts.shortcutsMap));
            this.loadInstalledApps();
        },
        displayAppDetails: function(app) {
            let that = this;
            let fullPath = "/" + this.context.username + "/.apps/" + app.name + '/peergos-app.json';
            this.findFile(fullPath).thenApply(file => {
                if (file != null) {
                    that.currentAppPropertiesFile = file;
                    that.showAppDetails = true;
                }
            });
        },
        closeAppDetails() {
            this.currentAppPropertiesFile = null;
            this.showAppDetails = false;
        },
        confirmRemoveApp(appName, replaceFunction, cancelFunction) {
            this.confirm_message = this.translate("LAUNCHER.APP.REMOVE") + ': ' + appName;
            this.confirm_body = this.translate("LAUNCHER.APP.REMOVE.CONFIRM");
            this.confirm_consumer_cancel_func = cancelFunction;
            this.confirm_consumer_func = replaceFunction;
            this.showConfirm = true;
        },
        removeApp: function(app) {
            let that = this;
            if (app.name == 'htmlviewer') {
                this.showErrorMessage('Unable to remove HTML Viewer');
            } else {
                this.confirmRemoveApp(app.displayName,
                    () => {
                        that.showConfirm = false;
                        that.deleteApp(app);
                    },
                    () => {
                        that.showConfirm = false;
                        that.showSpinner = false;
                    }
                );
            }
        },
        deleteApp(app) {
            let that = this;
            let appDirName = app.name;
            this.showSpinner = true;
            this.context.getByPath("/" + this.context.username + "/.apps").thenApply(appDirOpt => {
                if (appDirOpt.ref != null) {
                    appDirOpt.ref.getChild(appDirName, that.context.crypto.hasher, that.context.network).thenApply(appToDeleteOpt => {
                        if (appToDeleteOpt.ref != null) {
                            that.deleteAppFolder(app, appToDeleteOpt.ref, appDirOpt.ref);
                        }
                    });
                }
            });
        },
        deleteAppFolder: function(app, file, parent) {
            let name = file.getFileProperties().name;
            let that = this;
            let filePath = peergos.client.PathUtils.directoryToPath([this.context.username, ".apps", name]);
            file.remove(parent, filePath, this.context).thenApply(function(b){
                that.deRegisterApp(app);
                let appIndex = that.appsList.findIndex(v => v.name === app.name);
                if (appIndex > -1) {
                    that.appsList.splice(appIndex, 1);
                    that.forceAppDisplayUpdate++;
                }
                that.showSpinner = false;
            }).exceptionally(function(throwable) {
                console.log('Unexpected error: ' + throwable);
                that.showErrorMessage('Error deleting App: ' + app.name);
                that.showSpinner = false;
            });
        },
        confirmRemoveShortcut(replaceFunction, cancelFunction) {
            this.confirm_message = this.translate("LAUNCHER.SHORTCUT.REMOVE");
            this.confirm_body = this.translate("LAUNCHER.SHORTCUT.REMOVE.CONFIRM");
            this.confirm_consumer_cancel_func = cancelFunction;
            this.confirm_consumer_func = replaceFunction;
            this.showConfirm = true;
        },
        removeShortcut: function(shortcut) {
            let that = this;
            this.confirmRemoveShortcut(
                () => {
                    that.showConfirm = false;
                    that.deleteShortcut(shortcut);
                },
                () => {
                    that.showConfirm = false;
                    that.showSpinner = false;
                }
            );
        },
        deleteShortcut: function(entry) {
            let link = entry.path + '/' + (entry.isDirectory ? "" : entry.name);
            this.refreshAndDeleteShortcutLink(link);
        },
        refreshAndDeleteShortcutLink(link) {
            let that = this;
            this.showSpinner = true;
            this.loadShortcutsFile(this.launcherApp).thenApply(shortcutsMap => {
                if (shortcutsMap.get(link) != null) {
                    shortcutsMap.delete(link)
                    that.updateShortcutsFile(that.launcherApp, shortcutsMap).thenApply(res => {
                        that.showSpinner = false;
                        that.$store.commit("SET_SHORTCUTS", shortcutsMap);
                        that.setShortcutList(new Map(shortcutsMap));
                    });
                } else {
                    that.showSpinner = false;
                }
            })
        },
        populateShortcut(entry) {
            let fullPath = entry.path + (entry.isDirectory ? "" : '/' + entry.name);
            this.findFile(fullPath).thenApply(file => {
                if (file != null) {
                    let props = file.getFileProperties();
                    entry.lastModified = props.modified;
                } else {
                    entry.missing = true;
                }
            });
        },
        walk: function(file, path, sharedWithState) {
            let searchButton = document.getElementById("submit-search");
            let fileProperties = file.getFileProperties();
            if (fileProperties.isHidden)
                return;
            let that = this;
            if (fileProperties.isDirectory) {
                that.walkCounter++;
                if (that.walkCounter == 1) {
                    that.showSpinner = true;
                    searchButton.disabled = true;
                }
                let pathWithoutEndingSlash = path.endsWith('/') ? path.substring(0, path.length -1) : path;
                let directoryPath = peergos.client.PathUtils.directoryToPath(pathWithoutEndingSlash.substring(1).split("/"));
                this.context.getDirectorySharingState(directoryPath).thenApply(function (updatedSharedWithState) {
                    file.getChildren(that.context.crypto.hasher, that.context.network).thenApply(function(children) {
                        let arr = children.toArray();
                        let size = arr.length;
                        if (size == 0) {
                            that.walkCounter--;
                            if (that.walkCounter == 0) {
                                that.showSpinner = false;
                                searchButton.disabled = false;
                            }
                        }
                        arr.forEach(function(child, index){
                            let newPath = child.getFileProperties().isDirectory ? path + child.getFileProperties().name : path;
                            that.walk(child, newPath, updatedSharedWithState);
                            if (index == size - 1) {
                                that.walkCounter--;
                                if (that.walkCounter == 0) {
                                    that.showSpinner = false;
                                    searchButton.disabled = false;
                                }
                            }
                        });
                    });
                });
            }
            this.isSharedTest(sharedWithState, file, path);
        },
        getFileSize: function(props) {
                var low = props.sizeLow();
                if (low < 0) low = low + Math.pow(2, 32);
                return low + (props.sizeHigh() * Math.pow(2, 32));
        },
        addSharedItem: function(sharedWithState, file, path) {
            let props = file.getFileProperties();
            let pathStr = props.isDirectory ? path.substring(0, path.lastIndexOf("/")): path;
            let fileSharingState = sharedWithState.get(props.name);
            let read_usernames = fileSharingState.readAccess.toArray([]);
            let edit_usernames = fileSharingState.writeAccess.toArray([]);
            let entry = {
                path: pathStr,
                name: props.name,
                lastModified: props.modified,
                created: props.created,
                isDirectory: props.isDirectory,
                type: props.getType(),
                file: file,
                read_shared_with_users: read_usernames,
                edit_shared_with_users: edit_usernames,
                access: edit_usernames.length > 0 ? "R & W" : "R"
            };
            this.sharedItemsList.push(entry);
        },
        isSharedTest: function(sharedWithState, file, path) {
            if (sharedWithState == null) {
                return;
            }
            let filename = file.getName();
            let isShared = sharedWithState.isShared(filename);
            if (isShared){
                this.addSharedItem(sharedWithState, file, path);
            }
        },
        findShared: function() {
            var that = this;
            let path = '/' + this.context.username + '/';
            this.sharedItemsList = [];
            this.walkCounter = 0;
            this.context.getByPath(path).thenApply(function(dir){
                that.walk(dir.get(), path, null);
            }).exceptionally(function(throwable) {
                that.showSpinner = false;
                let searchButton = document.getElementById("submit-search");
                searchButton.disabled = false;
                throwable.printStackTrace();
            });

        },
        uuid: function() {
          return '-' + ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
          );
        },
        showMessage: function(isError, title, body) {
            let bodyContents = body == null ? '' : ' ' + body;
            if (isError) {
                this.$toast.error(title + bodyContents, {timeout:false});
            } else {
                let id = this.uuid();
                this.$toast(title + bodyContents, {id: id});
                let that = this;
                setTimeout(() => that.$toast.dismiss(id), 3000);
            }
        },
        showErrorMessage(errMsg) {
            console.log(errMsg);
            this.showMessage(true, "", errMsg);
            this.showSpinner = false;
        },
        findFile: function(filePath) {
            let that = this;
            var future = peergos.shared.util.Futures.incomplete();
            this.context.getByPath(filePath).thenApply(function(fileOpt){
                if (fileOpt.ref == null) {
                    future.complete(null);
                } else {
                    let file = fileOpt.get();
                    const props = file.getFileProperties();
                    if (props.isHidden) {
                        future.complete(null);
                    } else {
                        future.complete(file);
                    }
                }
            }).exceptionally(function(throwable) {
                console.log(throwable.getMessage());
                future.complete(null);
            });
            return future;
        },
        view: function (event, entry) {
            if (entry.name.length == 0 || entry.missing) {
                return;
            }
            let that = this;
            let fullPath = entry.path + (entry.isDirectory ? "" : '/' + entry.name);
            this.findFile(fullPath).thenApply(file => {
                if (file != null) {
                    let userApps = this.availableAppsForFile(file);
                    let inbuiltApps = this.getInbuiltApps(file);
                    if (userApps.length == 0) {
                        if (inbuiltApps.length == 1) {
                            if (inbuiltApps[0].name == 'hex') {
                                that.openFileOrDir("Drive", entry.path, {filename:""});
                            } else {
                                this.openFileOrDir(inbuiltApps[0].name, entry.path, {filename:file.isDirectory() ? "" : file.getName()})
                            }
                        } else {
                            this.showAppContextMenu(event, inbuiltApps, userApps, entry.path, file);
                        }
                    } else {
                        this.showAppContextMenu(event, inbuiltApps, userApps, entry.path, file);
                    }
                }
            });
        },
        showAppContextMenu(event, inbuiltApps, userApps, path, file) {
            let appOptions = [];
            for(var i = 0; i < userApps.length; i++) {
                let app = userApps[i];
                let option = {'name': app.name, 'path': path, 'file': file, 'contextMenuText': app.contextMenuText};
                appOptions.push(option);
            }
            for(var i = 0; i < inbuiltApps.length; i++) {
                let app = inbuiltApps[i];
                let option = {'name': app.name, 'path': path, 'file': file, 'contextMenuText': app.contextMenuText};
                appOptions.push(option);
            }
            this.availableApps = appOptions;
            var pos = this.getPosition(event);
            Vue.nextTick(function() {
                var top = pos.y;
                var left = pos.x;
                this.menutop = top + 'px';
                this.menuleft = left + 'px';
            }.bind(this));
            this.showAppMenu = true;
            event.stopPropagation();
        },
        getPosition: function(e) {
            var posx = 0;
            var posy = 0;

            if (!e) var e = window.event;
            if (e.clientX || e.clientY) {
                posx = Math.max(0, e.clientX - 100); //todo remove arbitrary offset
                posy = Math.max(0, e.clientY - 100);
            }
            return {
                x: posx,
                y: posy
            }
        },
        navigateTo: function (entry) {
            if (entry.missing) {
                return;
            }
            this.openFileOrDir("Drive", entry.path, {filename:""});
        },
        setSharedSortBy: function(prop) {
            if (this.sortBy == prop)
                this.normalSortOrder = !this.normalSortOrder;
            this.sortBy = prop;
        },
        setShortcutsSortBy: function(prop) {
            if (this.shortcutsSortBy == prop)
                this.shortcutsNormalSortOrder = !this.shortcutsNormalSortOrder;
            this.shortcutsSortBy = prop;
        },
        setAppsSortBy: function(prop) {
            if (this.appsSortBy == prop)
                this.appsNormalSortOrder = !this.appsNormalSortOrder;
            this.appsSortBy = prop;
        },
        formatDateTime: function(dateTime) {
            if (dateTime.length == 0) {
                return dateTime;
            }
            let date = new Date(dateTime.toString() + "+00:00");//adding UTC TZ in ISO_OFFSET_DATE_TIME ie 2021-12-03T10:25:30+00:00
            return this.formatJSDate(date);
        },
        formatJSDate: function(date) {
            let formatted = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate()
                + ' ' + (date.getHours() < 10 ? '0' : '') + date.getHours()
                + ':' + (date.getMinutes() < 10 ? '0' : '') + date.getMinutes()
                + ':' + (date.getSeconds() < 10 ? '0' : '') + date.getSeconds();
            return formatted;
        },
        closeShare: function() {
            this.showShare = false;
        },
        sharingChangesMade: function() {
            let that = this;
            let index = this.sharedItemsList.findIndex(v => v.path === this.currentEntry.path &&
                         v.name === this.currentEntry.name);
            let directoryPath = peergos.client.PathUtils.directoryToPath(this.pathToFile);
            this.context.getDirectorySharingState(directoryPath).thenApply(function (sharedWithState) {
                let isShared = sharedWithState.isShared(that.currentEntry.name);
                if (isShared){
                    let fullPath = that.currentEntry.path + '/' + that.currentEntry.name;
                    that.context.getByPath(fullPath).thenApply(function(fileOpt){
                        that.sharedItemsList.splice(index, 1);
                        that.addSharedItem(sharedWithState, fileOpt.ref, fullPath);
                        that.currentEntry = null;
                    });
                } else {
                    that.sharedItemsList.splice(index, 1);
                }
            });
        },
        share: function(entry) {
            this.currentEntry = entry;
            this.filesToShare = [entry.file];
            this.pathToFile = entry.path.split('/').filter(n => n.length > 0);
            this.sharedWithData = {read_shared_with_users:entry.read_shared_with_users,
                edit_shared_with_users: entry.edit_shared_with_users};
            this.fromApp = false;
            this.displayName = entry.name;
            this.allowReadWriteSharing = true;
            this.allowCreateSecretLink = true;
            this.showShare = true;
        }
    }
}

},{ "../components/AppHeader.vue": 91, "../components/app-grid/AppGrid.vue": 98, "../components/confirm/Confirm.vue": 15, "../components/drive/DriveShare.vue": 40, "../components/picker/FilePicker.vue": 58, "../components/picker/FolderPicker.vue": 36, "../components/picker/NewFilePicker.vue": 99, "../components/replace/Replace.vue": 88, "../components/sandbox/AppDetails.vue": 97, "../components/sandbox/AppInstall.vue": 54, "../components/sandbox/AppSandbox.vue": 66, "../components/spinner/Spinner.vue": 16, "../i18n/index.js": 11, "../mixins/launcher/index.js": 65, "../mixins/mixins.js": 52, "../mixins/router/index.js": 3, "../mixins/sandbox/index.js": 49}], 93:[function(require,module,exports){

const AppButton = require("../components/AppButton.vue");
const AppHeader = require("../components/AppHeader.vue");
const AppIcon = require("../components/AppIcon.vue");
const AppInstall = require("../components/sandbox/AppInstall.vue");
const Confirm = require("../components/confirm/Confirm.vue");
const SocialPost = require("../components/social/SocialPost.vue");
const Gallery = require("../components/drive/DriveGallery.vue");
const ViewProfile = require("../components/profile/ViewProfile.vue");
const AppSandbox = require("../components/sandbox/AppSandbox.vue");
const Spinner = require("../components/spinner/Spinner.vue");
const i18n = require("../i18n/index.js");

const routerMixins = require("../mixins/router/index.js");
const mixins = require("../mixins/mixins.js");

module.exports = {
render: function() {with(this){return _c('Article',{staticClass:"app-view newsfeed-view"},[_c('AppHeader',{scopedSlots:_u([{key:"primary",fn:function(){return [_c('h1',[_v(_s(translate("NEWSFEED.TITLE")))])]},proxy:true},{key:"tools",fn:function(){return [_c('AppButton',{attrs:{"aria-label":"New Post","size":"small","accent":""},nativeOn:{"click":function($event){return addNewPost()}}},[_v("\n\t\t\t"+_s(translate("NEWSFEED.NEW"))+"\n\t\t\t")]),_v(" "),_c('button',{staticClass:"refresh-btn btn-success",attrs:{"disabled":showSpinner,"aria-label":"Refresh"},on:{"click":function($event){return refresh()}}},[(showSpinner)?_c('i',{attrs:{"aria-hidden":"true"}},[_c('svg',{staticClass:"refresh-icon imageRotate",attrs:{"viewBox":"0 0 1792 1792","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{attrs:{"d":"M1639 1056q0 5-1 7-64 268-268 434.5t-478 166.5q-146 0-282.5-55t-243.5-157l-129 129q-19 19-45 19t-45-19-19-45v-448q0-26 19-45t45-19h448q26 0 45 19t19 45-19 45l-137 137q71 66 161 102t187 36q134 0 250-65t186-179q11-17 53-117 8-23 30-23h192q13 0 22.5 9.5t9.5 22.5zm25-800v448q0 26-19 45t-45 19h-448q-26 0-45-19t-19-45 19-45l138-138q-148-137-349-137-134 0-250 65t-186 179q-11 17-53 117-8 23-30 23h-199q-13 0-22.5-9.5t-9.5-22.5v-7q65-268 270-434.5t480-166.5q146 0 284 55.5t245 156.5l130-129q19-19 45-19t45 19 19 45z","fill":"#fff"}})])]):_e(),_v(" "),(!showSpinner)?_c('i',{attrs:{"aria-hidden":"true"}},[_c('svg',{staticClass:"refresh-icon",attrs:{"viewBox":"0 0 1792 1792","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{attrs:{"d":"M1639 1056q0 5-1 7-64 268-268 434.5t-478 166.5q-146 0-282.5-55t-243.5-157l-129 129q-19 19-45 19t-45-19-19-45v-448q0-26 19-45t45-19h448q26 0 45 19t19 45-19 45l-137 137q71 66 161 102t187 36q134 0 250-65t186-179q11-17 53-117 8-23 30-23h192q13 0 22.5 9.5t9.5 22.5zm25-800v448q0 26-19 45t-45 19h-448q-26 0-45-19t-19-45 19-45l138-138q-148-137-349-137-134 0-250 65t-186 179q-11 17-53 117-8 23-30 23h-199q-13 0-22.5-9.5t-9.5-22.5v-7q65-268 270-434.5t480-166.5q146 0 284 55.5t245 156.5l130-129q19-19 45-19t45 19 19 45z","fill":"#fff"}})])]):_e()])]},proxy:true}])}),_v(" "),(buildingFeed)?_c('center',[_c('h3',[_v("\n                "+_s(translate("NEWSFEED.BUILDING"))+"\n                ")]),_v(" "),_c('h3',[_v("\n                "+_s(translate("NEWSFEED.MINUTE"))+"\n            ")])]):_c('main',{staticClass:"newsfeed__container"},[(showSpinner)?_c('Spinner'):_e(),_v(" "),_c('div',{staticStyle:{"flex-grow":"1"},on:{"click":function($event){return closeMenus($event)}}},[(showAppInstallation)?_c('AppInstall',{attrs:{"appInstallSuccessFunc":appInstallSuccess,"appPropsFile":appInstallPropsFile,"installFolder":appInstallFolder},on:{"hide-app-installation":closeAppInstallation}}):_e(),_v(" "),(showSocialPostForm)?_c('SocialPost',{attrs:{"closeSocialPostForm":closeSocialPostForm,"socialFeed":socialFeed,"showMessage":showMessage,"socialPostAction":socialPostAction,"currentSocialPostEntry":currentSocialPostEntry,"top":socialPostTop}}):_e(),_v(" "),(showEmbeddedGallery)?_c('Gallery',{attrs:{"files":filesToViewInGallery,"hideGalleryTitle":true,"context":context},on:{"hide-gallery":function($event){showEmbeddedGallery = false}}}):_e(),_v(" "),(showProfileViewForm)?_c('ViewProfile',{attrs:{"profile":profile},on:{"hide-profile-view":function($event){showProfileViewForm = false}}}):_e(),_v(" "),(showConfirm)?_c('Confirm',{attrs:{"confirm_message":confirm_message,"confirm_body":confirm_body,"consumer_cancel_func":confirm_consumer_cancel_func,"consumer_func":confirm_consumer_func},on:{"hide-confirm":function($event){showConfirm = false}}}):_e(),_v(" "),(showAppSandbox)?_c('AppSandbox',{attrs:{"sandboxAppName":sandboxAppName,"sandboxAppChatId":sandboxAppChatId,"currentFile":currentFile,"currentPath":currentPath,"currentProps":appSandboxProps,"htmlAnchor":htmlAnchor},on:{"hide-app-sandbox":closeAppSandbox}}):_e(),_v(" "),(showAppMenu)?_c('ul',{staticClass:"dropdown-menu",staticStyle:{"cursor":"pointer","display":"block","min-width":"100px","padding":"10px"},style:({top:menutop, left:menuleft}),attrs:{"id":"appMenu"}},_l((availableApps),function(app){return _c('li',{staticStyle:{"padding-bottom":"5px","color":"black"},attrs:{"id":"open-in-app"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,"enter",13,$event.key,"Enter"))return null;return appOpen($event, app.name, app.path, app.file)},"click":function($event){return appOpen($event, app.name, app.path, app.file)}}},[_v(_s(app.contextMenuText))])}),0):_e(),_v(" "),_c('div',{attrs:{"id":"scroll-area"}},[(data.length==0)?_c('center',[_c('h3',[_v("\n                            "+_s(translate("NEWSFEED.BUILT"))+"\n                        ")]),_v(" "),_c('h3',[_v("\n                            "+_s(translate("NEWSFEED.DESC"))+"\n                        ")])]):_e(),_v(" "),(showEditMenu)?_c('ul',{staticClass:"dropdown-menu",staticStyle:{"cursor":"pointer","display":"block","min-width":"100px"},style:({top:menutop, left:menuleft}),attrs:{"id":"editMenu"}},[_c('li',{staticStyle:{"padding-bottom":"5px","color":"black"}},[_c('a',{on:{"click":function($event){return editPost($event, currentRow)}}},[_v(_s(translate("DRIVE.EDIT")))])]),_v(" "),_c('li',{staticStyle:{"padding-bottom":"5px","color":"black"}},[_c('a',{on:{"click":function($event){return deletePost(currentRow)}}},[_v(_s(translate("DRIVE.DELETE")))])])]):_e(),_v(" "),(showFriendMenu)?_c('ul',{staticClass:"dropdown-menu",staticStyle:{"cursor":"pointer","display":"block","min-width":"100px"},style:({top:menutop, left:menuleft}),attrs:{"id":"friendMenu"}},[_c('li',{staticStyle:{"padding-bottom":"5px","color":"black"}},[_c('a',{on:{"click":function($event){return sendFriendRequest(currentRow)}}},[_v(_s(translate("NEWSFEED.FRIEND")))])])]):_e(),_v(" "),_c('div',{staticClass:"table table-responsive table-striped table-hover",staticStyle:{"border":"none"},attrs:{"id":"feed"}},_l((blocks),function(entry){return _c('div',[(entry[0].isLastEntry)?_c('div',[_c('center',[_c('span',[_v(_s(translate("NEWSFEED.END")))])])],1):_e(),_v(" "),(!entry[0].isLastEntry && displaySharingItem(entry))?_c('div',{staticStyle:{"padding":"2em"}},[(entry[0].sharer != context.username && canLoadProfile(entry[0].sharer))?_c('a',{staticStyle:{"cursor":"pointer"},on:{"click":function($event){return displayProfile(entry[0].sharer)}}},[(entry[0].sharerThumbnail.length > 0)?_c('span',[_c('img',{staticClass:"profile-thumbnail",attrs:{"src":entry[0].sharerThumbnail}})]):_e(),_v(" "),(entry[0].sharerThumbnail.length == 0)?_c('span',{staticClass:"drive-user",staticStyle:{"margin-right":"10px","margin-top":"-10px","padding":"4px"}},[_c('AppIcon',{staticClass:"cover",attrs:{"icon":"user--48"}})],1):_e(),_v(" "),_c('span',[_v("\n                                        "+_s(entry[0].sharer)+"\n                                    ")])]):_e(),_v(" "),(entry[0].sharer == context.username)?_c('a',{staticStyle:{"cursor":"pointer","margin-right":"10px"},on:{"click":function($event){return displayProfile(entry[0].sharer)}}},[(entry[0].sharerThumbnail.length > 0)?_c('span',[_c('img',{staticClass:"profile-thumbnail",attrs:{"src":entry[0].sharerThumbnail}})]):_e(),_v(" "),(entry[0].sharerThumbnail.length == 0)?_c('span',{staticClass:"drive-user",staticStyle:{"margin-top":"-10px","padding":"4px"}},[_c('AppIcon',{staticClass:"cover",attrs:{"icon":"user--48"}})],1):_e()]):_e(),_v(" "),(entry[0].sharer != context.username && !canLoadProfile(entry[0].sharer))?_c('span',[_v(_s(entry[0].sharer))]):_e(),_v(" "),_c('span',[_v(_s(entry[0].info))]),_v(" "),(entry[0].displayFilename)?_c('a',{staticStyle:{"cursor":"pointer"},on:{"click":function($event){return viewFolder(entry[0])}}},[_c('span',{attrs:{"title":entry[0].link}},[_v(_s(entry[0].name))])]):_e(),_v(" "),_c('div',[(!entry[0].isLastEntry)?_c('div',[(!entry[0].isPost && !entry[0].isMedia)?_c('div',[_c('span',{staticClass:"grid_icon_wrapper fa"},[(!entry[0].hasThumbnail && !entry[0].isChat)?_c('a',[_c('AppIcon',{staticClass:"card__icon",staticStyle:{"height":"100px"},attrs:{"icon":getFileIconFromFileAndType(entry[0].file, entry[0].fileType)},nativeOn:{"click":function($event){$event.stopPropagation();return view($event, entry[0])}}})],1):_e(),_v(" "),(entry[0].hasThumbnail && !entry[0].isChat)?_c('img',{staticStyle:{"cursor":"pointer"},attrs:{"src":entry[0].thumbnail},on:{"click":function($event){return view($event, entry[0])}}}):_e(),_v(" "),(entry[0].isChat && entry[0].isNewChat)?_c('button',{staticClass:"btn btn-success",staticStyle:{"font-weight":"bold"},on:{"click":function($event){return joinConversation(entry[0])}}},[_v(_s(translate("NEWSFEED.JOIN")))]):_e(),_v(" "),(entry[0].isChat && !entry[0].isNewChat)?_c('button',{staticClass:"btn btn-success",staticStyle:{"font-weight":"bold"},on:{"click":function($event){return openConversation(entry[0])}}},[_v(_s(translate("DRIVE.VIEW")))]):_e()])]):_e()]):_e(),_v(" "),(!entry[0].isDirectory && entry[0].sharer != context.username && !entry[0].isMedia && canComment(entry[0]))?_c('span',[_c('i',{staticStyle:{"cursor":"pointer"},on:{"click":function($event){return addComment($event, entry[0])}}},[_c('svg',{staticClass:"inline-svg",attrs:{"viewBox":"0 0 1792 1792","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{attrs:{"d":"M896 384q-204 0-381.5 69.5t-282 187.5-104.5 255q0 112 71.5 213.5t201.5 175.5l87 50-27 96q-24 91-70 172 152-63 275-171l43-38 57 6q69 8 130 8 204 0 381.5-69.5t282-187.5 104.5-255-104.5-255-282-187.5-381.5-69.5zm896 512q0 174-120 321.5t-326 233-450 85.5q-70 0-145-8-198 175-460 242-49 14-114 22h-5q-15 0-27-10.5t-16-27.5v-1q-3-4-.5-12t2-10 4.5-9.5l6-9 7-8.5 8-9q7-8 31-34.5t34.5-38 31-39.5 32.5-51 27-59 26-76q-157-89-247.5-220t-90.5-281q0-174 120-321.5t326-233 450-85.5 450 85.5 326 233 120 321.5z"}})]),_v("\n                                            Comment\n                                        ")])]):_e()])]):_e(),_v(" "),(!entry[0].isLastEntry)?_c('div',{class:[displaySharingItem(entry) ? 'entry-no-bg' : 'entry']},[_c('div',{staticClass:"table-responsive table-striped table-hover",staticStyle:{"font-size":"1.0em","padding-left":"0","margin-bottom":"0","border":"none"}},_l((entry),function(row,rowIndex){return _c('div',[(displayMedia(entry, rowIndex, row))?_c('div',[_c('div',{style:({ marginLeft: indent(row) })},_l((row.mediaList),function(media,mediaIndex){return _c('div',{staticClass:"grid_icon_wrapper fa"},[(!media.hasThumbnail)?_c('a',[_c('AppIcon',{staticClass:"card__icon",staticStyle:{"height":"100px"},attrs:{"icon":getFileIconFromFileAndType(media.file, media.fileType)},on:{"click":function($event){return viewMediaList(row.mediaList, mediaIndex)}}})],1):_e(),_v(" "),(media.hasThumbnail)?_c('img',{staticStyle:{"cursor":"pointer"},attrs:{"src":media.thumbnail},on:{"click":function($event){return viewMediaList(row.mediaList, mediaIndex)}}}):_e()])}),0),_v(" "),_c('div',{style:({ marginLeft: indent(entry[rowIndex-1]) })},[_c('div',{staticStyle:{"margin-top":"10px","margin-bottom":"10px"}},[(displayCommentButtonForPrevious(entry, rowIndex))?_c('span',[_c('i',{staticStyle:{"cursor":"pointer"},on:{"click":function($event){addComment($event, entry[rowIndex-1]) && rowIndex == 1}}},[_c('svg',{staticClass:"inline-svg",attrs:{"viewBox":"0 0 1792 1792","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{attrs:{"d":"M1792 1120q0 166-127 451-3 7-10.5 24t-13.5 30-13 22q-12 17-28 17-15 0-23.5-10t-8.5-25q0-9 2.5-26.5t2.5-23.5q5-68 5-123 0-101-17.5-181t-48.5-138.5-80-101-105.5-69.5-133-42.5-154-21.5-175.5-6h-224v256q0 26-19 45t-45 19-45-19l-512-512q-19-19-19-45t19-45l512-512q19-19 45-19t45 19 19 45v256h224q713 0 875 403 53 134 53 333z"}})]),_v("\n                                                            Reply\n                                                        ")])]):_e()])])]):_e(),_v(" "),(displayPost(entry, rowIndex, row))?_c('div',[_c('div',{style:({ marginLeft: indent(row) })},[_c('div',{staticStyle:{"display":"flex","font-size":"1em","color":"#7d7d7d","margin-right":"10px"}},[(row.sharer != context.username && canLoadProfile(row.sharer))?_c('a',{staticStyle:{"cursor":"pointer"},on:{"click":function($event){return displayProfile(row.sharer)}}},[(row.sharerThumbnail.length > 0)?_c('span',[_c('img',{staticClass:"profile-thumbnail",attrs:{"src":row.sharerThumbnail}})]):_e(),_v(" "),(row.sharerThumbnail.length == 0)?_c('span',{staticClass:"picon-profile profile-thumbnail"},[_c('div',{staticClass:"drive-user",staticStyle:{"margin-top":"-10px","padding":"4px"}},[_c('AppIcon',{staticClass:"cover",attrs:{"icon":"user--48"}})],1)]):_e()]):_e(),_v(" "),(row.sharer == context.username)?_c('a',{staticStyle:{"cursor":"pointer","margin-right":"10px"},on:{"click":function($event){return displayProfile(row.sharer)}}},[(row.sharerThumbnail.length > 0)?_c('span',[_c('img',{staticClass:"profile-thumbnail",attrs:{"src":row.sharerThumbnail}})]):_e(),_v(" "),(row.sharerThumbnail.length == 0)?_c('span',{staticClass:"picon-profile profile-thumbnail"},[_c('div',{staticClass:"drive-user",staticStyle:{"margin-top":"-10px","padding":"4px"}},[_c('AppIcon',{staticClass:"cover",attrs:{"icon":"user--48"}})],1)]):_e()]):_e(),_v(" "),(row.sharer != context.username && canLoadProfile(row.sharer))?_c('span',{staticClass:"sharer-name"},[_v("\n                                                        "+_s(row.sharer)+"\n                                                    ")]):_e(),_v(" "),(row.sharer!= context.username && !canLoadProfile(row.sharer))?_c('a',{staticStyle:{"cursor":"pointer"},on:{"click":function($event){return displayFriendMenu($event, row)}}},[_c('span',[_v(_s(row.sharer)+" ")])]):_e(),_v("\n                                                    "+_s(row.info)+"\n                                                    "),_c('span',{staticStyle:{"flex-grow":"1"}},[_v("  "+_s(row.status))]),_v(" "),(row.sharer == context.username)?_c('span',{staticClass:"fa fa-ellipsis-h",on:{"click":function($event){return displayEditMenu($event, row)}}}):_e()]),_v(" "),(row.name.length > 0)?_c('div',{staticClass:"post-content"},[_v(_s(row.name))]):_e()]),_v(" "),(!(rowIndex + 1 < entry.length && entry[rowIndex+1].isMedia))?_c('div',{style:({ marginLeft: indent(row) })},[_c('div',{staticStyle:{"margin-top":"10px","margin-bottom":"10px"}},[(displayCommentButton(entry, row))?_c('span',[_c('i',{staticStyle:{"cursor":"pointer"},on:{"click":function($event){return addComment($event, row)}}},[_c('svg',{staticClass:"inline-svg",attrs:{"viewBox":"0 0 1792 1792","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{attrs:{"d":"M1792 1120q0 166-127 451-3 7-10.5 24t-13.5 30-13 22q-12 17-28 17-15 0-23.5-10t-8.5-25q0-9 2.5-26.5t2.5-23.5q5-68 5-123 0-101-17.5-181t-48.5-138.5-80-101-105.5-69.5-133-42.5-154-21.5-175.5-6h-224v256q0 26-19 45t-45 19-45-19l-512-512q-19-19-19-45t19-45l512-512q19-19 45-19t45 19 19 45v256h224q713 0 875 403 53 134 53 333z"}})]),_v("\n                                                            Reply\n                                                        ")])]):_e()])]):_e()]):_e()])}),0)]):_e()])}),0),_v(" "),_c('center',[(hasLoadedInitialResults && !noMoreResults)?_c('button',{staticClass:"btn btn-success",attrs:{"disabled":requestingMoreResults},on:{"click":function($event){return requestMoreResults()}}},[_v(_s(translate("NEWSFEED.MORE")))]):_e()])],1)],1)],1)],1)}},    components: {
		SocialPost,
		Gallery,
		ViewProfile,
		AppButton,
		AppSandbox,
		AppHeader,
		AppIcon,
		AppInstall,
		Confirm,
		Spinner,
    },
    data: function() {
        return {
            buildingFeed: true,
            showSpinner: false,
            data: [],
            pageEndIndex : 0,
            pageSize: 40,
            requestingMoreResults: false,
            noMoreResults: false,
            showProfileViewForm:false,
            profile: {
                firstName: "",
                lastName: "",
                biography: "",
                primaryPhone: "",
                primaryEmail: "",
                profileImage: "",
                status: "",
                webRoot: ""
            },
            showSocialPostForm: false,
            socialPostTop: "100px",
            socialPostAction: '',
            currentSocialPostEntry: null,
            showEmbeddedGallery: false,
            filesToViewInGallery: [],
            showEditMenu: false,
            showFriendMenu: false,
            showAppMenu: false,
            menutop:"",
            menuleft:"",
            currentRow: {},
            showConfirm: false,
            confirm_message: "",
            confirm_body: "",
            confirm_consumer_cancel_func: () => {},
            confirm_consumer_func: () => {},
            hasLoadedInitialResults: false,
            socialFeed: null,
            seenPosts: new Map(),
            knownChats: [],
            messenger: null,
            sharedItemsProcessedMap: new Map(),
            entryTree: null,
            showAppSandbox: false,
            sandboxAppName: '',
            sandboxAppChatId: '',
            showAppInstallation: false,
            appInstallPropsFile: null,
            appInstallFolder: '',
            appInstalledEntry: null,
            availableApps: [],
            sharerThumbnailCache: new Map(),
            currentFile: null,
            currentPath: null,
            currentProps: null,
            htmlAnchor: "",
        }
    },
    props: [],
	mixins:[routerMixins, mixins, i18n],
  	created: function() {
        let that = this;
        this.entryTree = new this.Tree(this);
        this.context.getSocialFeed().thenApply(function(socialFeed) {
                that.socialFeed = socialFeed;
                that.messenger = new peergos.shared.messaging.Messenger(that.context);
                that.showSpinner = true;
                that.pageEndIndex = that.socialFeed.getLastSeenIndex();
                let startIndex = Math.max(0, that.pageEndIndex - that.pageSize);
                that.retrieveResults(startIndex, that.pageEndIndex, []).thenApply(function(additionalItems) {
                    that.buildingFeed = false;
                        that.pageEndIndex = startIndex;
                        let items = that.filterSharedItems(additionalItems.reverse());
                        let numberOfEntries = items.length;
                        if (numberOfEntries == 0 && startIndex > 0) {
                            that.requestMoreResults();
                        } else {
                            that.buildTimeline(items).thenApply(function(timelineEntries) {
                                that.data = timelineEntries;
                                that.showSpinner = false;
                                that.hasLoadedInitialResults = true;
                                Vue.nextTick(function() {
                                    that.refresh();
                                });
                            });
                        }
                }).exceptionally(function(throwable) {
                    that.showMessage(throwable.getMessage());
                    that.showSpinner = false;
                });
            }).exceptionally(function(throwable) {
                that.showMessage(throwable.getMessage());
                that.showSpinner = false;
            });
    },
	mounted(){
	},
    methods: {
        displayCommentButton: function(entry, row) {
            if (this.displaySharingItem(entry)) {
                return row.sharer != this.context.username && this.canComment(row);
            } else {
                return this.canComment(row);
            }
        },
        displayPost: function(entry, rowIndex, row) {
            if (this.displaySharingItem(entry)) {
                return rowIndex >= 1 && row.isPost;
            } else {
                return row.isPost;
            }
        },
        displayCommentButtonForPrevious: function(entry, rowIndex) {
            if (this.displaySharingItem(entry)) {
                return entry[rowIndex-1].sharer != this.context.username && this.canComment(entry[rowIndex-1]);
            } else {
                return this.canComment(entry[rowIndex-1]);
            }
        },
        displayMedia: function(entry, rowIndex, row) {
            if (this.displaySharingItem(entry)) {
                return rowIndex >= 2 && row.isMedia;
            } else {
                return row.isMedia;
            }
        },
        displaySharingItem: function(entry) {
            return !entry[0].isPost && !entry[0].isMedia;
        },
        updateSocialFeedInstance: function(updated) {
            // TODO put this in vuex store
            this.socialFeed = updated;
        },
        getFileIconFromFileAndType: function(file, type) {
            // TODO unify this with the one on DriveGridCard
            if (type == 'dir') 	return 'folder--72';
	    if (type == 'image') 	return 'file-image--72';
	    if (type == 'text') 	return 'file-text--72';
	    if (type == 'audio') 	return 'file-audio--72';
	    if (type == 'video') 	return 'file-video--72';
	    if (type == 'pdf') 	return 'file-pdf--72';
	    if (type == 'zip') 	return 'file-zip--72';
	    if (type == 'todo') 	return 'tasks--72';
	    if (type == 'calendar') 	return 'calendar--72';
	    if (type == 'contact file') 	return 'file-card--72';
	    if (type == 'powerpoint presentation' || type == 'presentation') 	return 'file-powerpoint--72';
	    if (type == 'word document' || type == 'text document') 	return 'file-word--72';
	    if (type == 'excel spreadsheet' || type == 'spreadsheet') 	return 'file-excel--72';
            return 'file-generic--72';
        },
        displayProfile: function(username){
            this.showSpinner = true;
            let that = this;
            let context = this.context;
            peergos.shared.user.ProfilePaths.getProfile(username, context).thenApply(profile => {
                var base64Image = "";
                if (profile.profilePhoto.isPresent()) {
                    var str = "";
                    let data = profile.profilePhoto.get();
                    for (let i = 0; i < data.length; i++) {
                        str = str + String.fromCharCode(data[i] & 0xff);
                    }
                    if (data.byteLength > 0) {
                        base64Image = "data:image/png;base64," + window.btoa(str);
                    }
                }
                that.profile = {
                    firstName: profile.firstName.isPresent() ? profile.firstName.get() : "",
                    lastName: profile.lastName.isPresent() ? profile.lastName.get() : "",
                    biography: profile.bio.isPresent() ? profile.bio.get() : "",
                    primaryPhone: profile.phone.isPresent() ? profile.phone.get() : "",
                    primaryEmail: profile.email.isPresent() ? profile.email.get() : "",
                    profileImage: base64Image,
                    status: profile.status.isPresent() ? profile.status.get() : "",
                    webRoot: profile.webRoot.isPresent() ? profile.webRoot.get() : ""
                };
                that.showSpinner = false;
                that.showProfileViewForm = true;
            }).exceptionally(function(throwable) {
                console.log('unable to get profile for user:' + username);
            });
        },
        addNewPost: function() {
            this.showSocialPostForm = false;
            let that = this;
            Vue.nextTick(function() {
                that.currentSocialPostEntry = null;
                that.socialPostAction = 'add';
                that.socialPostTop = '100px';
                that.showSocialPostForm = true;
            });
        },
        closeSocialPostForm: function(action, newPath, newSocialPost, newFile, originalPath) {
            if (newPath != null && !newPath.startsWith("/")) {
                newPath = "/" + newPath;
            }
            this.showSocialPostForm = false;
            this.currentSocialPostEntry = null;
            let that = this;
            if (action == 'edit') {
                var index = this.data.findIndex(v => v.link === originalPath);
                if (index != -1) { //could have been deleted
		            // assume only 1 text item in body for now
                    this.data[index].name = newSocialPost.body.toArray([])[0].inlineText();
                    this.data[index].socialPost = newSocialPost;
                    this.data[index].status = newSocialPost.previousVersions.toArray([]).length > 0 ? "[" + this.translate("NEWSFEED.EDITED") + "]" : "";
                }
            } else {
                if (newSocialPost != null) {
                    this.refresh();
                }
            }
        },
        getPosition: function(e) {
			var posx = 0;
			var posy = 0;

			if (!e) var e = window.event;
			// var body = document.getElementById("modal-body");
			// var feed = document.getElementById("feed")

			if (e.clientX || e.clientY) {
				// posx = e.clientX - feed.offsetLeft + document.body.scrollLeft + document.documentElement.scrollLeft;
				// posy = e.clientY - body.offsetTop + document.body.scrollTop + document.documentElement.scrollTop;
				posx = e.clientX - document.body.scrollLeft + document.documentElement.scrollLeft;
				posy = e.clientY - document.body.scrollTop + document.documentElement.scrollTop;

			}
			return {
				x: posx,
				y: posy
			}
		},
	closeMenus: function(e) {
	    this.showEditMenu = false;
        this.showFriendMenu = false;
        this.showAppMenu = false;
        if (e != null) {
	        e.stopPropagation();
	    }
	},
	displayEditMenu: function(event, row) {
            this.currentRow = row;
	    var pos = this.getPosition(event);
	    Vue.nextTick(function() {
		var top = pos.y + 10;
		var left = pos.x - 100;
		this.menutop = top + 'px';
		this.menuleft = left + 'px';
	    }.bind(this));
            this.showEditMenu = true;
	    event.stopPropagation();
        },
        editPost: function(event, entry) {
            this.showSocialPostForm = false;
            this.socialPostAction = 'edit';
            let parentPostAuthor = "";
            if (entry.socialPost.parent.ref != null) {
                parentPostAuthor = this.extractOwnerFromPath(entry.socialPost.parent.ref.path);
            }
            this.currentSocialPostEntry = {path: entry.link, socialPost: entry.socialPost, sharer: parentPostAuthor};
            let that = this;
            let pos = this.getPosition(event);
            Vue.nextTick(function() {
                that.socialPostTop = Math.max(100, (pos.y - 250)) + 'px';
                that.showSocialPostForm = true;
            });
            event.stopPropagation();
            this.showEditMenu = false;
        },
        sendFriendRequest: function(entry) {
            let ctx = this.context;
            ctx.getSocialState().thenCompose(function(social) {
                var pendingOutgoingUsernames = [];
		social.pendingOutgoing.toArray([]).map(u => pendingOutgoingUsernames.push(u));
                if (pendingOutgoingUsernames.indexOf(entry.owner) < 0)
                    ctx.sendInitialFollowRequest(entry.owner);
            });
	    this.showFriendMenu = false;
        },
        displayFriendMenu: function(event, row) {
            this.currentRow = row;
	    var pos = this.getPosition(event);
	    Vue.nextTick(function() {
		var top = pos.y + 10;
		var left = pos.x - 100;
		this.menutop = top + 'px';
		this.menuleft = left + 'px';
	    }.bind(this));
            this.showFriendMenu = true;
	    event.stopPropagation();
        },
        removeItemFromDisplay: function(entry) {
            let index = this.data.findIndex(v => v.link === entry.link);
            if (index > -1) {
                this.data.splice(index, 1);
                if (entry.socialPost != null) {
                    let references = entry.socialPost.references().toArray([]);
                    if (references.length > 0) {
                        for(var j = 0 ; j < references.length; j++) {
                            let refPath = references[j].path;
                            let refIndex = this.data.findIndex(v => v.link === refPath);
                            if (refIndex > -1) {
                                this.data.splice(refIndex, 1);
                            }
                        }
                    }
                }
                var i = index;
                for(;i < this.data.length;) {
                    if (this.data[i].indent != null && this.data[i].indent > entry.indent){
                        this.data.splice(index, 1);
                    } else {
                        break;
                    }
                }
            }
        },
        confirmDeletePost: function(message, deletePostFunction, cancelFunction) {
            this.confirm_message= message;
            this.confirm_body='';
            this.confirm_consumer_cancel_func = cancelFunction;
            this.confirm_consumer_func = deletePostFunction;
            this.showConfirm = true;
        },
        deletePost: function(entry) {
            let that = this;
            this.showSocialPostForm = false;
            Vue.nextTick(function() {
                var msg = that.translate("NEWSFEED.DELETE.CONFIRM");
                if (entry.indent == 1) {
                    msg = msg + that.translate("NEWSFEED.POST") + "?";
                } else {
                    msg = msg + that.translate("NEWSFEED.COMMENT") + "?";
                }
                that.confirmDeletePost(msg,
                    () => { that.showConfirm = false;
                        that.deleteSocialPost(entry);
                    },
                    () => { that.showConfirm = false;}
                );
            });
        },
        reduceDeletingAllMediaReferences: function(entry, references, index, future) {
            let that = this;
            if (index == references.length) {
                future.complete(true);
            } else {
                let ref = references[index];
                this.context.getByPath(ref.path).thenApply(function(optFile){
                    let mediaFile = optFile.ref;
                    if (mediaFile != null) {
                        var parentPath = entry.link.substring(0, entry.link.lastIndexOf('/'));
                        parentPath = parentPath.substring(0, parentPath.lastIndexOf('/'));
                        that.deleteFile(parentPath + "/media/" + mediaFile.props.name, mediaFile).thenApply(function(res){
                            that.reduceDeletingAllMediaReferences(entry, references, index + 1, future);
                        }).exceptionally(function(throwable) {
                            that.showMessage(that.translate("NEWSFEED.ERROR.MEDIA.DELETE"));
                            that.reduceDeletingAllMediaReferences(entry, references, index + 1, future);
                        });
                    } else {
                        that.reduceDeletingAllMediaReferences(entry, references, index + 1, future);
                    }
                });
            }
        },
        deleteMediaReferences: function(entry, references) {
            let future = peergos.shared.util.Futures.incomplete();
            this.reduceDeletingAllMediaReferences(entry, references, 0, future);
            return future;
        },
        deleteSocialPost: function(entry) {
            let that = this;
            that.showSpinner = true;
            let socialPost = entry.socialPost;
	    let refs = socialPost.references().toArray([])
            if (refs.length > 0) {
                this.deleteMediaReferences(entry, refs).thenApply(function(result){
                    that.deleteFile(entry.link, entry.file).thenApply(function(res2){
                        if (res2) {
                            that.showSpinner = false;
                            that.removeItemFromDisplay(entry);
                        }
                    });
                });
            } else {
                this.deleteFile(entry.link, entry.file).thenApply(function(res){
                    if (res) {
                        that.showSpinner = false;
                        that.removeItemFromDisplay(entry);
                    }
                });
            }
	    this.showEditMenu = false;
        },
        deleteFile: function(filePathStr, file) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let filePath = this.convertToPath(filePathStr);
            let parentPath = filePathStr.substring(0, filePathStr.lastIndexOf('/'));
            this.context.getByPath(parentPath).thenApply(function(optParent){
                that.context.getByPath(filePathStr).thenApply(function(updatedFileOpt){
                    if (updatedFileOpt.ref != null) {
                        updatedFileOpt.ref.remove(optParent.get(), filePath, that.context).thenApply(function(b){
                            future.complete(true);
                        }).exceptionally(function(throwable) {
                            that.showMessage(that.translate("NEWSFEED.ERROR.POST.DELETE"));
                            that.showSpinner = false;
                            future.complete(false);
                        });
                    } else {
                        future.complete(true);
                    }
                });
            }).exceptionally(function(throwable) {
                that.showMessage(that.translate("NEWSFEED.ERROR.POST.DELETE"));
                that.showSpinner = false;
                future.complete(false);
            });
            return future;
        },
        getGroupUid: function(groupName) {
            return this.groups.groupsNameToUid[groupName];
        },
        addComment: function(event, entry) {
            this.showSocialPostForm = false;
            this.socialPostAction = 'reply';
            var cap = entry.cap;
            if (cap == null) {
                cap = entry.file.readOnlyPointer();
            }
            this.currentSocialPostEntry = {path: entry.link, socialPost: entry.socialPost, file: entry.file, cap: cap, sharer: entry.sharer};
            let that = this;
            let pos = this.getPosition(event);
            Vue.nextTick(function() {
                that.socialPostTop = Math.max(100, (pos.y - 250)) + 'px';
                that.showSocialPostForm = true;
            });
            event.stopPropagation();
        },
        getFileSize: function(props) {
                var low = props.sizeLow();
                if (low < 0) low = low + Math.pow(2, 32);
                return low + (props.sizeHigh() * Math.pow(2, 32));
        },
        loadPost: function(file, future) {
            let that = this;
            const props = file.getFileProperties();
            file.getInputStream(this.context.network, this.context.crypto, props.sizeHigh(), props.sizeLow(), function(read){})
                .thenApply(function(reader) {
                    var size = that.getFileSize(props);
                    var data = convertToByteArray(new Int8Array(size));
                    reader.readIntoArray(data, 0, data.length).thenApply(function(read){
                        let socialPost = peergos.shared.util.Serialize.parse(data, c => peergos.shared.social.SocialPost.fromCbor(c));
                        future.complete({socialPost: socialPost, file: file});
                    });
            }).exceptionally(function(throwable) {
                that.showMessage(that.translate("NEWSFEED.ERROR.POST.LOAD"));
                future.complete(null);
            });
        },
        loadFile: function(path, file) {
            let future = peergos.shared.util.Futures.incomplete();
            let isPost = path.includes("/.posts/");
            if (isPost) {
                this.loadPost(file, future);
            } else {
                future.complete(null);
            }
            return future;
        },
        loadFiles: function(incomingPairs) {
            let future = peergos.shared.util.Futures.incomplete();
            let that = this;
            let accumulator = [];
            let pairs = incomingPairs.filter(pair => !that.alreadySeen(pair.left.path));
            if (pairs.length == 0) {
                future.complete(accumulator);
            } else {
                pairs.forEach(currentPair => {
                    that.loadFile(currentPair.left.path, currentPair.right).thenApply(result => {
                        that.addToSeen(currentPair.left.path);
                        let socialPost = result ? result.socialPost : null;
                        let fullPath = that.toPathKey(currentPair.left.path);
                        let isChat = fullPath.includes("/.messaging/") ? true : false;
                        accumulator = accumulator.concat({isChat: isChat, entry: currentPair.left, path: fullPath, socialPost: socialPost, file: currentPair.right});
                        if (accumulator.length == pairs.length) {
                            future.complete(accumulator);
                        }
                    });
                });
            }
            return future;
        },
        comparePaths: function(path1, path2) {
            let left = this.toPathKey(path1);
            let right = this.toPathKey(path2);
            return left == right;
        },
        convertToPath: function(dir) {
            let pathKey = this.toPathKey(dir);
            return peergos.client.PathUtils.directoryToPath(pathKey.split('/'));
        },
        toPathKey: function(path) {
            return path.startsWith("/") ? path.substring(1) : path;
        },
        addToSeen: function(path) {
            let fullPath = this.toPathKey(path);
            this.seenPosts.set(fullPath, "");
        },
        alreadySeen: function(path) {
            let fullPath = this.toPathKey(path);
            return this.seenPosts.get(fullPath) != null;
        },
        extractOwnerFromPath: function(path) {
            let fullPath = this.toPathKey(path);
            return fullPath.substring(0, fullPath.indexOf("/"));
        },
        loadAllMediaPosts: function(refs, future) {
            let that = this;
            let mediaMap = new Map();
            if (refs.length == 0) {
                future.complete(mediaMap);
            } else {
                var loadedCount = 0;
                refs.forEach(ref => {
                    let owner = that.extractOwnerFromPath(ref.path);
                    that.context.network.getFile(ref.cap, owner).thenApply(optFile => {
                        loadedCount++;
                        let mediaFile = optFile.ref;
                        if (mediaFile != null) {
                            let fullPath = that.toPathKey(ref.path);
                            mediaMap.set(fullPath, {cap: ref.cap, path: fullPath, socialPost: null, file: mediaFile});
                        }
                        if (loadedCount == refs.length) {
                            future.complete(mediaMap);
                        }
                    });
                });
            }
        },
        loadMediaPosts: function(sharedPosts) {
            let future = peergos.shared.util.Futures.incomplete();
            let refs = [];
            let that = this;
            for(var i = 0; i < sharedPosts.length; i++) {
                let post = sharedPosts[i].socialPost;
                if (post != null) {
                    if (post.parent.ref != null) {
                        let isPost = post.parent.ref.path.includes("/.posts/");
                        if (!isPost) {
                            let path = post.parent.ref.path;
                            let index = sharedPosts.findIndex(v => that.comparePaths(v.path, path));
                            if (index == -1) {
                                //eg we shared a file that another has commented on
                                if (refs.findIndex(v => that.comparePaths(v.path, path)) == -1) {
                                    refs.push(post.parent.ref);
                                }
                            }
                        }
                    }
                    let references = post.references().toArray([]);
                    if (references.length > 0) {
                        references.forEach(mediaRef => {
                            if (refs.findIndex(v => that.comparePaths(v.path, mediaRef.path)) == -1) {
                                refs.push(mediaRef);
                            }
                        });
                    }
                }
            }
            this.loadAllMediaPosts(refs, future);
            return future;
        },
        loadAllCommentPosts: function(refs, future) {
            let that = this;
            let accumulator = [];
            if (refs.length == 0) {
                future.complete(accumulator);
            } else {
                var loadCount = 0;
                refs.forEach(ref => {
                    that.loadFileFromRef(ref).thenApply(result => {
                        if (result == null) {
                            loadCount++;
                            if (loadCount == refs.length) {
                                future.complete(accumulator);
                            }
                        } else {
                            let fullPath = that.toPathKey(ref.path);
                            that.addToSeen(fullPath);
                            let socialPost = result.socialPost;
                            accumulator = accumulator.concat({cap: ref.cap, path: fullPath, socialPost: socialPost, file: result.file});
                            let references = socialPost.comments.toArray([]);
                            let future2 = peergos.shared.util.Futures.incomplete();
                            that.loadAllCommentPosts(references.slice(), future2);
                            future2.thenApply(result => {
                                loadCount++;
                                if (loadCount == refs.length) {
                                    future.complete(accumulator.concat(result));
                                }
                            });
                        }
                    });
                });
            }
        },
        loadFileFromRef: function(ref) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            let owner = that.extractOwnerFromPath(ref.path);
            that.context.network.getFile(ref.cap, owner).thenApply(optFile => {
                let file = optFile.ref;
                if (file != null) {
                    that.loadFile(ref.path, file).thenApply(result => {
                        future.complete(result);
                    });
                } else {
                    future.complete(null);
                }
            });
            return future;
        },
        loadCommentPosts: function(sharedPosts) {
            let future = peergos.shared.util.Futures.incomplete();
            let refs = [];
            let that = this;
            for(var i = 0; i < sharedPosts.length; i++) {
                let post = sharedPosts[i].socialPost;
                if (post != null) {
                    let references = post.comments.toArray([]);
                    references.forEach(ref => {
                        let fullRefPath = that.toPathKey(ref.path);
                        if (refs.findIndex(v => that.comparePaths(v.path, fullRefPath)) == -1
                            && sharedPosts.findIndex(v => that.comparePaths(v.path, fullRefPath)) == -1) {
                            refs.push(ref);
                        }
                    });
                }
            }
            this.loadAllCommentPosts(refs, future);
            return future;
        },
        loadAllParentPosts: function(incomingSharedPosts, future) {
            let that = this;
            let accumulator = [];
            let sharedPosts = incomingSharedPosts.filter(s => s.socialPost.parent.ref != null
                && s.socialPost.parent.ref.path.includes("/.posts/")
                && !that.alreadySeen(s.socialPost.parent.ref.path));

            if (sharedPosts.length == 0) {
                future.complete(accumulator);
            } else {
                var loadCount = 0;
                sharedPosts.forEach(sharedPost => {
                    let post = sharedPost.socialPost;
                    that.loadFileFromRef(post.parent.ref).thenApply(result => {
                        if (result == null) {
                            loadCount++;
                            if (loadCount == sharedPosts.length) {
                                future.complete(accumulator);
                            }
                        } else {
                            let fullPath = that.toPathKey(post.parent.ref.path);
                            that.addToSeen(fullPath);
                            let sharedPost = {cap: post.parent.ref.cap, path: fullPath, socialPost: result.socialPost, file: result.file};
                            accumulator = accumulator.concat(sharedPost);

                            let future2 = peergos.shared.util.Futures.incomplete();
                            that.loadAllParentPosts([sharedPost], future2);
                            future2.thenApply(result => {
                                loadCount++;
                                if (loadCount == sharedPosts.length) {
                                    future.complete(accumulator.concat(result));
                                }
                            });
                        }
                    });
                });
            }
        },
        loadParentPosts: function(sharedPosts) {
            let future = peergos.shared.util.Futures.incomplete();
            let filteredSharedPosts = [];
            for(var i = 0; i < sharedPosts.length; i++) {
                let post = sharedPosts[i].socialPost;
                if (post != null) {
                    filteredSharedPosts.push(sharedPosts[i]);
                }
            }
            this.loadAllParentPosts(filteredSharedPosts, future);
            return future;
        },
        processItems: function(items) {
            var that = this;
            var future = peergos.shared.util.Futures.incomplete();
            if (items.length == 0 ) {
                future.complete(0);
            } else {
                that.buildTimeline(items).thenApply(function(allTimelineEntries) {
                    that.data = allTimelineEntries;
                    future.complete(allTimelineEntries.length);
                });
            }
            return future;
        },
        filterSharedItems: function(items) {
            let filteredSharedItems = [];
            for(var i=0; i < items.length; i++) {
                let currentSharedItem = items[i];
                if (!currentSharedItem.path.startsWith("/" + currentSharedItem.owner + "/.profile/")
                    && !currentSharedItem.path.startsWith("/" + currentSharedItem.owner + "/shared/.")) { //groups
                    filteredSharedItems.push(currentSharedItem);
                }
            }
            return filteredSharedItems;
        },
        requestMoreResults: function() {
            let that = this;
            if (that.noMoreResults || that.requestingMoreResults) {
                return;
            }
            that.showSpinner = true;
            that.requestingMoreResults = true;
            this.requestMoreResultsRecursive(0);
        },
        requestMoreResultsRecursive: function(itemCount) {
            let that = this;
            let startIndex = Math.max(0, this.pageEndIndex - this.pageSize);
            this.retrieveResults(startIndex, this.pageEndIndex).thenApply(function(additionalItems) {
               that.pageEndIndex = startIndex;
               let items = that.filterSharedItems(additionalItems.reverse());
               if (items.length == 0 && that.pageEndIndex == 0) {
                    that.showSpinner = false;
                    that.requestingMoreResults = false;
                    that.noMoreResults = true;
                    that.data = that.data.concat({isLastEntry: true});
               } else {
                    that.processItems(items).thenApply(function(addedCount) {
                        let itemsAddedSoFar = addedCount + itemCount;
                        if (itemsAddedSoFar < that.pageSize) {
                            that.requestMoreResultsRecursive(itemsAddedSoFar);
                        } else {
                            that.requestingMoreResults = false;
                            that.showSpinner = false;
                        }
                    });
               }
            }).exceptionally(function(throwable) {
                that.showMessage(throwable.getMessage());
                that.showSpinner = false;
                that.requestingMoreResults = false;
            });
        },
        showMessage: function(title, body) {
            let bodyText = body == null ? '' : body;
            this.$toast.error(title + bodyText, {timeout:false, id: 'error'})
        },
        joinConversation: function (entry) {
            let that = this;
            that.showSpinner = true;
            this.messenger.cloneLocallyAndJoin(entry.file).thenApply(res => {
                that.showSpinner = false;
                entry.isNewChat = false;
                that.openConversation(entry);
            }).exceptionally(function(throwable) {
                that.showSpinner = false;
                if (throwable.getMessage().startsWith('Child already exists with name:')) {
                    that.openConversation(entry);
                } else {
                    console.log("Unable to join Chat. Error:" + throwable.getMessage());
                    that.showMessage(that.translate("NEWSFEED.ERROR.CHAT.JOIN"));
                }
            });
        },
        openConversation: function (entry) {
            let that = this;
            let app = this.sandboxedApps.appsInstalled.slice().filter(app => app.name == entry.appName);
            if (app.length == 0) {
                var pathStr = '/peergos/recommended-apps/' + entry.appName + '/';
                this.context.getByPath(pathStr + 'peergos-app.json').thenApply(propsFileOpt => {
                    if (propsFileOpt.ref != null) {
                        that.appInstallPropsFile = propsFileOpt.ref;
                        that.appInstallFolder = pathStr;
                        that.showAppInstallation = true;
                        that.appInstalledEntry = entry;
                    } else {
                        that.showMessage(that.translate("NEWSFEED.APP.ABSENT").replace("$NAME", entry.appName));
                    }
                });
            } else {
                this.launchApp(entry);
            }
        },
        appInstallSuccess(appName) {
            this.launchApp(this.appInstalledEntry);
        },
        launchApp(entry) {
            if (entry.isChat) {
                this.showAppSandbox = true;
                this.sandboxAppName = entry.appName;
                this.sandboxAppChatId = this.extractChatUUIDFromPath(entry.path);
            } else {
                this.openFileOrDir(entry.appName, entry.path, {filename: entry.file.getName()})
            }
        },
        closeAppInstallation() {
            this.showAppInstallation = false;
        },
        closeAppSandbox() {
            this.showAppSandbox = false;
            this.sandboxAppName = '';
            this.sandboxAppChatId = '';
            this.currentFile = null;
            this.currentPath = null;
            this.currentProps = null;
            if(this.htmlAnchor.length > 0) {
                let file = this.appInstalledEntry.file;
                let filename = file.getName();
                let writable = file.isWritable();
                let userApps = this.availableAppsForFile(file);
                var args = {filename:filename}
                if (userApps.length == 1) {
                    this.openFileOrDir(userApps[0].name, this.appInstalledEntry.path, args, writable);
                } else {
                    let inbuiltApps = this.getInbuiltApps(file)
                    this.openFileOrDir(inbuiltApps[0].name, this.appInstalledEntry.path, args, writable);
                }
                this.appInstalledEntry = null;
            }
            this.htmlAnchor = "";
        },
        viewFolder: function (entry) {
            this.openFileOrDir("Drive", entry.path, {filename:""})
        },
        view: function (event, entry) {
            let type = entry.file.props.getType();
            if(type == "image" || type == "audio" || type == "video") {
                this.openInGallery(entry);
            } else {
                this.viewAction(event, entry.path, entry.file);
            }
        },
        viewAction: function(event, path, file) {
            if (file.isDirectory()) {
                let pathParts = ('/' + path).split("/");
                if (pathParts.length == 6 && pathParts[0] == '' &&
                    pathParts[2] == '.apps' &&
                    pathParts[3] == 'calendar' &&
                    pathParts[4] == 'data') {
                    this.openFileOrDir("Calendar", path, {filename:""});
                } else {
                    this.openFileOrDir("Drive", path, {filename:""});
                }
            } else {
                let userApps = this.availableAppsForFile(file);
                let inbuiltApps = this.getInbuiltApps(file);
                if (userApps.length == 0) {
                    if (inbuiltApps.length == 1) {
                        if (inbuiltApps[0].name == 'hex' || inbuiltApps[0].name == 'editor') {
                            let recommendedApp = this.getRecommendedViewer(file);
                            if (recommendedApp != null) {
                                this.navigateToRecommendedApps(recommendedApp, inbuiltApps[0].name, file, path);
                            }else {
                                this.openFileOrDir(inbuiltApps[0].name, path, {filename:file.isDirectory() ? "" : file.getName()})
                            }
                        } else {
                            this.openFileOrDir(inbuiltApps[0].name, path, {filename:file.isDirectory() ? "" : file.getName()})
                        }
                    } else {
                        this.showAppContextMenu(event, inbuiltApps, userApps, path, file);
                    }
                } else {
                    this.showAppContextMenu(event, inbuiltApps, userApps, path, file);
                }
            }
        },
        navigateToRecommendedApps: function(appName, fallbackAppName, file, filePath) {
            let that = this;
            let path = "/peergos/recommended-apps/";
            this.context.getByPath(path + "index.html").thenApply(function(fileOpt){
                if (fileOpt.ref != null && fileOpt.get().getFileProperties().sizeLow() > 20) {
                    that.$toast(that.translate("DRIVE.INSTALL_DEDICATED_APP"), {timeout:false});
                    that.sandboxAppName = '$$app-gallery$$';
                    that.currentFile = fileOpt.get();
                    that.currentPath = path;
                    that.htmlAnchor = appName;
                    that.appInstalledEntry = {file: file, path: filePath};
                    that.showAppSandbox = true;
                } else {
                    that.openFileOrDir(fallbackAppName, filePath, {filename:file.isDirectory() ? "" : file.getName()})
                }
            });
        },
        showAppContextMenu(event, inbuiltApps, userApps, path, file) {
            let appOptions = [];
            for(var i = 0; i < userApps.length; i++) {
                let app = userApps[i];
                let option = {'name': app.name, 'path': path, 'file': file, 'contextMenuText': app.contextMenuText};
                appOptions.push(option);
            }
            for(var i = 0; i < inbuiltApps.length; i++) {
                let app = inbuiltApps[i];
                let option = {'name': app.name, 'path': path, 'file': file, 'contextMenuText': app.contextMenuText};
                appOptions.push(option);
            }
            this.availableApps = appOptions;
            var pos = this.getPosition(event);
            Vue.nextTick(function() {
                var top = pos.y;
                var left = pos.x;
                this.menutop = top + 'px';
                this.menuleft = left + 'px';
            }.bind(this));
            this.showAppMenu = true;
            event.stopPropagation();
        },
        appOpen(event, appName, path, file) {
            this.closeMenus(event);
            this.availableApps = [];
            this.openFileOrDir(appName, path, {filename:file.isDirectory() ? "" : file.getName()})
        },
        viewMediaList: function (mediaList, mediaIndex) {
            let files = [];
            for(var i = mediaIndex; i < mediaList.length; i++) {
                files.push(mediaList[i].file);
            }
            for(var j = 0; j < mediaIndex; j++) {
                files.push(mediaList[j].file);
            }
            this.filesToViewInGallery = files;
            this.showEmbeddedGallery = true;
        },
        openInGallery: function (entry) {
            this.filesToViewInGallery = [entry.file];
            this.showEmbeddedGallery = true;
        },
        canComment: function(item) {
            if (item.isDirectory) {
                return false;
            }
            let isFriend = this.friendnames.indexOf(item.sharer) > -1;
            let isFollower = this.followernames.indexOf(item.sharer) > -1;
            return item.sharer == this.context.username || isFriend || isFollower;
        },
        canLoadProfile: function(sharer) {
            let isFriend = this.friendnames.indexOf(sharer) > -1;
            let isFollowing = this.followingnames.indexOf(sharer) > -1;
            return isFriend || isFollowing;
        },
        indent: function(item) {
            let calcMargin = (item.indent * 20) + 10;
            return "" +  calcMargin + "px";
        },
        fromUTCtoLocal: function(dateTime) {
            let date = new Date(dateTime.toString() + "+00:00");//adding UTC TZ in ISO_OFFSET_DATE_TIME ie 2021-12-03T10:25:30+00:00
            let formatted = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate()
                + ' ' + (date.getHours() < 10 ? '0' : '') + date.getHours()
                + ':' + (date.getMinutes() < 10 ? '0' : '') + date.getMinutes()
                + ':' + (date.getSeconds() < 10 ? '0' : '') + date.getSeconds();
            return formatted;
        },
        isNewChat: function(filePath, isChat) {
            let pathParts = filePath.split('/').filter(n => n.length > 0);
            if (pathParts[1] != ".messaging") {
                return false;
            }
            let uuid = pathParts[2];
            if(this.knownChats.findIndex(v => v.chatUuid == uuid) == -1) {
                return true;
            } else {
                return false;
            }
        },
        isSharedCalendar: function(path) {
            //TODO move this into the universal get icon for file method
            let pathParts = path.split("/");
            return pathParts.length == 5 &&
                pathParts[1] == '.apps' &&
                pathParts[2] == 'calendar' &&
                pathParts[3] == 'data';
        },

        createTimelineEntry: function(filePath, entry, socialPost, file, isChat) {
            var displayFilename = true;
            let info = " shared";
            let isMedia = entry== null && socialPost == null  && filePath.includes("/.posts/") && filePath.includes("/media/") ? true : false;

            let sharer = entry != null ? entry.sharer : this.extractOwnerFromPath(filePath);
            if (sharer == this.context.username) {
                info = this.translate("NEWSFEED.YOU") + info;
            }
            let owner = entry != null ? entry.owner : this.extractOwnerFromPath(filePath);
            if (socialPost == null && filePath.includes("/.posts/")) {
                displayFilename = false;
            }
            if(entry != null && entry.cap.isWritable() ) {
                info = info + " " + this.translate("NEWSFEED.WRITEACCESS");
            }
            let props = file.props;
            var isSharedCalendar = false;
            if (this.isSharedCalendar(filePath)) {
                isSharedCalendar = true;
            }
            var appName = "";
            if (props.isDirectory) {
                if (isSharedCalendar) {
                    info = info + " " + this.translate("NEWSFEED.ACAL"); // - " + props.name;
                    displayFilename = false;
                } else if(isChat) {
                    appName = this.extractChatApp(filePath);
                    let app = this.sandboxedApps.appsInstalled.slice().filter(app => app.name == appName);
                    if (app.length > 0) {
                        info = this.translate("NEWSFEED.INVITED.APP") + " " + app[0].displayName;
                    } else {
                        info = this.translate("NEWSFEED.INVITED.APP") + " " + appName;
                    }
                    displayFilename = false;
                } else {
                    info = info + " " + this.translate("NEWSFEED.FOLDER");
                }
            } else if (props.getType() == 'calendar') {
                info = info + " " + this.translate("NEWSFEED.ANEVENT");
                displayFilename = false;
            } else {
                info = info + " " + this.translate("NEWSFEED.FILE");
            }
            if (entry !=null && entry.sharer != entry.owner) {
                info = info + " " + this.translate("NEWSFEED.OWNED") + " " + entry.owner;
            }
            if (!isChat) {
                info = info + ": ";
            }
            let path = props.isDirectory ? filePath : filePath.substring(0, filePath.lastIndexOf(props.name) -1);
            let name = props.name.length > 30 ? props.name.substring(0,27) + '...' : props.name;
            let fileType = isSharedCalendar ? 'calendar' : props.getType();
            let isPost = socialPost != null;
            var status = "";
            if (isPost) {
                let isReply = socialPost.parent.ref != null;
                var identity = socialPost.author == this.context.username ? this.translate("NEWSFEED.YOU")+" " : "";

                info = isReply ? "commented at " : "posted at ";
                info = identity + info;
                info = info + this.fromUTCtoLocal(socialPost.postTime);
                name = socialPost.body.toArray([])[0].inlineText();
                if (socialPost.previousVersions.toArray([]).length > 0) {
                    status = "["+this.translate("NEWSFEED.EDITED")+"]";
                }
            }
            let isNewChat = this.isNewChat(filePath, isChat);
            let item = {
                sharer: sharer,
                sharerThumbnail: "",
                owner: owner,
                info: info,
                link: filePath,
                cap: entry == null ? null : entry.cap,
                path: path,
                name: name,
                fullName: props.name,
                hasThumbnail: props.thumbnail.ref != null,
                thumbnail: props.thumbnail.ref == null ? null : file.getBase64Thumbnail(),
                isDirectory: props.isDirectory,
                file: file,
                isLastEntry: false,
                displayFilename: displayFilename,
                fileType: fileType,
                isPost: isPost,
                socialPost: socialPost,
                indent: 1,
                status: status,
                isMedia: isMedia,
                isChat: isChat,
                isNewChat: isNewChat,
                appName: appName
            };
            return item;
        },
        getFileIconClass: function(file) {
            return this.getFileIcon(file);
        },
	    retrieveUnSeen: function(startIndex, requestSize, results) {
	        var future = peergos.shared.util.Futures.incomplete();
	        this.retrieveUnSeenWithFuture(startIndex, requestSize, results, future);
	        return future;
        },
	    retrieveUnSeenWithFuture: function(startIndex, requestSize, results, future) {
	        if (! this.socialFeed.hasUnseen() ) {
	            future.complete(results);
	        } else {
                var ctx = this.context;
                let that = this;
                this.socialFeed.getShared(startIndex, startIndex + requestSize, ctx.crypto, ctx.network).thenApply(function(items) {
                    let allEntries = items.toArray();
                    let newIndex = startIndex + allEntries.length;
                    that.socialFeed.setLastSeenIndex(newIndex).thenApply(function(res) {
                        that.retrieveUnSeenWithFuture(newIndex, requestSize, results.concat(allEntries), future);
                    }).exceptionally(function(throwable) {
                        that.showMessage(throwable.getMessage());
                        that.showSpinner = false;
                    });
                }).exceptionally(function(throwable) {
                    that.showMessage(throwable.getMessage());
                    that.showSpinner = false;
                });
            }
            return future;
        },
	    retrieveResults: function(startIndex, endIndex) {
	        var future = peergos.shared.util.Futures.incomplete();
	        if(startIndex < 0 || startIndex >= endIndex) {
    	        future.complete([]);
	            return future;
	        }
            var ctx = this.context;
            this.socialFeed.getShared(startIndex, endIndex, ctx.crypto, ctx.network).thenApply(function(items) {
                future.complete(items.toArray());
            }).exceptionally(function(throwable) {
                that.showMessage(throwable.getMessage());
                that.showSpinner = false;
            });
            return future;
	    },
        populateTimeline: function(entries) {
            let allTimelineEntries = [];
            let usernameMap = new Map();
            let that = this;
            for(var j = 0; j < entries.length; j++) {
                let indentedRow = entries[j];
                let item = indentedRow.item;
                let timelineEntry = this.createTimelineEntry(item.path, item.entry, item.socialPost, item.file, item.isChat);
                let sharer = usernameMap.get(timelineEntry.sharer);
                if (sharer == null) {
                    if (timelineEntry.sharer == this.context.username || this.friendnames.indexOf(timelineEntry.sharer) > -1) {
                        usernameMap.set(timelineEntry.sharer, [timelineEntry]);
                    }
                } else {
                    sharer.push(timelineEntry);
                }
                timelineEntry.indent = indentedRow.indent;
                allTimelineEntries.push(timelineEntry);
                let mediaList = indentedRow.mediaList;
                if (mediaList.length > 0) {
                    for(var k=0; k < mediaList.length; k++) {
                        let mediaTimelineEntry = this.createTimelineEntry(mediaList[k].path, null, null, mediaList[k].file, null);
                        mediaTimelineEntry.indent = indentedRow.indent;
                        allTimelineEntries.push(mediaTimelineEntry);
                    }
                }
            }
            usernameMap.forEach(function(timelineEntries, username) {
                let existingThumbnail = that.sharerThumbnailCache.get(username);
                if (existingThumbnail != null) {
                    timelineEntries.forEach( entry => {
                        entry.sharerThumbnail = existingThumbnail;
                    });
                }
                peergos.shared.user.ProfilePaths.getProfile(username, that.context).thenApply(profile => {
                    var base64Image = "";
                    if (profile.profilePhoto.isPresent()) {
                        var str = "";
                        let data = profile.profilePhoto.get();
                        for (let i = 0; i < data.length; i++) {
                            str = str + String.fromCharCode(data[i] & 0xff);
                        }
                        if (data.byteLength > 0) {
                            timelineEntries.forEach( entry => {
                                entry.sharerThumbnail = "data:image/png;base64," + window.btoa(str);
                                that.sharerThumbnailCache.set(username, entry.sharerThumbnail);
                            });
                        }
                    }
                }).exceptionally(function(throwable) {
                    console.log('unable to get profile for user:' + username);
                });
            });
            return allTimelineEntries;
        },
        Tree: function(thisRef) {
            this.methodCtx = thisRef;
            this.root = new this.methodCtx.TreeNode(null, "", null, null);
            this.nodeLookupMap = new Map();
            this.lookup = function(path) {
                return path == null ? this.root : this.nodeLookupMap.get(path);
            }
            this.addChild = function(parentPath, item, mediaList) {
                let parent = this.lookup(parentPath);
                if (parent == null) {
                    return null;
                }
                let path = this.methodCtx.toPathKey(item.path);
                let node = new this.methodCtx.TreeNode(parent, path, item, mediaList);
                this.nodeLookupMap.set(path, node);
                parent.addChild(node);
                return node;
            }
            this.collect = function() {
                let accumulator = [];
                this.recurseCollect(this.root, 0, accumulator);
                return accumulator.slice(1);
            }
            this.recurseCollect = function(node, depth, accumulator) {
                accumulator.push(new this.methodCtx.IndentedRow(depth, node.item, node.mediaList));
                let that = this;
                let sortedChildren = node.children.sort(function (a, b) {
                    let aVal = a.item.socialPost != null ? that.methodCtx.extractSocialPostCreationTimestamp(a.item.socialPost)
                        : a.item.file.getFileProperties().created;
                    let bVal = b.item.socialPost != null ? that.methodCtx.extractSocialPostCreationTimestamp(b.item.socialPost)
                        : b.item.file.getFileProperties().created;
                    if (depth == 0) {
                        return bVal.compareTo(aVal);
                    } else {
                        return aVal.compareTo(bVal);
                    }
                });
                node.children = sortedChildren;
                node.children.forEach(each => {
                    that.recurseCollect(each, depth + 1, accumulator);
                });
            }
        },
        TreeNode: function(parent, path, item, mediaList) {
            this.path = path;
            this.item = item;
            this.mediaList = mediaList;
            this.children = [];
            this.parent = parent;
            this.addChild = function(node) {
                this.children.push(node);
            }
        },
        IndentedRow: function(indent, item, mediaList) {
            this.indent = indent;
            this.item = item;
            this.mediaList = mediaList;
        },
        isStartOfThread: function(item) {
            if (item.socialPost.parent.ref != null) {
                return false;
            }
            return true;
        },
        organiseEntries: function(sharedItems, mediaMap) {
            let that = this;
            let sharedItemsMap = new Map();
            sharedItems.forEach(item => {
                if (item.socialPost == null) {
                    sharedItemsMap.set(that.toPathKey(item.path), item);
                }
            });
            sharedItems.reverse().forEach(item => {
                if (that.sharedItemsProcessedMap.get(that.toPathKey(item.path)) != null) {
                    //already processed, skip to next
                } else if (item.socialPost == null) {
                    that.entryTree.addChild(null, item, []);
                } else {
                    let wasCommentOnSharedItem = false;
                    if (item.socialPost.parent.ref != null && !item.socialPost.parent.ref.path.includes("/.posts/")) {
                        let path = that.toPathKey(item.socialPost.parent.ref.path);
                        if (that.entryTree.lookup(path) == null) {
                            var sharedItemParent = mediaMap.get(path);
                            if (sharedItemParent == null) {
                                sharedItemParent = sharedItemsMap.get(path);
                                if (sharedItemParent != null) {
                                    that.sharedItemsProcessedMap.set(that.toPathKey(sharedItemParent.path), sharedItemParent);
                                    that.entryTree.addChild(null, sharedItemParent, []);
                                }
                            } else {
                                that.entryTree.addChild(null, sharedItemParent, []);
                                that.sharedItemsProcessedMap.set(that.toPathKey(sharedItemParent.path), sharedItemParent);
                            }
                        }
                        wasCommentOnSharedItem = true;
                    }

                    let references = item.socialPost.references().toArray([]);
                    var mediaList = [];
                    if (references.length > 0){
                        for(var j = 0; j < references.length; j++) {
                            let media = mediaMap.get(that.toPathKey(references[j].path));
                            if (media != null) {
                                mediaList.push(media);
                            }
                        }
                    }
                    if (!wasCommentOnSharedItem && that.isStartOfThread(item)) {
                        that.entryTree.addChild(null, item, mediaList);
                    } else {
                        let parentPath = that.toPathKey(item.socialPost.parent.ref.path);
                        that.entryTree.addChild(parentPath, item, mediaList);
                    }
                }
            });
            return that.entryTree.collect();
        },
        extractSocialPostCreationTimestamp(socialPost) {
            if (socialPost.previousVersions.isEmpty()) {
                return socialPost.postTime;
            } else {
                let previousVersions = socialPost.previousVersions.toArray();
                return previousVersions[0].postTime;
            }
        },
        mergeAndSortPosts: function(sharedItems, parentPosts, commentPosts) {
            let combinedPosts = commentPosts.concat(parentPosts).concat(sharedItems);
            let that = this;
            let sortedList = combinedPosts.sort(function (a, b) {
                let aVal = a.socialPost != null ? that.extractSocialPostCreationTimestamp(a.socialPost)
                    : a.file.getFileProperties().created;
                let bVal = b.socialPost != null ? that.extractSocialPostCreationTimestamp(b.socialPost)
                    : b.file.getFileProperties().created;
                return bVal.compareTo(aVal);
            });
            let dedupedItems = [];
            sortedList.forEach(item => {
                let foundIndex = dedupedItems.findIndex(v => v.path === item.path);
                if (foundIndex == -1) {
                    dedupedItems.push(item);
                }
            });
            return dedupedItems;
        },
        extractChatUUIDFromPath: function(path) {
            let pathParts = path.split('/').filter(n => n.length > 0);
            return pathParts[pathParts.length -2];
        },
        extractChatOwner: function(chatUuid) {
            let withoutPrefix = chatUuid.substring(chatUuid.indexOf("$") +1);
            return withoutPrefix.substring(0,withoutPrefix.indexOf("$"));
        },
        extractChatApp: function(filePath) {
            let chatUuid = this.extractChatUUIDFromPath(filePath);
            if (chatUuid.startsWith("chat-")) {
                let prefix = chatUuid.substring(chatUuid.indexOf("-") + 1, chatUuid.indexOf("$"));
                return prefix;
            } else {
                return "chat";
            }
        },
        filterOutOwnChats: function(allPairs) {
            let remainingSharedItems = [];
            for(var i = 0; i < allPairs.length; i++) {
                let currentSharedItem = allPairs[i];
                if (currentSharedItem.left.path.includes("/.messaging/")) {
                    let uuid = this.extractChatUUIDFromPath(currentSharedItem.left.path);
                    let chatOwner = this.extractChatOwner(uuid);
                    if(chatOwner != this.context.username) {
                        remainingSharedItems.push(currentSharedItem);
                    }
                } else {
                    remainingSharedItems.push(currentSharedItem);
                }
            }
            return remainingSharedItems;
        },
        buildTimeline: function(items) {
            let that = this;
            let future = peergos.shared.util.Futures.incomplete();
            this.context.getFiles(peergos.client.JsUtil.asList(items)).thenApply(function(pairs) {
                let allPairs = pairs.toArray();
                that.messenger.listChats().thenApply(function(chats) {
                    that.knownChats = chats.toArray();
                    let remainingPairs = that.filterOutOwnChats(allPairs);
                    that.loadFiles(remainingPairs).thenApply(function(sharedItems) {
                        that.loadParentPosts(sharedItems).thenApply(function(parentPosts) {
                            that.loadCommentPosts(sharedItems.concat(parentPosts)).thenApply(function(commentPosts) {
                                let sortedList = that.mergeAndSortPosts(sharedItems, parentPosts, commentPosts);
                                that.loadMediaPosts(sortedList).thenApply(function(mediaPosts) {
                                    let entries = that.organiseEntries(sortedList, mediaPosts);
                                    let allTimelineEntries = that.populateTimeline(entries);
                                    future.complete(allTimelineEntries);
                                });
                            });
                        });
                    });
                });
            });
            return future;
        },
        refresh: function() {
            this.showSpinner = true;
            this.seenPosts = new Map();
            let lastSeenIndex = this.socialFeed.getLastSeenIndex();
            this.entryTree = new this.Tree(this);
            this.sharedItemsProcessedMap = new Map();
            let that = this;
            this.socialFeed.update().thenApply(function(updated) {
                that.socialFeed = updated;
                that.updateSocialFeedInstance(updated);
                that.retrieveUnSeen(lastSeenIndex, 100, []).thenApply(function(unseenItems) {
                    that.retrieveResults(that.pageEndIndex, lastSeenIndex, []).thenApply(function(additionalItems) {
                        let items = that.filterSharedItems(unseenItems.reverse().concat(additionalItems.reverse()));
                        var numberOfEntries = items.length;
                        if (numberOfEntries == 0) {
                            that.data = [];
                            that.showSpinner = false;
                        } else {
                            that.buildTimeline(items).thenApply(function(timelineEntries) {
                                that.data = timelineEntries;
                                that.showSpinner = false;
                            });
                        }
                    }).exceptionally(function(throwable) {
                        that.showMessage(throwable.getMessage());
                        that.showSpinner = false;
                    });
                }).exceptionally(function(throwable) {
                    that.showMessage(throwable.getMessage());
                    that.showSpinner = false;
                });
            });
        },
    },
    computed: {
		...Vuex.mapState([
		    'quotaBytes',
		    'usageBytes',
            'context',
            'socialData',
            'path',
            "sandboxedApps",
		]),
		...Vuex.mapGetters([
			'isSecretLink',
			'getPath'
		]),
        friendnames: function() {
            return this.socialData.friends;
        },
    	followingnames: function() {
            return this.socialData.following;
        },
    	followernames: function() {
            return this.socialData.followers;
        },
        groups: function() {
	    return {groupsNameToUid: this.socialData.groupsNameToUid, groupsUidToName: this.socialData.groupsUidToName};
	},
    	blocks: function() {
            if (this.data == null || this.data.length == 0) {
                return [];
            }
            let blocks = [];
            let thread = [];
            let associatedMedia = {isMedia: true, mediaList: []};
            this.data.forEach(timelineEntry => {
                let isSharedItem = !timelineEntry.isMedia && timelineEntry.entry == null && timelineEntry.socialPost == null;
                if (isSharedItem || timelineEntry.isLastEntry) {
                    if (thread.length > 0) {
                        thread.push(associatedMedia);
                        blocks.push(thread);
                        thread = [];
                    }
                    thread.push(timelineEntry);
                    associatedMedia = {isMedia: true, mediaList: []};
                } else {
                    if (!timelineEntry.isMedia) {
                        if (timelineEntry.indent == 1 && thread.length > 0) {
                            thread.push(associatedMedia);
                            blocks.push(thread);
                            thread = [];
                            associatedMedia = {isMedia: true, mediaList: []};
                            thread.push(timelineEntry);
                        } else {
                            if (associatedMedia.mediaList.length > 0) {
                                thread.push(associatedMedia);
                                associatedMedia = {isMedia: true, mediaList: []};
                            }
                            thread.push(timelineEntry);
                        }
                    } else {
                        associatedMedia.indent = timelineEntry.indent;
                        associatedMedia.mediaList.push(timelineEntry);
                    }
                }
            });
            if (thread.length > 0) {
                thread.push(associatedMedia);
                blocks.push(thread);
            }
            return blocks;
        }
    }
}

},{ "../components/AppButton.vue": 2, "../components/AppHeader.vue": 91, "../components/AppIcon.vue": 1, "../components/confirm/Confirm.vue": 15, "../components/drive/DriveGallery.vue": 60, "../components/profile/ViewProfile.vue": 64, "../components/sandbox/AppInstall.vue": 54, "../components/sandbox/AppSandbox.vue": 66, "../components/social/SocialPost.vue": 92, "../components/spinner/Spinner.vue": 16, "../i18n/index.js": 11, "../mixins/mixins.js": 52, "../mixins/router/index.js": 3}], 95:[function(require,module,exports){
const AppButton = require("../components/AppButton.vue");
const AppHeader = require("../components/AppHeader.vue");
const ViewProfile = require("../components/profile/ViewProfile.vue");
const Fingerprint = require("../components/fingerprint/Fingerprint.vue");
const FormAutocomplete = require("../components/form/FormAutocomplete.vue");
const Spinner = require("../components/spinner/Spinner.vue");
const i18n = require("../i18n/index.js");

const routerMixins = require("../mixins/router/index.js");

module.exports = {
render: function() {with(this){return _c('article',{staticClass:"app-view social-view"},[_c('AppHeader',{scopedSlots:_u([{key:"primary",fn:function(){return [_c('h1',[_v(_s(translate("SOCIAL.TITLE")))])]},proxy:true}])}),_v(" "),_c('main',[(showFingerprint)?_c('Fingerprint',{attrs:{"fingerprint":fingerprint,"friendname":friendname,"initialIsVerified":initialIsVerified,"context":context},on:{"hide-fingerprint":hideFingerprint}}):_e(),_v(" "),(showSpinner)?_c('Spinner'):_e(),_v(" "),(showProfileViewForm)?_c('ViewProfile',{attrs:{"profile":profile},on:{"hide-profile-view":function($event){showProfileViewForm = false}}}):_e(),_v(" "),_c('section',[_c('h3',[_v(_s(translate("SOCIAL.SEND.TITLE"))+":")]),_v(" "),_c('FormAutocomplete',{attrs:{"is-multiple":"","options":usernames,"maxitems":5,"placeholder":translate('SOCIAL.SELECT')},model:{value:(targetUsernames),callback:function ($$v) {targetUsernames=$$v},expression:"targetUsernames"}}),_v(" "),_c('AppButton',{attrs:{"accent":"","aria-label":"Send"},nativeOn:{"click":function($event){return sendInitialFollowRequest()}}},[_v("\n\t\t\t\t"+_s(translate("SOCIAL.SEND"))+"\n\t\t\t")])],1),_v(" "),_c('div',[_c('h3',[_v(_s(translate("SOCIAL.INCOMING")))]),_v(" "),_c('div',{staticClass:"flex-container table",staticStyle:{"flex-flow":"column"},attrs:{"id":"follow-request-table-id"}},_l((socialData.pending),function(req){return _c('div',{staticClass:"flex-container vspace-5",staticStyle:{"justify-content":"space-between","max-width":"700px"}},[_c('div',{staticStyle:{"font-size":"1.5em"},attrs:{"id":"follow-request-id"}},[_v(_s(req.getEntry().ownerName))]),_v(" "),_c('div',{staticClass:"flex-container",staticStyle:{"justify-content":"space-evenly"}},[_c('div',{staticClass:"hspace-5"},[_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return acceptAndReciprocate(req)}}},[_v(_s(translate("SOCIAL.ALLOWANDFOLLOW")))])]),_v(" "),_c('div',{staticClass:"hspace-5"},[_c('button',{staticClass:"btn btn-info",on:{"click":function($event){return accept(req)}}},[_v(_s(translate("SOCIAL.ALLOW")))])]),_v(" "),_c('div',{staticClass:"hspace-5"},[_c('button',{staticClass:"btn btn-danger",on:{"click":function($event){return reject(req)}}},[_v(_s(translate("SOCIAL.DENY")))])])])])}),0)]),_v(" "),_c('div',[_c('h3',[_v(_s(translate("SOCIAL.FRIENDS")))]),_v(" "),_c('div',{staticClass:"table flex-container",staticStyle:{"flex-flow":"column"},attrs:{"id":"friend-table-id"}},_l((socialData.friends),function(username){return _c('div',{staticClass:"flex-container vspace-5",staticStyle:{"justify-content":"space-between","max-width":"700px"}},[_c('div',{staticStyle:{"font-size":"1.5em"},attrs:{"id":"friend-id"}},[_c('a',{staticStyle:{"cursor":"pointer"},on:{"click":function($event){return displayProfile(username)}}},[_v(_s(username))]),_v(" "),(isVerified(username))?_c('span',{staticClass:"fas fa-check-circle"},[_c('span',{staticClass:"not-mobile"},[_v(_s(translate("VERIFY.VERIFIED")))])]):_e()]),_v(" "),_c('div',{staticClass:"flex-container",staticStyle:{"justify-content":"space-evenly"}},[_c('div',{staticClass:"hspace-5"},[_c('button',{staticClass:"btn btn-danger",on:{"click":function($event){return unfollow(username)}}},[_v(_s(translate("SOCIAL.UNFOLLOW")))])]),_v(" "),_c('div',{staticClass:"hspace-5"},[_c('button',{staticClass:"btn btn-danger",on:{"click":function($event){return removeFollower(username)}}},[_v(_s(translate("SOCIAL.REMOVE")))])]),_v(" "),_c('div',{staticClass:"hspace-5"},[_c('button',{staticClass:"btn btn-success",on:{"click":function($event){return showFingerPrint(username)}}},[_v(_s(translate("SOCIAL.VERIFICATION")))])])])])}),0)]),_v(" "),_c('div',[_c('h3',[_v(_s(translate("SOCIAL.FOLLOWERS")))]),_v(" "),_c('div',{staticClass:"table flex-container",staticStyle:{"flex-flow":"column"},attrs:{"id":"follower-table-id"}},_l((socialData.followers),function(username){return _c('div',{staticClass:"flex-container vspace-5",staticStyle:{"justify-content":"space-between","max-width":"700px"}},[_c('div',{staticStyle:{"font-size":"1.5em"},attrs:{"id":"follower-id"}},[_v("\n\t\t      "+_s(username)+"\n\t\t    ")]),_v(" "),_c('div',[_c('button',{staticClass:"btn btn-danger",on:{"click":function($event){return removeFollower(username)}}},[_v(_s(translate("SOCIAL.REMOVE")))])])])}),0)]),_v(" "),_c('div',[_c('h3',[_v(_s(translate("SOCIAL.FOLLOWING")))]),_v(" "),_c('div',{staticClass:"table flex-container",staticStyle:{"flex-flow":"column"}},_l((socialData.following),function(user){return _c('tr',{staticClass:"flex-container vspace-5",staticStyle:{"justify-content":"space-between","max-width":"700px"}},[_c('div',{staticStyle:{"font-size":"1.5em"}},[_c('a',{staticStyle:{"cursor":"pointer"},on:{"click":function($event){return displayProfile(user)}}},[_v(_s(user))])]),_v(" "),_c('div',[_c('button',{staticClass:"btn btn-danger",on:{"click":function($event){return unfollow(user)}}},[_v(_s(translate("SOCIAL.UNFOLLOW")))])])])}),0)]),_v(" "),_c('div',[_c('h3',[_v(_s(translate("SOCIAL.BLOCKED")))]),_v(" "),_c('div',{staticClass:"table flex-container",staticStyle:{"flex-flow":"column"}},_l((socialData.blocked),function(user){return _c('tr',{staticClass:"flex-container vspace-5",staticStyle:{"justify-content":"space-between","max-width":"700px"}},[_c('div',{staticStyle:{"font-size":"1.5em"}},[_v("\n                            "+_s(user)+"\n            \t\t    ")]),_v(" "),_c('div',[_c('button',{staticClass:"btn btn-danger",on:{"click":function($event){return unblock(user)}}},[_v(_s(translate("SOCIAL.UNBLOCK")))])])])}),0)])],1)],1)}},	components: {
    	Fingerprint,
	    FormAutocomplete,
		ViewProfile,
		AppButton,
		AppHeader,
		Spinner,
	},
    data() {
        return {
            targetUsername: "",
            targetUsernames: [],
            profile: {
                firstName: "",
                lastName: "",
                biography: "",
                primaryPhone: "",
                primaryEmail: "",
                profileImage: "",
                status: "",
                webRoot: ""
            },
            showSpinner: false,
	    showFingerprint: false,
	    showProfileViewForm: false,
            initialIsVerified: false,
	    fingerprint: null,
	    friendname: null
        }
    },
    props: [],
	mixins:[routerMixins, i18n],

	computed: {
		...Vuex.mapState([
			'context',
			'socialData'
		]),
		...Vuex.mapGetters([
			'isSecretLink',
			'getPath'
		]),
        usernames() {
	    let userList = this.context.network.usernames.toArray([])
	    // remove our username
	    userList.splice(userList.indexOf(this.context.username), 1);
            // remove current friends
	    this.socialData.friends.forEach(function(name){
                userList.splice(userList.indexOf(name), 1);
            });
            return userList;
        }
    },
	created() {
	    let that = this;
        this.showSpinner = true;
        this.updateSocial(() => {
            that.showSpinner = false;
        });
    },
    methods: {
		...Vuex.mapActions([
			'updateSocial'
		]),
        displayProfile: function(username){
            this.showSpinner = true;
            let that = this;
            let context = this.context;
            peergos.shared.user.ProfilePaths.getProfile(username, context).thenApply(profile => {
                var base64Image = "";
                if (profile.profilePhoto.isPresent()) {
                    var str = "";
                    let data = profile.profilePhoto.get();
                    for (let i = 0; i < data.length; i++) {
                        str = str + String.fromCharCode(data[i] & 0xff);
                    }
                    if (data.byteLength > 0) {
                        base64Image = "data:image/png;base64," + window.btoa(str);
                    }
                }
                that.profile = {
                    firstName: profile.firstName.isPresent() ? profile.firstName.get() : "",
                    lastName: profile.lastName.isPresent() ? profile.lastName.get() : "",
                    biography: profile.bio.isPresent() ? profile.bio.get() : "",
                    primaryPhone: profile.phone.isPresent() ? profile.phone.get() : "",
                    primaryEmail: profile.email.isPresent() ? profile.email.get() : "",
                    profileImage: base64Image,
                    status: profile.status.isPresent() ? profile.status.get() : "",
                    webRoot: profile.webRoot.isPresent() ? profile.webRoot.get() : ""
                };
                that.showSpinner = false;
                that.showProfileViewForm = true;
            });
        },
    // resetTypeahead() {
    //     this.targetUsernames = [];
    //     this.targetUsername = "";
    //     $('#friend-name-input').tokenfield('setTokens', []);
    // },

	isVerified(username) {
	    var annotations = this.socialData.annotations[username]
	    if (annotations == null)
		return false;
	    return annotations.isVerified();
	},

	hideFingerprint(isVerified) {
	    this.showFingerprint = false;
	    this.socialData.annotations[this.friendname] = new peergos.shared.user.FriendAnnotation(this.friendname, isVerified, this.fingerprint.left)
	},

	showFingerPrint(friendname) {
	    var that = this;
	    this.context.generateFingerPrint(friendname).thenApply(function(f) {
		that.fingerprint = f;
		that.friendname = friendname;
		that.initialIsVerified = that.isVerified(friendname);
		that.showFingerprint = true;
	    })
	},

	sendInitialFollowRequest() {
	        let that = this;
	        if (this.targetUsernames.length == 0) {
	            let tokenFieldElement = document.getElementById("input-tokenfield");
	            if (tokenFieldElement == null) {
                    return;
	            } else {
                    let singleVal = tokenFieldElement.value.trim();
                    if (singleVal.length > 0 && singleVal != this.context.username) {
                        this.targetUsernames.push(singleVal);
                    } else {
                        return;
                    }
                }
	        }
            this.socialData.pendingOutgoing.forEach(function(name){
                let idx = that.targetUsernames.indexOf(name);
                if (idx > -1) {
                    that.targetUsernames.splice(idx, 1);
                }
            });
	        if (this.targetUsernames.length == 0) {
		        that.$toast(that.translate("SOCIAL.ALREADY.SENT"))
                return;
	        }
	        let alreadyBlockedUsers = [];
            this.socialData.blocked.forEach(function(name){
                let idx = that.targetUsernames.indexOf(name);
                if (idx > -1) {
                    alreadyBlockedUsers.push(name);
                }
            });
            if (alreadyBlockedUsers.length > 0) {
                if (alreadyBlockedUsers.length > 1) {
                    that.$toast(that.translate("SOCIAL.BLOCKED.USERS") + ': ' +
                        alreadyBlockedUsers.join(", ") +
                        '');
                    return;
                } else {
                    that.$toast(that.translate("SOCIAL.USER.BLOCKED").replace("$USER", alreadyBlockedUsers[0]));
                    return;
                }
            }
            that.showSpinner = true;
            that.context.sendInitialFollowRequests(this.targetUsernames)
            .thenApply(function(success) {
                if(success) {
                    // that.resetTypeahead();
                    that.updateSocial(() => {
                        that.$toast(that.translate("SOCIAL.SENT"))
                        that.showSpinner = false;
                        that.targetUsernames = [];
                    });
                } else {
                    that.showSpinner = false;
                    that.$toast(that.translate("SOCIAL.ERROR"))
                                // that.resetTypeahead();
                }
            }).exceptionally(function(throwable) {
                    // if (that.targetUsernames.length == 1) {
                    //     // that.resetTypeahead();
                    // }
                that.showSpinner = false;
                that.$toast.error(`${throwable.getMessage()}`, {timeout:false, id: 'social'})
            });
        },

        acceptAndReciprocate(req) {
            var that = this;
            this.showSpinner = true;
            this.context.sendReplyFollowRequest(req, true, true).thenApply(function(success) {
                that.updateSocial(() => {
                    that.showSpinner = false;
                    that.$toast(that.translate("SOCIAL.RECIPROCATED"))
                });
            });
        },

        accept(req) {
            var that = this;
            this.showSpinner = true;
            this.context.sendReplyFollowRequest(req, true, false).thenApply(function(success) {
                that.updateSocial(() => {
                    that.showSpinner = false;
                    that.$toast(that.translate("SOCIAL.ACCEPTED"))
                });
            });
        },

        reject(req) {
            var that = this;
            this.showSpinner = true;
            this.context.sendReplyFollowRequest(req, false, false).thenApply(function(success) {
                that.updateSocial(() => {
                    that.showSpinner = false;
                    that.$toast(that.translate("SOCIAL.REJECTED"))
                });
            });
        },

        removeFollower(username) {
            var that = this;
            this.showSpinner = true;
            this.context.removeFollower(username).thenApply(function(success) {
                that.updateSocial(() => {
                    that.showSpinner = false;
                    that.$toast(that.translate("SOCIAL.REMOVED")+` ${username}`)
                });
            });
        },

        unfollow(username) {
            var that = this;
            this.showSpinner = true;
            this.context.unfollow(username).thenApply(function(success) {
                that.updateSocial(() => {
                    that.showSpinner = false;
                    that.$toast(that.translate("SOCIAL.STOPPED")+` ${username}`)
                });
            });
        },

        unblock(username) {
            let that = this;
            this.showSpinner = true;
            this.context.unblock(username).thenApply(function(success) {
                that.updateSocial(() => {
                    that.showSpinner = false;
                    that.$toast(`${username} ` + that.translate("SOCIAL.UNBLOCKED"));
                });
            });
        },

        close () {
            this.$emit("hide-social");
        }
    },

}

},{ "../components/AppButton.vue": 2, "../components/AppHeader.vue": 91, "../components/fingerprint/Fingerprint.vue": 94, "../components/form/FormAutocomplete.vue": 38, "../components/profile/ViewProfile.vue": 64, "../components/spinner/Spinner.vue": 16, "../i18n/index.js": 11, "../mixins/router/index.js": 3}]},{},[106]);